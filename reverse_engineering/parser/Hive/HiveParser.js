// Generated from grammars/HiveParser.g4 by ANTLR 4.9.2
// jshint ignore: start
const antlr4 = require("antlr4");
const { HiveParserVisitor } = require("./HiveParserVisitor.js");

const serializedATN = [
  "\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
  "\u5964\u0003\u0189\u1280\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
  "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
  "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
  "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
  "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
  "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
  "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
  "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
  '\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004"\t"\u0004#',
  "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004'\t'\u0004(\t(\u0004)\t)\u0004",
  "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
  "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
  "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
  "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
  "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
  "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
  "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
  "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
  "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
  "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
  "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
  "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
  "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
  "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t",
  "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004",
  "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t",
  "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004",
  "\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t",
  "\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004",
  "\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t",
  "\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004",
  "\u009e\t\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t",
  "\u00a1\u0004\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004",
  "\u00a5\t\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t",
  "\u00a8\u0004\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004",
  "\u00ac\t\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t",
  "\u00af\u0004\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004",
  "\u00b3\t\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t",
  "\u00b6\u0004\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004",
  "\u00ba\t\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t",
  "\u00bd\u0004\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004",
  "\u00c1\t\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t",
  "\u00c4\u0004\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004",
  "\u00c8\t\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t",
  "\u00cb\u0004\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004",
  "\u00cf\t\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t",
  "\u00d2\u0004\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004",
  "\u00d6\t\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t",
  "\u00d9\u0004\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004",
  "\u00dd\t\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t",
  "\u00e0\u0004\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004",
  "\u00e4\t\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t",
  "\u00e7\u0004\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004",
  "\u00eb\t\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t",
  "\u00ee\u0004\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004",
  "\u00f2\t\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t",
  "\u00f5\u0004\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004",
  "\u00f9\t\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t",
  "\u00fc\u0004\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004",
  "\u0100\t\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t",
  "\u0103\u0004\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004",
  "\u0107\t\u0107\u0004\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t",
  "\u010a\u0004\u010b\t\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004",
  "\u010e\t\u010e\u0004\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t",
  "\u0111\u0004\u0112\t\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004",
  "\u0115\t\u0115\u0004\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t",
  "\u0118\u0004\u0119\t\u0119\u0004\u011a\t\u011a\u0004\u011b\t\u011b\u0004",
  "\u011c\t\u011c\u0004\u011d\t\u011d\u0004\u011e\t\u011e\u0004\u011f\t",
  "\u011f\u0004\u0120\t\u0120\u0004\u0121\t\u0121\u0004\u0122\t\u0122\u0004",
  "\u0123\t\u0123\u0004\u0124\t\u0124\u0004\u0125\t\u0125\u0004\u0126\t",
  "\u0126\u0004\u0127\t\u0127\u0004\u0128\t\u0128\u0004\u0129\t\u0129\u0004",
  "\u012a\t\u012a\u0004\u012b\t\u012b\u0004\u012c\t\u012c\u0004\u012d\t",
  "\u012d\u0004\u012e\t\u012e\u0004\u012f\t\u012f\u0004\u0130\t\u0130\u0004",
  "\u0131\t\u0131\u0004\u0132\t\u0132\u0004\u0133\t\u0133\u0004\u0134\t",
  "\u0134\u0004\u0135\t\u0135\u0004\u0136\t\u0136\u0004\u0137\t\u0137\u0004",
  "\u0138\t\u0138\u0004\u0139\t\u0139\u0004\u013a\t\u013a\u0004\u013b\t",
  "\u013b\u0004\u013c\t\u013c\u0004\u013d\t\u013d\u0004\u013e\t\u013e\u0004",
  "\u013f\t\u013f\u0004\u0140\t\u0140\u0004\u0141\t\u0141\u0004\u0142\t",
  "\u0142\u0004\u0143\t\u0143\u0004\u0144\t\u0144\u0004\u0145\t\u0145\u0004",
  "\u0146\t\u0146\u0004\u0147\t\u0147\u0004\u0148\t\u0148\u0004\u0149\t",
  "\u0149\u0004\u014a\t\u014a\u0004\u014b\t\u014b\u0004\u014c\t\u014c\u0004",
  "\u014d\t\u014d\u0004\u014e\t\u014e\u0004\u014f\t\u014f\u0004\u0150\t",
  "\u0150\u0004\u0151\t\u0151\u0004\u0152\t\u0152\u0004\u0153\t\u0153\u0004",
  "\u0154\t\u0154\u0004\u0155\t\u0155\u0004\u0156\t\u0156\u0004\u0157\t",
  "\u0157\u0004\u0158\t\u0158\u0004\u0159\t\u0159\u0004\u015a\t\u015a\u0004",
  "\u015b\t\u015b\u0004\u015c\t\u015c\u0004\u015d\t\u015d\u0004\u015e\t",
  "\u015e\u0004\u015f\t\u015f\u0004\u0160\t\u0160\u0004\u0161\t\u0161\u0004",
  "\u0162\t\u0162\u0004\u0163\t\u0163\u0004\u0164\t\u0164\u0004\u0165\t",
  "\u0165\u0004\u0166\t\u0166\u0004\u0167\t\u0167\u0004\u0168\t\u0168\u0004",
  "\u0169\t\u0169\u0004\u016a\t\u016a\u0004\u016b\t\u016b\u0004\u016c\t",
  "\u016c\u0004\u016d\t\u016d\u0004\u016e\t\u016e\u0004\u016f\t\u016f\u0004",
  "\u0170\t\u0170\u0004\u0171\t\u0171\u0004\u0172\t\u0172\u0004\u0173\t",
  "\u0173\u0004\u0174\t\u0174\u0004\u0175\t\u0175\u0004\u0176\t\u0176\u0004",
  "\u0177\t\u0177\u0004\u0178\t\u0178\u0004\u0179\t\u0179\u0004\u017a\t",
  "\u017a\u0004\u017b\t\u017b\u0004\u017c\t\u017c\u0004\u017d\t\u017d\u0004",
  "\u017e\t\u017e\u0004\u017f\t\u017f\u0004\u0180\t\u0180\u0004\u0181\t",
  "\u0181\u0004\u0182\t\u0182\u0004\u0183\t\u0183\u0004\u0184\t\u0184\u0004",
  "\u0185\t\u0185\u0004\u0186\t\u0186\u0004\u0187\t\u0187\u0004\u0188\t",
  "\u0188\u0004\u0189\t\u0189\u0004\u018a\t\u018a\u0004\u018b\t\u018b\u0004",
  "\u018c\t\u018c\u0004\u018d\t\u018d\u0004\u018e\t\u018e\u0004\u018f\t",
  "\u018f\u0004\u0190\t\u0190\u0004\u0191\t\u0191\u0004\u0192\t\u0192\u0004",
  "\u0193\t\u0193\u0004\u0194\t\u0194\u0004\u0195\t\u0195\u0004\u0196\t",
  "\u0196\u0004\u0197\t\u0197\u0004\u0198\t\u0198\u0004\u0199\t\u0199\u0004",
  "\u019a\t\u019a\u0004\u019b\t\u019b\u0004\u019c\t\u019c\u0004\u019d\t",
  "\u019d\u0004\u019e\t\u019e\u0004\u019f\t\u019f\u0004\u01a0\t\u01a0\u0004",
  "\u01a1\t\u01a1\u0004\u01a2\t\u01a2\u0004\u01a3\t\u01a3\u0004\u01a4\t",
  "\u01a4\u0004\u01a5\t\u01a5\u0004\u01a6\t\u01a6\u0004\u01a7\t\u01a7\u0004",
  "\u01a8\t\u01a8\u0004\u01a9\t\u01a9\u0004\u01aa\t\u01aa\u0004\u01ab\t",
  "\u01ab\u0004\u01ac\t\u01ac\u0004\u01ad\t\u01ad\u0004\u01ae\t\u01ae\u0004",
  "\u01af\t\u01af\u0004\u01b0\t\u01b0\u0004\u01b1\t\u01b1\u0004\u01b2\t",
  "\u01b2\u0004\u01b3\t\u01b3\u0004\u01b4\t\u01b4\u0004\u01b5\t\u01b5\u0004",
  "\u01b6\t\u01b6\u0004\u01b7\t\u01b7\u0004\u01b8\t\u01b8\u0004\u01b9\t",
  "\u01b9\u0004\u01ba\t\u01ba\u0004\u01bb\t\u01bb\u0004\u01bc\t\u01bc\u0004",
  "\u01bd\t\u01bd\u0004\u01be\t\u01be\u0003\u0002\u0003\u0002\u0003\u0002",
  "\u0003\u0002\u0007\u0002\u0381\n\u0002\f\u0002\u000e\u0002\u0384\u000b",
  "\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0004\u0003",
  "\u0004\u0003\u0005\u0003\u0005\u0005\u0005\u038e\n\u0005\u0003\u0006",
  "\u0003\u0006\u0007\u0006\u0392\n\u0006\f\u0006\u000e\u0006\u0395\u000b",
  "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u039a\n\u0006",
  "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
  "\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u03a5\n\u0007\u0003",
  "\u0007\u0005\u0007\u03a8\n\u0007\u0005\u0007\u03aa\n\u0007\u0003\b\u0003",
  "\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
  "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u03bc\n\n\u0003\u000b",
  "\u0003\u000b\u0003\u000b\u0005\u000b\u03c1\n\u000b\u0003\u000b\u0003",
  "\u000b\u0003\u000b\u0005\u000b\u03c6\n\u000b\u0003\u000b\u0003\u000b",
  "\u0003\u000b\u0003\u000b\u0005\u000b\u03cc\n\u000b\u0003\f\u0003\f\u0005",
  "\f\u03d0\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r",
  "\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u03dd\n\r\u0003\u000e\u0003",
  "\u000e\u0005\u000e\u03e1\n\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
  "\u03e5\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u03ea",
  "\n\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
  "\u0005\u000f\u03f1\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
  "\u000f\u0005\u000f\u03f7\n\u000f\u0003\u000f\u0003\u000f\u0005\u000f",
  "\u03fb\n\u000f\u0005\u000f\u03fd\n\u000f\u0003\u000f\u0003\u000f\u0005",
  "\u000f\u0401\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
  "\u0003\u0010\u0005\u0010\u0408\n\u0010\u0005\u0010\u040a\n\u0010\u0003",
  "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0410\n\u0010",
  "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012",
  "\u0003\u0012\u0007\u0012\u0419\n\u0012\f\u0012\u000e\u0012\u041c\u000b",
  "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005",
  "\u0013\u0423\n\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0427\n\u0013",
  "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
  "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
  "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
  "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
  "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
  "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
  "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
  "\u0003\u0014\u0005\u0014\u0454\n\u0014\u0003\u0015\u0003\u0015\u0003",
  "\u0015\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
  "\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003",
  "\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003",
  "\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u046f",
  "\n\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u0473\n\u001c\u0003\u001c",
  "\u0005\u001c\u0476\n\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005",
  "\u001c\u047b\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e",
  "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f",
  "\u0007\u001f\u0487\n\u001f\f\u001f\u000e\u001f\u048a\u000b\u001f\u0003",
  " \u0003 \u0003 \u0003!\u0003!\u0003!\u0005!\u0492\n!\u0003!\u0003!\u0005",
  '!\u0496\n!\u0003"\u0003"\u0003"\u0003#\u0003#\u0005#\u049d\n#\u0003',
  "#\u0005#\u04a0\n#\u0003#\u0003#\u0005#\u04a4\n#\u0003#\u0003#\u0003",
  "#\u0003#\u0005#\u04aa\n#\u0003#\u0005#\u04ad\n#\u0003#\u0005#\u04b0",
  "\n#\u0003#\u0005#\u04b3\n#\u0003#\u0005#\u04b6\n#\u0003#\u0005#\u04b9",
  "\n#\u0003#\u0003#\u0003#\u0003#\u0005#\u04bf\n#\u0003#\u0003#\u0003",
  "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0007#\u04cb\n#\f",
  "#\u000e#\u04ce\u000b#\u0003#\u0003#\u0005#\u04d2\n#\u0005#\u04d4\n#",
  "\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005$\u04de",
  "\n$\u0003%\u0003%\u0003%\u0005%\u04e3\n%\u0003%\u0003%\u0005%\u04e7",
  "\n%\u0003%\u0005%\u04ea\n%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
  "&\u0003&\u0003&\u0003&\u0005&\u04f5\n&\u0003&\u0003&\u0003&\u0003&\u0003",
  "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005",
  "&\u0505\n&\u0003'\u0003'\u0003'\u0003'\u0003'\u0003'\u0003'\u0003",
  "'\u0003'\u0003'\u0003'\u0003'\u0003'\u0005'\u0514\n'\u0003'",
  "\u0003'\u0005'\u0518\n'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003",
  "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u0528",
  "\n(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003",
  "*\u0003*\u0005*\u0535\n*\u0003+\u0003+\u0005+\u0539\n+\u0003,\u0003",
  ",\u0003,\u0005,\u053e\n,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003.\u0003",
  ".\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0003/\u00030\u0003",
  "0\u00030\u00030\u00031\u00031\u00031\u00031\u00031\u00031\u00051\u0559",
  "\n1\u00032\u00032\u00032\u00052\u055e\n2\u00033\u00033\u00033\u0005",
  "3\u0563\n3\u00034\u00034\u00034\u00034\u00035\u00035\u00055\u056b\n",
  "5\u00035\u00035\u00035\u00035\u00055\u0571\n5\u00035\u00035\u00055\u0575",
  "\n5\u00035\u00055\u0578\n5\u00035\u00055\u057b\n5\u00036\u00036\u0003",
  "6\u00036\u00056\u0581\n6\u00036\u00036\u00036\u00036\u00036\u00056\u0588",
  "\n6\u00037\u00037\u00037\u00037\u00037\u00038\u00038\u00038\u00058\u0592",
  "\n8\u00039\u00039\u00059\u0596\n9\u00039\u00069\u0599\n9\r9\u000e9\u059a",
  "\u0003:\u0003:\u0005:\u059f\n:\u0003;\u0003;\u0007;\u05a3\n;\f;\u000e",
  ";\u05a6\u000b;\u0003<\u0003<\u0007<\u05aa\n<\f<\u000e<\u05ad\u000b<",
  "\u0003=\u0003=\u0007=\u05b1\n=\f=\u000e=\u05b4\u000b=\u0003>\u0003>",
  "\u0003>\u0003?\u0003?\u0005?\u05bb\n?\u0003?\u0003?\u0003?\u0007?\u05c0",
  "\n?\f?\u000e?\u05c3\u000b?\u0003?\u0005?\u05c6\n?\u0003?\u0005?\u05c9",
  "\n?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u05d1\n@\u0003",
  "@\u0005@\u05d4\n@\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0005A\u05dc",
  "\nA\u0003A\u0005A\u05df\nA\u0003B\u0003B\u0005B\u05e3\nB\u0003C\u0003",
  "C\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u05ed\nD\u0003D\u0003",
  "D\u0003D\u0005D\u05f2\nD\u0003E\u0003E\u0003E\u0003E\u0005E\u05f8\n",
  "E\u0003E\u0003E\u0003F\u0003F\u0003F\u0003F\u0003G\u0003G\u0003G\u0003",
  "G\u0003G\u0005G\u0605\nG\u0003H\u0003H\u0003H\u0003H\u0003H\u0003I\u0003",
  "I\u0003I\u0003I\u0003J\u0003J\u0003J\u0007J\u0613\nJ\fJ\u000eJ\u0616",
  "\u000bJ\u0003K\u0003K\u0003K\u0003K\u0003L\u0003L\u0003L\u0003L\u0003",
  "M\u0003M\u0003M\u0003M\u0003M\u0005M\u0625\nM\u0003N\u0003N\u0003N\u0003",
  "N\u0003N\u0003N\u0003O\u0003O\u0003O\u0003O\u0003P\u0003P\u0003P\u0003",
  "P\u0005P\u0635\nP\u0003P\u0003P\u0003P\u0003P\u0003P\u0005P\u063c\n",
  "P\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003R\u0003S\u0003S\u0003S\u0003",
  "S\u0005S\u0648\nS\u0003S\u0003S\u0005S\u064c\nS\u0003S\u0003S\u0003",
  "S\u0005S\u0651\nS\u0003S\u0003S\u0003S\u0005S\u0656\nS\u0003S\u0005",
  "S\u0659\nS\u0003S\u0005S\u065c\nS\u0003S\u0003S\u0005S\u0660\nS\u0003",
  "S\u0005S\u0663\nS\u0003S\u0005S\u0666\nS\u0003T\u0003T\u0003T\u0003",
  "T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003U\u0003U\u0003U\u0003",
  "U\u0003U\u0003U\u0003V\u0003V\u0003V\u0003V\u0005V\u067c\nV\u0003V\u0005",
  "V\u067f\nV\u0003W\u0003W\u0003W\u0003W\u0003W\u0005W\u0686\nW\u0003",
  "W\u0003W\u0003X\u0003X\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0007Y\u0691",
  "\nY\fY\u000eY\u0694\u000bY\u0003Z\u0003Z\u0005Z\u0698\nZ\u0003[\u0003",
  "[\u0003[\u0003\\\u0003\\\u0003\\\u0003\\\u0005\\\u06a1\n\\\u0003]\u0003",
  "]\u0003]\u0003]\u0003]\u0005]\u06a8\n]\u0003]\u0003]\u0003^\u0003^\u0005",
  "^\u06ae\n^\u0003_\u0003_\u0003_\u0003`\u0003`\u0003`\u0005`\u06b6\n",
  "`\u0003`\u0003`\u0003`\u0003`\u0005`\u06bc\n`\u0003a\u0003a\u0003a\u0003",
  "a\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
  "b\u0005b\u06cc\nb\u0003b\u0005b\u06cf\nb\u0003c\u0003c\u0003c\u0003",
  "c\u0003c\u0003d\u0003d\u0003d\u0005d\u06d9\nd\u0003d\u0003d\u0003d\u0003",
  "d\u0003d\u0003d\u0005d\u06e1\nd\u0007d\u06e3\nd\fd\u000ed\u06e6\u000b",
  "d\u0005d\u06e8\nd\u0003e\u0003e\u0005e\u06ec\ne\u0003f\u0003f\u0005",
  "f\u06f0\nf\u0003f\u0005f\u06f3\nf\u0003g\u0003g\u0003g\u0005g\u06f8",
  "\ng\u0003g\u0003g\u0003g\u0005g\u06fd\ng\u0003g\u0003g\u0003g\u0003",
  "g\u0005g\u0703\ng\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003",
  "h\u0003h\u0005h\u070e\nh\u0005h\u0710\nh\u0003h\u0003h\u0005h\u0714",
  "\nh\u0003i\u0003i\u0003i\u0003i\u0005i\u071a\ni\u0003i\u0003i\u0003",
  "i\u0003i\u0005i\u0720\ni\u0003i\u0003i\u0003i\u0005i\u0725\ni\u0003",
  "i\u0003i\u0003i\u0003i\u0005i\u072b\ni\u0003i\u0003i\u0003i\u0005i\u0730",
  "\ni\u0003i\u0003i\u0003i\u0003i\u0003i\u0005i\u0737\ni\u0003i\u0003",
  "i\u0003i\u0005i\u073c\ni\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0005",
  "i\u0744\ni\u0003i\u0003i\u0003i\u0005i\u0749\ni\u0003i\u0003i\u0003",
  "i\u0003i\u0003i\u0005i\u0750\ni\u0003i\u0003i\u0003i\u0003i\u0005i\u0756",
  "\ni\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0005i\u075e\ni\u0003",
  "i\u0003i\u0003i\u0003i\u0003i\u0005i\u0765\ni\u0003i\u0003i\u0003i\u0005",
  "i\u076a\ni\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0005i\u0772\n",
  "i\u0003i\u0003i\u0003i\u0003i\u0003i\u0005i\u0779\ni\u0003i\u0005i\u077c",
  "\ni\u0003i\u0005i\u077f\ni\u0005i\u0781\ni\u0003i\u0003i\u0003i\u0003",
  "i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0005i\u078f",
  "\ni\u0005i\u0791\ni\u0003j\u0003j\u0003j\u0003j\u0005j\u0797\nj\u0003",
  "j\u0003j\u0003k\u0003k\u0003k\u0003k\u0003k\u0003l\u0003l\u0003m\u0003",
  "m\u0003m\u0003m\u0005m\u07a6\nm\u0003n\u0003n\u0003n\u0003n\u0003o\u0003",
  "o\u0003o\u0003o\u0003p\u0003p\u0003p\u0003p\u0003q\u0003q\u0003q\u0005",
  "q\u07b7\nq\u0003q\u0003q\u0003q\u0005q\u07bc\nq\u0003r\u0003r\u0005",
  "r\u07c0\nr\u0003r\u0003r\u0005r\u07c4\nr\u0003r\u0003r\u0003r\u0003",
  "s\u0003s\u0005s\u07cb\ns\u0003s\u0003s\u0003s\u0007s\u07d0\ns\fs\u000e",
  "s\u07d3\u000bs\u0003s\u0003s\u0003s\u0005s\u07d8\ns\u0003t\u0003t\u0005",
  "t\u07dc\nt\u0003t\u0005t\u07df\nt\u0003t\u0003t\u0003t\u0007t\u07e4",
  "\nt\ft\u000et\u07e7\u000bt\u0003t\u0003t\u0003t\u0003u\u0003u\u0003",
  "u\u0003u\u0003u\u0003v\u0003v\u0003v\u0003w\u0003w\u0003w\u0003w\u0003",
  "x\u0003x\u0003x\u0003x\u0003x\u0005x\u07fd\nx\u0003y\u0003y\u0003y\u0005",
  "y\u0802\ny\u0003y\u0003y\u0005y\u0806\ny\u0003z\u0003z\u0003z\u0003",
  "z\u0003{\u0003{\u0005{\u080e\n{\u0003|\u0003|\u0003|\u0003}\u0003}\u0003",
  "}\u0005}\u0816\n}\u0003}\u0003}\u0005}\u081a\n}\u0003}\u0003}\u0003",
  "}\u0003}\u0005}\u0820\n}\u0003~\u0003~\u0003~\u0005~\u0825\n~\u0003",
  "~\u0003~\u0003~\u0003~\u0003~\u0005~\u082c\n~\u0003~\u0005~\u082f\n",
  "~\u0003~\u0003~\u0003~\u0003~\u0005~\u0835\n~\u0003\u007f\u0003\u007f",
  "\u0003\u007f\u0007\u007f\u083a\n\u007f\f\u007f\u000e\u007f\u083d\u000b",
  "\u007f\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0005",
  "\u0080\u0844\n\u0080\u0003\u0081\u0003\u0081\u0003\u0082\u0003\u0082",
  "\u0003\u0082\u0007\u0082\u084b\n\u0082\f\u0082\u000e\u0082\u084e\u000b",
  "\u0082\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003",
  "\u0083\u0005\u0083\u0856\n\u0083\u0003\u0084\u0003\u0084\u0003\u0084",
  "\u0003\u0084\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0086",
  "\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0087\u0003\u0087\u0003\u0087",
  "\u0003\u0087\u0003\u0088\u0003\u0088\u0005\u0088\u086a\n\u0088\u0003",
  "\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0005\u0088\u0870\n\u0088",
  "\u0003\u0088\u0005\u0088\u0873\n\u0088\u0005\u0088\u0875\n\u0088\u0003",
  "\u0089\u0003\u0089\u0003\u0089\u0007\u0089\u087a\n\u0089\f\u0089\u000e",
  "\u0089\u087d\u000b\u0089\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008b",
  "\u0003\u008b\u0003\u008c\u0003\u008c\u0005\u008c\u0886\n\u008c\u0003",
  "\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0005",
  "\u008c\u088e\n\u008c\u0003\u008d\u0003\u008d\u0005\u008d\u0892\n\u008d",
  "\u0003\u008d\u0003\u008d\u0005\u008d\u0896\n\u008d\u0003\u008d\u0003",
  "\u008d\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008f\u0003\u008f\u0003",
  "\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0005\u008f\u08a3\n\u008f",
  "\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u0090\u0003\u0090\u0003\u0090",
  "\u0003\u0090\u0005\u0090\u08ac\n\u0090\u0003\u0090\u0003\u0090\u0003",
  "\u0091\u0003\u0091\u0005\u0091\u08b2\n\u0091\u0003\u0091\u0003\u0091",
  "\u0005\u0091\u08b6\n\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003",
  "\u0091\u0003\u0091\u0005\u0091\u08bd\n\u0091\u0003\u0091\u0005\u0091",
  "\u08c0\n\u0091\u0003\u0091\u0005\u0091\u08c3\n\u0091\u0003\u0091\u0005",
  "\u0091\u08c6\n\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0092",
  "\u0003\u0092\u0003\u0092\u0003\u0092\u0005\u0092\u08cf\n\u0092\u0003",
  "\u0092\u0003\u0092\u0005\u0092\u08d3\n\u0092\u0003\u0092\u0005\u0092",
  "\u08d6\n\u0092\u0003\u0092\u0005\u0092\u08d9\n\u0092\u0003\u0092\u0005",
  "\u0092\u08dc\n\u0092\u0003\u0092\u0005\u0092\u08df\n\u0092\u0003\u0092",
  "\u0005\u0092\u08e2\n\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003",
  "\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003",
  "\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u08f0\n\u0094\u0003\u0094",
  "\u0003\u0094\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0005\u0095",
  "\u08f8\n\u0095\u0003\u0095\u0003\u0095\u0003\u0096\u0003\u0096\u0005",
  "\u0096\u08fe\n\u0096\u0003\u0097\u0003\u0097\u0005\u0097\u0902\n\u0097",
  "\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0099\u0003\u0099\u0003\u0099",
  "\u0003\u009a\u0003\u009a\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b",
  "\u0003\u009b\u0003\u009b\u0007\u009b\u0912\n\u009b\f\u009b\u000e\u009b",
  "\u0915\u000b\u009b\u0003\u009b\u0003\u009b\u0003\u009c\u0003\u009c\u0003",
  "\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003",
  "\u009c\u0003\u009c\u0003\u009c\u0005\u009c\u0924\n\u009c\u0003\u009c",
  "\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009d\u0003\u009d\u0003\u009d",
  "\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d",
  "\u0003\u009d\u0005\u009d\u0934\n\u009d\u0003\u009e\u0003\u009e\u0005",
  "\u009e\u0938\n\u009e\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u00a0",
  "\u0003\u00a0\u0003\u00a0\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1",
  "\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0005\u00a1\u0947\n\u00a1\u0003",
  "\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2\u094d\n\u00a2",
  "\u0003\u00a2\u0005\u00a2\u0950\n\u00a2\u0003\u00a2\u0005\u00a2\u0953",
  "\n\u00a2\u0003\u00a2\u0005\u00a2\u0956\n\u00a2\u0003\u00a2\u0005\u00a2",
  "\u0959\n\u00a2\u0003\u00a3\u0003\u00a3\u0005\u00a3\u095d\n\u00a3\u0003",
  "\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003",
  "\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a7\u0003\u00a7\u0003",
  "\u00a7\u0007\u00a7\u096c\n\u00a7\f\u00a7\u000e\u00a7\u096f\u000b\u00a7",
  "\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0007\u00a7\u0974\n\u00a7\f\u00a7",
  "\u000e\u00a7\u0977\u000b\u00a7\u0005\u00a7\u0979\n\u00a7\u0003\u00a8",
  "\u0003\u00a8\u0005\u00a8\u097d\n\u00a8\u0003\u00a8\u0003\u00a8\u0003",
  "\u00a9\u0003\u00a9\u0003\u00a9\u0005\u00a9\u0984\n\u00a9\u0003\u00aa",
  "\u0003\u00aa\u0003\u00aa\u0007\u00aa\u0989\n\u00aa\f\u00aa\u000e\u00aa",
  "\u098c\u000b\u00aa\u0003\u00aa\u0005\u00aa\u098f\n\u00aa\u0003\u00ab",
  "\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0005\u00ab\u0996\n",
  "\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ad\u0003",
  "\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0003",
  "\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00af\u0003",
  "\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00b0\u0003\u00b0\u0003",
  "\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0005",
  "\u00b1\u09b5\n\u00b1\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2",
  "\u0003\u00b2\u0003\u00b2\u0005\u00b2\u09bd\n\u00b2\u0003\u00b3\u0003",
  "\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b4\u0003\u00b4\u0003\u00b5\u0003",
  "\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003",
  "\u00b5\u0005\u00b5\u09cd\n\u00b5\u0003\u00b6\u0003\u00b6\u0003\u00b6",
  "\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b8\u0003\u00b8\u0003\u00b8",
  "\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0007\u00b9\u09db\n\u00b9\f\u00b9",
  "\u000e\u00b9\u09de\u000b\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0007",
  "\u00ba\u09e3\n\u00ba\f\u00ba\u000e\u00ba\u09e6\u000b\u00ba\u0003\u00bb",
  "\u0003\u00bb\u0003\u00bb\u0007\u00bb\u09eb\n\u00bb\f\u00bb\u000e\u00bb",
  "\u09ee\u000b\u00bb\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0007\u00bc\u09f3",
  "\n\u00bc\f\u00bc\u000e\u00bc\u09f6\u000b\u00bc\u0003\u00bd\u0003\u00bd",
  "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
  "\u0005\u00be\u0a00\n\u00be\u0007\u00be\u0a02\n\u00be\f\u00be\u000e\u00be",
  "\u0a05\u000b\u00be\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0007\u00bf\u0a0a",
  "\n\u00bf\f\u00bf\u000e\u00bf\u0a0d\u000b\u00bf\u0003\u00c0\u0003\u00c0",
  "\u0003\u00c0\u0003\u00c0\u0003\u00c1\u0003\u00c1\u0005\u00c1\u0a15\n",
  "\u00c1\u0003\u00c1\u0005\u00c1\u0a18\n\u00c1\u0003\u00c2\u0003\u00c2",
  "\u0003\u00c3\u0003\u00c3\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0005\u00c4",
  "\u0a21\n\u00c4\u0003\u00c5\u0003\u00c5\u0005\u00c5\u0a25\n\u00c5\u0005",
  "\u00c5\u0a27\n\u00c5\u0003\u00c6\u0003\u00c6\u0005\u00c6\u0a2b\n\u00c6",
  "\u0003\u00c6\u0003\u00c6\u0005\u00c6\u0a2f\n\u00c6\u0003\u00c7\u0003",
  "\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7\u0a35\n\u00c7\u0003\u00c8",
  "\u0003\u00c8\u0005\u00c8\u0a39\n\u00c8\u0003\u00c9\u0003\u00c9\u0003",
  "\u00c9\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00cb\u0003\u00cb\u0005",
  "\u00cb\u0a43\n\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb",
  "\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0005\u00cb\u0a4c\n\u00cb\u0003",
  "\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003",
  "\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc\u0a57\n\u00cc\u0003\u00cd",
  "\u0003\u00cd\u0005\u00cd\u0a5b\n\u00cd\u0003\u00ce\u0003\u00ce\u0003",
  "\u00ce\u0007\u00ce\u0a60\n\u00ce\f\u00ce\u000e\u00ce\u0a63\u000b\u00ce",
  "\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00d0\u0003\u00d0",
  "\u0003\u00d0\u0007\u00d0\u0a6c\n\u00d0\f\u00d0\u000e\u00d0\u0a6f\u000b",
  "\u00d0\u0003\u00d1\u0003\u00d1\u0003\u00d2\u0003\u00d2\u0005\u00d2\u0a75",
  "\n\u00d2\u0003\u00d3\u0003\u00d3\u0003\u00d4\u0003\u00d4\u0003\u00d4",
  "\u0003\u00d4\u0005\u00d4\u0a7d\n\u00d4\u0003\u00d5\u0003\u00d5\u0005",
  "\u00d5\u0a81\n\u00d5\u0003\u00d5\u0005\u00d5\u0a84\n\u00d5\u0003\u00d6",
  "\u0003\u00d6\u0003\u00d6\u0007\u00d6\u0a89\n\u00d6\f\u00d6\u000e\u00d6",
  "\u0a8c\u000b\u00d6\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0005\u00d7\u0a91",
  "\n\u00d7\u0003\u00d8\u0003\u00d8\u0005\u00d8\u0a95\n\u00d8\u0003\u00d8",
  "\u0005\u00d8\u0a98\n\u00d8\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003",
  "\u00d9\u0005\u00d9\u0a9e\n\u00d9\u0003\u00da\u0003\u00da\u0005\u00da",
  "\u0aa2\n\u00da\u0003\u00db\u0003\u00db\u0005\u00db\u0aa6\n\u00db\u0003",
  "\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc\u0aab\n\u00dc\u0003\u00dc",
  "\u0003\u00dc\u0005\u00dc\u0aaf\n\u00dc\u0003\u00dd\u0003\u00dd\u0003",
  "\u00dd\u0005\u00dd\u0ab4\n\u00dd\u0003\u00de\u0003\u00de\u0003\u00de",
  "\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00df\u0003\u00df\u0003\u00df",
  "\u0005\u00df\u0abf\n\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003",
  "\u00df\u0003\u00df\u0003\u00df\u0005\u00df\u0ac7\n\u00df\u0003\u00df",
  "\u0003\u00df\u0003\u00df\u0005\u00df\u0acc\n\u00df\u0003\u00df\u0005",
  "\u00df\u0acf\n\u00df\u0003\u00e0\u0003\u00e0\u0005\u00e0\u0ad3\n\u00e0",
  "\u0003\u00e1\u0003\u00e1\u0005\u00e1\u0ad7\n\u00e1\u0003\u00e2\u0003",
  "\u00e2\u0005\u00e2\u0adb\n\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2",
  "\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0005\u00e2\u0ae3\n\u00e2\u0003",
  "\u00e3\u0003\u00e3\u0005\u00e3\u0ae7\n\u00e3\u0003\u00e3\u0003\u00e3",
  "\u0007\u00e3\u0aeb\n\u00e3\f\u00e3\u000e\u00e3\u0aee\u000b\u00e3\u0003",
  "\u00e3\u0005\u00e3\u0af1\n\u00e3\u0003\u00e4\u0003\u00e4\u0005\u00e4",
  "\u0af5\n\u00e4\u0003\u00e5\u0003\u00e5\u0005\u00e5\u0af9\n\u00e5\u0003",
  "\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0005",
  "\u00e5\u0b01\n\u00e5\u0003\u00e6\u0003\u00e6\u0005\u00e6\u0b05\n\u00e6",
  "\u0003\u00e6\u0003\u00e6\u0005\u00e6\u0b09\n\u00e6\u0003\u00e7\u0003",
  "\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0005",
  "\u00e7\u0b12\n\u00e7\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0005\u00e8",
  "\u0b17\n\u00e8\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0005\u00e9\u0b1c",
  "\n\u00e9\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00eb\u0003\u00eb",
  "\u0003\u00eb\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec",
  "\u0005\u00ec\u0b29\n\u00ec\u0003\u00ed\u0003\u00ed\u0003\u00ee\u0003",
  "\u00ee\u0003\u00ee\u0007\u00ee\u0b30\n\u00ee\f\u00ee\u000e\u00ee\u0b33",
  "\u000b\u00ee\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00ef",
  "\u0005\u00ef\u0b3a\n\u00ef\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003",
  "\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0005\u00f0\u0b44",
  "\n\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0",
  "\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0",
  "\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0005\u00f0",
  "\u0b56\n\u00f0\u0003\u00f0\u0005\u00f0\u0b59\n\u00f0\u0003\u00f0\u0003",
  "\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003",
  "\u00f0\u0005\u00f0\u0b63\n\u00f0\u0003\u00f1\u0003\u00f1\u0003\u00f1",
  "\u0003\u00f1\u0003\u00f1\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f2",
  "\u0003\u00f2\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3",
  "\u0003\u00f3\u0003\u00f3\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4",
  "\u0003\u00f4\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0005\u00f5",
  "\u0b7f\n\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0005",
  "\u00f5\u0b85\n\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5",
  "\u0005\u00f5\u0b8b\n\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003",
  "\u00f5\u0005\u00f5\u0b91\n\u00f5\u0005\u00f5\u0b93\n\u00f5\u0003\u00f6",
  "\u0005\u00f6\u0b96\n\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f7\u0003",
  "\u00f7\u0005\u00f7\u0b9c\n\u00f7\u0003\u00f8\u0003\u00f8\u0003\u00f8",
  "\u0003\u00f8\u0007\u00f8\u0ba2\n\u00f8\f\u00f8\u000e\u00f8\u0ba5\u000b",
  "\u00f8\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003",
  "\u00f9\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0007\u00fa\u0bb1",
  "\n\u00fa\f\u00fa\u000e\u00fa\u0bb4\u000b\u00fa\u0003\u00fb\u0003\u00fb",
  "\u0006\u00fb\u0bb8\n\u00fb\r\u00fb\u000e\u00fb\u0bb9\u0003\u00fc\u0003",
  "\u00fc\u0003\u00fc\u0005\u00fc\u0bbf\n\u00fc\u0003\u00fc\u0005\u00fc",
  "\u0bc2\n\u00fc\u0003\u00fd\u0003\u00fd\u0005\u00fd\u0bc6\n\u00fd\u0003",
  "\u00fd\u0005\u00fd\u0bc9\n\u00fd\u0003\u00fd\u0005\u00fd\u0bcc\n\u00fd",
  "\u0003\u00fd\u0005\u00fd\u0bcf\n\u00fd\u0003\u00fd\u0005\u00fd\u0bd2",
  "\n\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0005\u00fd",
  "\u0bd8\n\u00fd\u0003\u00fe\u0003\u00fe\u0005\u00fe\u0bdc\n\u00fe\u0003",
  "\u00fe\u0005\u00fe\u0bdf\n\u00fe\u0003\u00fe\u0005\u00fe\u0be2\n\u00fe",
  "\u0003\u00fe\u0005\u00fe\u0be5\n\u00fe\u0003\u00fe\u0005\u00fe\u0be8",
  "\n\u00fe\u0003\u00fe\u0005\u00fe\u0beb\n\u00fe\u0003\u00ff\u0003\u00ff",
  "\u0003\u00ff\u0006\u00ff\u0bf0\n\u00ff\r\u00ff\u000e\u00ff\u0bf1\u0003",
  "\u0100\u0005\u0100\u0bf5\n\u0100\u0003\u0100\u0003\u0100\u0003\u0101",
  "\u0003\u0101\u0003\u0101\u0005\u0101\u0bfc\n\u0101\u0003\u0101\u0005",
  "\u0101\u0bff\n\u0101\u0003\u0101\u0005\u0101\u0c02\n\u0101\u0003\u0101",
  "\u0005\u0101\u0c05\n\u0101\u0003\u0101\u0005\u0101\u0c08\n\u0101\u0003",
  "\u0101\u0005\u0101\u0c0b\n\u0101\u0003\u0101\u0005\u0101\u0c0e\n\u0101",
  "\u0003\u0101\u0005\u0101\u0c11\n\u0101\u0003\u0101\u0005\u0101\u0c14",
  "\n\u0101\u0003\u0101\u0005\u0101\u0c17\n\u0101\u0003\u0101\u0003\u0101",
  "\u0005\u0101\u0c1b\n\u0101\u0003\u0101\u0005\u0101\u0c1e\n\u0101\u0003",
  "\u0101\u0005\u0101\u0c21\n\u0101\u0003\u0101\u0005\u0101\u0c24\n\u0101",
  "\u0003\u0101\u0005\u0101\u0c27\n\u0101\u0003\u0101\u0005\u0101\u0c2a",
  "\n\u0101\u0003\u0101\u0005\u0101\u0c2d\n\u0101\u0003\u0101\u0005\u0101",
  "\u0c30\n\u0101\u0003\u0101\u0005\u0101\u0c33\n\u0101\u0003\u0101\u0005",
  "\u0101\u0c36\n\u0101\u0005\u0101\u0c38\n\u0101\u0003\u0102\u0003\u0102",
  "\u0003\u0102\u0003\u0102\u0005\u0102\u0c3e\n\u0102\u0003\u0102\u0003",
  "\u0102\u0003\u0102\u0005\u0102\u0c43\n\u0102\u0003\u0102\u0003\u0102",
  "\u0003\u0102\u0003\u0102\u0003\u0102\u0005\u0102\u0c4a\n\u0102\u0005",
  "\u0102\u0c4c\n\u0102\u0003\u0103\u0005\u0103\u0c4f\n\u0103\u0003\u0103",
  "\u0003\u0103\u0003\u0103\u0005\u0103\u0c54\n\u0103\u0003\u0103\u0005",
  "\u0103\u0c57\n\u0103\u0003\u0103\u0003\u0103\u0005\u0103\u0c5b\n\u0103",
  "\u0003\u0104\u0003\u0104\u0003\u0104\u0005\u0104\u0c60\n\u0104\u0003",
  "\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0005\u0104\u0c67",
  "\n\u0104\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0005\u0105",
  "\u0c6d\n\u0105\u0003\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0003",
  "\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0007\u0107\u0c77\n\u0107",
  "\f\u0107\u000e\u0107\u0c7a\u000b\u0107\u0003\u0108\u0003\u0108\u0003",
  "\u0108\u0003\u0108\u0005\u0108\u0c80\n\u0108\u0003\u0109\u0003\u0109",
  "\u0003\u0109\u0003\u0109\u0005\u0109\u0c86\n\u0109\u0003\u010a\u0003",
  "\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0007\u010a\u0c8d\n\u010a",
  "\f\u010a\u000e\u010a\u0c90\u000b\u010a\u0005\u010a\u0c92\n\u010a\u0003",
  "\u010b\u0003\u010b\u0005\u010b\u0c96\n\u010b\u0003\u010c\u0003\u010c",
  "\u0003\u010c\u0003\u010c\u0005\u010c\u0c9c\n\u010c\u0003\u010d\u0003",
  "\u010d\u0003\u010d\u0003\u010d\u0003\u010e\u0003\u010e\u0003\u010f\u0003",
  "\u010f\u0005\u010f\u0ca6\n\u010f\u0003\u0110\u0003\u0110\u0005\u0110",
  "\u0caa\n\u0110\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003",
  "\u0112\u0003\u0112\u0003\u0112\u0006\u0112\u0cb3\n\u0112\r\u0112\u000e",
  "\u0112\u0cb4\u0003\u0113\u0003\u0113\u0003\u0113\u0003\u0113\u0005\u0113",
  "\u0cbb\n\u0113\u0003\u0113\u0005\u0113\u0cbe\n\u0113\u0003\u0113\u0003",
  "\u0113\u0003\u0113\u0003\u0113\u0003\u0113\u0003\u0113\u0003\u0114\u0003",
  "\u0114\u0007\u0114\u0cc8\n\u0114\f\u0114\u000e\u0114\u0ccb\u000b\u0114",
  "\u0003\u0114\u0005\u0114\u0cce\n\u0114\u0003\u0115\u0003\u0115\u0003",
  "\u0115\u0003\u0115\u0003\u0115\u0005\u0115\u0cd5\n\u0115\u0003\u0115",
  "\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0116\u0003\u0116",
  "\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0117",
  "\u0003\u0117\u0003\u0117\u0003\u0117\u0003\u0117\u0003\u0118\u0003\u0118",
  "\u0003\u0118\u0005\u0118\u0ceb\n\u0118\u0003\u0119\u0003\u0119\u0003",
  "\u0119\u0006\u0119\u0cf0\n\u0119\r\u0119\u000e\u0119\u0cf1\u0003\u011a",
  "\u0003\u011a\u0005\u011a\u0cf6\n\u011a\u0003\u011a\u0005\u011a\u0cf9",
  "\n\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0005\u011a\u0cfe\n\u011a",
  "\u0003\u011a\u0005\u011a\u0d01\n\u011a\u0003\u011b\u0003\u011b\u0003",
  "\u011b\u0007\u011b\u0d06\n\u011b\f\u011b\u000e\u011b\u0d09\u000b\u011b",
  "\u0003\u011c\u0003\u011c\u0003\u011c\u0003\u011c\u0005\u011c\u0d0f\n",
  "\u011c\u0003\u011c\u0005\u011c\u0d12\n\u011c\u0003\u011c\u0003\u011c",
  "\u0003\u011c\u0003\u011c\u0003\u011c\u0003\u011c\u0005\u011c\u0d1a\n",
  "\u011c\u0003\u011c\u0003\u011c\u0003\u011c\u0003\u011c\u0005\u011c\u0d20",
  "\n\u011c\u0005\u011c\u0d22\n\u011c\u0005\u011c\u0d24\n\u011c\u0003\u011c",
  "\u0005\u011c\u0d27\n\u011c\u0003\u011c\u0005\u011c\u0d2a\n\u011c\u0003",
  "\u011d\u0003\u011d\u0003\u011d\u0005\u011d\u0d2f\n\u011d\u0003\u011d",
  "\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0007\u011d",
  "\u0d37\n\u011d\f\u011d\u000e\u011d\u0d3a\u000b\u011d\u0003\u011d\u0003",
  "\u011d\u0005\u011d\u0d3e\n\u011d\u0005\u011d\u0d40\n\u011d\u0003\u011e",
  "\u0003\u011e\u0003\u011e\u0003\u011e\u0005\u011e\u0d46\n\u011e\u0003",
  "\u011e\u0005\u011e\u0d49\n\u011e\u0003\u011e\u0005\u011e\u0d4c\n\u011e",
  "\u0003\u011e\u0003\u011e\u0003\u011e\u0003\u011e\u0003\u011e\u0003\u011e",
  "\u0005\u011e\u0d54\n\u011e\u0003\u011e\u0003\u011e\u0003\u011e\u0003",
  "\u011e\u0005\u011e\u0d5a\n\u011e\u0005\u011e\u0d5c\n\u011e\u0005\u011e",
  "\u0d5e\n\u011e\u0003\u011e\u0005\u011e\u0d61\n\u011e\u0003\u011e\u0005",
  "\u011e\u0d64\n\u011e\u0003\u011f\u0003\u011f\u0005\u011f\u0d68\n\u011f",
  "\u0003\u0120\u0003\u0120\u0003\u0120\u0007\u0120\u0d6d\n\u0120\f\u0120",
  "\u000e\u0120\u0d70\u000b\u0120\u0003\u0121\u0003\u0121\u0003\u0121\u0003",
  "\u0121\u0007\u0121\u0d76\n\u0121\f\u0121\u000e\u0121\u0d79\u000b\u0121",
  "\u0003\u0122\u0003\u0122\u0003\u0122\u0003\u0122\u0003\u0123\u0003\u0123",
  "\u0003\u0123\u0005\u0123\u0d82\n\u0123\u0003\u0123\u0005\u0123\u0d85",
  "\n\u0123\u0003\u0123\u0005\u0123\u0d88\n\u0123\u0003\u0123\u0005\u0123",
  "\u0d8b\n\u0123\u0003\u0124\u0003\u0124\u0005\u0124\u0d8f\n\u0124\u0003",
  "\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003",
  "\u0125\u0003\u0125\u0005\u0125\u0d99\n\u0125\u0003\u0126\u0003\u0126",
  "\u0003\u0126\u0003\u0126\u0003\u0126\u0003\u0126\u0003\u0126\u0003\u0126",
  "\u0005\u0126\u0da3\n\u0126\u0003\u0127\u0003\u0127\u0003\u0127\u0003",
  "\u0127\u0003\u0127\u0003\u0127\u0005\u0127\u0dab\n\u0127\u0003\u0128",
  "\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0005\u0128",
  "\u0db3\n\u0128\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003",
  "\u0129\u0005\u0129\u0dba\n\u0129\u0003\u012a\u0003\u012a\u0003\u012b",
  "\u0003\u012b\u0003\u012b\u0007\u012b\u0dc1\n\u012b\f\u012b\u000e\u012b",
  "\u0dc4\u000b\u012b\u0003\u012c\u0003\u012c\u0003\u012c\u0007\u012c\u0dc9",
  "\n\u012c\f\u012c\u000e\u012c\u0dcc\u000b\u012c\u0003\u012d\u0003\u012d",
  "\u0003\u012d\u0003\u012e\u0003\u012e\u0003\u012e\u0003\u012e\u0006\u012e",
  "\u0dd5\n\u012e\r\u012e\u000e\u012e\u0dd6\u0003\u012e\u0005\u012e\u0dda",
  "\n\u012e\u0003\u012f\u0003\u012f\u0007\u012f\u0dde\n\u012f\f\u012f\u000e",
  "\u012f\u0de1\u000b\u012f\u0003\u012f\u0003\u012f\u0007\u012f\u0de5\n",
  "\u012f\f\u012f\u000e\u012f\u0de8\u000b\u012f\u0003\u012f\u0003\u012f",
  "\u0007\u012f\u0dec\n\u012f\f\u012f\u000e\u012f\u0def\u000b\u012f\u0003",
  "\u012f\u0003\u012f\u0007\u012f\u0df3\n\u012f\f\u012f\u000e\u012f\u0df6",
  "\u000b\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0005\u012f",
  "\u0dfc\n\u012f\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003",
  "\u0130\u0003\u0130\u0003\u0130\u0005\u0130\u0e05\n\u0130\u0007\u0130",
  "\u0e07\n\u0130\f\u0130\u000e\u0130\u0e0a\u000b\u0130\u0003\u0131\u0003",
  "\u0131\u0003\u0131\u0003\u0131\u0005\u0131\u0e10\n\u0131\u0003\u0131",
  "\u0007\u0131\u0e13\n\u0131\f\u0131\u000e\u0131\u0e16\u000b\u0131\u0003",
  "\u0132\u0005\u0132\u0e19\n\u0132\u0003\u0132\u0003\u0132\u0003\u0132",
  "\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0134\u0003\u0134",
  "\u0003\u0135\u0003\u0135\u0003\u0135\u0003\u0135\u0003\u0135\u0003\u0135",
  "\u0003\u0135\u0003\u0135\u0005\u0135\u0e2c\n\u0135\u0003\u0135\u0003",
  "\u0135\u0003\u0135\u0005\u0135\u0e31\n\u0135\u0003\u0135\u0003\u0135",
  "\u0003\u0135\u0005\u0135\u0e36\n\u0135\u0003\u0135\u0003\u0135\u0003",
  "\u0135\u0003\u0135\u0005\u0135\u0e3c\n\u0135\u0003\u0136\u0003\u0136",
  "\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136",
  "\u0003\u0136\u0007\u0136\u0e47\n\u0136\f\u0136\u000e\u0136\u0e4a\u000b",
  "\u0136\u0005\u0136\u0e4c\n\u0136\u0003\u0136\u0005\u0136\u0e4f\n\u0136",
  "\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136",
  "\u0003\u0136\u0003\u0136\u0007\u0136\u0e59\n\u0136\f\u0136\u000e\u0136",
  "\u0e5c\u000b\u0136\u0005\u0136\u0e5e\n\u0136\u0003\u0136\u0005\u0136",
  "\u0e61\n\u0136\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136\u0003",
  "\u0136\u0003\u0136\u0005\u0136\u0e69\n\u0136\u0003\u0136\u0003\u0136",
  "\u0003\u0136\u0003\u0136\u0003\u0136\u0007\u0136\u0e70\n\u0136\f\u0136",
  "\u000e\u0136\u0e73\u000b\u0136\u0003\u0136\u0003\u0136\u0005\u0136\u0e77",
  "\n\u0136\u0005\u0136\u0e79\n\u0136\u0003\u0137\u0003\u0137\u0003\u0138",
  "\u0003\u0138\u0003\u0138\u0003\u0138\u0003\u0138\u0003\u0138\u0003\u0138",
  "\u0003\u0138\u0003\u0138\u0003\u0138\u0003\u0138\u0007\u0138\u0e88\n",
  "\u0138\f\u0138\u000e\u0138\u0e8b\u000b\u0138\u0005\u0138\u0e8d\n\u0138",
  "\u0003\u0138\u0003\u0138\u0003\u0139\u0003\u0139\u0003\u0139\u0003\u0139",
  "\u0003\u0139\u0003\u0139\u0003\u0139\u0003\u0139\u0003\u0139\u0005\u0139",
  "\u0e9a\n\u0139\u0003\u013a\u0003\u013a\u0005\u013a\u0e9e\n\u013a\u0003",
  "\u013b\u0003\u013b\u0005\u013b\u0ea2\n\u013b\u0003\u013b\u0005\u013b",
  "\u0ea5\n\u013b\u0003\u013b\u0005\u013b\u0ea8\n\u013b\u0003\u013b\u0005",
  "\u013b\u0eab\n\u013b\u0003\u013c\u0003\u013c\u0005\u013c\u0eaf\n\u013c",
  "\u0003\u013c\u0005\u013c\u0eb2\n\u013c\u0003\u013c\u0005\u013c\u0eb5",
  "\n\u013c\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d",
  "\u0005\u013d\u0ebc\n\u013d\u0003\u013e\u0003\u013e\u0003\u013e\u0005",
  "\u013e\u0ec1\n\u013e\u0003\u013e\u0003\u013e\u0003\u013f\u0003\u013f",
  "\u0003\u013f\u0003\u013f\u0005\u013f\u0ec9\n\u013f\u0003\u013f\u0005",
  "\u013f\u0ecc\n\u013f\u0003\u0140\u0003\u0140\u0005\u0140\u0ed0\n\u0140",
  "\u0003\u0140\u0003\u0140\u0003\u0140\u0005\u0140\u0ed5\n\u0140\u0003",
  "\u0140\u0003\u0140\u0005\u0140\u0ed9\n\u0140\u0003\u0141\u0003\u0141",
  "\u0003\u0141\u0005\u0141\u0ede\n\u0141\u0003\u0142\u0003\u0142\u0003",
  "\u0142\u0003\u0142\u0003\u0142\u0005\u0142\u0ee5\n\u0142\u0003\u0142",
  "\u0003\u0142\u0003\u0142\u0003\u0142\u0003\u0142\u0003\u0142\u0003\u0142",
  "\u0003\u0142\u0003\u0142\u0003\u0142\u0007\u0142\u0ef1\n\u0142\f\u0142",
  "\u000e\u0142\u0ef4\u000b\u0142\u0005\u0142\u0ef6\n\u0142\u0003\u0142",
  "\u0003\u0142\u0005\u0142\u0efa\n\u0142\u0003\u0143\u0003\u0143\u0003",
  "\u0143\u0003\u0144\u0003\u0144\u0003\u0145\u0003\u0145\u0003\u0145\u0003",
  "\u0146\u0003\u0146\u0003\u0146\u0007\u0146\u0f07\n\u0146\f\u0146\u000e",
  "\u0146\u0f0a\u000b\u0146\u0003\u0147\u0003\u0147\u0003\u0148\u0003\u0148",
  "\u0003\u0148\u0003\u0148\u0003\u0148\u0005\u0148\u0f13\n\u0148\u0003",
  "\u0148\u0003\u0148\u0003\u0148\u0003\u0148\u0003\u0148\u0007\u0148\u0f1a",
  "\n\u0148\f\u0148\u000e\u0148\u0f1d\u000b\u0148\u0005\u0148\u0f1f\n\u0148",
  "\u0003\u0148\u0003\u0148\u0003\u0149\u0003\u0149\u0003\u0149\u0003\u0149",
  "\u0003\u014a\u0003\u014a\u0003\u014a\u0005\u014a\u0f2a\n\u014a\u0003",
  "\u014b\u0003\u014b\u0003\u014b\u0003\u014c\u0003\u014c\u0003\u014c\u0003",
  "\u014c\u0003\u014c\u0007\u014c\u0f34\n\u014c\f\u014c\u000e\u014c\u0f37",
  "\u000b\u014c\u0003\u014c\u0003\u014c\u0003\u014d\u0003\u014d\u0003\u014d",
  "\u0003\u014d\u0003\u014d\u0005\u014d\u0f40\n\u014d\u0003\u014d\u0003",
  "\u014d\u0003\u014d\u0003\u014d\u0003\u014d\u0003\u014d\u0007\u014d\u0f48",
  "\n\u014d\f\u014d\u000e\u014d\u0f4b\u000b\u014d\u0003\u014d\u0003\u014d",
  "\u0005\u014d\u0f4f\n\u014d\u0003\u014e\u0003\u014e\u0005\u014e\u0f53",
  "\n\u014e\u0003\u014f\u0003\u014f\u0005\u014f\u0f57\n\u014f\u0003\u014f",
  "\u0003\u014f\u0007\u014f\u0f5b\n\u014f\f\u014f\u000e\u014f\u0f5e\u000b",
  "\u014f\u0003\u014f\u0003\u014f\u0003\u0150\u0003\u0150\u0003\u0151\u0003",
  "\u0151\u0003\u0151\u0003\u0152\u0003\u0152\u0003\u0153\u0003\u0153\u0003",
  "\u0153\u0003\u0153\u0003\u0154\u0003\u0154\u0005\u0154\u0f6f\n\u0154",
  "\u0003\u0155\u0003\u0155\u0006\u0155\u0f73\n\u0155\r\u0155\u000e\u0155",
  "\u0f74\u0003\u0156\u0003\u0156\u0005\u0156\u0f79\n\u0156\u0003\u0157",
  "\u0003\u0157\u0003\u0157\u0003\u0157\u0007\u0157\u0f7f\n\u0157\f\u0157",
  "\u000e\u0157\u0f82\u000b\u0157\u0003\u0157\u0003\u0157\u0003\u0158\u0003",
  "\u0158\u0003\u0158\u0007\u0158\u0f89\n\u0158\f\u0158\u000e\u0158\u0f8c",
  "\u000b\u0158\u0003\u0159\u0003\u0159\u0003\u0159\u0003\u0159\u0003\u0159",
  "\u0007\u0159\u0f93\n\u0159\f\u0159\u000e\u0159\u0f96\u000b\u0159\u0003",
  "\u015a\u0003\u015a\u0003\u015a\u0003\u015a\u0003\u015b\u0003\u015b\u0003",
  "\u015b\u0003\u015b\u0003\u015c\u0003\u015c\u0003\u015c\u0003\u015c\u0003",
  "\u015d\u0003\u015d\u0003\u015d\u0003\u015d\u0005\u015d\u0fa8\n\u015d",
  "\u0003\u015e\u0003\u015e\u0003\u015e\u0003\u015e\u0005\u015e\u0fae\n",
  "\u015e\u0003\u015e\u0003\u015e\u0003\u015e\u0007\u015e\u0fb3\n\u015e",
  "\f\u015e\u000e\u015e\u0fb6\u000b\u015e\u0005\u015e\u0fb8\n\u015e\u0005",
  "\u015e\u0fba\n\u015e\u0003\u015e\u0003\u015e\u0003\u015e\u0005\u015e",
  "\u0fbf\n\u015e\u0003\u015f\u0003\u015f\u0005\u015f\u0fc3\n\u015f\u0003",
  "\u0160\u0003\u0160\u0003\u0160\u0003\u0160\u0003\u0160\u0003\u0160\u0005",
  "\u0160\u0fcb\n\u0160\u0003\u0160\u0003\u0160\u0003\u0161\u0003\u0161",
  "\u0003\u0161\u0003\u0161\u0003\u0161\u0003\u0161\u0003\u0161\u0006\u0161",
  "\u0fd6\n\u0161\r\u0161\u000e\u0161\u0fd7\u0003\u0161\u0003\u0161\u0005",
  "\u0161\u0fdc\n\u0161\u0003\u0161\u0003\u0161\u0003\u0162\u0003\u0162",
  "\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0006\u0162\u0fe6\n",
  "\u0162\r\u0162\u000e\u0162\u0fe7\u0003\u0162\u0003\u0162\u0005\u0162",
  "\u0fec\n\u0162\u0003\u0162\u0003\u0162\u0003\u0163\u0003\u0163\u0003",
  "\u0163\u0003\u0163\u0003\u0163\u0005\u0163\u0ff5\n\u0163\u0003\u0163",
  "\u0003\u0163\u0003\u0164\u0003\u0164\u0003\u0165\u0003\u0165\u0003\u0165",
  "\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0003\u0166\u0003\u0166",
  "\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167",
  "\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167",
  "\u0005\u0167\u1010\n\u0167\u0003\u0168\u0003\u0168\u0006\u0168\u1014",
  "\n\u0168\r\u0168\u000e\u0168\u1015\u0003\u0169\u0003\u0169\u0003\u0169",
  "\u0003\u016a\u0003\u016a\u0003\u016a\u0005\u016a\u101e\n\u016a\u0003",
  "\u016b\u0003\u016b\u0003\u016b\u0005\u016b\u1023\n\u016b\u0003\u016c",
  "\u0003\u016c\u0003\u016c\u0003\u016d\u0003\u016d\u0003\u016e\u0003\u016e",
  "\u0003\u016e\u0003\u016f\u0003\u016f\u0003\u016f\u0003\u016f\u0003\u016f",
  "\u0003\u016f\u0003\u016f\u0003\u016f\u0003\u016f\u0003\u016f\u0003\u016f",
  "\u0003\u016f\u0003\u016f\u0003\u016f\u0003\u016f\u0005\u016f\u103c\n",
  "\u016f\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0003",
  "\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0003",
  "\u0170\u0005\u0170\u104a\n\u0170\u0003\u0171\u0003\u0171\u0003\u0171",
  "\u0003\u0171\u0003\u0171\u0003\u0171\u0003\u0171\u0003\u0171\u0003\u0171",
  "\u0003\u0171\u0003\u0171\u0005\u0171\u1057\n\u0171\u0003\u0172\u0003",
  "\u0172\u0003\u0173\u0003\u0173\u0003\u0173\u0003\u0173\u0003\u0173\u0003",
  "\u0173\u0003\u0173\u0003\u0173\u0003\u0173\u0005\u0173\u1064\n\u0173",
  "\u0003\u0174\u0003\u0174\u0003\u0175\u0003\u0175\u0003\u0176\u0003\u0176",
  "\u0003\u0177\u0003\u0177\u0003\u0178\u0003\u0178\u0003\u0179\u0003\u0179",
  "\u0003\u017a\u0003\u017a\u0003\u017b\u0003\u017b\u0003\u017b\u0003\u017b",
  "\u0003\u017b\u0005\u017b\u1079\n\u017b\u0003\u017c\u0003\u017c\u0003",
  "\u017c\u0003\u017c\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003",
  "\u017d\u0003\u017d\u0003\u017d\u0005\u017d\u1086\n\u017d\u0003\u017e",
  "\u0003\u017e\u0003\u017f\u0003\u017f\u0003\u0180\u0003\u0180\u0003\u0181",
  "\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181",
  "\u0003\u0181\u0007\u0181\u1096\n\u0181\f\u0181\u000e\u0181\u1099\u000b",
  "\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003",
  "\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003",
  "\u0181\u0005\u0181\u10a7\n\u0181\u0003\u0181\u0003\u0181\u0003\u0181",
  "\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181",
  "\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181",
  "\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181",
  "\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181",
  "\u0005\u0181\u10c4\n\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003",
  "\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003",
  "\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0007",
  "\u0181\u10d5\n\u0181\f\u0181\u000e\u0181\u10d8\u000b\u0181\u0003\u0182",
  "\u0003\u0182\u0003\u0182\u0003\u0182\u0003\u0183\u0003\u0183\u0003\u0183",
  "\u0003\u0183\u0003\u0183\u0003\u0183\u0005\u0183\u10e4\n\u0183\u0003",
  "\u0184\u0003\u0184\u0003\u0184\u0003\u0184\u0003\u0184\u0003\u0184\u0003",
  "\u0184\u0003\u0184\u0003\u0184\u0003\u0184\u0003\u0184\u0003\u0184\u0003",
  "\u0184\u0005\u0184\u10f3\n\u0184\u0003\u0185\u0003\u0185\u0005\u0185",
  "\u10f7\n\u0185\u0003\u0186\u0003\u0186\u0003\u0186\u0003\u0186\u0005",
  "\u0186\u10fd\n\u0186\u0003\u0187\u0003\u0187\u0003\u0188\u0003\u0188",
  "\u0003\u0189\u0003\u0189\u0005\u0189\u1105\n\u0189\u0003\u018a\u0003",
  "\u018a\u0003\u018a\u0003\u018a\u0003\u018a\u0007\u018a\u110c\n\u018a",
  "\f\u018a\u000e\u018a\u110f\u000b\u018a\u0003\u018a\u0003\u018a\u0003",
  "\u018b\u0003\u018b\u0003\u018b\u0005\u018b\u1116\n\u018b\u0003\u018c",
  "\u0003\u018c\u0003\u018c\u0003\u018c\u0003\u018c\u0007\u018c\u111d\n",
  "\u018c\f\u018c\u000e\u018c\u1120\u000b\u018c\u0003\u018c\u0003\u018c",
  "\u0003\u018d\u0003\u018d\u0003\u018d\u0003\u018d\u0003\u018e\u0003\u018e",
  "\u0003\u018f\u0003\u018f\u0003\u0190\u0003\u0190\u0003\u0190\u0005\u0190",
  "\u112f\n\u0190\u0003\u0191\u0003\u0191\u0003\u0191\u0003\u0191\u0003",
  "\u0191\u0003\u0191\u0003\u0191\u0003\u0191\u0005\u0191\u1139\n\u0191",
  "\u0003\u0192\u0003\u0192\u0003\u0192\u0003\u0192\u0003\u0192\u0005\u0192",
  "\u1140\n\u0192\u0003\u0193\u0003\u0193\u0005\u0193\u1144\n\u0193\u0003",
  "\u0194\u0003\u0194\u0003\u0195\u0003\u0195\u0003\u0196\u0003\u0196\u0005",
  "\u0196\u114c\n\u0196\u0003\u0197\u0003\u0197\u0003\u0197\u0003\u0197",
  "\u0003\u0197\u0003\u0197\u0003\u0197\u0003\u0197\u0003\u0197\u0003\u0197",
  "\u0003\u0197\u0003\u0197\u0003\u0197\u0003\u0197\u0005\u0197\u115c\n",
  "\u0197\u0003\u0198\u0003\u0198\u0003\u0198\u0003\u0198\u0003\u0198\u0003",
  "\u0198\u0003\u0198\u0005\u0198\u1165\n\u0198\u0003\u0199\u0003\u0199",
  "\u0003\u0199\u0007\u0199\u116a\n\u0199\f\u0199\u000e\u0199\u116d\u000b",
  "\u0199\u0003\u019a\u0003\u019a\u0003\u019a\u0005\u019a\u1172\n\u019a",
  "\u0003\u019b\u0003\u019b\u0003\u019b\u0007\u019b\u1177\n\u019b\f\u019b",
  "\u000e\u019b\u117a\u000b\u019b\u0003\u019c\u0003\u019c\u0003\u019c\u0003",
  "\u019c\u0003\u019c\u0005\u019c\u1181\n\u019c\u0003\u019d\u0003\u019d",
  "\u0003\u019d\u0003\u019d\u0003\u019e\u0003\u019e\u0003\u019e\u0005\u019e",
  "\u118a\n\u019e\u0003\u019f\u0003\u019f\u0003\u019f\u0003\u01a0\u0003",
  "\u01a0\u0005\u01a0\u1191\n\u01a0\u0003\u01a1\u0003\u01a1\u0003\u01a2",
  "\u0003\u01a2\u0003\u01a3\u0003\u01a3\u0003\u01a4\u0003\u01a4\u0003\u01a4",
  "\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a4",
  "\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0005\u01a4\u11a6\n",
  "\u01a4\u0003\u01a4\u0003\u01a4\u0005\u01a4\u11aa\n\u01a4\u0005\u01a4",
  "\u11ac\n\u01a4\u0005\u01a4\u11ae\n\u01a4\u0003\u01a5\u0003\u01a5\u0003",
  "\u01a5\u0003\u01a5\u0003\u01a6\u0003\u01a6\u0005\u01a6\u11b6\n\u01a6",
  "\u0003\u01a6\u0003\u01a6\u0003\u01a6\u0003\u01a7\u0003\u01a7\u0003\u01a7",
  "\u0003\u01a7\u0003\u01a7\u0003\u01a7\u0003\u01a7\u0003\u01a7\u0003\u01a7",
  "\u0003\u01a7\u0003\u01a7\u0003\u01a7\u0005\u01a7\u11c7\n\u01a7\u0003",
  "\u01a8\u0003\u01a8\u0003\u01a8\u0003\u01a8\u0003\u01a8\u0003\u01a9\u0003",
  "\u01a9\u0003\u01a9\u0007\u01a9\u11d1\n\u01a9\f\u01a9\u000e\u01a9\u11d4",
  "\u000b\u01a9\u0003\u01aa\u0003\u01aa\u0003\u01ab\u0003\u01ab\u0003\u01ab",
  "\u0003\u01ac\u0003\u01ac\u0003\u01ac\u0007\u01ac\u11de\n\u01ac\f\u01ac",
  "\u000e\u01ac\u11e1\u000b\u01ac\u0003\u01ad\u0003\u01ad\u0003\u01ad\u0007",
  "\u01ad\u11e6\n\u01ad\f\u01ad\u000e\u01ad\u11e9\u000b\u01ad\u0003\u01ae",
  "\u0003\u01ae\u0003\u01ae\u0003\u01ae\u0003\u01af\u0003\u01af\u0003\u01b0",
  "\u0003\u01b0\u0003\u01b1\u0003\u01b1\u0003\u01b1\u0003\u01b1\u0005\u01b1",
  "\u11f7\n\u01b1\u0003\u01b2\u0003\u01b2\u0003\u01b2\u0003\u01b3\u0003",
  "\u01b3\u0003\u01b3\u0003\u01b3\u0003\u01b3\u0003\u01b3\u0003\u01b3\u0003",
  "\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003",
  "\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003",
  "\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003",
  "\u01b4\u0003\u01b4\u0005\u01b4\u1217\n\u01b4\u0003\u01b5\u0003\u01b5",
  "\u0003\u01b5\u0003\u01b5\u0003\u01b5\u0003\u01b6\u0003\u01b6\u0003\u01b6",
  "\u0003\u01b6\u0003\u01b6\u0003\u01b6\u0003\u01b7\u0003\u01b7\u0003\u01b7",
  "\u0003\u01b7\u0003\u01b7\u0003\u01b7\u0003\u01b7\u0003\u01b7\u0003\u01b7",
  "\u0003\u01b7\u0003\u01b7\u0003\u01b7\u0005\u01b7\u1230\n\u01b7\u0003",
  "\u01b8\u0003\u01b8\u0003\u01b8\u0007\u01b8\u1235\n\u01b8\f\u01b8\u000e",
  "\u01b8\u1238\u000b\u01b8\u0003\u01b9\u0003\u01b9\u0003\u01b9\u0003\u01b9",
  "\u0003\u01b9\u0003\u01b9\u0003\u01b9\u0003\u01b9\u0003\u01ba\u0003\u01ba",
  "\u0003\u01ba\u0003\u01ba\u0003\u01ba\u0003\u01ba\u0003\u01ba\u0003\u01ba",
  "\u0003\u01ba\u0003\u01ba\u0003\u01ba\u0003\u01ba\u0003\u01ba\u0003\u01ba",
  "\u0003\u01ba\u0005\u01ba\u1251\n\u01ba\u0003\u01bb\u0003\u01bb\u0003",
  "\u01bb\u0003\u01bb\u0003\u01bb\u0003\u01bb\u0003\u01bc\u0003\u01bc\u0003",
  "\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0003",
  "\u01bc\u0005\u01bc\u1262\n\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bc",
  "\u0005\u01bc\u1267\n\u01bc\u0003\u01bd\u0003\u01bd\u0003\u01bd\u0003",
  "\u01bd\u0003\u01bd\u0003\u01bd\u0003\u01bd\u0003\u01bd\u0003\u01bd\u0005",
  "\u01bd\u1272\n\u01bd\u0003\u01bd\u0003\u01bd\u0003\u01bd\u0005\u01bd",
  "\u1277\n\u01bd\u0003\u01be\u0003\u01be\u0003\u01be\u0003\u01be\u0003",
  "\u01be\u0003\u01be\u0003\u01be\u0003\u01be\u0002\u0003\u0300\u01bf\u0002",
  "\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e",
  ' "$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084',
  "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c",
  "\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4",
  "\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc",
  "\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4",
  "\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc",
  "\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114",
  "\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c",
  "\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144",
  "\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c",
  "\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174",
  "\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c",
  "\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4",
  "\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc",
  "\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4",
  "\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec",
  "\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204",
  "\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c",
  "\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234",
  "\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c",
  "\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264",
  "\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c",
  "\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294",
  "\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac",
  "\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4",
  "\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc",
  "\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4",
  "\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c",
  "\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324",
  "\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c",
  "\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354",
  "\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c",
  "\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u0002$\u0003\u0002\u0136",
  "\u0139\u0003\u0002\u00e4\u00e5\u0004\u0002\u00b7\u00b7\u00ba\u00ba\u0003",
  "\u0002\u0088\u0089\u0004\u0002\u000f\u000fJJ\u0003\u0002\u0092\u0093",
  "\u0004\u0002\u00b8\u00b8\u00bb\u00bb\u0004\u0002\u0017\u0017\u00b6\u00b6",
  "\u0003\u0002\u00c3\u00c4\u000b\u0002\u0005\u0005\u0019\u0019\u001b\u001b",
  "CCEEKK\u00af\u00af\u00c0\u00c0\u00e2\u00e3\u0005\u0002KK\u0088\u0088",
  "\u014e\u014e\u0004\u0002\u008f\u0090\u00da\u00da\u0003\u0002\u0152\u0157",
  "\u0005\u0002\u014f\u0153\u0155\u0155\u0158\u0158\u0003\u0002\u007f\u0080",
  "\u0003\u0002\u0127\u0128\u0003\u0002\u000e\u000f\u0004\u0002\u0005\u0005",
  "\u001a\u001a\u0003\u0002\u00ed\u00ee\u0004\u0002mm\u0086\u0086\u0003",
  "\u0002\u00e7\u00e8\u0005\u0002\u010c\u010c\u010e\u0111\u0113\u0115\u0004",
  "\u0002\u010c\u010c\u010e\u0115\u0004\u0002\u017c\u017c\u0181\u0181\u0004",
  "\u0002\u0170\u0171\u0176\u0176\u0004\u0002\u016f\u016f\u0172\u0174\u0003",
  "\u0002\u0170\u0171\u0004\u0002\n\n\u008a\u008b\u0003\u0002\u0003\u0004",
  "\u0004\u0002\u0168\u0168\u016a\u016e\u000f\u0002\u0007\n\f\fOU__be\u008a",
  "\u008b\u00a4\u00a5\u00b6\u00b6\u00ce\u00ce\u00d0\u00d0\u012f\u012f\u0168",
  "\u0177\u0179\u0179:\u0002\u000e\u0011\u001c\u001c&&(157:;=@FFHILLNN",
  "PPXX\\\\__cceegikkn\u0081\u0083\u0083\u0088\u0089\u008c\u008c\u008f",
  "\u0091\u0093\u0096\u0098\u009c\u009e\u00a3\u00a9\u00ae\u00b0\u00b0\u00b4",
  "\u00b5\u00b8\u00bb\u00be\u00c4\u00c6\u00c8\u00ca\u00ca\u00cc\u00cd\u00d2",
  "\u00d2\u00d5\u00d7\u00d9\u00de\u00e0\u00e2\u00e4\u00e6\u00e9\u00e9\u00f6",
  "\u00f6\u00f8\u00f8\u00fa\u00fb\u00fe\u0106\u0108\u0108\u010b\u0115\u0117",
  "\u0117\u011a\u011a\u011c\u0121\u0126\u012a\u012c\u012d\u0131\u014c\u0154",
  "\u0154\u0156\u0157\u0159\u0159\f\u0002\f\fOOQUWWYYbbdd\u00d0\u00d0\u00f0",
  "\u00f1\u00f5\u00f5\u0005\u0002\u0013\u0013\u00f9\u00f9\u014d\u014d\u0002",
  "\u13e3\u0002\u0382\u0003\u0002\u0002\u0002\u0004\u0387\u0003\u0002\u0002",
  "\u0002\u0006\u0389\u0003\u0002\u0002\u0002\b\u038d\u0003\u0002\u0002",
  "\u0002\n\u038f\u0003\u0002\u0002\u0002\f\u03a9\u0003\u0002\u0002\u0002",
  "\u000e\u03ab\u0003\u0002\u0002\u0002\u0010\u03ad\u0003\u0002\u0002\u0002",
  "\u0012\u03bb\u0003\u0002\u0002\u0002\u0014\u03bd\u0003\u0002\u0002\u0002",
  "\u0016\u03cd\u0003\u0002\u0002\u0002\u0018\u03d6\u0003\u0002\u0002\u0002",
  "\u001a\u03de\u0003\u0002\u0002\u0002\u001c\u03eb\u0003\u0002\u0002\u0002",
  "\u001e\u0402\u0003\u0002\u0002\u0002 \u0411\u0003\u0002\u0002\u0002",
  '"\u0415\u0003\u0002\u0002\u0002$\u041d\u0003\u0002\u0002\u0002&\u0453',
  "\u0003\u0002\u0002\u0002(\u0455\u0003\u0002\u0002\u0002*\u0458\u0003",
  "\u0002\u0002\u0002,\u045a\u0003\u0002\u0002\u0002.\u045e\u0003\u0002",
  "\u0002\u00020\u0461\u0003\u0002\u0002\u00022\u0464\u0003\u0002\u0002",
  "\u00024\u0468\u0003\u0002\u0002\u00026\u046b\u0003\u0002\u0002\u0002",
  "8\u047c\u0003\u0002\u0002\u0002:\u047f\u0003\u0002\u0002\u0002<\u0483",
  "\u0003\u0002\u0002\u0002>\u048b\u0003\u0002\u0002\u0002@\u048e\u0003",
  "\u0002\u0002\u0002B\u0497\u0003\u0002\u0002\u0002D\u049a\u0003\u0002",
  "\u0002\u0002F\u04d5\u0003\u0002\u0002\u0002H\u04df\u0003\u0002\u0002",
  "\u0002J\u0504\u0003\u0002\u0002\u0002L\u0517\u0003\u0002\u0002\u0002",
  "N\u0527\u0003\u0002\u0002\u0002P\u0529\u0003\u0002\u0002\u0002R\u0534",
  "\u0003\u0002\u0002\u0002T\u0538\u0003\u0002\u0002\u0002V\u053d\u0003",
  "\u0002\u0002\u0002X\u053f\u0003\u0002\u0002\u0002Z\u0544\u0003\u0002",
  "\u0002\u0002\\\u0549\u0003\u0002\u0002\u0002^\u054e\u0003\u0002\u0002",
  "\u0002`\u0552\u0003\u0002\u0002\u0002b\u055a\u0003\u0002\u0002\u0002",
  "d\u055f\u0003\u0002\u0002\u0002f\u0564\u0003\u0002\u0002\u0002h\u0568",
  "\u0003\u0002\u0002\u0002j\u057c\u0003\u0002\u0002\u0002l\u0589\u0003",
  "\u0002\u0002\u0002n\u0591\u0003\u0002\u0002\u0002p\u0593\u0003\u0002",
  "\u0002\u0002r\u059c\u0003\u0002\u0002\u0002t\u05a0\u0003\u0002\u0002",
  "\u0002v\u05a7\u0003\u0002\u0002\u0002x\u05ae\u0003\u0002\u0002\u0002",
  "z\u05b5\u0003\u0002\u0002\u0002|\u05b8\u0003\u0002\u0002\u0002~\u05d3",
  "\u0003\u0002\u0002\u0002\u0080\u05de\u0003\u0002\u0002\u0002\u0082\u05e2",
  "\u0003\u0002\u0002\u0002\u0084\u05e4\u0003\u0002\u0002\u0002\u0086\u05f1",
  "\u0003\u0002\u0002\u0002\u0088\u05f3\u0003\u0002\u0002\u0002\u008a\u05fb",
  "\u0003\u0002\u0002\u0002\u008c\u0604\u0003\u0002\u0002\u0002\u008e\u0606",
  "\u0003\u0002\u0002\u0002\u0090\u060b\u0003\u0002\u0002\u0002\u0092\u060f",
  "\u0003\u0002\u0002\u0002\u0094\u0617\u0003\u0002\u0002\u0002\u0096\u061b",
  "\u0003\u0002\u0002\u0002\u0098\u0624\u0003\u0002\u0002\u0002\u009a\u0626",
  "\u0003\u0002\u0002\u0002\u009c\u062c\u0003\u0002\u0002\u0002\u009e\u0630",
  "\u0003\u0002\u0002\u0002\u00a0\u063d\u0003\u0002\u0002\u0002\u00a2\u063f",
  "\u0003\u0002\u0002\u0002\u00a4\u0643\u0003\u0002\u0002\u0002\u00a6\u0667",
  "\u0003\u0002\u0002\u0002\u00a8\u0671\u0003\u0002\u0002\u0002\u00aa\u0677",
  "\u0003\u0002\u0002\u0002\u00ac\u0680\u0003\u0002\u0002\u0002\u00ae\u0689",
  "\u0003\u0002\u0002\u0002\u00b0\u068d\u0003\u0002\u0002\u0002\u00b2\u0695",
  "\u0003\u0002\u0002\u0002\u00b4\u0699\u0003\u0002\u0002\u0002\u00b6\u069c",
  "\u0003\u0002\u0002\u0002\u00b8\u06a2\u0003\u0002\u0002\u0002\u00ba\u06ab",
  "\u0003\u0002\u0002\u0002\u00bc\u06af\u0003\u0002\u0002\u0002\u00be\u06b2",
  "\u0003\u0002\u0002\u0002\u00c0\u06bd\u0003\u0002\u0002\u0002\u00c2\u06ce",
  "\u0003\u0002\u0002\u0002\u00c4\u06d0\u0003\u0002\u0002\u0002\u00c6\u06d5",
  "\u0003\u0002\u0002\u0002\u00c8\u06e9\u0003\u0002\u0002\u0002\u00ca\u06ed",
  "\u0003\u0002\u0002\u0002\u00cc\u06f4\u0003\u0002\u0002\u0002\u00ce\u0704",
  "\u0003\u0002\u0002\u0002\u00d0\u0790\u0003\u0002\u0002\u0002\u00d2\u0792",
  "\u0003\u0002\u0002\u0002\u00d4\u079a\u0003\u0002\u0002\u0002\u00d6\u079f",
  "\u0003\u0002\u0002\u0002\u00d8\u07a1\u0003\u0002\u0002\u0002\u00da\u07a7",
  "\u0003\u0002\u0002\u0002\u00dc\u07ab\u0003\u0002\u0002\u0002\u00de\u07af",
  "\u0003\u0002\u0002\u0002\u00e0\u07b3\u0003\u0002\u0002\u0002\u00e2\u07bd",
  "\u0003\u0002\u0002\u0002\u00e4\u07c8\u0003\u0002\u0002\u0002\u00e6\u07d9",
  "\u0003\u0002\u0002\u0002\u00e8\u07eb\u0003\u0002\u0002\u0002\u00ea\u07f0",
  "\u0003\u0002\u0002\u0002\u00ec\u07f3\u0003\u0002\u0002\u0002\u00ee\u07f7",
  "\u0003\u0002\u0002\u0002\u00f0\u07fe\u0003\u0002\u0002\u0002\u00f2\u0807",
  "\u0003\u0002\u0002\u0002\u00f4\u080d\u0003\u0002\u0002\u0002\u00f6\u080f",
  "\u0003\u0002\u0002\u0002\u00f8\u081f\u0003\u0002\u0002\u0002\u00fa\u0834",
  "\u0003\u0002\u0002\u0002\u00fc\u0836\u0003\u0002\u0002\u0002\u00fe\u083e",
  "\u0003\u0002\u0002\u0002\u0100\u0845\u0003\u0002\u0002\u0002\u0102\u0847",
  "\u0003\u0002\u0002\u0002\u0104\u0855\u0003\u0002\u0002\u0002\u0106\u0857",
  "\u0003\u0002\u0002\u0002\u0108\u085b\u0003\u0002\u0002\u0002\u010a\u085f",
  "\u0003\u0002\u0002\u0002\u010c\u0863\u0003\u0002\u0002\u0002\u010e\u0867",
  "\u0003\u0002\u0002\u0002\u0110\u0876\u0003\u0002\u0002\u0002\u0112\u087e",
  "\u0003\u0002\u0002\u0002\u0114\u0881\u0003\u0002\u0002\u0002\u0116\u0883",
  "\u0003\u0002\u0002\u0002\u0118\u088f\u0003\u0002\u0002\u0002\u011a\u0899",
  "\u0003\u0002\u0002\u0002\u011c\u089c\u0003\u0002\u0002\u0002\u011e\u08a7",
  "\u0003\u0002\u0002\u0002\u0120\u08af\u0003\u0002\u0002\u0002\u0122\u08ca",
  "\u0003\u0002\u0002\u0002\u0124\u08e6\u0003\u0002\u0002\u0002\u0126\u08ec",
  "\u0003\u0002\u0002\u0002\u0128\u08f3\u0003\u0002\u0002\u0002\u012a\u08fd",
  "\u0003\u0002\u0002\u0002\u012c\u0901\u0003\u0002\u0002\u0002\u012e\u0903",
  "\u0003\u0002\u0002\u0002\u0130\u0906\u0003\u0002\u0002\u0002\u0132\u0909",
  "\u0003\u0002\u0002\u0002\u0134\u090b\u0003\u0002\u0002\u0002\u0136\u0918",
  "\u0003\u0002\u0002\u0002\u0138\u0929\u0003\u0002\u0002\u0002\u013a\u0937",
  "\u0003\u0002\u0002\u0002\u013c\u0939\u0003\u0002\u0002\u0002\u013e\u093c",
  "\u0003\u0002\u0002\u0002\u0140\u093f\u0003\u0002\u0002\u0002\u0142\u0948",
  "\u0003\u0002\u0002\u0002\u0144\u095c\u0003\u0002\u0002\u0002\u0146\u095e",
  "\u0003\u0002\u0002\u0002\u0148\u0961\u0003\u0002\u0002\u0002\u014a\u0964",
  "\u0003\u0002\u0002\u0002\u014c\u0978\u0003\u0002\u0002\u0002\u014e\u097a",
  "\u0003\u0002\u0002\u0002\u0150\u0983\u0003\u0002\u0002\u0002\u0152\u098e",
  "\u0003\u0002\u0002\u0002\u0154\u0990\u0003\u0002\u0002\u0002\u0156\u0997",
  "\u0003\u0002\u0002\u0002\u0158\u099b\u0003\u0002\u0002\u0002\u015a\u09a1",
  "\u0003\u0002\u0002\u0002\u015c\u09a7\u0003\u0002\u0002\u0002\u015e\u09ac",
  "\u0003\u0002\u0002\u0002\u0160\u09b4\u0003\u0002\u0002\u0002\u0162\u09b6",
  "\u0003\u0002\u0002\u0002\u0164\u09be\u0003\u0002\u0002\u0002\u0166\u09c2",
  "\u0003\u0002\u0002\u0002\u0168\u09c4\u0003\u0002\u0002\u0002\u016a\u09ce",
  "\u0003\u0002\u0002\u0002\u016c\u09d1\u0003\u0002\u0002\u0002\u016e\u09d4",
  "\u0003\u0002\u0002\u0002\u0170\u09d7\u0003\u0002\u0002\u0002\u0172\u09df",
  "\u0003\u0002\u0002\u0002\u0174\u09e7\u0003\u0002\u0002\u0002\u0176\u09ef",
  "\u0003\u0002\u0002\u0002\u0178\u09f7\u0003\u0002\u0002\u0002\u017a\u09f9",
  "\u0003\u0002\u0002\u0002\u017c\u0a06\u0003\u0002\u0002\u0002\u017e\u0a0e",
  "\u0003\u0002\u0002\u0002\u0180\u0a17\u0003\u0002\u0002\u0002\u0182\u0a19",
  "\u0003\u0002\u0002\u0002\u0184\u0a1b\u0003\u0002\u0002\u0002\u0186\u0a20",
  "\u0003\u0002\u0002\u0002\u0188\u0a26\u0003\u0002\u0002\u0002\u018a\u0a2a",
  "\u0003\u0002\u0002\u0002\u018c\u0a30\u0003\u0002\u0002\u0002\u018e\u0a38",
  "\u0003\u0002\u0002\u0002\u0190\u0a3a\u0003\u0002\u0002\u0002\u0192\u0a3d",
  "\u0003\u0002\u0002\u0002\u0194\u0a42\u0003\u0002\u0002\u0002\u0196\u0a4d",
  "\u0003\u0002\u0002\u0002\u0198\u0a5a\u0003\u0002\u0002\u0002\u019a\u0a5c",
  "\u0003\u0002\u0002\u0002\u019c\u0a64\u0003\u0002\u0002\u0002\u019e\u0a68",
  "\u0003\u0002\u0002\u0002\u01a0\u0a70\u0003\u0002\u0002\u0002\u01a2\u0a74",
  "\u0003\u0002\u0002\u0002\u01a4\u0a76\u0003\u0002\u0002\u0002\u01a6\u0a7c",
  "\u0003\u0002\u0002\u0002\u01a8\u0a7e\u0003\u0002\u0002\u0002\u01aa\u0a85",
  "\u0003\u0002\u0002\u0002\u01ac\u0a8d\u0003\u0002\u0002\u0002\u01ae\u0a92",
  "\u0003\u0002\u0002\u0002\u01b0\u0a99\u0003\u0002\u0002\u0002\u01b2\u0aa1",
  "\u0003\u0002\u0002\u0002\u01b4\u0aa5\u0003\u0002\u0002\u0002\u01b6\u0aa7",
  "\u0003\u0002\u0002\u0002\u01b8\u0ab0\u0003\u0002\u0002\u0002\u01ba\u0ab5",
  "\u0003\u0002\u0002\u0002\u01bc\u0abe\u0003\u0002\u0002\u0002\u01be\u0ad0",
  "\u0003\u0002\u0002\u0002\u01c0\u0ad6\u0003\u0002\u0002\u0002\u01c2\u0ada",
  "\u0003\u0002\u0002\u0002\u01c4\u0ae6\u0003\u0002\u0002\u0002\u01c6\u0af4",
  "\u0003\u0002\u0002\u0002\u01c8\u0af8\u0003\u0002\u0002\u0002\u01ca\u0b04",
  "\u0003\u0002\u0002\u0002\u01cc\u0b11\u0003\u0002\u0002\u0002\u01ce\u0b16",
  "\u0003\u0002\u0002\u0002\u01d0\u0b1b\u0003\u0002\u0002\u0002\u01d2\u0b1d",
  "\u0003\u0002\u0002\u0002\u01d4\u0b20\u0003\u0002\u0002\u0002\u01d6\u0b23",
  "\u0003\u0002\u0002\u0002\u01d8\u0b2a\u0003\u0002\u0002\u0002\u01da\u0b2c",
  "\u0003\u0002\u0002\u0002\u01dc\u0b39\u0003\u0002\u0002\u0002\u01de\u0b62",
  "\u0003\u0002\u0002\u0002\u01e0\u0b64\u0003\u0002\u0002\u0002\u01e2\u0b69",
  "\u0003\u0002\u0002\u0002\u01e4\u0b6e\u0003\u0002\u0002\u0002\u01e6\u0b75",
  "\u0003\u0002\u0002\u0002\u01e8\u0b92\u0003\u0002\u0002\u0002\u01ea\u0b95",
  "\u0003\u0002\u0002\u0002\u01ec\u0b9b\u0003\u0002\u0002\u0002\u01ee\u0b9d",
  "\u0003\u0002\u0002\u0002\u01f0\u0ba6\u0003\u0002\u0002\u0002\u01f2\u0bac",
  "\u0003\u0002\u0002\u0002\u01f4\u0bb5\u0003\u0002\u0002\u0002\u01f6\u0bc1",
  "\u0003\u0002\u0002\u0002\u01f8\u0bd7\u0003\u0002\u0002\u0002\u01fa\u0bd9",
  "\u0003\u0002\u0002\u0002\u01fc\u0bef\u0003\u0002\u0002\u0002\u01fe\u0bf4",
  "\u0003\u0002\u0002\u0002\u0200\u0c37\u0003\u0002\u0002\u0002\u0202\u0c4b",
  "\u0003\u0002\u0002\u0002\u0204\u0c5a\u0003\u0002\u0002\u0002\u0206\u0c66",
  "\u0003\u0002\u0002\u0002\u0208\u0c68\u0003\u0002\u0002\u0002\u020a\u0c6e",
  "\u0003\u0002\u0002\u0002\u020c\u0c72\u0003\u0002\u0002\u0002\u020e\u0c7b",
  "\u0003\u0002\u0002\u0002\u0210\u0c85\u0003\u0002\u0002\u0002\u0212\u0c87",
  "\u0003\u0002\u0002\u0002\u0214\u0c95\u0003\u0002\u0002\u0002\u0216\u0c9b",
  "\u0003\u0002\u0002\u0002\u0218\u0c9d\u0003\u0002\u0002\u0002\u021a\u0ca1",
  "\u0003\u0002\u0002\u0002\u021c\u0ca3\u0003\u0002\u0002\u0002\u021e\u0ca7",
  "\u0003\u0002\u0002\u0002\u0220\u0cab\u0003\u0002\u0002\u0002\u0222\u0caf",
  "\u0003\u0002\u0002\u0002\u0224\u0cb6\u0003\u0002\u0002\u0002\u0226\u0cc9",
  "\u0003\u0002\u0002\u0002\u0228\u0ccf\u0003\u0002\u0002\u0002\u022a\u0cdb",
  "\u0003\u0002\u0002\u0002\u022c\u0ce2\u0003\u0002\u0002\u0002\u022e\u0cea",
  "\u0003\u0002\u0002\u0002\u0230\u0cec\u0003\u0002\u0002\u0002\u0232\u0d00",
  "\u0003\u0002\u0002\u0002\u0234\u0d02\u0003\u0002\u0002\u0002\u0236\u0d0a",
  "\u0003\u0002\u0002\u0002\u0238\u0d3f\u0003\u0002\u0002\u0002\u023a\u0d45",
  "\u0003\u0002\u0002\u0002\u023c\u0d67\u0003\u0002\u0002\u0002\u023e\u0d69",
  "\u0003\u0002\u0002\u0002\u0240\u0d71\u0003\u0002\u0002\u0002\u0242\u0d7a",
  "\u0003\u0002\u0002\u0002\u0244\u0d8a\u0003\u0002\u0002\u0002\u0246\u0d8e",
  "\u0003\u0002\u0002\u0002\u0248\u0d98\u0003\u0002\u0002\u0002\u024a\u0da2",
  "\u0003\u0002\u0002\u0002\u024c\u0daa\u0003\u0002\u0002\u0002\u024e\u0db2",
  "\u0003\u0002\u0002\u0002\u0250\u0db9\u0003\u0002\u0002\u0002\u0252\u0dbb",
  "\u0003\u0002\u0002\u0002\u0254\u0dbd\u0003\u0002\u0002\u0002\u0256\u0dc5",
  "\u0003\u0002\u0002\u0002\u0258\u0dcd\u0003\u0002\u0002\u0002\u025a\u0dd9",
  "\u0003\u0002\u0002\u0002\u025c\u0dfb\u0003\u0002\u0002\u0002\u025e\u0dfd",
  "\u0003\u0002\u0002\u0002\u0260\u0e0f\u0003\u0002\u0002\u0002\u0262\u0e18",
  "\u0003\u0002\u0002\u0002\u0264\u0e1d\u0003\u0002\u0002\u0002\u0266\u0e21",
  "\u0003\u0002\u0002\u0002\u0268\u0e3b\u0003\u0002\u0002\u0002\u026a\u0e78",
  "\u0003\u0002\u0002\u0002\u026c\u0e7a\u0003\u0002\u0002\u0002\u026e\u0e7c",
  "\u0003\u0002\u0002\u0002\u0270\u0e99\u0003\u0002\u0002\u0002\u0272\u0e9d",
  "\u0003\u0002\u0002\u0002\u0274\u0e9f\u0003\u0002\u0002\u0002\u0276\u0eac",
  "\u0003\u0002\u0002\u0002\u0278\u0ebb\u0003\u0002\u0002\u0002\u027a\u0ec0",
  "\u0003\u0002\u0002\u0002\u027c\u0ec4\u0003\u0002\u0002\u0002\u027e\u0ed8",
  "\u0003\u0002\u0002\u0002\u0280\u0edd\u0003\u0002\u0002\u0002\u0282\u0edf",
  "\u0003\u0002\u0002\u0002\u0284\u0efb\u0003\u0002\u0002\u0002\u0286\u0efe",
  "\u0003\u0002\u0002\u0002\u0288\u0f00\u0003\u0002\u0002\u0002\u028a\u0f03",
  "\u0003\u0002\u0002\u0002\u028c\u0f0b\u0003\u0002\u0002\u0002\u028e\u0f0d",
  "\u0003\u0002\u0002\u0002\u0290\u0f22\u0003\u0002\u0002\u0002\u0292\u0f29",
  "\u0003\u0002\u0002\u0002\u0294\u0f2b\u0003\u0002\u0002\u0002\u0296\u0f2e",
  "\u0003\u0002\u0002\u0002\u0298\u0f3a\u0003\u0002\u0002\u0002\u029a\u0f52",
  "\u0003\u0002\u0002\u0002\u029c\u0f54\u0003\u0002\u0002\u0002\u029e\u0f61",
  "\u0003\u0002\u0002\u0002\u02a0\u0f63\u0003\u0002\u0002\u0002\u02a2\u0f66",
  "\u0003\u0002\u0002\u0002\u02a4\u0f68\u0003\u0002\u0002\u0002\u02a6\u0f6c",
  "\u0003\u0002\u0002\u0002\u02a8\u0f72\u0003\u0002\u0002\u0002\u02aa\u0f78",
  "\u0003\u0002\u0002\u0002\u02ac\u0f7a\u0003\u0002\u0002\u0002\u02ae\u0f85",
  "\u0003\u0002\u0002\u0002\u02b0\u0f8d\u0003\u0002\u0002\u0002\u02b2\u0f97",
  "\u0003\u0002\u0002\u0002\u02b4\u0f9b\u0003\u0002\u0002\u0002\u02b6\u0f9f",
  "\u0003\u0002\u0002\u0002\u02b8\u0fa3\u0003\u0002\u0002\u0002\u02ba\u0fa9",
  "\u0003\u0002\u0002\u0002\u02bc\u0fc2\u0003\u0002\u0002\u0002\u02be\u0fc4",
  "\u0003\u0002\u0002\u0002\u02c0\u0fce\u0003\u0002\u0002\u0002\u02c2\u0fdf",
  "\u0003\u0002\u0002\u0002\u02c4\u0fef\u0003\u0002\u0002\u0002\u02c6\u0ff8",
  "\u0003\u0002\u0002\u0002\u02c8\u0ffa\u0003\u0002\u0002\u0002\u02ca\u1001",
  "\u0003\u0002\u0002\u0002\u02cc\u100f\u0003\u0002\u0002\u0002\u02ce\u1011",
  "\u0003\u0002\u0002\u0002\u02d0\u1017\u0003\u0002\u0002\u0002\u02d2\u101d",
  "\u0003\u0002\u0002\u0002\u02d4\u1022\u0003\u0002\u0002\u0002\u02d6\u1024",
  "\u0003\u0002\u0002\u0002\u02d8\u1027\u0003\u0002\u0002\u0002\u02da\u1029",
  "\u0003\u0002\u0002\u0002\u02dc\u103b\u0003\u0002\u0002\u0002\u02de\u1049",
  "\u0003\u0002\u0002\u0002\u02e0\u1056\u0003\u0002\u0002\u0002\u02e2\u1058",
  "\u0003\u0002\u0002\u0002\u02e4\u1063\u0003\u0002\u0002\u0002\u02e6\u1065",
  "\u0003\u0002\u0002\u0002\u02e8\u1067\u0003\u0002\u0002\u0002\u02ea\u1069",
  "\u0003\u0002\u0002\u0002\u02ec\u106b\u0003\u0002\u0002\u0002\u02ee\u106d",
  "\u0003\u0002\u0002\u0002\u02f0\u106f\u0003\u0002\u0002\u0002\u02f2\u1071",
  "\u0003\u0002\u0002\u0002\u02f4\u1078\u0003\u0002\u0002\u0002\u02f6\u107a",
  "\u0003\u0002\u0002\u0002\u02f8\u1085\u0003\u0002\u0002\u0002\u02fa\u1087",
  "\u0003\u0002\u0002\u0002\u02fc\u1089\u0003\u0002\u0002\u0002\u02fe\u108b",
  "\u0003\u0002\u0002\u0002\u0300\u10a6\u0003\u0002\u0002\u0002\u0302\u10d9",
  "\u0003\u0002\u0002\u0002\u0304\u10e3\u0003\u0002\u0002\u0002\u0306\u10f2",
  "\u0003\u0002\u0002\u0002\u0308\u10f6\u0003\u0002\u0002\u0002\u030a\u10fc",
  "\u0003\u0002\u0002\u0002\u030c\u10fe\u0003\u0002\u0002\u0002\u030e\u1100",
  "\u0003\u0002\u0002\u0002\u0310\u1102\u0003\u0002\u0002\u0002\u0312\u1106",
  "\u0003\u0002\u0002\u0002\u0314\u1112\u0003\u0002\u0002\u0002\u0316\u1117",
  "\u0003\u0002\u0002\u0002\u0318\u1123\u0003\u0002\u0002\u0002\u031a\u1127",
  "\u0003\u0002\u0002\u0002\u031c\u1129\u0003\u0002\u0002\u0002\u031e\u112e",
  "\u0003\u0002\u0002\u0002\u0320\u1138\u0003\u0002\u0002\u0002\u0322\u113f",
  "\u0003\u0002\u0002\u0002\u0324\u1143\u0003\u0002\u0002\u0002\u0326\u1145",
  "\u0003\u0002\u0002\u0002\u0328\u1147\u0003\u0002\u0002\u0002\u032a\u114b",
  "\u0003\u0002\u0002\u0002\u032c\u115b\u0003\u0002\u0002\u0002\u032e\u1164",
  "\u0003\u0002\u0002\u0002\u0330\u1166\u0003\u0002\u0002\u0002\u0332\u1171",
  "\u0003\u0002\u0002\u0002\u0334\u1173\u0003\u0002\u0002\u0002\u0336\u117b",
  "\u0003\u0002\u0002\u0002\u0338\u1182\u0003\u0002\u0002\u0002\u033a\u1186",
  "\u0003\u0002\u0002\u0002\u033c\u118b\u0003\u0002\u0002\u0002\u033e\u118e",
  "\u0003\u0002\u0002\u0002\u0340\u1192\u0003\u0002\u0002\u0002\u0342\u1194",
  "\u0003\u0002\u0002\u0002\u0344\u1196\u0003\u0002\u0002\u0002\u0346\u1198",
  "\u0003\u0002\u0002\u0002\u0348\u11af\u0003\u0002\u0002\u0002\u034a\u11b5",
  "\u0003\u0002\u0002\u0002\u034c\u11ba\u0003\u0002\u0002\u0002\u034e\u11c8",
  "\u0003\u0002\u0002\u0002\u0350\u11cd\u0003\u0002\u0002\u0002\u0352\u11d5",
  "\u0003\u0002\u0002\u0002\u0354\u11d7\u0003\u0002\u0002\u0002\u0356\u11da",
  "\u0003\u0002\u0002\u0002\u0358\u11e2\u0003\u0002\u0002\u0002\u035a\u11ea",
  "\u0003\u0002\u0002\u0002\u035c\u11ee\u0003\u0002\u0002\u0002\u035e\u11f0",
  "\u0003\u0002\u0002\u0002\u0360\u11f6\u0003\u0002\u0002\u0002\u0362\u11f8",
  "\u0003\u0002\u0002\u0002\u0364\u11fb\u0003\u0002\u0002\u0002\u0366\u1202",
  "\u0003\u0002\u0002\u0002\u0368\u1218\u0003\u0002\u0002\u0002\u036a\u121d",
  "\u0003\u0002\u0002\u0002\u036c\u122f\u0003\u0002\u0002\u0002\u036e\u1231",
  "\u0003\u0002\u0002\u0002\u0370\u1239\u0003\u0002\u0002\u0002\u0372\u1241",
  "\u0003\u0002\u0002\u0002\u0374\u1252\u0003\u0002\u0002\u0002\u0376\u1258",
  "\u0003\u0002\u0002\u0002\u0378\u1268\u0003\u0002\u0002\u0002\u037a\u1278",
  "\u0003\u0002\u0002\u0002\u037c\u037d\u0005\b\u0005\u0002\u037d\u037e",
  "\u0005\u0004\u0003\u0002\u037e\u0381\u0003\u0002\u0002\u0002\u037f\u0381",
  "\u0005\u0006\u0004\u0002\u0380\u037c\u0003\u0002\u0002\u0002\u0380\u037f",
  "\u0003\u0002\u0002\u0002\u0381\u0384\u0003\u0002\u0002\u0002\u0382\u0380",
  "\u0003\u0002\u0002\u0002\u0382\u0383\u0003\u0002\u0002\u0002\u0383\u0385",
  "\u0003\u0002\u0002\u0002\u0384\u0382\u0003\u0002\u0002\u0002\u0385\u0386",
  "\u0007\u0002\u0002\u0003\u0386\u0003\u0003\u0002\u0002\u0002\u0387\u0388",
  "\u0007\u0161\u0002\u0002\u0388\u0005\u0003\u0002\u0002\u0002\u0389\u038a",
  "\u0005\u0004\u0003\u0002\u038a\u0007\u0003\u0002\u0002\u0002\u038b\u038e",
  "\u0005\n\u0006\u0002\u038c\u038e\u0005\u0012\n\u0002\u038d\u038b\u0003",
  "\u0002\u0002\u0002\u038d\u038c\u0003\u0002\u0002\u0002\u038e\t\u0003",
  "\u0002\u0002\u0002\u038f\u0399\u0007\u0091\u0002\u0002\u0390\u0392\u0005",
  "\f\u0007\u0002\u0391\u0390\u0003\u0002\u0002\u0002\u0392\u0395\u0003",
  "\u0002\u0002\u0002\u0393\u0391\u0003\u0002\u0002\u0002\u0393\u0394\u0003",
  "\u0002\u0002\u0002\u0394\u0396\u0003\u0002\u0002\u0002\u0395\u0393\u0003",
  "\u0002\u0002\u0002\u0396\u039a\u0005\u0012\n\u0002\u0397\u0398\u0007",
  "\u0106\u0002\u0002\u0398\u039a\u0005\u01ea\u00f6\u0002\u0399\u0393\u0003",
  "\u0002\u0002\u0002\u0399\u0397\u0003\u0002\u0002\u0002\u039a\u000b\u0003",
  "\u0002\u0002\u0002\u039b\u03aa\u0007\u0092\u0002\u0002\u039c\u03aa\u0007",
  "\u0093\u0002\u0002\u039d\u03aa\u0007\u0094\u0002\u0002\u039e\u03aa\u0007",
  "\u0095\u0002\u0002\u039f\u03aa\u0007\u0107\u0002\u0002\u03a0\u03aa\u0007",
  "\u00cc\u0002\u0002\u03a1\u03aa\u0007\u0108\u0002\u0002\u03a2\u03a4\u0007",
  "\u0135\u0002\u0002\u03a3\u03a5\u0005\u000e\b\u0002\u03a4\u03a3\u0003",
  "\u0002\u0002\u0002\u03a4\u03a5\u0003\u0002\u0002\u0002\u03a5\u03a7\u0003",
  "\u0002\u0002\u0002\u03a6\u03a8\u0005\u0010\t\u0002\u03a7\u03a6\u0003",
  "\u0002\u0002\u0002\u03a7\u03a8\u0003\u0002\u0002\u0002\u03a8\u03aa\u0003",
  "\u0002\u0002\u0002\u03a9\u039b\u0003\u0002\u0002\u0002\u03a9\u039c\u0003",
  "\u0002\u0002\u0002\u03a9\u039d\u0003\u0002\u0002\u0002\u03a9\u039e\u0003",
  "\u0002\u0002\u0002\u03a9\u039f\u0003\u0002\u0002\u0002\u03a9\u03a0\u0003",
  "\u0002\u0002\u0002\u03a9\u03a1\u0003\u0002\u0002\u0002\u03a9\u03a2\u0003",
  "\u0002\u0002\u0002\u03aa\r\u0003\u0002\u0002\u0002\u03ab\u03ac\u0007",
  "\u011b\u0002\u0002\u03ac\u000f\u0003\u0002\u0002\u0002\u03ad\u03ae\t",
  "\u0002\u0002\u0002\u03ae\u0011\u0003\u0002\u0002\u0002\u03af\u03bc\u0005",
  "\u01ea\u00f6\u0002\u03b0\u03bc\u0005\u0014\u000b\u0002\u03b1\u03bc\u0005",
  "\u0018\r\u0002\u03b2\u03bc\u0005\u001a\u000e\u0002\u03b3\u03bc\u0005",
  "\u001c\u000f\u0002\u03b4\u03bc\u0005\u001e\u0010\u0002\u03b5\u03bc\u0005",
  "$\u0013\u0002\u03b6\u03bc\u0005&\u0014\u0002\u03b7\u03bc\u0005\u0208",
  "\u0105\u0002\u03b8\u03bc\u0005\u020e\u0108\u0002\u03b9\u03bc\u0005\u0210",
  "\u0109\u0002\u03ba\u03bc\u0005\u0224\u0113\u0002\u03bb\u03af\u0003\u0002",
  "\u0002\u0002\u03bb\u03b0\u0003\u0002\u0002\u0002\u03bb\u03b1\u0003\u0002",
  "\u0002\u0002\u03bb\u03b2\u0003\u0002\u0002\u0002\u03bb\u03b3\u0003\u0002",
  "\u0002\u0002\u03bb\u03b4\u0003\u0002\u0002\u0002\u03bb\u03b5\u0003\u0002",
  "\u0002\u0002\u03bb\u03b6\u0003\u0002\u0002\u0002\u03bb\u03b7\u0003\u0002",
  "\u0002\u0002\u03bb\u03b8\u0003\u0002\u0002\u0002\u03bb\u03b9\u0003\u0002",
  "\u0002\u0002\u03bb\u03ba\u0003\u0002\u0002\u0002\u03bc\u0013\u0003\u0002",
  "\u0002\u0002\u03bd\u03be\u0007:\u0002\u0002\u03be\u03c0\u0007?\u0002",
  "\u0002\u03bf\u03c1\u00072\u0002\u0002\u03c0\u03bf\u0003\u0002\u0002",
  "\u0002\u03c0\u03c1\u0003\u0002\u0002\u0002\u03c1\u03c2\u0003\u0002\u0002",
  "\u0002\u03c2\u03c3\u0007@\u0002\u0002\u03c3\u03c5\u0007\u017c\u0002",
  "\u0002\u03c4\u03c6\u0007\u001c\u0002\u0002\u03c5\u03c4\u0003\u0002\u0002",
  "\u0002\u03c5\u03c6\u0003\u0002\u0002\u0002\u03c6\u03c7\u0003\u0002\u0002",
  "\u0002\u03c7\u03c8\u0007j\u0002\u0002\u03c8\u03c9\u0007'\u0002\u0002",
  "\u03c9\u03cb\u0005\u0310\u0189\u0002\u03ca\u03cc\u0005\u00c4c\u0002",
  "\u03cb\u03ca\u0003\u0002\u0002\u0002\u03cb\u03cc\u0003\u0002\u0002\u0002",
  "\u03cc\u0015\u0003\u0002\u0002\u0002\u03cd\u03cf\u0007\u00ea\u0002\u0002",
  "\u03ce\u03d0\u0007>\u0002\u0002\u03cf\u03ce\u0003\u0002\u0002\u0002",
  "\u03cf\u03d0\u0003\u0002\u0002\u0002\u03d0\u03d1\u0003\u0002\u0002\u0002",
  "\u03d1\u03d2\u0007=\u0002\u0002\u03d2\u03d3\u0007\u0162\u0002\u0002",
  "\u03d3\u03d4\u0007\u017c\u0002\u0002\u03d4\u03d5\u0007\u0163\u0002\u0002",
  "\u03d5\u0017\u0003\u0002\u0002\u0002\u03d6\u03d7\u0007;\u0002\u0002",
  "\u03d7\u03d8\u0007'\u0002\u0002\u03d8\u03d9\u0005\u0310\u0189\u0002",
  "\u03d9\u03da\u0007M\u0002\u0002\u03da\u03dc\u0007\u017c\u0002\u0002",
  "\u03db\u03dd\u0005\u0016\f\u0002\u03dc\u03db\u0003\u0002\u0002\u0002",
  "\u03dc\u03dd\u0003\u0002\u0002\u0002\u03dd\u0019\u0003\u0002\u0002\u0002",
  "\u03de\u03e4\u0007<\u0002\u0002\u03df\u03e1\u0007D\u0002\u0002\u03e0",
  "\u03df\u0003\u0002\u0002\u0002\u03e0\u03e1\u0003\u0002\u0002\u0002\u03e1",
  "\u03e2\u0003\u0002\u0002\u0002\u03e2\u03e3\u0007'\u0002\u0002\u03e3",
  "\u03e5\u0005\u0310\u0189\u0002\u03e4\u03e0\u0003\u0002\u0002\u0002\u03e4",
  "\u03e5\u0003\u0002\u0002\u0002\u03e5\u03e6\u0003\u0002\u0002\u0002\u03e6",
  "\u03e7\u0007\u0017\u0002\u0002\u03e7\u03e9\u0007\u017c\u0002\u0002\u03e8",
  "\u03ea\u0005\u016e\u00b8\u0002\u03e9\u03e8\u0003\u0002\u0002\u0002\u03e9",
  "\u03ea\u0003\u0002\u0002\u0002\u03ea\u001b\u0003\u0002\u0002\u0002\u03eb",
  "\u03ec\u0007\u0132\u0002\u0002\u03ec\u03ed\u0007\u0133\u0002\u0002\u03ed",
  "\u03f0\u0005\u0320\u0191\u0002\u03ee\u03ef\u0007\u015e\u0002\u0002\u03ef",
  "\u03f1\u0005\u0320\u0191\u0002\u03f0\u03ee\u0003\u0002\u0002\u0002\u03f0",
  "\u03f1\u0003\u0002\u0002\u0002\u03f1\u03fc\u0003\u0002\u0002\u0002\u03f2",
  "\u03f3\u0007\u0017\u0002\u0002\u03f3\u03f6\u0007\u0181\u0002\u0002\u03f4",
  "\u03f5\u0007M\u0002\u0002\u03f5\u03f7\u0007\u0181\u0002\u0002\u03f6",
  "\u03f4\u0003\u0002\u0002\u0002\u03f6\u03f7\u0003\u0002\u0002\u0002\u03f7",
  "\u03fa\u0003\u0002\u0002\u0002\u03f8\u03f9\u0007\u009b\u0002\u0002\u03f9",
  "\u03fb\u0007\u0181\u0002\u0002\u03fa\u03f8\u0003\u0002\u0002\u0002\u03fa",
  "\u03fb\u0003\u0002\u0002\u0002\u03fb\u03fd\u0003\u0002\u0002\u0002\u03fc",
  "\u03f2\u0003\u0002\u0002\u0002\u03fc\u03fd\u0003\u0002\u0002\u0002\u03fd",
  "\u0400\u0003\u0002\u0002\u0002\u03fe\u03ff\u0007\u0097\u0002\u0002\u03ff",
  "\u0401\u0005 \u0011\u0002\u0400\u03fe\u0003\u0002\u0002\u0002\u0400",
  "\u0401\u0003\u0002\u0002\u0002\u0401\u001d\u0003\u0002\u0002\u0002\u0402",
  "\u0403\u0007\u0132\u0002\u0002\u0403\u0409\u0007:\u0002\u0002\u0404",
  "\u0407\u0005\u0320\u0191\u0002\u0405\u0406\u0007\u015e\u0002\u0002\u0406",
  "\u0408\u0005\u0320\u0191\u0002\u0407\u0405\u0003\u0002\u0002\u0002\u0407",
  "\u0408\u0003\u0002\u0002\u0002\u0408\u040a\u0003\u0002\u0002\u0002\u0409",
  "\u0404\u0003\u0002\u0002\u0002\u0409\u040a\u0003\u0002\u0002\u0002\u040a",
  "\u040b\u0003\u0002\u0002\u0002\u040b\u040c\u0007\u0017\u0002\u0002\u040c",
  "\u040f\u0007\u017c\u0002\u0002\u040d\u040e\u0007\u0097\u0002\u0002\u040e",
  "\u0410\u0005 \u0011\u0002\u040f\u040d\u0003\u0002\u0002\u0002\u040f",
  "\u0410\u0003\u0002\u0002\u0002\u0410\u001f\u0003\u0002\u0002\u0002\u0411",
  '\u0412\u0007\u0162\u0002\u0002\u0412\u0413\u0005"\u0012\u0002\u0413',
  "\u0414\u0007\u0163\u0002\u0002\u0414!\u0003\u0002\u0002\u0002\u0415",
  "\u041a\u0005\u014e\u00a8\u0002\u0416\u0417\u0007\u0160\u0002\u0002\u0417",
  "\u0419\u0005\u014e\u00a8\u0002\u0418\u0416\u0003\u0002\u0002\u0002\u0419",
  "\u041c\u0003\u0002\u0002\u0002\u041a\u0418\u0003\u0002\u0002\u0002\u041a",
  "\u041b\u0003\u0002\u0002\u0002\u041b#\u0003\u0002\u0002\u0002\u041c",
  "\u041a\u0003\u0002\u0002\u0002\u041d\u041e\u0007\u0132\u0002\u0002\u041e",
  "\u041f\u0007\u0134\u0002\u0002\u041f\u0422\u0005\u0320\u0191\u0002\u0420",
  "\u0421\u0007\u015e\u0002\u0002\u0421\u0423\u0005\u0320\u0191\u0002\u0422",
  "\u0420\u0003\u0002\u0002\u0002\u0422\u0423\u0003\u0002\u0002\u0002\u0423",
  "\u0426\u0003\u0002\u0002\u0002\u0424\u0425\u0007\u0097\u0002\u0002\u0425",
  "\u0427\u0005 \u0011\u0002\u0426\u0424\u0003\u0002\u0002\u0002\u0426",
  "\u0427\u0003\u0002\u0002\u0002\u0427%\u0003\u0002\u0002\u0002\u0428",
  "\u0454\u00056\u001c\u0002\u0429\u0454\u0005> \u0002\u042a\u0454\u0005",
  "@!\u0002\u042b\u0454\u0005D#\u0002\u042c\u0454\u0005H%\u0002\u042d\u0454",
  "\u0005F$\u0002\u042e\u0454\u0005J&\u0002\u042f\u0454\u0005\u00ccg\u0002",
  "\u0430\u0454\u0005\u00d0i\u0002\u0431\u0454\u0005\u010e\u0088\u0002",
  "\u0432\u0454\u0005\u0120\u0091\u0002\u0433\u0454\u0005\u0122\u0092\u0002",
  "\u0434\u0454\u0005\u0126\u0094\u0002\u0435\u0454\u0005\u0128\u0095\u0002",
  "\u0436\u0454\u0005\u0116\u008c\u0002\u0437\u0454\u0005\u011c\u008f\u0002",
  "\u0438\u0454\u0005\u0118\u008d\u0002\u0439\u0454\u0005\u011a\u008e\u0002",
  "\u043a\u0454\u0005\u011e\u0090\u0002\u043b\u0454\u0005\u00ceh\u0002",
  "\u043c\u0454\u0005\u00d2j\u0002\u043d\u0454\u0005\u00d8m\u0002\u043e",
  "\u0454\u0005\u00d4k\u0002\u043f\u0454\u0005\u00dan\u0002\u0440\u0454",
  "\u0005\u00dco\u0002\u0441\u0454\u0005\u00dep\u0002\u0442\u0454\u0005",
  "\u00e0q\u0002\u0443\u0454\u0005\u00e2r\u0002\u0444\u0454\u0005\u00f0",
  "y\u0002\u0445\u0454\u0005\u00e8u\u0002\u0446\u0454\u0005\u00f2z\u0002",
  "\u0447\u0454\u0005\u00eav\u0002\u0448\u0454\u0005\u00e4s\u0002\u0449",
  "\u0454\u0005\u00e6t\u0002\u044a\u0454\u0005\u00eex\u0002\u044b\u0454",
  "\u0005\u00ecw\u0002\u044c\u0454\u0005\u0222\u0112\u0002\u044d\u0454",
  "\u0005\u0230\u0119\u0002\u044e\u0454\u0005\u032c\u0197\u0002\u044f\u0454",
  "\u0005\u00a4S\u0002\u0450\u0454\u0005\u00a8U\u0002\u0451\u0454\u0005",
  "\u00aaV\u0002\u0452\u0454\u0005\u00b6\\\u0002\u0453\u0428\u0003\u0002",
  "\u0002\u0002\u0453\u0429\u0003\u0002\u0002\u0002\u0453\u042a\u0003\u0002",
  "\u0002\u0002\u0453\u042b\u0003\u0002\u0002\u0002\u0453\u042c\u0003\u0002",
  "\u0002\u0002\u0453\u042d\u0003\u0002\u0002\u0002\u0453\u042e\u0003\u0002",
  "\u0002\u0002\u0453\u042f\u0003\u0002\u0002\u0002\u0453\u0430\u0003\u0002",
  "\u0002\u0002\u0453\u0431\u0003\u0002\u0002\u0002\u0453\u0432\u0003\u0002",
  "\u0002\u0002\u0453\u0433\u0003\u0002\u0002\u0002\u0453\u0434\u0003\u0002",
  "\u0002\u0002\u0453\u0435\u0003\u0002\u0002\u0002\u0453\u0436\u0003\u0002",
  "\u0002\u0002\u0453\u0437\u0003\u0002\u0002\u0002\u0453\u0438\u0003\u0002",
  "\u0002\u0002\u0453\u0439\u0003\u0002\u0002\u0002\u0453\u043a\u0003\u0002",
  "\u0002\u0002\u0453\u043b\u0003\u0002\u0002\u0002\u0453\u043c\u0003\u0002",
  "\u0002\u0002\u0453\u043d\u0003\u0002\u0002\u0002\u0453\u043e\u0003\u0002",
  "\u0002\u0002\u0453\u043f\u0003\u0002\u0002\u0002\u0453\u0440\u0003\u0002",
  "\u0002\u0002\u0453\u0441\u0003\u0002\u0002\u0002\u0453\u0442\u0003\u0002",
  "\u0002\u0002\u0453\u0443\u0003\u0002\u0002\u0002\u0453\u0444\u0003\u0002",
  "\u0002\u0002\u0453\u0445\u0003\u0002\u0002\u0002\u0453\u0446\u0003\u0002",
  "\u0002\u0002\u0453\u0447\u0003\u0002\u0002\u0002\u0453\u0448\u0003\u0002",
  "\u0002\u0002\u0453\u0449\u0003\u0002\u0002\u0002\u0453\u044a\u0003\u0002",
  "\u0002\u0002\u0453\u044b\u0003\u0002\u0002\u0002\u0453\u044c\u0003\u0002",
  "\u0002\u0002\u0453\u044d\u0003\u0002\u0002\u0002\u0453\u044e\u0003\u0002",
  "\u0002\u0002\u0453\u044f\u0003\u0002\u0002\u0002\u0453\u0450\u0003\u0002",
  "\u0002\u0002\u0453\u0451\u0003\u0002\u0002\u0002\u0453\u0452\u0003\u0002",
  "\u0002\u0002\u0454'\u0003\u0002\u0002\u0002\u0455\u0456\u0007\f\u0002",
  "\u0002\u0456\u0457\u0007\r\u0002\u0002\u0457)\u0003\u0002\u0002\u0002",
  "\u0458\u0459\t\u0003\u0002\u0002\u0459+\u0003\u0002\u0002\u0002\u045a",
  "\u045b\u0007\f\u0002\u0002\u045b\u045c\u0007\t\u0002\u0002\u045c\u045d",
  "\u0007\r\u0002\u0002\u045d-\u0003\u0002\u0002\u0002\u045e\u045f\u0007",
  "\u007f\u0002\u0002\u045f\u0460\u0007\u0106\u0002\u0002\u0460/\u0003",
  "\u0002\u0002\u0002\u0461\u0462\u0007\u0080\u0002\u0002\u0462\u0463\u0007",
  "\u0106\u0002\u0002\u04631\u0003\u0002\u0002\u0002\u0464\u0465\u0007",
  "y\u0002\u0002\u0465\u0466\u0007\u0018\u0002\u0002\u0466\u0467\u0007",
  "\u00e9\u0002\u0002\u04673\u0003\u0002\u0002\u0002\u0468\u0469\u0007",
  "\b\u0002\u0002\u0469\u046a\u0007\u0089\u0002\u0002\u046a5\u0003\u0002",
  "\u0002\u0002\u046b\u046c\u0007C\u0002\u0002\u046c\u046e\t\u0004\u0002",
  "\u0002\u046d\u046f\u0005,\u0017\u0002\u046e\u046d\u0003\u0002\u0002",
  "\u0002\u046e\u046f\u0003\u0002\u0002\u0002\u046f\u0470\u0003\u0002\u0002",
  '\u0002\u0470\u0472\u0005\u0320\u0191\u0002\u0471\u0473\u0005B"\u0002',
  "\u0472\u0471\u0003\u0002\u0002\u0002\u0472\u0473\u0003\u0002\u0002\u0002",
  "\u0473\u0475\u0003\u0002\u0002\u0002\u0474\u0476\u00058\u001d\u0002",
  "\u0475\u0474\u0003\u0002\u0002\u0002\u0475\u0476\u0003\u0002\u0002\u0002",
  "\u0476\u047a\u0003\u0002\u0002\u0002\u0477\u0478\u0007\u0097\u0002\u0002",
  "\u0478\u0479\u0007\u009a\u0002\u0002\u0479\u047b\u0005:\u001e\u0002",
  "\u047a\u0477\u0003\u0002\u0002\u0002\u047a\u047b\u0003\u0002\u0002\u0002",
  "\u047b7\u0003\u0002\u0002\u0002\u047c\u047d\u0007\u0081\u0002\u0002",
  "\u047d\u047e\u0007\u017c\u0002\u0002\u047e9\u0003\u0002\u0002\u0002",
  "\u047f\u0480\u0007\u0162\u0002\u0002\u0480\u0481\u0005<\u001f\u0002",
  "\u0481\u0482\u0007\u0163\u0002\u0002\u0482;\u0003\u0002\u0002\u0002",
  "\u0483\u0488\u0005\u014e\u00a8\u0002\u0484\u0485\u0007\u0160\u0002\u0002",
  "\u0485\u0487\u0005\u014e\u00a8\u0002\u0486\u0484\u0003\u0002\u0002\u0002",
  "\u0487\u048a\u0003\u0002\u0002\u0002\u0488\u0486\u0003\u0002\u0002\u0002",
  "\u0488\u0489\u0003\u0002\u0002\u0002\u0489=\u0003\u0002\u0002\u0002",
  "\u048a\u0488\u0003\u0002\u0002\u0002\u048b\u048c\u0007\u00de\u0002\u0002",
  "\u048c\u048d\u0005\u0320\u0191\u0002\u048d?\u0003\u0002\u0002\u0002",
  "\u048e\u048f\u0007K\u0002\u0002\u048f\u0491\t\u0004\u0002\u0002\u0490",
  "\u0492\u0005(\u0015\u0002\u0491\u0490\u0003\u0002\u0002\u0002\u0491",
  "\u0492\u0003\u0002\u0002\u0002\u0492\u0493\u0003\u0002\u0002\u0002\u0493",
  "\u0495\u0005\u0320\u0191\u0002\u0494\u0496\u0005*\u0016\u0002\u0495",
  "\u0494\u0003\u0002\u0002\u0002\u0495\u0496\u0003\u0002\u0002\u0002\u0496",
  "A\u0003\u0002\u0002\u0002\u0497\u0498\u0007N\u0002\u0002\u0498\u0499",
  "\u0007\u017c\u0002\u0002\u0499C\u0003\u0002\u0002\u0002\u049a\u049c",
  "\u0007C\u0002\u0002\u049b\u049d\u0007\u008c\u0002\u0002\u049c\u049b",
  "\u0003\u0002\u0002\u0002\u049c\u049d\u0003\u0002\u0002\u0002\u049d\u049f",
  "\u0003\u0002\u0002\u0002\u049e\u04a0\u0007D\u0002\u0002\u049f\u049e",
  "\u0003\u0002\u0002\u0002\u049f\u04a0\u0003\u0002\u0002\u0002\u04a0\u04a1",
  "\u0003\u0002\u0002\u0002\u04a1\u04a3\u0007'\u0002\u0002\u04a2\u04a4",
  "\u0005,\u0017\u0002\u04a3\u04a2\u0003\u0002\u0002\u0002\u04a3\u04a4",
  "\u0003\u0002\u0002\u0002\u04a4\u04a5\u0003\u0002\u0002\u0002\u04a5\u04d3",
  "\u0005\u0278\u013d\u0002\u04a6\u04a7\u0007\n\u0002\u0002\u04a7\u04a9",
  "\u0005\u0278\u013d\u0002\u04a8\u04aa\u0005\u0144\u00a3\u0002\u04a9\u04a8",
  "\u0003\u0002\u0002\u0002\u04a9\u04aa\u0003\u0002\u0002\u0002\u04aa\u04ac",
  "\u0003\u0002\u0002\u0002\u04ab\u04ad\u0005\u0160\u00b1\u0002\u04ac\u04ab",
  "\u0003\u0002\u0002\u0002\u04ac\u04ad\u0003\u0002\u0002\u0002\u04ad\u04af",
  "\u0003\u0002\u0002\u0002\u04ae\u04b0\u0005\u0130\u0099\u0002\u04af\u04ae",
  "\u0003\u0002\u0002\u0002\u04af\u04b0\u0003\u0002\u0002\u0002\u04b0\u04b2",
  "\u0003\u0002\u0002\u0002\u04b1\u04b3\u0005\u016e\u00b8\u0002\u04b2\u04b1",
  "\u0003\u0002\u0002\u0002\u04b2\u04b3\u0003\u0002\u0002\u0002\u04b3\u04b5",
  "\u0003\u0002\u0002\u0002\u04b4\u04b6\u0005\u0148\u00a5\u0002\u04b5\u04b4",
  "\u0003\u0002\u0002\u0002\u04b5\u04b6\u0003\u0002\u0002\u0002\u04b6\u04b8",
  "\u0003\u0002\u0002\u0002\u04b7\u04b9\u0005\u0146\u00a4\u0002\u04b8\u04b7",
  "\u0003\u0002\u0002\u0002\u04b8\u04b9\u0003\u0002\u0002\u0002\u04b9\u04d4",
  "\u0003\u0002\u0002\u0002\u04ba\u04bb\u0007\u0162\u0002\u0002\u04bb\u04bc",
  "\u0005\u0172\u00ba\u0002\u04bc\u04bd\u0007\u0163\u0002\u0002\u04bd\u04bf",
  "\u0003\u0002\u0002\u0002\u04be\u04ba\u0003\u0002\u0002\u0002\u04be\u04bf",
  "\u0003\u0002\u0002\u0002\u04bf\u04cc\u0003\u0002\u0002\u0002\u04c0\u04cb",
  "\u0005\u0130\u0099\u0002\u04c1\u04cb\u0005\u0136\u009c\u0002\u04c2\u04cb",
  "\u0005\u0138\u009d\u0002\u04c3\u04cb\u0005\u0144\u00a3\u0002\u04c4\u04cb",
  "\u0005\u0160\u00b1\u0002\u04c5\u04cb\u0005\u0134\u009b\u0002\u04c6\u04cb",
  "\u0005\u016e\u00b8\u0002\u04c7\u04cb\u0005\u0148\u00a5\u0002\u04c8\u04cb",
  "\u0005\u0146\u00a4\u0002\u04c9\u04cb\u0005\u012e\u0098\u0002\u04ca\u04c0",
  "\u0003\u0002\u0002\u0002\u04ca\u04c1\u0003\u0002\u0002\u0002\u04ca\u04c2",
  "\u0003\u0002\u0002\u0002\u04ca\u04c3\u0003\u0002\u0002\u0002\u04ca\u04c4",
  "\u0003\u0002\u0002\u0002\u04ca\u04c5\u0003\u0002\u0002\u0002\u04ca\u04c6",
  "\u0003\u0002\u0002\u0002\u04ca\u04c7\u0003\u0002\u0002\u0002\u04ca\u04c8",
  "\u0003\u0002\u0002\u0002\u04ca\u04c9\u0003\u0002\u0002\u0002\u04cb\u04ce",
  "\u0003\u0002\u0002\u0002\u04cc\u04ca\u0003\u0002\u0002\u0002\u04cc\u04cd",
  "\u0003\u0002\u0002\u0002\u04cd\u04d1\u0003\u0002\u0002\u0002\u04ce\u04cc",
  "\u0003\u0002\u0002\u0002\u04cf\u04d0\u0007\u0018\u0002\u0002\u04d0\u04d2",
  "\u0005\u01fe\u0100\u0002\u04d1\u04cf\u0003\u0002\u0002\u0002\u04d1\u04d2",
  "\u0003\u0002\u0002\u0002\u04d2\u04d4\u0003\u0002\u0002\u0002\u04d3\u04a6",
  "\u0003\u0002\u0002\u0002\u04d3\u04be\u0003\u0002\u0002\u0002\u04d4E",
  "\u0003\u0002\u0002\u0002\u04d5\u04d6\u0007\u00f7\u0002\u0002\u04d6\u04d7",
  "\u0007'\u0002\u0002\u04d7\u04dd\u0005\u00ba^\u0002\u04d8\u04d9\u0007",
  ")\u0002\u0002\u04d9\u04da\u0007\u0162\u0002\u0002\u04da\u04db\u0005",
  "\u0176\u00bc\u0002\u04db\u04dc\u0007\u0163\u0002\u0002\u04dc\u04de\u0003",
  "\u0002\u0002\u0002\u04dd\u04d8\u0003\u0002\u0002\u0002\u04dd\u04de\u0003",
  "\u0002\u0002\u0002\u04deG\u0003\u0002\u0002\u0002\u04df\u04e0\u0007",
  "K\u0002\u0002\u04e0\u04e2\u0007'\u0002\u0002\u04e1\u04e3\u0005(\u0015",
  "\u0002\u04e2\u04e1\u0003\u0002\u0002\u0002\u04e2\u04e3\u0003\u0002\u0002",
  "\u0002\u04e3\u04e4\u0003\u0002\u0002\u0002\u04e4\u04e6\u0005\u0278\u013d",
  "\u0002\u04e5\u04e7\u0007\u00ca\u0002\u0002\u04e6\u04e5\u0003\u0002\u0002",
  "\u0002\u04e6\u04e7\u0003\u0002\u0002\u0002\u04e7\u04e9\u0003\u0002\u0002",
  "\u0002\u04e8\u04ea\u0005\u0016\f\u0002\u04e9\u04e8\u0003\u0002\u0002",
  "\u0002\u04e9\u04ea\u0003\u0002\u0002\u0002\u04eaI\u0003\u0002\u0002",
  "\u0002\u04eb\u04ec\u0007E\u0002\u0002\u04ec\u04ed\u0007'\u0002\u0002",
  "\u04ed\u04ee\u0005\u0278\u013d\u0002\u04ee\u04ef\u0005L'\u0002\u04ef",
  "\u0505\u0003\u0002\u0002\u0002\u04f0\u04f1\u0007E\u0002\u0002\u04f1",
  "\u04f2\u0007\u00b4\u0002\u0002\u04f2\u04f4\u0005\u0278\u013d\u0002\u04f3",
  "\u04f5\u0007\u0018\u0002\u0002\u04f4\u04f3\u0003\u0002\u0002\u0002\u04f4",
  "\u04f5\u0003\u0002\u0002\u0002\u04f5\u04f6\u0003\u0002\u0002\u0002\u04f6",
  "\u04f7\u0005R*\u0002\u04f7\u0505\u0003\u0002\u0002\u0002\u04f8\u04f9",
  "\u0007E\u0002\u0002\u04f9\u04fa\u0007\u00b9\u0002\u0002\u04fa\u04fb",
  "\u0007\u00b4\u0002\u0002\u04fb\u04fc\u0005\u0278\u013d\u0002\u04fc\u04fd",
  "\u0005T+\u0002\u04fd\u0505\u0003\u0002\u0002\u0002\u04fe\u04ff\u0007",
  "E\u0002\u0002\u04ff\u0500\t\u0004\u0002\u0002\u0500\u0505\u0005V,\u0002",
  "\u0501\u0502\u0007E\u0002\u0002\u0502\u0503\u0007*\u0002\u0002\u0503",
  "\u0505\u0005\u0088E\u0002\u0504\u04eb\u0003\u0002\u0002\u0002\u0504",
  "\u04f0\u0003\u0002\u0002\u0002\u0504\u04f8\u0003\u0002\u0002\u0002\u0504",
  "\u04fe\u0003\u0002\u0002\u0002\u0504\u0501\u0003\u0002\u0002\u0002\u0505",
  "K\u0003\u0002\u0002\u0002\u0506\u0518\u0005^0\u0002\u0507\u0518\u0005",
  "|?\u0002\u0508\u0518\u0005p9\u0002\u0509\u0518\u0005t;\u0002\u050a\u0518",
  "\u0005v<\u0002\u050b\u0518\u0005x=\u0002\u050c\u0518\u0005~@\u0002\u050d",
  "\u0518\u0005\u0098M\u0002\u050e\u0518\u0005\u009aN\u0002\u050f\u0518",
  "\u0005P)\u0002\u0510\u0518\u0005f4\u0002\u0511\u0518\u0005b2\u0002\u0512",
  "\u0514\u0005\u0312\u018a\u0002\u0513\u0512\u0003\u0002\u0002\u0002\u0513",
  "\u0514\u0003\u0002\u0002\u0002\u0514\u0515\u0003\u0002\u0002\u0002\u0515",
  "\u0518\u0005N(\u0002\u0516\u0518\u0005\u00c0a\u0002\u0517\u0506\u0003",
  "\u0002\u0002\u0002\u0517\u0507\u0003\u0002\u0002\u0002\u0517\u0508\u0003",
  "\u0002\u0002\u0002\u0517\u0509\u0003\u0002\u0002\u0002\u0517\u050a\u0003",
  "\u0002\u0002\u0002\u0517\u050b\u0003\u0002\u0002\u0002\u0517\u050c\u0003",
  "\u0002\u0002\u0002\u0517\u050d\u0003\u0002\u0002\u0002\u0517\u050e\u0003",
  "\u0002\u0002\u0002\u0517\u050f\u0003\u0002\u0002\u0002\u0517\u0510\u0003",
  "\u0002\u0002\u0002\u0517\u0511\u0003\u0002\u0002\u0002\u0517\u0513\u0003",
  "\u0002\u0002\u0002\u0517\u0516\u0003\u0002\u0002\u0002\u0518M\u0003",
  "\u0002\u0002\u0002\u0519\u0528\u0005\u008aF\u0002\u051a\u0528\u0005",
  "\u0096L\u0002\u051b\u0528\u0005\u00a0Q\u0002\u051c\u0528\u0005\u0086",
  "D\u0002\u051d\u0528\u0005\u009cO\u0002\u051e\u0528\u0005\u00a2R\u0002",
  "\u051f\u0528\u0005\u008eH\u0002\u0520\u0528\u0005\u008cG\u0002\u0521",
  "\u0528\u0005\u00be`\u0002\u0522\u0528\u0005j6\u0002\u0523\u0528\u0005",
  "l7\u0002\u0524\u0528\u0005h5\u0002\u0525\u0528\u0005`1\u0002\u0526\u0528",
  "\u0005d3\u0002\u0527\u0519\u0003\u0002\u0002\u0002\u0527\u051a\u0003",
  "\u0002\u0002\u0002\u0527\u051b\u0003\u0002\u0002\u0002\u0527\u051c\u0003",
  "\u0002\u0002\u0002\u0527\u051d\u0003\u0002\u0002\u0002\u0527\u051e\u0003",
  "\u0002\u0002\u0002\u0527\u051f\u0003\u0002\u0002\u0002\u0527\u0520\u0003",
  "\u0002\u0002\u0002\u0527\u0521\u0003\u0002\u0002\u0002\u0527\u0522\u0003",
  "\u0002\u0002\u0002\u0527\u0523\u0003\u0002\u0002\u0002\u0527\u0524\u0003",
  "\u0002\u0002\u0002\u0527\u0525\u0003\u0002\u0002\u0002\u0527\u0526\u0003",
  "\u0002\u0002\u0002\u0528O\u0003\u0002\u0002\u0002\u0529\u052a\u0007",
  "%\u0002\u0002\u052a\u052b\u0007G\u0002\u0002\u052b\u052c\u0007\u0162",
  "\u0002\u0002\u052c\u052d\u0005\u01b0\u00d9\u0002\u052d\u052e\u0007\u0163",
  "\u0002\u0002\u052eQ\u0003\u0002\u0002\u0002\u052f\u0535\u0005\u0080",
  "A\u0002\u0530\u0535\u0005^0\u0002\u0531\u0535\u0005p9\u0002\u0532\u0535",
  "\u0005|?\u0002\u0533\u0535\u0005\u01fe\u0100\u0002\u0534\u052f\u0003",
  "\u0002\u0002\u0002\u0534\u0530\u0003\u0002\u0002\u0002\u0534\u0531\u0003",
  "\u0002\u0002\u0002\u0534\u0532\u0003\u0002\u0002\u0002\u0534\u0533\u0003",
  "\u0002\u0002\u0002\u0535S\u0003\u0002\u0002\u0002\u0536\u0539\u0005",
  "\u0082B\u0002\u0537\u0539\u0005\u0084C\u0002\u0538\u0536\u0003\u0002",
  "\u0002\u0002\u0538\u0537\u0003\u0002\u0002\u0002\u0539U\u0003\u0002",
  "\u0002\u0002\u053a\u053e\u0005X-\u0002\u053b\u053e\u0005Z.\u0002\u053c",
  "\u053e\u0005\\/\u0002\u053d\u053a\u0003\u0002\u0002\u0002\u053d\u053b",
  "\u0003\u0002\u0002\u0002\u053d\u053c\u0003\u0002\u0002\u0002\u053eW",
  "\u0003\u0002\u0002\u0002\u053f\u0540\u0005\u0320\u0191\u0002\u0540\u0541",
  "\u0007\u009d\u0002\u0002\u0541\u0542\u0007\u009a\u0002\u0002\u0542\u0543",
  "\u0005:\u001e\u0002\u0543Y\u0003\u0002\u0002\u0002\u0544\u0545\u0005",
  "\u0320\u0191\u0002\u0545\u0546\u0007\u009d\u0002\u0002\u0546\u0547\u0007",
  "\u0101\u0002\u0002\u0547\u0548\u0005\u0104\u0083\u0002\u0548[\u0003",
  "\u0002\u0002\u0002\u0549\u054a\u0005\u0320\u0191\u0002\u054a\u054b\u0007",
  "\u009d\u0002\u0002\u054b\u054c\u0007\u0081\u0002\u0002\u054c\u054d\u0007",
  "\u017c\u0002\u0002\u054d]\u0003\u0002\u0002\u0002\u054e\u054f\u0007",
  "L\u0002\u0002\u054f\u0550\u0007M\u0002\u0002\u0550\u0551\u0005\u0278",
  "\u013d\u0002\u0551_\u0003\u0002\u0002\u0002\u0552\u0553\t\u0005\u0002",
  "\u0002\u0553\u0554\u0007)\u0002\u0002\u0554\u0555\u0007\u0162\u0002",
  "\u0002\u0555\u0556\u0005\u0170\u00b9\u0002\u0556\u0558\u0007\u0163\u0002",
  "\u0002\u0557\u0559\u0005*\u0016\u0002\u0558\u0557\u0003\u0002\u0002",
  "\u0002\u0558\u0559\u0003\u0002\u0002\u0002\u0559a\u0003\u0002\u0002",
  "\u0002\u055a\u055d\u0007\u0088\u0002\u0002\u055b\u055e\u0005\u0196\u00cc",
  "\u0002\u055c\u055e\u0005\u018c\u00c7\u0002\u055d\u055b\u0003\u0002\u0002",
  "\u0002\u055d\u055c\u0003\u0002\u0002\u0002\u055ec\u0003\u0002\u0002",
  "\u0002\u055f\u0560\u0007\u00e3\u0002\u0002\u0560\u0562\u0007)\u0002",
  "\u0002\u0561\u0563\u0005*\u0016\u0002\u0562\u0561\u0003\u0002\u0002",
  "\u0002\u0562\u0563\u0003\u0002\u0002\u0002\u0563e\u0003\u0002\u0002",
  "\u0002\u0564\u0565\u0007K\u0002\u0002\u0565\u0566\u0007\u0125\u0002",
  "\u0002\u0566\u0567\u0005\u0320\u0191\u0002\u0567g\u0003\u0002\u0002",
  "\u0002\u0568\u056a\u0007F\u0002\u0002\u0569\u056b\u0007G\u0002\u0002",
  "\u056a\u0569\u0003\u0002\u0002\u0002\u056a\u056b\u0003\u0002\u0002\u0002",
  "\u056b\u056c\u0003\u0002\u0002\u0002\u056c\u056d\u0005\u0320\u0191\u0002",
  "\u056d\u056e\u0005\u0320\u0191\u0002\u056e\u0570\u0005\u01d8\u00ed\u0002",
  "\u056f\u0571\u0005\u01c6\u00e4\u0002\u0570\u056f\u0003\u0002\u0002\u0002",
  "\u0570\u0571\u0003\u0002\u0002\u0002\u0571\u0574\u0003\u0002\u0002\u0002",
  "\u0572\u0573\u0007N\u0002\u0002\u0573\u0575\u0007\u017c\u0002\u0002",
  "\u0574\u0572\u0003\u0002\u0002\u0002\u0574\u0575\u0003\u0002\u0002\u0002",
  "\u0575\u0577\u0003\u0002\u0002\u0002\u0576\u0578\u0005n8\u0002\u0577",
  "\u0576\u0003\u0002\u0002\u0002\u0577\u0578\u0003\u0002\u0002\u0002\u0578",
  "\u057a\u0003\u0002\u0002\u0002\u0579\u057b\u0005*\u0016\u0002\u057a",
  "\u0579\u0003\u0002\u0002\u0002\u057a\u057b\u0003\u0002\u0002\u0002\u057b",
  "i\u0003\u0002\u0002\u0002\u057c\u057d\u0007\u00e3\u0002\u0002\u057d",
  "\u057e\u0007\u00dd\u0002\u0002\u057e\u0580\u0007\u00ea\u0002\u0002\u057f",
  "\u0581\u0007G\u0002\u0002\u0580\u057f\u0003\u0002\u0002\u0002\u0580",
  "\u0581\u0003\u0002\u0002\u0002\u0581\u0582\u0003\u0002\u0002\u0002\u0582",
  "\u0583\u0005\u0320\u0191\u0002\u0583\u0584\u0007\u009d\u0002\u0002\u0584",
  "\u0587\u0005\u014a\u00a6\u0002\u0585\u0586\u0007N\u0002\u0002\u0586",
  "\u0588\u0007\u017c\u0002\u0002\u0587\u0585\u0003\u0002\u0002\u0002\u0587",
  "\u0588\u0003\u0002\u0002\u0002\u0588k\u0003\u0002\u0002\u0002\u0589",
  "\u058a\u0007\u00e3\u0002\u0002\u058a\u058b\u0007\u00dd\u0002\u0002\u058b",
  "\u058c\u0007\u009d\u0002\u0002\u058c\u058d\u0005\u014a\u00a6\u0002\u058d",
  "m\u0003\u0002\u0002\u0002\u058e\u0592\u0007H\u0002\u0002\u058f\u0590",
  "\u0007I\u0002\u0002\u0590\u0592\u0005\u0320\u0191\u0002\u0591\u058e",
  "\u0003\u0002\u0002\u0002\u0591\u058f\u0003\u0002\u0002\u0002\u0592o",
  "\u0003\u0002\u0002\u0002\u0593\u0595\u0007\u0088\u0002\u0002\u0594\u0596",
  "\u0005,\u0017\u0002\u0595\u0594\u0003\u0002\u0002\u0002\u0595\u0596",
  "\u0003\u0002\u0002\u0002\u0596\u0598\u0003\u0002\u0002\u0002\u0597\u0599",
  "\u0005r:\u0002\u0598\u0597\u0003\u0002\u0002\u0002\u0599\u059a\u0003",
  "\u0002\u0002\u0002\u059a\u0598\u0003\u0002\u0002\u0002\u059a\u059b\u0003",
  "\u0002\u0002\u0002\u059bq\u0003\u0002\u0002\u0002\u059c\u059e\u0005",
  "\u0312\u018a\u0002\u059d\u059f\u0005z>\u0002\u059e\u059d\u0003\u0002",
  "\u0002\u0002\u059e\u059f\u0003\u0002\u0002\u0002\u059fs\u0003\u0002",
  "\u0002\u0002\u05a0\u05a4\u0007\u00d9\u0002\u0002\u05a1\u05a3\u0005\u0312",
  "\u018a\u0002\u05a2\u05a1\u0003\u0002\u0002\u0002\u05a3\u05a6\u0003\u0002",
  "\u0002\u0002\u05a4\u05a2\u0003\u0002\u0002\u0002\u05a4\u05a5\u0003\u0002",
  "\u0002\u0002\u05a5u\u0003\u0002\u0002\u0002\u05a6\u05a4\u0003\u0002",
  "\u0002\u0002\u05a7\u05ab\u0007\u00da\u0002\u0002\u05a8\u05aa\u0005\u0312",
  "\u018a\u0002\u05a9\u05a8\u0003\u0002\u0002\u0002\u05aa\u05ad\u0003\u0002",
  "\u0002\u0002\u05ab\u05a9\u0003\u0002\u0002\u0002\u05ab\u05ac\u0003\u0002",
  "\u0002\u0002\u05acw\u0003\u0002\u0002\u0002\u05ad\u05ab\u0003\u0002",
  "\u0002\u0002\u05ae\u05b2\u0007\u00db\u0002\u0002\u05af\u05b1\u0005\u0312",
  "\u018a\u0002\u05b0\u05af\u0003\u0002\u0002\u0002\u05b1\u05b4\u0003\u0002",
  "\u0002\u0002\u05b2\u05b0\u0003\u0002\u0002\u0002\u05b2\u05b3\u0003\u0002",
  "\u0002\u0002\u05b3y\u0003\u0002\u0002\u0002\u05b4\u05b2\u0003\u0002",
  "\u0002\u0002\u05b5\u05b6\u0007\u0081\u0002\u0002\u05b6\u05b7\u0007\u017c",
  "\u0002\u0002\u05b7{\u0003\u0002\u0002\u0002\u05b8\u05ba\u0007K\u0002",
  "\u0002\u05b9\u05bb\u0005(\u0015\u0002\u05ba\u05b9\u0003\u0002\u0002",
  "\u0002\u05ba\u05bb\u0003\u0002\u0002\u0002\u05bb\u05bc\u0003\u0002\u0002",
  "\u0002\u05bc\u05c1\u0005\u0316\u018c\u0002\u05bd\u05be\u0007\u0160\u0002",
  "\u0002\u05be\u05c0\u0005\u0316\u018c\u0002\u05bf\u05bd\u0003\u0002\u0002",
  "\u0002\u05c0\u05c3\u0003\u0002\u0002\u0002\u05c1\u05bf\u0003\u0002\u0002",
  "\u0002\u05c1\u05c2\u0003\u0002\u0002\u0002\u05c2\u05c5\u0003\u0002\u0002",
  "\u0002\u05c3\u05c1\u0003\u0002\u0002\u0002\u05c4\u05c6\u0007\u00ca\u0002",
  "\u0002\u05c5\u05c4\u0003\u0002\u0002\u0002\u05c5\u05c6\u0003\u0002\u0002",
  "\u0002\u05c6\u05c8\u0003\u0002\u0002\u0002\u05c7\u05c9\u0005\u0016\f",
  "\u0002\u05c8\u05c7\u0003\u0002\u0002\u0002\u05c8\u05c9\u0003\u0002\u0002",
  "\u0002\u05c9}\u0003\u0002\u0002\u0002\u05ca\u05cb\u0007\u009d\u0002",
  "\u0002\u05cb\u05cc\u0007\u009f\u0002\u0002\u05cc\u05d4\u0005\u014a\u00a6",
  "\u0002\u05cd\u05ce\u0007\u009e\u0002\u0002\u05ce\u05d0\u0007\u009f\u0002",
  "\u0002\u05cf\u05d1\u0005(\u0015\u0002\u05d0\u05cf\u0003\u0002\u0002",
  "\u0002\u05d0\u05d1\u0003\u0002\u0002\u0002\u05d1\u05d2\u0003\u0002\u0002",
  "\u0002\u05d2\u05d4\u0005\u014a\u00a6\u0002\u05d3\u05ca\u0003\u0002\u0002",
  "\u0002\u05d3\u05cd\u0003\u0002\u0002\u0002\u05d4\u007f\u0003\u0002\u0002",
  "\u0002\u05d5\u05d6\u0007\u009d\u0002\u0002\u05d6\u05d7\u0007\u009f\u0002",
  "\u0002\u05d7\u05df\u0005\u014a\u00a6\u0002\u05d8\u05d9\u0007\u009e\u0002",
  "\u0002\u05d9\u05db\u0007\u009f\u0002\u0002\u05da\u05dc\u0005(\u0015",
  "\u0002\u05db\u05da\u0003\u0002\u0002\u0002\u05db\u05dc\u0003\u0002\u0002",
  "\u0002\u05dc\u05dd\u0003\u0002\u0002\u0002\u05dd\u05df\u0005\u014a\u00a6",
  "\u0002\u05de\u05d5\u0003\u0002\u0002\u0002\u05de\u05d8\u0003\u0002\u0002",
  "\u0002\u05df\u0081\u0003\u0002\u0002\u0002\u05e0\u05e3\u0005.\u0018",
  "\u0002\u05e1\u05e3\u00050\u0019\u0002\u05e2\u05e0\u0003\u0002\u0002",
  "\u0002\u05e2\u05e1\u0003\u0002\u0002\u0002\u05e3\u0083\u0003\u0002\u0002",
  "\u0002\u05e4\u05e5\u0007,\u0002\u0002\u05e5\u0085\u0003\u0002\u0002",
  "\u0002\u05e6\u05e7\u0007\u009d\u0002\u0002\u05e7\u05e8\u0007\u0096\u0002",
  "\u0002\u05e8\u05ec\u0007\u017c\u0002\u0002\u05e9\u05ea\u0007\u0097\u0002",
  "\u0002\u05ea\u05eb\u0007\u0099\u0002\u0002\u05eb\u05ed\u0005\u014a\u00a6",
  "\u0002\u05ec\u05e9\u0003\u0002\u0002\u0002\u05ec\u05ed\u0003\u0002\u0002",
  "\u0002\u05ed\u05f2\u0003\u0002\u0002\u0002\u05ee\u05ef\u0007\u009d\u0002",
  "\u0002\u05ef\u05f0\u0007\u0099\u0002\u0002\u05f0\u05f2\u0005\u014a\u00a6",
  "\u0002\u05f1\u05e6\u0003\u0002\u0002\u0002\u05f1\u05ee\u0003\u0002\u0002",
  "\u0002\u05f2\u0087\u0003\u0002\u0002\u0002\u05f3\u05f4\u0005\u0320\u0191",
  "\u0002\u05f4\u05f5\u0007$\u0002\u0002\u05f5\u05f7\u0005\u0278\u013d",
  "\u0002\u05f6\u05f8\u0005\u0312\u018a\u0002\u05f7\u05f6\u0003\u0002\u0002",
  "\u0002\u05f7\u05f8\u0003\u0002\u0002\u0002\u05f8\u05f9\u0003\u0002\u0002",
  "\u0002\u05f9\u05fa\u0007,\u0002\u0002\u05fa\u0089\u0003\u0002\u0002",
  "\u0002\u05fb\u05fc\u0007\u009d\u0002\u0002\u05fc\u05fd\u0007z\u0002",
  "\u0002\u05fd\u05fe\u0005\u00c2b\u0002\u05fe\u008b\u0003\u0002\u0002",
  "\u0002\u05ff\u0600\u0007\t\u0002\u0002\u0600\u0605\u0007h\u0002\u0002",
  "\u0601\u0602\u0007\t\u0002\u0002\u0602\u0605\u0007i\u0002\u0002\u0603",
  "\u0605\u0005\u0136\u009c\u0002\u0604\u05ff\u0003\u0002\u0002\u0002\u0604",
  "\u0601\u0003\u0002\u0002\u0002\u0604\u0603\u0003\u0002\u0002\u0002\u0605",
  "\u008d\u0003\u0002\u0002\u0002\u0606\u0607\u0007\u009d\u0002\u0002\u0607",
  "\u0608\u0007\u00e6\u0002\u0002\u0608\u0609\u0007\u0081\u0002\u0002\u0609",
  "\u060a\u0005\u0090I\u0002\u060a\u008f\u0003\u0002\u0002\u0002\u060b",
  "\u060c\u0007\u0162\u0002\u0002\u060c\u060d\u0005\u0092J\u0002\u060d",
  "\u060e\u0007\u0163\u0002\u0002\u060e\u0091\u0003\u0002\u0002\u0002\u060f",
  "\u0614\u0005\u0094K\u0002\u0610\u0611\u0007\u0160\u0002\u0002\u0611",
  "\u0613\u0005\u0094K\u0002\u0612\u0610\u0003\u0002\u0002\u0002\u0613",
  "\u0616\u0003\u0002\u0002\u0002\u0614\u0612\u0003\u0002\u0002\u0002\u0614",
  "\u0615\u0003\u0002\u0002\u0002\u0615\u0093\u0003\u0002\u0002\u0002\u0616",
  "\u0614\u0003\u0002\u0002\u0002\u0617\u0618\u0005\u01a2\u00d2\u0002\u0618",
  "\u0619\u0007\u0168\u0002\u0002\u0619\u061a\u0007\u017c\u0002\u0002\u061a",
  "\u0095\u0003\u0002\u0002\u0002\u061b\u061c\u0007\u009d\u0002\u0002\u061c",
  "\u061d\u0007\u0081\u0002\u0002\u061d\u061e\u0007\u017c\u0002\u0002\u061e",
  "\u0097\u0003\u0002\u0002\u0002\u061f\u0625\u0005\u0138\u009d\u0002\u0620",
  "\u0621\u0007\t\u0002\u0002\u0621\u0625\u0007\u00e6\u0002\u0002\u0622",
  "\u0623\u0007\t\u0002\u0002\u0623\u0625\u00052\u001a\u0002\u0624\u061f",
  "\u0003\u0002\u0002\u0002\u0624\u0620\u0003\u0002\u0002\u0002\u0624\u0622",
  "\u0003\u0002\u0002\u0002\u0625\u0099\u0003\u0002\u0002\u0002\u0626\u0627",
  "\u0007\u00fd\u0002\u0002\u0627\u0628\u0005\u0312\u018a\u0002\u0628\u0629",
  "\u0007\u0097\u0002\u0002\u0629\u062a\u0007'\u0002\u0002\u062a\u062b",
  "\u0005\u0278\u013d\u0002\u062b\u009b\u0003\u0002\u0002\u0002\u062c\u062d",
  "\u0007L\u0002\u0002\u062d\u062e\u0007M\u0002\u0002\u062e\u062f\u0005",
  "\u0312\u018a\u0002\u062f\u009d\u0003\u0002\u0002\u0002\u0630\u0631\u0007",
  "\u00e3\u0002\u0002\u0631\u0632\u0007\u00dd\u0002\u0002\u0632\u0634\u0007",
  "\u00ea\u0002\u0002\u0633\u0635\u0007G\u0002\u0002\u0634\u0633\u0003",
  "\u0002\u0002\u0002\u0634\u0635\u0003\u0002\u0002\u0002\u0635\u0636\u0003",
  "\u0002\u0002\u0002\u0636\u0637\u0005\u0320\u0191\u0002\u0637\u0638\u0007",
  "\u009d\u0002\u0002\u0638\u063b\u0005\u014a\u00a6\u0002\u0639\u063a\u0007",
  "N\u0002\u0002\u063a\u063c\u0007\u017c\u0002\u0002\u063b\u0639\u0003",
  "\u0002\u0002\u0002\u063b\u063c\u0003\u0002\u0002\u0002\u063c\u009f\u0003",
  "\u0002\u0002\u0002\u063d\u063e\u0007\u00e1\u0002\u0002\u063e\u00a1\u0003",
  "\u0002\u0002\u0002\u063f\u0640\u0007j\u0002\u0002\u0640\u0641\u0007",
  "\u0181\u0002\u0002\u0641\u0642\u0007k\u0002\u0002\u0642\u00a3\u0003",
  "\u0002\u0002\u0002\u0643\u0647\u0005\u00a6T\u0002\u0644\u0645\u0007",
  "\u0097\u0002\u0002\u0645\u0646\u0007\u0098\u0002\u0002\u0646\u0648\u0007",
  ",\u0002\u0002\u0647\u0644\u0003\u0002\u0002\u0002\u0647\u0648\u0003",
  "\u0002\u0002\u0002\u0648\u064b\u0003\u0002\u0002\u0002\u0649\u064a\u0007",
  "\u00a0\u0002\u0002\u064a\u064c\u0005\u014a\u00a6\u0002\u064b\u0649\u0003",
  "\u0002\u0002\u0002\u064b\u064c\u0003\u0002\u0002\u0002\u064c\u0650\u0003",
  "\u0002\u0002\u0002\u064d\u064e\u0007\u00b6\u0002\u0002\u064e\u064f\u0007",
  "'\u0002\u0002\u064f\u0651\u0005\u0278\u013d\u0002\u0650\u064d\u0003",
  "\u0002\u0002\u0002\u0650\u0651\u0003\u0002\u0002\u0002\u0651\u0655\u0003",
  "\u0002\u0002\u0002\u0652\u0653\u0007g\u0002\u0002\u0653\u0654\u0007",
  "\u0014\u0002\u0002\u0654\u0656\u0005\u017e\u00c0\u0002\u0655\u0652\u0003",
  "\u0002\u0002\u0002\u0655\u0656\u0003\u0002\u0002\u0002\u0656\u065b\u0003",
  "\u0002\u0002\u0002\u0657\u0659\u0005\u0144\u00a3\u0002\u0658\u0657\u0003",
  "\u0002\u0002\u0002\u0658\u0659\u0003\u0002\u0002\u0002\u0659\u065a\u0003",
  "\u0002\u0002\u0002\u065a\u065c\u0005\u0160\u00b1\u0002\u065b\u0658\u0003",
  "\u0002\u0002\u0002\u065b\u065c\u0003\u0002\u0002\u0002\u065c\u065f\u0003",
  "\u0002\u0002\u0002\u065d\u065e\u0007\u0081\u0002\u0002\u065e\u0660\u0005",
  "\u0350\u01a9\u0002\u065f\u065d\u0003\u0002\u0002\u0002\u065f\u0660\u0003",
  "\u0002\u0002\u0002\u0660\u0662\u0003\u0002\u0002\u0002\u0661\u0663\u0005",
  "\u0148\u00a5\u0002\u0662\u0661\u0003\u0002\u0002\u0002\u0662\u0663\u0003",
  "\u0002\u0002\u0002\u0663\u0665\u0003\u0002\u0002\u0002\u0664\u0666\u0005",
  "\u012e\u0098\u0002\u0665\u0664\u0003\u0002\u0002\u0002\u0665\u0666\u0003",
  "\u0002\u0002\u0002\u0666\u00a5\u0003\u0002\u0002\u0002\u0667\u0668\u0007",
  "C\u0002\u0002\u0668\u0669\u0007*\u0002\u0002\u0669\u066a\u0005\u0320",
  "\u0191\u0002\u066a\u066b\u0007$\u0002\u0002\u066b\u066c\u0007'\u0002",
  "\u0002\u066c\u066d\u0005\u0278\u013d\u0002\u066d\u066e\u0005\u017e\u00c0",
  "\u0002\u066e\u066f\u0007\u0018\u0002\u0002\u066f\u0670\u0007\u017c\u0002",
  "\u0002\u0670\u00a7\u0003\u0002\u0002\u0002\u0671\u0672\u0007K\u0002",
  "\u0002\u0672\u0673\u0007*\u0002\u0002\u0673\u0674\u0005\u0320\u0191",
  "\u0002\u0674\u0675\u0007$\u0002\u0002\u0675\u0676\u0005\u0278\u013d",
  "\u0002\u0676\u00a9\u0003\u0002\u0002\u0002\u0677\u067b\u0005\u00acW",
  "\u0002\u0678\u0679\u0007\u00ea\u0002\u0002\u0679\u067a\u0007)\u0002",
  "\u0002\u067a\u067c\u0005\u00aeX\u0002\u067b\u0678\u0003\u0002\u0002",
  "\u0002\u067b\u067c\u0003\u0002\u0002\u0002\u067c\u067e\u0003\u0002\u0002",
  "\u0002\u067d\u067f\u0005\u00b4[\u0002\u067e\u067d\u0003\u0002\u0002",
  "\u0002\u067e\u067f\u0003\u0002\u0002\u0002\u067f\u00ab\u0003\u0002\u0002",
  "\u0002\u0680\u0681\u0007C\u0002\u0002\u0681\u0682\u0007\u0159\u0002",
  "\u0002\u0682\u0683\u0007*\u0002\u0002\u0683\u0685\u0007$\u0002\u0002",
  "\u0684\u0686\u0007'\u0002\u0002\u0685\u0684\u0003\u0002\u0002\u0002",
  "\u0685\u0686\u0003\u0002\u0002\u0002\u0686\u0687\u0003\u0002\u0002\u0002",
  "\u0687\u0688\u0005\u0278\u013d\u0002\u0688\u00ad\u0003\u0002\u0002\u0002",
  "\u0689\u068a\u0007\u0162\u0002\u0002\u068a\u068b\u0005\u00b0Y\u0002",
  "\u068b\u068c\u0007\u0163\u0002\u0002\u068c\u00af\u0003\u0002\u0002\u0002",
  "\u068d\u0692\u0005\u00b2Z\u0002\u068e\u068f\u0007\u0160\u0002\u0002",
  "\u068f\u0691\u0005\u00b2Z\u0002\u0690\u068e\u0003\u0002\u0002\u0002",
  "\u0691\u0694\u0003\u0002\u0002\u0002\u0692\u0690\u0003\u0002\u0002\u0002",
  "\u0692\u0693\u0003\u0002\u0002\u0002\u0693\u00b1\u0003\u0002\u0002\u0002",
  "\u0694\u0692\u0003\u0002\u0002\u0002\u0695\u0697\u0005\u0320\u0191\u0002",
  "\u0696\u0698\u0005\u00b4[\u0002\u0697\u0696\u0003\u0002\u0002\u0002",
  "\u0697\u0698\u0003\u0002\u0002\u0002\u0698\u00b3\u0003\u0002\u0002\u0002",
  "\u0699\u069a\u0007\u00df\u0002\u0002\u069a\u069b\u0005\u014a\u00a6\u0002",
  "\u069b\u00b5\u0003\u0002\u0002\u0002\u069c\u06a0\u0005\u00b8]\u0002",
  "\u069d\u069e\u0007\u00ea\u0002\u0002\u069e\u069f\u0007)\u0002\u0002",
  "\u069f\u06a1\u0005\u00aeX\u0002\u06a0\u069d\u0003\u0002\u0002\u0002",
  "\u06a0\u06a1\u0003\u0002\u0002\u0002\u06a1\u00b7\u0003\u0002\u0002\u0002",
  "\u06a2\u06a3\u0007K\u0002\u0002\u06a3\u06a4\u0007\u0159\u0002\u0002",
  "\u06a4\u06a5\u0007*\u0002\u0002\u06a5\u06a7\u0007$\u0002\u0002\u06a6",
  "\u06a8\u0007'\u0002\u0002\u06a7\u06a6\u0003\u0002\u0002\u0002\u06a7",
  "\u06a8\u0003\u0002\u0002\u0002\u06a8\u06a9\u0003\u0002\u0002\u0002\u06a9",
  "\u06aa\u0005\u0278\u013d\u0002\u06aa\u00b9\u0003\u0002\u0002\u0002\u06ab",
  "\u06ad\u0005\u0278\u013d\u0002\u06ac\u06ae\u0005\u0312\u018a\u0002\u06ad",
  "\u06ac\u0003\u0002\u0002\u0002\u06ad\u06ae\u0003\u0002\u0002\u0002\u06ae",
  "\u00bb\u0003\u0002\u0002\u0002\u06af\u06b0\u0007\u0007\u0002\u0002\u06b0",
  "\u06b1\u0007\u013a\u0002\u0002\u06b1\u00bd\u0003\u0002\u0002\u0002\u06b2",
  "\u06b3\u0007\u0103\u0002\u0002\u06b3\u06b5\u0007\u017c\u0002\u0002\u06b4",
  "\u06b6\u0005\u00bc_\u0002\u06b5\u06b4\u0003\u0002\u0002\u0002\u06b5",
  "\u06b6\u0003\u0002\u0002\u0002\u06b6\u06bb\u0003\u0002\u0002\u0002\u06b7",
  "\u06b8\u0007\u0097\u0002\u0002\u06b8\u06b9\u0007\u001c\u0002\u0002\u06b9",
  "\u06ba\u0007\u009f\u0002\u0002\u06ba\u06bc\u0005\u014a\u00a6\u0002\u06bb",
  "\u06b7\u0003\u0002\u0002\u0002\u06bb\u06bc\u0003\u0002\u0002\u0002\u06bc",
  "\u00bf\u0003\u0002\u0002\u0002\u06bd\u06be\u0007\u009d\u0002\u0002\u06be",
  "\u06bf\u0007\u0101\u0002\u0002\u06bf\u06c0\u0005\u0104\u0083\u0002\u06c0",
  "\u00c1\u0003\u0002\u0002\u0002\u06c1\u06c2\u0007{\u0002\u0002\u06c2",
  "\u06c3\u0007\u017c\u0002\u0002\u06c3\u06c4\u0007|\u0002\u0002\u06c4",
  "\u06c5\u0007\u017c\u0002\u0002\u06c5\u06c6\u0007\u0096\u0002\u0002\u06c6",
  "\u06cb\u0007\u017c\u0002\u0002\u06c7\u06c8\u0007}\u0002\u0002\u06c8",
  "\u06c9\u0007\u017c\u0002\u0002\u06c9\u06ca\u0007~\u0002\u0002\u06ca",
  "\u06cc\u0007\u017c\u0002\u0002\u06cb\u06c7\u0003\u0002\u0002\u0002\u06cb",
  "\u06cc\u0003\u0002\u0002\u0002\u06cc\u06cf\u0003\u0002\u0002\u0002\u06cd",
  "\u06cf\u0005\u0166\u00b4\u0002\u06ce\u06c1\u0003\u0002\u0002\u0002\u06ce",
  "\u06cd\u0003\u0002\u0002\u0002\u06cf\u00c3\u0003\u0002\u0002\u0002\u06d0",
  "\u06d1\u0007{\u0002\u0002\u06d1\u06d2\u0007\u017c\u0002\u0002\u06d2",
  "\u06d3\u0007\u0096\u0002\u0002\u06d3\u06d4\u0007\u017c\u0002\u0002\u06d4",
  "\u00c5\u0003\u0002\u0002\u0002\u06d5\u06d8\u0005\u0320\u0191\u0002\u06d6",
  "\u06d7\u0007\u015e\u0002\u0002\u06d7\u06d9\u0005\u0320\u0191\u0002\u06d8",
  "\u06d6\u0003\u0002\u0002\u0002\u06d8\u06d9\u0003\u0002\u0002\u0002\u06d9",
  "\u06e7\u0003\u0002\u0002\u0002\u06da\u06e4\u0005\u0320\u0191\u0002\u06db",
  "\u06e0\u0007\u015e\u0002\u0002\u06dc\u06e1\u0007\u00a2\u0002\u0002\u06dd",
  "\u06e1\u0007v\u0002\u0002\u06de\u06e1\u0007\u00a1\u0002\u0002\u06df",
  "\u06e1\u0005\u0320\u0191\u0002\u06e0\u06dc\u0003\u0002\u0002\u0002\u06e0",
  "\u06dd\u0003\u0002\u0002\u0002\u06e0\u06de\u0003\u0002\u0002\u0002\u06e0",
  "\u06df\u0003\u0002\u0002\u0002\u06e1\u06e3\u0003\u0002\u0002\u0002\u06e2",
  "\u06db\u0003\u0002\u0002\u0002\u06e3\u06e6\u0003\u0002\u0002\u0002\u06e4",
  "\u06e2\u0003\u0002\u0002\u0002\u06e4\u06e5\u0003\u0002\u0002\u0002\u06e5",
  "\u06e8\u0003\u0002\u0002\u0002\u06e6\u06e4\u0003\u0002\u0002\u0002\u06e7",
  "\u06da\u0003\u0002\u0002\u0002\u06e7\u06e8\u0003\u0002\u0002\u0002\u06e8",
  "\u00c7\u0003\u0002\u0002\u0002\u06e9\u06eb\u0005\u00c6d\u0002\u06ea",
  "\u06ec\u0005\u0312\u018a\u0002\u06eb\u06ea\u0003\u0002\u0002\u0002\u06eb",
  "\u06ec\u0003\u0002\u0002\u0002\u06ec\u00c9\u0003\u0002\u0002\u0002\u06ed",
  "\u06ef\u0005\u0278\u013d\u0002\u06ee\u06f0\u0005\u0312\u018a\u0002\u06ef",
  "\u06ee\u0003\u0002\u0002\u0002\u06ef\u06f0\u0003\u0002\u0002\u0002\u06f0",
  "\u06f2\u0003\u0002\u0002\u0002\u06f1\u06f3\u0005\u017a\u00be\u0002\u06f2",
  "\u06f1\u0003\u0002\u0002\u0002\u06f2\u06f3\u0003\u0002\u0002\u0002\u06f3",
  "\u00cb\u0003\u0002\u0002\u0002\u06f4\u0702\t\u0006\u0002\u0002\u06f5",
  "\u06f7\t\u0004\u0002\u0002\u06f6\u06f8\u0007\u0092\u0002\u0002\u06f7",
  "\u06f6\u0003\u0002\u0002\u0002\u06f7\u06f8\u0003\u0002\u0002\u0002\u06f8",
  "\u06f9\u0003\u0002\u0002\u0002\u06f9\u0703\u0005\u0320\u0191\u0002\u06fa",
  "\u06fc\u0007\u008d\u0002\u0002\u06fb\u06fd\u0007\u0092\u0002\u0002\u06fc",
  "\u06fb\u0003\u0002\u0002\u0002\u06fc\u06fd\u0003\u0002\u0002\u0002\u06fd",
  "\u06fe\u0003\u0002\u0002\u0002\u06fe\u0703\u0005\u031e\u0190\u0002\u06ff",
  "\u0700\t\u0007\u0002\u0002\u0700\u0703\u0005\u00caf\u0002\u0701\u0703",
  "\u0005\u00caf\u0002\u0702\u06f5\u0003\u0002\u0002\u0002\u0702\u06fa",
  "\u0003\u0002\u0002\u0002\u0702\u06ff\u0003\u0002\u0002\u0002\u0702\u0701",
  "\u0003\u0002\u0002\u0002\u0703\u00cd\u0003\u0002\u0002\u0002\u0704\u0705",
  "\u0007\u00cc\u0002\u0002\u0705\u0706\u0007'\u0002\u0002\u0706\u0713",
  "\u0005\u0310\u0189\u0002\u0707\u0708\u0007\u00dc\u0002\u0002\u0708\u070f",
  "\u0007\u00dd\u0002\u0002\u0709\u0710\u0007\u00f8\u0002\u0002\u070a\u070b",
  "\u0007\u00ea\u0002\u0002\u070b\u070d\u0007)\u0002\u0002\u070c\u070e",
  "\u0005\u0176\u00bc\u0002\u070d\u070c\u0003\u0002\u0002\u0002\u070d\u070e",
  "\u0003\u0002\u0002\u0002\u070e\u0710\u0003\u0002\u0002\u0002\u070f\u0709",
  "\u0003\u0002\u0002\u0002\u070f\u070a\u0003\u0002\u0002\u0002\u070f\u0710",
  "\u0003\u0002\u0002\u0002\u0710\u0714\u0003\u0002\u0002\u0002\u0711\u0712",
  "\u0007\u0121\u0002\u0002\u0712\u0714\u0007>\u0002\u0002\u0713\u0707",
  "\u0003\u0002\u0002\u0002\u0713\u0711\u0003\u0002\u0002\u0002\u0714\u00cf",
  "\u0003\u0002\u0002\u0002\u0715\u0716\u0007.\u0002\u0002\u0716\u0719",
  "\t\b\u0002\u0002\u0717\u0718\u0007\n\u0002\u0002\u0718\u071a\u0005\u012c",
  "\u0097\u0002\u0719\u0717\u0003\u0002\u0002\u0002\u0719\u071a\u0003\u0002",
  "\u0002\u0002\u071a\u0791\u0003\u0002\u0002\u0002\u071b\u071c\u0007.",
  "\u0002\u0002\u071c\u071f\u0007(\u0002\u0002\u071d\u071e\t\t\u0002\u0002",
  "\u071e\u0720\u0005\u0320\u0191\u0002\u071f\u071d\u0003\u0002\u0002\u0002",
  "\u071f\u0720\u0003\u0002\u0002\u0002\u0720\u0724\u0003\u0002\u0002\u0002",
  "\u0721\u0722\u0007\n\u0002\u0002\u0722\u0725\u0005\u012c\u0097\u0002",
  "\u0723\u0725\u0005\u012c\u0097\u0002\u0724\u0721\u0003\u0002\u0002\u0002",
  "\u0724\u0723\u0003\u0002\u0002\u0002\u0724\u0725\u0003\u0002\u0002\u0002",
  "\u0725\u0791\u0003\u0002\u0002\u0002\u0726\u0727\u0007.\u0002\u0002",
  "\u0727\u072a\u0007\u00b5\u0002\u0002\u0728\u0729\t\t\u0002\u0002\u0729",
  "\u072b\u0005\u0320\u0191\u0002\u072a\u0728\u0003\u0002\u0002\u0002\u072a",
  "\u072b\u0003\u0002\u0002\u0002\u072b\u072f\u0003\u0002\u0002\u0002\u072c",
  "\u072d\u0007\n\u0002\u0002\u072d\u0730\u0005\u012c\u0097\u0002\u072e",
  "\u0730\u0005\u012c\u0097\u0002\u072f\u072c\u0003\u0002\u0002\u0002\u072f",
  "\u072e\u0003\u0002\u0002\u0002\u072f\u0730\u0003\u0002\u0002\u0002\u0730",
  "\u0791\u0003\u0002\u0002\u0002\u0731\u0732\u0007.\u0002\u0002\u0732",
  "\u0733\u0007\u00b9\u0002\u0002\u0733\u0736\u0007\u00b5\u0002\u0002\u0734",
  "\u0735\t\t\u0002\u0002\u0735\u0737\u0005\u0320\u0191\u0002\u0736\u0734",
  "\u0003\u0002\u0002\u0002\u0736\u0737\u0003\u0002\u0002\u0002\u0737\u073b",
  "\u0003\u0002\u0002\u0002\u0738\u0739\u0007\n\u0002\u0002\u0739\u073c",
  "\u0005\u012c\u0097\u0002\u073a\u073c\u0005\u012c\u0097\u0002\u073b\u0738",
  "\u0003\u0002\u0002\u0002\u073b\u073a\u0003\u0002\u0002\u0002\u073b\u073c",
  "\u0003\u0002\u0002\u0002\u073c\u0791\u0003\u0002\u0002\u0002\u073d\u073e",
  "\u0007.\u0002\u0002\u073e\u073f\u0007)\u0002\u0002\u073f\u0740\t\t\u0002",
  "\u0002\u0740\u0743\u0005\u0278\u013d\u0002\u0741\u0742\t\t\u0002\u0002",
  "\u0742\u0744\u0005\u0320\u0191\u0002\u0743\u0741\u0003\u0002\u0002\u0002",
  "\u0743\u0744\u0003\u0002\u0002\u0002\u0744\u0748\u0003\u0002\u0002\u0002",
  "\u0745\u0746\u0007\n\u0002\u0002\u0746\u0749\u0005\u012c\u0097\u0002",
  "\u0747\u0749\u0005\u012c\u0097\u0002\u0748\u0745\u0003\u0002\u0002\u0002",
  "\u0748\u0747\u0003\u0002\u0002\u0002\u0748\u0749\u0003\u0002\u0002\u0002",
  "\u0749\u0791\u0003\u0002\u0002\u0002\u074a\u074b\u0007.\u0002\u0002",
  "\u074b\u074f\u0007-\u0002\u0002\u074c\u074d\u0007\n\u0002\u0002\u074d",
  "\u0750\u0005\u012a\u0096\u0002\u074e\u0750\u0005\u012a\u0096\u0002\u074f",
  "\u074c\u0003\u0002\u0002\u0002\u074f\u074e\u0003\u0002\u0002\u0002\u074f",
  "\u0750\u0003\u0002\u0002\u0002\u0750\u0791\u0003\u0002\u0002\u0002\u0751",
  "\u0752\u0007.\u0002\u0002\u0752\u0753\u0007&\u0002\u0002\u0753\u0755",
  "\u0005\u0278\u013d\u0002\u0754\u0756\u0005\u0312\u018a\u0002\u0755\u0754",
  "\u0003\u0002\u0002\u0002\u0755\u0756\u0003\u0002\u0002\u0002\u0756\u0791",
  "\u0003\u0002\u0002\u0002\u0757\u0758\u0007.\u0002\u0002\u0758\u075d",
  "\u0007C\u0002\u0002\u0759\u075a\t\u0004\u0002\u0002\u075a\u075e\u0005",
  "\u0320\u0191\u0002\u075b\u075c\u0007'\u0002\u0002\u075c\u075e\u0005",
  "\u0278\u013d\u0002\u075d\u0759\u0003\u0002\u0002\u0002\u075d\u075b\u0003",
  "\u0002\u0002\u0002\u075e\u0791\u0003\u0002\u0002\u0002\u075f\u0760\u0007",
  ".\u0002\u0002\u0760\u0761\u0007'\u0002\u0002\u0761\u0764\u0007\u0092",
  "\u0002\u0002\u0762\u0763\t\t\u0002\u0002\u0763\u0765\u0005\u0320\u0191",
  "\u0002\u0764\u0762\u0003\u0002\u0002\u0002\u0764\u0765\u0003\u0002\u0002",
  "\u0002\u0765\u0766\u0003\u0002\u0002\u0002\u0766\u0767\u0007\n\u0002",
  "\u0002\u0767\u0769\u0005\u012c\u0097\u0002\u0768\u076a\u0005\u0312\u018a",
  "\u0002\u0769\u0768\u0003\u0002\u0002\u0002\u0769\u076a\u0003\u0002\u0002",
  "\u0002\u076a\u0791\u0003\u0002\u0002\u0002\u076b\u076c\u0007.\u0002",
  "\u0002\u076c\u076d\u0007\u009f\u0002\u0002\u076d\u0771\u0005\u0278\u013d",
  "\u0002\u076e\u076f\u0007\u0162\u0002\u0002\u076f\u0770\u0007\u017c\u0002",
  "\u0002\u0770\u0772\u0007\u0163\u0002\u0002\u0771\u076e\u0003\u0002\u0002",
  "\u0002\u0771\u0772\u0003\u0002\u0002\u0002\u0772\u0791\u0003\u0002\u0002",
  "\u0002\u0773\u0774\u0007.\u0002\u0002\u0774\u0780\u0007\u00c1\u0002",
  "\u0002\u0775\u0776\t\u0004\u0002\u0002\u0776\u0778\u0005\u0320\u0191",
  "\u0002\u0777\u0779\u0007\u0092\u0002\u0002\u0778\u0777\u0003\u0002\u0002",
  "\u0002\u0778\u0779\u0003\u0002\u0002\u0002\u0779\u0781\u0003\u0002\u0002",
  "\u0002\u077a\u077c\u0005\u00c8e\u0002\u077b\u077a\u0003\u0002\u0002",
  "\u0002\u077b\u077c\u0003\u0002\u0002\u0002\u077c\u077e\u0003\u0002\u0002",
  "\u0002\u077d\u077f\u0007\u0092\u0002\u0002\u077e\u077d\u0003\u0002\u0002",
  "\u0002\u077e\u077f\u0003\u0002\u0002\u0002\u077f\u0781\u0003\u0002\u0002",
  "\u0002\u0780\u0775\u0003\u0002\u0002\u0002\u0780\u077b\u0003\u0002\u0002",
  "\u0002\u0781\u0791\u0003\u0002\u0002\u0002\u0782\u0783\u0007.\u0002",
  "\u0002\u0783\u0791\u0007\u0104\u0002\u0002\u0784\u0785\u0007.\u0002",
  "\u0002\u0785\u0791\u0007\u0105\u0002\u0002\u0786\u0787\u0007.\u0002",
  "\u0002\u0787\u0788\u0007\u0109\u0002\u0002\u0788\u0791\u0007\u017c\u0002",
  "\u0002\u0789\u078a\u0007.\u0002\u0002\u078a\u078e\u0007\u013b\u0002",
  "\u0002\u078b\u078c\u0007\u013c\u0002\u0002\u078c\u078f\u0005\u0320\u0191",
  "\u0002\u078d\u078f\u0007\u013e\u0002\u0002\u078e\u078b\u0003\u0002\u0002",
  "\u0002\u078e\u078d\u0003\u0002\u0002\u0002\u078f\u0791\u0003\u0002\u0002",
  "\u0002\u0790\u0715\u0003\u0002\u0002\u0002\u0790\u071b\u0003\u0002\u0002",
  "\u0002\u0790\u0726\u0003\u0002\u0002\u0002\u0790\u0731\u0003\u0002\u0002",
  "\u0002\u0790\u073d\u0003\u0002\u0002\u0002\u0790\u074a\u0003\u0002\u0002",
  "\u0002\u0790\u0751\u0003\u0002\u0002\u0002\u0790\u0757\u0003\u0002\u0002",
  "\u0002\u0790\u075f\u0003\u0002\u0002\u0002\u0790\u076b\u0003\u0002\u0002",
  "\u0002\u0790\u0773\u0003\u0002\u0002\u0002\u0790\u0782\u0003\u0002\u0002",
  "\u0002\u0790\u0784\u0003\u0002\u0002\u0002\u0790\u0786\u0003\u0002\u0002",
  "\u0002\u0790\u0789\u0003\u0002\u0002\u0002\u0791\u00d1\u0003\u0002\u0002",
  "\u0002\u0792\u0793\u0007\u00c0\u0002\u0002\u0793\u0794\u0007'\u0002",
  "\u0002\u0794\u0796\u0005\u0278\u013d\u0002\u0795\u0797\u0005\u0312\u018a",
  "\u0002\u0796\u0795\u0003\u0002\u0002\u0002\u0796\u0797\u0003\u0002\u0002",
  "\u0002\u0797\u0798\u0003\u0002\u0002\u0002\u0798\u0799\u0005\u00d6l",
  "\u0002\u0799\u00d3\u0003\u0002\u0002\u0002\u079a\u079b\u0007\u00c0\u0002",
  "\u0002\u079b\u079c\t\u0004\u0002\u0002\u079c\u079d\u0005\u0320\u0191",
  "\u0002\u079d\u079e\u0005\u00d6l\u0002\u079e\u00d5\u0003\u0002\u0002",
  "\u0002\u079f\u07a0\t\n\u0002\u0002\u07a0\u00d7\u0003\u0002\u0002\u0002",
  "\u07a1\u07a2\u0007\u00c2\u0002\u0002\u07a2\u07a3\u0007'\u0002\u0002",
  "\u07a3\u07a5\u0005\u0278\u013d\u0002\u07a4\u07a6\u0005\u0312\u018a\u0002",
  "\u07a5\u07a4\u0003\u0002\u0002\u0002\u07a5\u07a6\u0003\u0002\u0002\u0002",
  "\u07a6\u00d9\u0003\u0002\u0002\u0002\u07a7\u07a8\u0007\u00c2\u0002\u0002",
  "\u07a8\u07a9\t\u0004\u0002\u0002\u07a9\u07aa\u0005\u0320\u0191\u0002",
  "\u07aa\u00db\u0003\u0002\u0002\u0002\u07ab\u07ac\u0007C\u0002\u0002",
  "\u07ac\u07ad\u0007\u00fa\u0002\u0002\u07ad\u07ae\u0005\u0320\u0191\u0002",
  "\u07ae\u00dd\u0003\u0002\u0002\u0002\u07af\u07b0\u0007K\u0002\u0002",
  "\u07b0\u07b1\u0007\u00fa\u0002\u0002\u07b1\u07b2\u0005\u0320\u0191\u0002",
  "\u07b2\u00df\u0003\u0002\u0002\u0002\u07b3\u07b4\u0007\u00bc\u0002\u0002",
  "\u07b4\u07b6\u0005\u00fc\u007f\u0002\u07b5\u07b7\u0005\u00f6|\u0002",
  "\u07b6\u07b5\u0003\u0002\u0002\u0002\u07b6\u07b7\u0003\u0002\u0002\u0002",
  "\u07b7\u07b8\u0003\u0002\u0002\u0002\u07b8\u07b9\u0007M\u0002\u0002",
  "\u07b9\u07bb\u0005\u0102\u0082\u0002\u07ba\u07bc\u0005\u0106\u0084\u0002",
  "\u07bb\u07ba\u0003\u0002\u0002\u0002\u07bb\u07bc\u0003\u0002\u0002\u0002",
  "\u07bc\u00e1\u0003\u0002\u0002\u0002\u07bd\u07bf\u0007\u00bd\u0002\u0002",
  "\u07be\u07c0\u0005\u0108\u0085\u0002\u07bf\u07be\u0003\u0002\u0002\u0002",
  "\u07bf\u07c0\u0003\u0002\u0002\u0002\u07c0\u07c1\u0003\u0002\u0002\u0002",
  "\u07c1\u07c3\u0005\u00fc\u007f\u0002\u07c2\u07c4\u0005\u00f6|\u0002",
  "\u07c3\u07c2\u0003\u0002\u0002\u0002\u07c3\u07c4\u0003\u0002\u0002\u0002",
  "\u07c4\u07c5\u0003\u0002\u0002\u0002\u07c5\u07c6\u0007\u0017\u0002\u0002",
  "\u07c6\u07c7\u0005\u0102\u0082\u0002\u07c7\u00e3\u0003\u0002\u0002\u0002",
  "\u07c8\u07ca\u0007\u00bc\u0002\u0002\u07c9\u07cb\u0007\u00fa\u0002\u0002",
  "\u07ca\u07c9\u0003\u0002\u0002\u0002\u07ca\u07cb\u0003\u0002\u0002\u0002",
  "\u07cb\u07cc\u0003\u0002\u0002\u0002\u07cc\u07d1\u0005\u0320\u0191\u0002",
  "\u07cd\u07ce\u0007\u0160\u0002\u0002\u07ce\u07d0\u0005\u0320\u0191\u0002",
  "\u07cf\u07cd\u0003\u0002\u0002\u0002\u07d0\u07d3\u0003\u0002\u0002\u0002",
  "\u07d1\u07cf\u0003\u0002\u0002\u0002\u07d1\u07d2\u0003\u0002\u0002\u0002",
  "\u07d2\u07d4\u0003\u0002\u0002\u0002\u07d3\u07d1\u0003\u0002\u0002\u0002",
  "\u07d4\u07d5\u0007M\u0002\u0002\u07d5\u07d7\u0005\u0102\u0082\u0002",
  "\u07d6\u07d8\u0005\u010c\u0087\u0002\u07d7\u07d6\u0003\u0002\u0002\u0002",
  "\u07d7\u07d8\u0003\u0002\u0002\u0002\u07d8\u00e5\u0003\u0002\u0002\u0002",
  "\u07d9\u07db\u0007\u00bd\u0002\u0002\u07da\u07dc\u0005\u010a\u0086\u0002",
  "\u07db\u07da\u0003\u0002\u0002\u0002\u07db\u07dc\u0003\u0002\u0002\u0002",
  "\u07dc\u07de\u0003\u0002\u0002\u0002\u07dd\u07df\u0007\u00fa\u0002\u0002",
  "\u07de\u07dd\u0003\u0002\u0002\u0002\u07de\u07df\u0003\u0002\u0002\u0002",
  "\u07df\u07e0\u0003\u0002\u0002\u0002\u07e0\u07e5\u0005\u0320\u0191\u0002",
  "\u07e1\u07e2\u0007\u0160\u0002\u0002\u07e2\u07e4\u0005\u0320\u0191\u0002",
  "\u07e3\u07e1\u0003\u0002\u0002\u0002\u07e4\u07e7\u0003\u0002\u0002\u0002",
  "\u07e5\u07e3\u0003\u0002\u0002\u0002\u07e5\u07e6\u0003\u0002\u0002\u0002",
  "\u07e6\u07e8\u0003\u0002\u0002\u0002\u07e7\u07e5\u0003\u0002\u0002\u0002",
  "\u07e8\u07e9\u0007\u0017\u0002\u0002\u07e9\u07ea\u0005\u0102\u0082\u0002",
  "\u07ea\u00e7\u0003\u0002\u0002\u0002\u07eb\u07ec\u0007.\u0002\u0002",
  "\u07ec\u07ed\u0007\u00fa\u0002\u0002\u07ed\u07ee\u0007\u00bc\u0002\u0002",
  "\u07ee\u07ef\u0005\u0104\u0083\u0002\u07ef\u00e9\u0003\u0002\u0002\u0002",
  "\u07f0\u07f1\u0007.\u0002\u0002\u07f1\u07f2\u0007\u00fb\u0002\u0002",
  "\u07f2\u00eb\u0003\u0002\u0002\u0002\u07f3\u07f4\u0007.\u0002\u0002",
  "\u07f4\u07f5\u0007\u00ef\u0002\u0002\u07f5\u07f6\u0007\u00fb\u0002\u0002",
  "\u07f6\u00ed\u0003\u0002\u0002\u0002\u07f7\u07f8\u0007\u009d\u0002\u0002",
  "\u07f8\u07fc\u0007\u00fa\u0002\u0002\u07f9\u07fd\u0007\u0005\u0002\u0002",
  "\u07fa\u07fd\u0007\u0006\u0002\u0002\u07fb\u07fd\u0005\u0320\u0191\u0002",
  "\u07fc\u07f9\u0003\u0002\u0002\u0002\u07fc\u07fa\u0003\u0002\u0002\u0002",
  "\u07fc\u07fb\u0003\u0002\u0002\u0002\u07fd\u00ef\u0003\u0002\u0002\u0002",
  "\u07fe\u07ff\u0007.\u0002\u0002\u07ff\u0801\u0007\u00bc\u0002\u0002",
  "\u0800\u0802\u0005\u0104\u0083\u0002\u0801\u0800\u0003\u0002\u0002\u0002",
  "\u0801\u0802\u0003\u0002\u0002\u0002\u0802\u0805\u0003\u0002\u0002\u0002",
  "\u0803\u0804\u0007$\u0002\u0002\u0804\u0806\u0005\u00f4{\u0002\u0805",
  "\u0803\u0003\u0002\u0002\u0002\u0805\u0806\u0003\u0002\u0002\u0002\u0806",
  "\u00f1\u0003\u0002\u0002\u0002\u0807\u0808\u0007.\u0002\u0002\u0808",
  "\u0809\u0007\u0102\u0002\u0002\u0809\u080a\u0005\u0320\u0191\u0002\u080a",
  "\u00f3\u0003\u0002\u0002\u0002\u080b\u080e\u0007\u0005\u0002\u0002\u080c",
  "\u080e\u0005\u00fa~\u0002\u080d\u080b\u0003\u0002\u0002\u0002\u080d",
  "\u080c\u0003\u0002\u0002\u0002\u080e\u00f5\u0003\u0002\u0002\u0002\u080f",
  "\u0810\u0007$\u0002\u0002\u0810\u0811\u0005\u00f8}\u0002\u0811\u00f7",
  "\u0003\u0002\u0002\u0002\u0812\u0813\t\u0004\u0002\u0002\u0813\u0820",
  "\u0005\u0320\u0191\u0002\u0814\u0816\u0007'\u0002\u0002\u0815\u0814",
  "\u0003\u0002\u0002\u0002\u0815\u0816\u0003\u0002\u0002\u0002\u0816\u0817",
  "\u0003\u0002\u0002\u0002\u0817\u0819\u0005\u0278\u013d\u0002\u0818\u081a",
  "\u0005\u0312\u018a\u0002\u0819\u0818\u0003\u0002\u0002\u0002\u0819\u081a",
  "\u0003\u0002\u0002\u0002\u081a\u0820\u0003\u0002\u0002\u0002\u081b\u081c",
  "\u0007\u00fe\u0002\u0002\u081c\u0820\u0007\u017c\u0002\u0002\u081d\u081e",
  "\u0007\u00ff\u0002\u0002\u081e\u0820\u0005\u0320\u0191\u0002\u081f\u0812",
  "\u0003\u0002\u0002\u0002\u081f\u0815\u0003\u0002\u0002\u0002\u081f\u081b",
  "\u0003\u0002\u0002\u0002\u081f\u081d\u0003\u0002\u0002\u0002\u0820\u00f9",
  "\u0003\u0002\u0002\u0002\u0821\u0822\t\u0004\u0002\u0002\u0822\u0835",
  "\u0005\u0320\u0191\u0002\u0823\u0825\u0007'\u0002\u0002\u0824\u0823",
  "\u0003\u0002\u0002\u0002\u0824\u0825\u0003\u0002\u0002\u0002\u0825\u0826",
  "\u0003\u0002\u0002\u0002\u0826\u082b\u0005\u0278\u013d\u0002\u0827\u0828",
  "\u0007\u0162\u0002\u0002\u0828\u0829\u0005\u0176\u00bc\u0002\u0829\u082a",
  "\u0007\u0163\u0002\u0002\u082a\u082c\u0003\u0002\u0002\u0002\u082b\u0827",
  "\u0003\u0002\u0002\u0002\u082b\u082c\u0003\u0002\u0002\u0002\u082c\u082e",
  "\u0003\u0002\u0002\u0002\u082d\u082f\u0005\u0312\u018a\u0002\u082e\u082d",
  "\u0003\u0002\u0002\u0002\u082e\u082f\u0003\u0002\u0002\u0002\u082f\u0835",
  "\u0003\u0002\u0002\u0002\u0830\u0831\u0007\u00fe\u0002\u0002\u0831\u0835",
  "\u0007\u017c\u0002\u0002\u0832\u0833\u0007\u00ff\u0002\u0002\u0833\u0835",
  "\u0005\u0320\u0191\u0002\u0834\u0821\u0003\u0002\u0002\u0002\u0834\u0824",
  "\u0003\u0002\u0002\u0002\u0834\u0830\u0003\u0002\u0002\u0002\u0834\u0832",
  "\u0003\u0002\u0002\u0002\u0835\u00fb\u0003\u0002\u0002\u0002\u0836\u083b",
  "\u0005\u00fe\u0080\u0002\u0837\u0838\u0007\u0160\u0002\u0002\u0838\u083a",
  "\u0005\u00fe\u0080\u0002\u0839\u0837\u0003\u0002\u0002\u0002\u083a\u083d",
  "\u0003\u0002\u0002\u0002\u083b\u0839\u0003\u0002\u0002\u0002\u083b\u083c",
  "\u0003\u0002\u0002\u0002\u083c\u00fd\u0003\u0002\u0002\u0002\u083d\u083b",
  "\u0003\u0002\u0002\u0002\u083e\u0843\u0005\u0100\u0081\u0002\u083f\u0840",
  "\u0007\u0162\u0002\u0002\u0840\u0841\u0005\u0176\u00bc\u0002\u0841\u0842",
  "\u0007\u0163\u0002\u0002\u0842\u0844\u0003\u0002\u0002\u0002\u0843\u083f",
  "\u0003\u0002\u0002\u0002\u0843\u0844\u0003\u0002\u0002\u0002\u0844\u00ff",
  "\u0003\u0002\u0002\u0002\u0845\u0846\t\u000b\u0002\u0002\u0846\u0101",
  "\u0003\u0002\u0002\u0002\u0847\u084c\u0005\u0104\u0083\u0002\u0848\u0849",
  "\u0007\u0160\u0002\u0002\u0849\u084b\u0005\u0104\u0083\u0002\u084a\u0848",
  "\u0003\u0002\u0002\u0002\u084b\u084e\u0003\u0002\u0002\u0002\u084c\u084a",
  "\u0003\u0002\u0002\u0002\u084c\u084d\u0003\u0002\u0002\u0002\u084d\u0103",
  "\u0003\u0002\u0002\u0002\u084e\u084c\u0003\u0002\u0002\u0002\u084f\u0850",
  "\u0007\u00f9\u0002\u0002\u0850\u0856\u0005\u0324\u0193\u0002\u0851\u0852",
  "\u0007\u0013\u0002\u0002\u0852\u0856\u0005\u0324\u0193\u0002\u0853\u0854",
  "\u0007\u00fa\u0002\u0002\u0854\u0856\u0005\u0320\u0191\u0002\u0855\u084f",
  "\u0003\u0002\u0002\u0002\u0855\u0851\u0003\u0002\u0002\u0002\u0855\u0853",
  "\u0003\u0002\u0002\u0002\u0856\u0105\u0003\u0002\u0002\u0002\u0857\u0858",
  "\u0007\u0097\u0002\u0002\u0858\u0859\u0007\u00bc\u0002\u0002\u0859\u085a",
  "\u0007\u00e0\u0002\u0002\u085a\u0107\u0003\u0002\u0002\u0002\u085b\u085c",
  "\u0007\u00bc\u0002\u0002\u085c\u085d\u0007\u00e0\u0002\u0002\u085d\u085e",
  "\u0007\u00ea\u0002\u0002\u085e\u0109\u0003\u0002\u0002\u0002\u085f\u0860",
  "\u0007\u0100\u0002\u0002\u0860\u0861\u0007\u00e0\u0002\u0002\u0861\u0862",
  "\u0007\u00ea\u0002\u0002\u0862\u010b\u0003\u0002\u0002\u0002\u0863\u0864",
  "\u0007\u0097\u0002\u0002\u0864\u0865\u0007\u0100\u0002\u0002\u0865\u0866",
  "\u0007\u00e0\u0002\u0002\u0866\u010d\u0003\u0002\u0002\u0002\u0867\u0869",
  "\u0007/\u0002\u0002\u0868\u086a\u00070\u0002\u0002\u0869\u0868\u0003",
  "\u0002\u0002\u0002\u0869\u086a\u0003\u0002\u0002\u0002\u086a\u0874\u0003",
  "\u0002\u0002\u0002\u086b\u086c\u0007'\u0002\u0002\u086c\u086f\u0005",
  "\u0278\u013d\u0002\u086d\u086e\t\f\u0002\u0002\u086e\u0870\u0007&\u0002",
  "\u0002\u086f\u086d\u0003\u0002\u0002\u0002\u086f\u0870\u0003\u0002\u0002",
  "\u0002\u0870\u0875\u0003\u0002\u0002\u0002\u0871\u0873\u0005\u0312\u018a",
  "\u0002\u0872\u0871\u0003\u0002\u0002\u0002\u0872\u0873\u0003\u0002\u0002",
  "\u0002\u0873\u0875\u0003\u0002\u0002\u0002\u0874\u086b\u0003\u0002\u0002",
  "\u0002\u0874\u0872\u0003\u0002\u0002\u0002\u0875\u010f\u0003\u0002\u0002",
  "\u0002\u0876\u087b\u0005\u0112\u008a\u0002\u0877\u0878\u0007\u0160\u0002",
  "\u0002\u0878\u087a\u0005\u0112\u008a\u0002\u0879\u0877\u0003\u0002\u0002",
  "\u0002\u087a\u087d\u0003\u0002\u0002\u0002\u087b\u0879\u0003\u0002\u0002",
  "\u0002\u087b\u087c\u0003\u0002\u0002\u0002\u087c\u0111\u0003\u0002\u0002",
  "\u0002\u087d\u087b\u0003\u0002\u0002\u0002\u087e\u087f\u0005\u0114\u008b",
  "\u0002\u087f\u0880\u0007\u017c\u0002\u0002\u0880\u0113\u0003\u0002\u0002",
  "\u0002\u0881\u0882\t\r\u0002\u0002\u0882\u0115\u0003\u0002\u0002\u0002",
  "\u0883\u0885\u0007C\u0002\u0002\u0884\u0886\u0007\u008c\u0002\u0002",
  "\u0885\u0884\u0003\u0002\u0002\u0002\u0885\u0886\u0003\u0002\u0002\u0002",
  "\u0886\u0887\u0003\u0002\u0002\u0002\u0887\u0888\u0007\u008d\u0002\u0002",
  "\u0888\u0889\u0005\u0322\u0192\u0002\u0889\u088a\u0007\u0018\u0002\u0002",
  "\u088a\u088d\u0007\u017c\u0002\u0002\u088b\u088c\u00074\u0002\u0002",
  "\u088c\u088e\u0005\u0110\u0089\u0002\u088d\u088b\u0003\u0002\u0002\u0002",
  "\u088d\u088e\u0003\u0002\u0002\u0002\u088e\u0117\u0003\u0002\u0002\u0002",
  "\u088f\u0891\u0007K\u0002\u0002\u0890\u0892\u0007\u008c\u0002\u0002",
  "\u0891\u0890\u0003\u0002\u0002\u0002\u0891\u0892\u0003\u0002\u0002\u0002",
  "\u0892\u0893\u0003\u0002\u0002\u0002\u0893\u0895\u0007\u008d\u0002\u0002",
  "\u0894\u0896\u0005(\u0015\u0002\u0895\u0894\u0003\u0002\u0002\u0002",
  "\u0895\u0896\u0003\u0002\u0002\u0002\u0896\u0897\u0003\u0002\u0002\u0002",
  "\u0897\u0898\u0005\u0322\u0192\u0002\u0898\u0119\u0003\u0002\u0002\u0002",
  "\u0899\u089a\u0007\u010b\u0002\u0002\u089a\u089b\u0007\u008d\u0002\u0002",
  "\u089b\u011b\u0003\u0002\u0002\u0002\u089c\u089d\u0007C\u0002\u0002",
  "\u089d\u089e\u0007\u008c\u0002\u0002\u089e\u089f\u0007\u008e\u0002\u0002",
  "\u089f\u08a0\u0007\u0182\u0002\u0002\u08a0\u08a2\u0007\u0162\u0002\u0002",
  "\u08a1\u08a3\u0005\u0170\u00b9\u0002\u08a2\u08a1\u0003\u0002\u0002\u0002",
  "\u08a2\u08a3\u0003\u0002\u0002\u0002\u08a3\u08a4\u0003\u0002\u0002\u0002",
  "\u08a4\u08a5\u0007\u0163\u0002\u0002\u08a5\u08a6\u0005\u0300\u0181\u0002",
  "\u08a6\u011d\u0003\u0002\u0002\u0002\u08a7\u08a8\u0007K\u0002\u0002",
  "\u08a8\u08a9\u0007\u008c\u0002\u0002\u08a9\u08ab\u0007\u008e\u0002\u0002",
  "\u08aa\u08ac\u0005(\u0015\u0002\u08ab\u08aa\u0003\u0002\u0002\u0002",
  "\u08ab\u08ac\u0003\u0002\u0002\u0002\u08ac\u08ad\u0003\u0002\u0002\u0002",
  "\u08ad\u08ae\u0007\u0182\u0002\u0002\u08ae\u011f\u0003\u0002\u0002\u0002",
  "\u08af\u08b1\u0007C\u0002\u0002\u08b0\u08b2\u00054\u001b\u0002\u08b1",
  "\u08b0\u0003\u0002\u0002\u0002\u08b1\u08b2\u0003\u0002\u0002\u0002\u08b2",
  "\u08b3\u0003\u0002\u0002\u0002\u08b3\u08b5\u0007\u00b4\u0002\u0002\u08b4",
  "\u08b6\u0005,\u0017\u0002\u08b5\u08b4\u0003\u0002\u0002\u0002\u08b5",
  "\u08b6\u0003\u0002\u0002\u0002\u08b6\u08b7\u0003\u0002\u0002\u0002\u08b7",
  "\u08bc\u0005\u0278\u013d\u0002\u08b8\u08b9\u0007\u0162\u0002\u0002\u08b9",
  "\u08ba\u0005\u01aa\u00d6\u0002\u08ba\u08bb\u0007\u0163\u0002\u0002\u08bb",
  "\u08bd\u0003\u0002\u0002\u0002\u08bc\u08b8\u0003\u0002\u0002\u0002\u08bc",
  "\u08bd\u0003\u0002\u0002\u0002\u08bd\u08bf\u0003\u0002\u0002\u0002\u08be",
  "\u08c0\u0005\u012e\u0098\u0002\u08bf\u08be\u0003\u0002\u0002\u0002\u08bf",
  "\u08c0\u0003\u0002\u0002\u0002\u08c0\u08c2\u0003\u0002\u0002\u0002\u08c1",
  "\u08c3\u0005\u0124\u0093\u0002\u08c2\u08c1\u0003\u0002\u0002\u0002\u08c2",
  "\u08c3\u0003\u0002\u0002\u0002\u08c3\u08c5\u0003\u0002\u0002\u0002\u08c4",
  "\u08c6\u0005\u0148\u00a5\u0002\u08c5\u08c4\u0003\u0002\u0002\u0002\u08c5",
  "\u08c6\u0003\u0002\u0002\u0002\u08c6\u08c7\u0003\u0002\u0002\u0002\u08c7",
  "\u08c8\u0007\u0018\u0002\u0002\u08c8\u08c9\u0005\u01fe\u0100\u0002\u08c9",
  "\u0121\u0003\u0002\u0002\u0002\u08ca\u08cb\u0007C\u0002\u0002\u08cb",
  "\u08cc\u0007\u00b9\u0002\u0002\u08cc\u08ce\u0007\u00b4\u0002\u0002\u08cd",
  "\u08cf\u0005,\u0017\u0002\u08ce\u08cd\u0003\u0002\u0002\u0002\u08ce",
  "\u08cf\u0003\u0002\u0002\u0002\u08cf\u08d0\u0003\u0002\u0002\u0002\u08d0",
  "\u08d2\u0005\u0278\u013d\u0002\u08d1\u08d3\u00050\u0019\u0002\u08d2",
  "\u08d1\u0003\u0002\u0002\u0002\u08d2\u08d3\u0003\u0002\u0002\u0002\u08d3",
  "\u08d5\u0003\u0002\u0002\u0002\u08d4\u08d6\u0005\u012e\u0098\u0002\u08d5",
  "\u08d4\u0003\u0002\u0002\u0002\u08d5\u08d6\u0003\u0002\u0002\u0002\u08d6",
  "\u08d8\u0003\u0002\u0002\u0002\u08d7\u08d9\u0005\u0144\u00a3\u0002\u08d8",
  "\u08d7\u0003\u0002\u0002\u0002\u08d8\u08d9\u0003\u0002\u0002\u0002\u08d9",
  "\u08db\u0003\u0002\u0002\u0002\u08da\u08dc\u0005\u0160\u00b1\u0002\u08db",
  "\u08da\u0003\u0002\u0002\u0002\u08db\u08dc\u0003\u0002\u0002\u0002\u08dc",
  "\u08de\u0003\u0002\u0002\u0002\u08dd\u08df\u0005\u016e\u00b8\u0002\u08de",
  "\u08dd\u0003\u0002\u0002\u0002\u08de\u08df\u0003\u0002\u0002\u0002\u08df",
  "\u08e1\u0003\u0002\u0002\u0002\u08e0\u08e2\u0005\u0148\u00a5\u0002\u08e1",
  "\u08e0\u0003\u0002\u0002\u0002\u08e1\u08e2\u0003\u0002\u0002\u0002\u08e2",
  "\u08e3\u0003\u0002\u0002\u0002\u08e3\u08e4\u0007\u0018\u0002\u0002\u08e4",
  "\u08e5\u0005\u01fe\u0100\u0002\u08e5\u0123\u0003\u0002\u0002\u0002\u08e6",
  "\u08e7\u0007g\u0002\u0002\u08e7\u08e8\u0007$\u0002\u0002\u08e8\u08e9",
  "\u0007\u0162\u0002\u0002\u08e9\u08ea\u0005\u0176\u00bc\u0002\u08ea\u08eb",
  "\u0007\u0163\u0002\u0002\u08eb\u0125\u0003\u0002\u0002\u0002\u08ec\u08ed",
  "\u0007K\u0002\u0002\u08ed\u08ef\u0007\u00b4\u0002\u0002\u08ee\u08f0",
  "\u0005(\u0015\u0002\u08ef\u08ee\u0003\u0002\u0002\u0002\u08ef\u08f0",
  "\u0003\u0002\u0002\u0002\u08f0\u08f1\u0003\u0002\u0002\u0002\u08f1\u08f2",
  "\u0005\u027a\u013e\u0002\u08f2\u0127\u0003\u0002\u0002\u0002\u08f3\u08f4",
  "\u0007K\u0002\u0002\u08f4\u08f5\u0007\u00b9\u0002\u0002\u08f5\u08f7",
  "\u0007\u00b4\u0002\u0002\u08f6\u08f8\u0005(\u0015\u0002\u08f7\u08f6",
  "\u0003\u0002\u0002\u0002\u08f7\u08f8\u0003\u0002\u0002\u0002\u08f8\u08f9",
  "\u0003\u0002\u0002\u0002\u08f9\u08fa\u0005\u027a\u013e\u0002\u08fa\u0129",
  "\u0003\u0002\u0002\u0002\u08fb\u08fe\u0005\u0322\u0192\u0002\u08fc\u08fe",
  "\u0007\u017c\u0002\u0002\u08fd\u08fb\u0003\u0002\u0002\u0002\u08fd\u08fc",
  "\u0003\u0002\u0002\u0002\u08fe\u012b\u0003\u0002\u0002\u0002\u08ff\u0902",
  "\u0005\u0320\u0191\u0002\u0900\u0902\u0007\u017c\u0002\u0002\u0901\u08ff",
  "\u0003\u0002\u0002\u0002\u0901\u0900\u0003\u0002\u0002\u0002\u0902\u012d",
  "\u0003\u0002\u0002\u0002\u0903\u0904\u0007N\u0002\u0002\u0904\u0905",
  "\u0007\u017c\u0002\u0002\u0905\u012f\u0003\u0002\u0002\u0002\u0906\u0907",
  "\u00074\u0002\u0002\u0907\u0908\u0005\u0132\u009a\u0002\u0908\u0131",
  "\u0003\u0002\u0002\u0002\u0909\u090a\t\u000e\u0002\u0002\u090a\u0133",
  "\u0003\u0002\u0002\u0002\u090b\u090c\u0007g\u0002\u0002\u090c\u090d",
  "\u0007\u0014\u0002\u0002\u090d\u090e\u0007\u0162\u0002\u0002\u090e\u0913",
  "\u0005\u01be\u00e0\u0002\u090f\u0910\u0007\u0160\u0002\u0002\u0910\u0912",
  "\u0005\u01be\u00e0\u0002\u0911\u090f\u0003\u0002\u0002\u0002\u0912\u0915",
  "\u0003\u0002\u0002\u0002\u0913\u0911\u0003\u0002\u0002\u0002\u0913\u0914",
  "\u0003\u0002\u0002\u0002\u0914\u0916\u0003\u0002\u0002\u0002\u0915\u0913",
  "\u0003\u0002\u0002\u0002\u0916\u0917\u0007\u0163\u0002\u0002\u0917\u0135",
  "\u0003\u0002\u0002\u0002\u0918\u0919\u0007h\u0002\u0002\u0919\u091a",
  "\u0007\u0014\u0002\u0002\u091a\u091b\u0007\u0162\u0002\u0002\u091b\u091c",
  "\u0005\u0176\u00bc\u0002\u091c\u0923\u0007\u0163\u0002\u0002\u091d\u091e",
  "\u0007i\u0002\u0002\u091e\u091f\u0007\u0014\u0002\u0002\u091f\u0920",
  "\u0007\u0162\u0002\u0002\u0920\u0921\u0005\u017c\u00bf\u0002\u0921\u0922",
  "\u0007\u0163\u0002\u0002\u0922\u0924\u0003\u0002\u0002\u0002\u0923\u091d",
  "\u0003\u0002\u0002\u0002\u0923\u0924\u0003\u0002\u0002\u0002\u0924\u0925",
  "\u0003\u0002\u0002\u0002\u0925\u0926\u0007j\u0002\u0002\u0926\u0927",
  "\u0007\u0181\u0002\u0002\u0927\u0928\u0007k\u0002\u0002\u0928\u0137",
  "\u0003\u0002\u0002\u0002\u0929\u092a\u0007\u00e6\u0002\u0002\u092a\u092b",
  "\u0007\u0014\u0002\u0002\u092b\u092c\u0007\u0162\u0002\u0002\u092c\u092d",
  "\u0005\u0176\u00bc\u0002\u092d\u092e\u0007\u0163\u0002\u0002\u092e\u092f",
  "\u0007$\u0002\u0002\u092f\u0930\u0007\u0162\u0002\u0002\u0930\u0931",
  "\u0005\u0198\u00cd\u0002\u0931\u0933\u0007\u0163\u0002\u0002\u0932\u0934",
  "\u00052\u001a\u0002\u0933\u0932\u0003\u0002\u0002\u0002\u0933\u0934",
  "\u0003\u0002\u0002\u0002\u0934\u0139\u0003\u0002\u0002\u0002\u0935\u0938",
  "\u0005\u0140\u00a1\u0002\u0936\u0938\u0005\u0142\u00a2\u0002\u0937\u0935",
  "\u0003\u0002\u0002\u0002\u0937\u0936\u0003\u0002\u0002\u0002\u0938\u013b",
  "\u0003\u0002\u0002\u0002\u0939\u093a\u0007\u00d5\u0002\u0002\u093a\u093b",
  "\u0007\u017c\u0002\u0002\u093b\u013d\u0003\u0002\u0002\u0002\u093c\u093d",
  "\u0007\u00d6\u0002\u0002\u093d\u093e\u0007\u017c\u0002\u0002\u093e\u013f",
  "\u0003\u0002\u0002\u0002\u093f\u0940\u0007l\u0002\u0002\u0940\u0941",
  "\u0007n\u0002\u0002\u0941\u0942\u0007\u0096\u0002\u0002\u0942\u0946",
  "\u0007\u017c\u0002\u0002\u0943\u0944\u0007\u0097\u0002\u0002\u0944\u0945",
  "\u0007\u0099\u0002\u0002\u0945\u0947\u0005\u014a\u00a6\u0002\u0946\u0943",
  "\u0003\u0002\u0002\u0002\u0946\u0947\u0003\u0002\u0002\u0002\u0947\u0141",
  "\u0003\u0002\u0002\u0002\u0948\u0949\u0007l\u0002\u0002\u0949\u094a",
  "\u0007n\u0002\u0002\u094a\u094c\u0007o\u0002\u0002\u094b\u094d\u0005",
  "\u0154\u00ab\u0002\u094c\u094b\u0003\u0002\u0002\u0002\u094c\u094d\u0003",
  "\u0002\u0002\u0002\u094d\u094f\u0003\u0002\u0002\u0002\u094e\u0950\u0005",
  "\u0158\u00ad\u0002\u094f\u094e\u0003\u0002\u0002\u0002\u094f\u0950\u0003",
  "\u0002\u0002\u0002\u0950\u0952\u0003\u0002\u0002\u0002\u0951\u0953\u0005",
  "\u015a\u00ae\u0002\u0952\u0951\u0003\u0002\u0002\u0002\u0952\u0953\u0003",
  "\u0002\u0002\u0002\u0953\u0955\u0003\u0002\u0002\u0002\u0954\u0956\u0005",
  "\u015c\u00af\u0002\u0955\u0954\u0003\u0002\u0002\u0002\u0955\u0956\u0003",
  "\u0002\u0002\u0002\u0956\u0958\u0003\u0002\u0002\u0002\u0957\u0959\u0005",
  "\u015e\u00b0\u0002\u0958\u0957\u0003\u0002\u0002\u0002\u0958\u0959\u0003",
  "\u0002\u0002\u0002\u0959\u0143\u0003\u0002\u0002\u0002\u095a\u095d\u0005",
  "\u0142\u00a2\u0002\u095b\u095d\u0005\u0140\u00a1\u0002\u095c\u095a\u0003",
  "\u0002\u0002\u0002\u095c\u095b\u0003\u0002\u0002\u0002\u095d\u0145\u0003",
  "\u0002\u0002\u0002\u095e\u095f\u0007\u00df\u0002\u0002\u095f\u0960\u0005",
  "\u014a\u00a6\u0002\u0960\u0147\u0003\u0002\u0002\u0002\u0961\u0962\u0007",
  "\u009f\u0002\u0002\u0962\u0963\u0005\u014a\u00a6\u0002\u0963\u0149\u0003",
  "\u0002\u0002\u0002\u0964\u0965\u0007\u0162\u0002\u0002\u0965\u0966\u0005",
  "\u014c\u00a7\u0002\u0966\u0967\u0007\u0163\u0002\u0002\u0967\u014b\u0003",
  "\u0002\u0002\u0002\u0968\u096d\u0005\u014e\u00a8\u0002\u0969\u096a\u0007",
  "\u0160\u0002\u0002\u096a\u096c\u0005\u014e\u00a8\u0002\u096b\u0969\u0003",
  "\u0002\u0002\u0002\u096c\u096f\u0003\u0002\u0002\u0002\u096d\u096b\u0003",
  "\u0002\u0002\u0002\u096d\u096e\u0003\u0002\u0002\u0002\u096e\u0979\u0003",
  "\u0002\u0002\u0002\u096f\u096d\u0003\u0002\u0002\u0002\u0970\u0975\u0005",
  "\u0152\u00aa\u0002\u0971\u0972\u0007\u0160\u0002\u0002\u0972\u0974\u0005",
  "\u0152\u00aa\u0002\u0973\u0971\u0003\u0002\u0002\u0002\u0974\u0977\u0003",
  "\u0002\u0002\u0002\u0975\u0973\u0003\u0002\u0002\u0002\u0975\u0976\u0003",
  "\u0002\u0002\u0002\u0976\u0979\u0003\u0002\u0002\u0002\u0977\u0975\u0003",
  "\u0002\u0002\u0002\u0978\u0968\u0003\u0002\u0002\u0002\u0978\u0970\u0003",
  "\u0002\u0002\u0002\u0979\u014d\u0003\u0002\u0002\u0002\u097a\u097c\u0005",
  "\u0152\u00aa\u0002\u097b\u097d\u0007\u0168\u0002\u0002\u097c\u097b\u0003",
  "\u0002\u0002\u0002\u097c\u097d\u0003\u0002\u0002\u0002\u097d\u097e\u0003",
  "\u0002\u0002\u0002\u097e\u097f\u0005\u0150\u00a9\u0002\u097f\u014f\u0003",
  "\u0002\u0002\u0002\u0980\u0984\u0007\u0181\u0002\u0002\u0981\u0984\u0005",
  "\u030c\u0187\u0002\u0982\u0984\u0007\u017c\u0002\u0002\u0983\u0980\u0003",
  "\u0002\u0002\u0002\u0983\u0981\u0003\u0002\u0002\u0002\u0983\u0982\u0003",
  "\u0002\u0002\u0002\u0984\u0151\u0003\u0002\u0002\u0002\u0985\u098a\u0005",
  "\u0320\u0191\u0002\u0986\u0987\u0007\u015e\u0002\u0002\u0987\u0989\u0005",
  "\u0320\u0191\u0002\u0988\u0986\u0003\u0002\u0002\u0002\u0989\u098c\u0003",
  "\u0002\u0002\u0002\u098a\u0988\u0003\u0002\u0002\u0002\u098a\u098b\u0003",
  "\u0002\u0002\u0002\u098b\u098f\u0003\u0002\u0002\u0002\u098c\u098a\u0003",
  "\u0002\u0002\u0002\u098d\u098f\u0007\u017c\u0002\u0002\u098e\u0985\u0003",
  "\u0002\u0002\u0002\u098e\u098d\u0003\u0002\u0002\u0002\u098f\u0153\u0003",
  "\u0002\u0002\u0002\u0990\u0991\u0007p\u0002\u0002\u0991\u0992\u0007",
  "q\u0002\u0002\u0992\u0993\u0007\u0014\u0002\u0002\u0993\u0995\u0007",
  "\u017c\u0002\u0002\u0994\u0996\u0005\u0156\u00ac\u0002\u0995\u0994\u0003",
  "\u0002\u0002\u0002\u0995\u0996\u0003\u0002\u0002\u0002\u0996\u0155\u0003",
  "\u0002\u0002\u0002\u0997\u0998\u0007r\u0002\u0002\u0998\u0999\u0007",
  "\u0014\u0002\u0002\u0999\u099a\u0007\u017c\u0002\u0002\u099a\u0157\u0003",
  "\u0002\u0002\u0002\u099b\u099c\u0007s\u0002\u0002\u099c\u099d\u0007",
  "t\u0002\u0002\u099d\u099e\u0007q\u0002\u0002\u099e\u099f\u0007\u0014",
  "\u0002\u0002\u099f\u09a0\u0007\u017c\u0002\u0002\u09a0\u0159\u0003\u0002",
  "\u0002\u0002\u09a1\u09a2\u0007d\u0002\u0002\u09a2\u09a3\u0007u\u0002",
  "\u0002\u09a3\u09a4\u0007q\u0002\u0002\u09a4\u09a5\u0007\u0014\u0002",
  "\u0002\u09a5\u09a6\u0007\u017c\u0002\u0002\u09a6\u015b\u0003\u0002\u0002",
  "\u0002\u09a7\u09a8\u0007x\u0002\u0002\u09a8\u09a9\u0007q\u0002\u0002",
  "\u09a9\u09aa\u0007\u0014\u0002\u0002\u09aa\u09ab\u0007\u017c\u0002\u0002",
  "\u09ab\u015d\u0003\u0002\u0002\u0002\u09ac\u09ad\u0007B\u0002\u0002",
  "\u09ad\u09ae\u0007\u00a3\u0002\u0002\u09ae\u09af\u0007\u0018\u0002\u0002",
  "\u09af\u09b0\u0007\u017c\u0002\u0002\u09b0\u015f\u0003\u0002\u0002\u0002",
  "\u09b1\u09b5\u0005\u0168\u00b5\u0002\u09b2\u09b5\u0005\u0162\u00b2\u0002",
  "\u09b3\u09b5\u0005\u0164\u00b3\u0002\u09b4\u09b1\u0003\u0002\u0002\u0002",
  "\u09b4\u09b2\u0003\u0002\u0002\u0002\u09b4\u09b3\u0003\u0002\u0002\u0002",
  "\u09b5\u0161\u0003\u0002\u0002\u0002\u09b6\u09b7\u0007y\u0002\u0002",
  "\u09b7\u09b8\u0007\u0014\u0002\u0002\u09b8\u09bc\u0007\u017c\u0002\u0002",
  "\u09b9\u09ba\u0007\u0097\u0002\u0002\u09ba\u09bb\u0007\u0099\u0002\u0002",
  "\u09bb\u09bd\u0005\u014a\u00a6\u0002\u09bc\u09b9\u0003\u0002\u0002\u0002",
  "\u09bc\u09bd\u0003\u0002\u0002\u0002\u09bd\u0163\u0003\u0002\u0002\u0002",
  "\u09be\u09bf\u0007y\u0002\u0002\u09bf\u09c0\u0007\u0018\u0002\u0002",
  "\u09c0\u09c1\u0005\u0166\u00b4\u0002\u09c1\u0165\u0003\u0002\u0002\u0002",
  "\u09c2\u09c3\t\u000f\u0002\u0002\u09c3\u0167\u0003\u0002\u0002\u0002",
  "\u09c4\u09c5\u0007y\u0002\u0002\u09c5\u09c6\u0007\u0018\u0002\u0002",
  "\u09c6\u09c7\u0005\u016a\u00b6\u0002\u09c7\u09cc\u0005\u016c\u00b7\u0002",
  "\u09c8\u09c9\u0007}\u0002\u0002\u09c9\u09ca\u0007\u017c\u0002\u0002",
  "\u09ca\u09cb\u0007~\u0002\u0002\u09cb\u09cd\u0007\u017c\u0002\u0002",
  "\u09cc\u09c8\u0003\u0002\u0002\u0002\u09cc\u09cd\u0003\u0002\u0002\u0002",
  "\u09cd\u0169\u0003\u0002\u0002\u0002\u09ce\u09cf\u0007{\u0002\u0002",
  "\u09cf\u09d0\u0007\u017c\u0002\u0002\u09d0\u016b\u0003\u0002\u0002\u0002",
  "\u09d1\u09d2\u0007|\u0002\u0002\u09d2\u09d3\u0007\u017c\u0002\u0002",
  "\u09d3\u016d\u0003\u0002\u0002\u0002\u09d4\u09d5\u0007\u0081\u0002\u0002",
  "\u09d5\u09d6\u0007\u017c\u0002\u0002\u09d6\u016f\u0003\u0002\u0002\u0002",
  "\u09d7\u09dc\u0005\u01b0\u00d9\u0002\u09d8\u09d9\u0007\u0160\u0002\u0002",
  "\u09d9\u09db\u0005\u01b0\u00d9\u0002\u09da\u09d8\u0003\u0002\u0002\u0002",
  "\u09db\u09de\u0003\u0002\u0002\u0002\u09dc\u09da\u0003\u0002\u0002\u0002",
  "\u09dc\u09dd\u0003\u0002\u0002\u0002\u09dd\u0171\u0003\u0002\u0002\u0002",
  "\u09de\u09dc\u0003\u0002\u0002\u0002\u09df\u09e4\u0005\u01b2\u00da\u0002",
  "\u09e0\u09e1\u0007\u0160\u0002\u0002\u09e1\u09e3\u0005\u01b2\u00da\u0002",
  "\u09e2\u09e0\u0003\u0002\u0002\u0002\u09e3\u09e6\u0003\u0002\u0002\u0002",
  "\u09e4\u09e2\u0003\u0002\u0002\u0002\u09e4\u09e5\u0003\u0002\u0002\u0002",
  "\u09e5\u0173\u0003\u0002\u0002\u0002\u09e6\u09e4\u0003\u0002\u0002\u0002",
  "\u09e7\u09ec\u0005\u01d6\u00ec\u0002\u09e8\u09e9\u0007\u0160\u0002\u0002",
  "\u09e9\u09eb\u0005\u01d6\u00ec\u0002\u09ea\u09e8\u0003\u0002\u0002\u0002",
  "\u09eb\u09ee\u0003\u0002\u0002\u0002\u09ec\u09ea\u0003\u0002\u0002\u0002",
  "\u09ec\u09ed\u0003\u0002\u0002\u0002\u09ed\u0175\u0003\u0002\u0002\u0002",
  "\u09ee\u09ec\u0003\u0002\u0002\u0002\u09ef\u09f4\u0005\u0178\u00bd\u0002",
  "\u09f0\u09f1\u0007\u0160\u0002\u0002\u09f1\u09f3\u0005\u0178\u00bd\u0002",
  "\u09f2\u09f0\u0003\u0002\u0002\u0002\u09f3\u09f6\u0003\u0002\u0002\u0002",
  "\u09f4\u09f2\u0003\u0002\u0002\u0002\u09f4\u09f5\u0003\u0002\u0002\u0002",
  "\u09f5\u0177\u0003\u0002\u0002\u0002\u09f6\u09f4\u0003\u0002\u0002\u0002",
  "\u09f7\u09f8\u0005\u0320\u0191\u0002\u09f8\u0179\u0003\u0002\u0002\u0002",
  "\u09f9\u0a03\u0005\u0320\u0191\u0002\u09fa\u09ff\u0007\u015e\u0002\u0002",
  "\u09fb\u0a00\u0007\u00a2\u0002\u0002\u09fc\u0a00\u0007v\u0002\u0002",
  "\u09fd\u0a00\u0007\u00a1\u0002\u0002\u09fe\u0a00\u0005\u0320\u0191\u0002",
  "\u09ff\u09fb\u0003\u0002\u0002\u0002\u09ff\u09fc\u0003\u0002\u0002\u0002",
  "\u09ff\u09fd\u0003\u0002\u0002\u0002\u09ff\u09fe\u0003\u0002\u0002\u0002",
  "\u0a00\u0a02\u0003\u0002\u0002\u0002\u0a01\u09fa\u0003\u0002\u0002\u0002",
  "\u0a02\u0a05\u0003\u0002\u0002\u0002\u0a03\u0a01\u0003\u0002\u0002\u0002",
  "\u0a03\u0a04\u0003\u0002\u0002\u0002\u0a04\u017b\u0003\u0002\u0002\u0002",
  "\u0a05\u0a03\u0003\u0002\u0002\u0002\u0a06\u0a0b\u0005\u01a8\u00d5\u0002",
  "\u0a07\u0a08\u0007\u0160\u0002\u0002\u0a08\u0a0a\u0005\u01a8\u00d5\u0002",
  "\u0a09\u0a07\u0003\u0002\u0002\u0002\u0a0a\u0a0d\u0003\u0002\u0002\u0002",
  "\u0a0b\u0a09\u0003\u0002\u0002\u0002\u0a0b\u0a0c\u0003\u0002\u0002\u0002",
  "\u0a0c\u017d\u0003\u0002\u0002\u0002\u0a0d\u0a0b\u0003\u0002\u0002\u0002",
  "\u0a0e\u0a0f\u0007\u0162\u0002\u0002\u0a0f\u0a10\u0005\u0176\u00bc\u0002",
  "\u0a10\u0a11\u0007\u0163\u0002\u0002\u0a11\u017f\u0003\u0002\u0002\u0002",
  "\u0a12\u0a14\u0005\u0182\u00c2\u0002\u0a13\u0a15\u0005\u0184\u00c3\u0002",
  "\u0a14\u0a13\u0003\u0002\u0002\u0002\u0a14\u0a15\u0003\u0002\u0002\u0002",
  "\u0a15\u0a18\u0003\u0002\u0002\u0002\u0a16\u0a18\u0005\u0186\u00c4\u0002",
  "\u0a17\u0a12\u0003\u0002\u0002\u0002\u0a17\u0a16\u0003\u0002\u0002\u0002",
  "\u0a18\u0181\u0003\u0002\u0002\u0002\u0a19\u0a1a\t\u0010\u0002\u0002",
  "\u0a1a\u0183\u0003\u0002\u0002\u0002\u0a1b\u0a1c\t\u0011\u0002\u0002",
  "\u0a1c\u0185\u0003\u0002\u0002\u0002\u0a1d\u0a21\u0007\u0126\u0002\u0002",
  "\u0a1e\u0a1f\u0007\t\u0002\u0002\u0a1f\u0a21\u0007\u0126\u0002\u0002",
  "\u0a20\u0a1d\u0003\u0002\u0002\u0002\u0a20\u0a1e\u0003\u0002\u0002\u0002",
  "\u0a21\u0187\u0003\u0002\u0002\u0002\u0a22\u0a27\u0007\u0129\u0002\u0002",
  "\u0a23\u0a25\u0007\u012a\u0002\u0002\u0a24\u0a23\u0003\u0002\u0002\u0002",
  "\u0a24\u0a25\u0003\u0002\u0002\u0002\u0a25\u0a27\u0003\u0002\u0002\u0002",
  "\u0a26\u0a22\u0003\u0002\u0002\u0002\u0a26\u0a24\u0003\u0002\u0002\u0002",
  "\u0a27\u0189\u0003\u0002\u0002\u0002\u0a28\u0a29\u0007\u0125\u0002\u0002",
  "\u0a29\u0a2b\u0005\u0320\u0191\u0002\u0a2a\u0a28\u0003\u0002\u0002\u0002",
  "\u0a2a\u0a2b\u0003\u0002\u0002\u0002\u0a2b\u0a2c\u0003\u0002\u0002\u0002",
  "\u0a2c\u0a2e\u0005\u018e\u00c8\u0002\u0a2d\u0a2f\u0005\u01d2\u00ea\u0002",
  "\u0a2e\u0a2d\u0003\u0002\u0002\u0002\u0a2e\u0a2f\u0003\u0002\u0002\u0002",
  "\u0a2f\u018b\u0003\u0002\u0002\u0002\u0a30\u0a31\u0007\u0125\u0002\u0002",
  "\u0a31\u0a32\u0005\u0320\u0191\u0002\u0a32\u0a34\u0005\u018e\u00c8\u0002",
  "\u0a33\u0a35\u0005\u01d4\u00eb\u0002\u0a34\u0a33\u0003\u0002\u0002\u0002",
  "\u0a34\u0a35\u0003\u0002\u0002\u0002\u0a35\u018d\u0003\u0002\u0002\u0002",
  "\u0a36\u0a39\u0005\u0190\u00c9\u0002\u0a37\u0a39\u0005\u0192\u00ca\u0002",
  "\u0a38\u0a36\u0003\u0002\u0002\u0002\u0a38\u0a37\u0003\u0002\u0002\u0002",
  "\u0a39\u018f\u0003\u0002\u0002\u0002\u0a3a\u0a3b\u0005\u01d0\u00e9\u0002",
  "\u0a3b\u0a3c\u0005\u017e\u00c0\u0002\u0a3c\u0191\u0003\u0002\u0002\u0002",
  "\u0a3d\u0a3e\u0007\u0141\u0002\u0002\u0a3e\u0a3f\u0005\u0300\u0181\u0002",
  "\u0a3f\u0193\u0003\u0002\u0002\u0002\u0a40\u0a41\u0007\u0125\u0002\u0002",
  "\u0a41\u0a43\u0005\u0320\u0191\u0002\u0a42\u0a40\u0003\u0002\u0002\u0002",
  "\u0a42\u0a43\u0003\u0002\u0002\u0002\u0a43\u0a44\u0003\u0002\u0002\u0002",
  "\u0a44\u0a45\u0007\u0123\u0002\u0002\u0a45\u0a46\u0007\u012c\u0002\u0002",
  "\u0a46\u0a47\u0005\u017e\u00c0\u0002\u0a47\u0a48\u0007\u0124\u0002\u0002",
  "\u0a48\u0a49\u0005\u0278\u013d\u0002\u0a49\u0a4b\u0005\u017e\u00c0\u0002",
  "\u0a4a\u0a4c\u0005\u01d2\u00ea\u0002\u0a4b\u0a4a\u0003\u0002\u0002\u0002",
  "\u0a4b\u0a4c\u0003\u0002\u0002\u0002\u0a4c\u0195\u0003\u0002\u0002\u0002",
  "\u0a4d\u0a4e\u0007\u0125\u0002\u0002\u0a4e\u0a4f\u0005\u0320\u0191\u0002",
  "\u0a4f\u0a50\u0007\u0123\u0002\u0002\u0a50\u0a51\u0007\u012c\u0002\u0002",
  "\u0a51\u0a52\u0005\u017e\u00c0\u0002\u0a52\u0a53\u0007\u0124\u0002\u0002",
  "\u0a53\u0a54\u0005\u0278\u013d\u0002\u0a54\u0a56\u0005\u017e\u00c0\u0002",
  "\u0a55\u0a57\u0005\u01d4\u00eb\u0002\u0a56\u0a55\u0003\u0002\u0002\u0002",
  "\u0a56\u0a57\u0003\u0002\u0002\u0002\u0a57\u0197\u0003\u0002\u0002\u0002",
  "\u0a58\u0a5b\u0005\u019e\u00d0\u0002\u0a59\u0a5b\u0005\u019a\u00ce\u0002",
  "\u0a5a\u0a58\u0003\u0002\u0002\u0002\u0a5a\u0a59\u0003\u0002\u0002\u0002",
  "\u0a5b\u0199\u0003\u0002\u0002\u0002\u0a5c\u0a61\u0005\u019c\u00cf\u0002",
  "\u0a5d\u0a5e\u0007\u0160\u0002\u0002\u0a5e\u0a60\u0005\u019c\u00cf\u0002",
  "\u0a5f\u0a5d\u0003\u0002\u0002\u0002\u0a60\u0a63\u0003\u0002\u0002\u0002",
  "\u0a61\u0a5f\u0003\u0002\u0002\u0002\u0a61\u0a62\u0003\u0002\u0002\u0002",
  "\u0a62\u019b\u0003\u0002\u0002\u0002\u0a63\u0a61\u0003\u0002\u0002\u0002",
  "\u0a64\u0a65\u0007\u0162\u0002\u0002\u0a65\u0a66\u0005\u019e\u00d0\u0002",
  "\u0a66\u0a67\u0007\u0163\u0002\u0002\u0a67\u019d\u0003\u0002\u0002\u0002",
  "\u0a68\u0a6d\u0005\u01a0\u00d1\u0002\u0a69\u0a6a\u0007\u0160\u0002\u0002",
  "\u0a6a\u0a6c\u0005\u01a0\u00d1\u0002\u0a6b\u0a69\u0003\u0002\u0002\u0002",
  "\u0a6c\u0a6f\u0003\u0002\u0002\u0002\u0a6d\u0a6b\u0003\u0002\u0002\u0002",
  "\u0a6d\u0a6e\u0003\u0002\u0002\u0002\u0a6e\u019f\u0003\u0002\u0002\u0002",
  "\u0a6f\u0a6d\u0003\u0002\u0002\u0002\u0a70\u0a71\u0005\u02cc\u0167\u0002",
  "\u0a71\u01a1\u0003\u0002\u0002\u0002\u0a72\u0a75\u0005\u01a0\u00d1\u0002",
  "\u0a73\u0a75\u0005\u019c\u00cf\u0002\u0a74\u0a72\u0003\u0002\u0002\u0002",
  "\u0a74\u0a73\u0003\u0002\u0002\u0002\u0a75\u01a3\u0003\u0002\u0002\u0002",
  "\u0a76\u0a77\t\u0012\u0002\u0002\u0a77\u01a5\u0003\u0002\u0002\u0002",
  "\u0a78\u0a79\u0007\u0010\u0002\u0002\u0a79\u0a7d\u0007H\u0002\u0002",
  "\u0a7a\u0a7b\u0007\u0010\u0002\u0002\u0a7b\u0a7d\u0007\u0011\u0002\u0002",
  "\u0a7c\u0a78\u0003\u0002\u0002\u0002\u0a7c\u0a7a\u0003\u0002\u0002\u0002",
  "\u0a7d\u01a7\u0003\u0002\u0002\u0002\u0a7e\u0a80\u0005\u0320\u0191\u0002",
  "\u0a7f\u0a81\u0005\u01a4\u00d3\u0002\u0a80\u0a7f\u0003\u0002\u0002\u0002",
  "\u0a80\u0a81\u0003\u0002\u0002\u0002\u0a81\u0a83\u0003\u0002\u0002\u0002",
  "\u0a82\u0a84\u0005\u01a6\u00d4\u0002\u0a83\u0a82\u0003\u0002\u0002\u0002",
  "\u0a83\u0a84\u0003\u0002\u0002\u0002\u0a84\u01a9\u0003\u0002\u0002\u0002",
  "\u0a85\u0a8a\u0005\u01ac\u00d7\u0002\u0a86\u0a87\u0007\u0160\u0002\u0002",
  "\u0a87\u0a89\u0005\u01ac\u00d7\u0002\u0a88\u0a86\u0003\u0002\u0002\u0002",
  "\u0a89\u0a8c\u0003\u0002\u0002\u0002\u0a8a\u0a88\u0003\u0002\u0002\u0002",
  "\u0a8a\u0a8b\u0003\u0002\u0002\u0002\u0a8b\u01ab\u0003\u0002\u0002\u0002",
  "\u0a8c\u0a8a\u0003\u0002\u0002\u0002\u0a8d\u0a90\u0005\u0320\u0191\u0002",
  "\u0a8e\u0a8f\u0007N\u0002\u0002\u0a8f\u0a91\u0007\u017c\u0002\u0002",
  "\u0a90\u0a8e\u0003\u0002\u0002\u0002\u0a90\u0a91\u0003\u0002\u0002\u0002",
  "\u0a91\u01ad\u0003\u0002\u0002\u0002\u0a92\u0a94\u0005\u0300\u0181\u0002",
  "\u0a93\u0a95\u0005\u01a4\u00d3\u0002\u0a94\u0a93\u0003\u0002\u0002\u0002",
  "\u0a94\u0a95\u0003\u0002\u0002\u0002\u0a95\u0a97\u0003\u0002\u0002\u0002",
  "\u0a96\u0a98\u0005\u01a6\u00d4\u0002\u0a97\u0a96\u0003\u0002\u0002\u0002",
  "\u0a97\u0a98\u0003\u0002\u0002\u0002\u0a98\u01af\u0003\u0002\u0002\u0002",
  "\u0a99\u0a9a\u0005\u0320\u0191\u0002\u0a9a\u0a9d\u0005\u01d8\u00ed\u0002",
  "\u0a9b\u0a9c\u0007N\u0002\u0002\u0a9c\u0a9e\u0007\u017c\u0002\u0002",
  "\u0a9d\u0a9b\u0003\u0002\u0002\u0002\u0a9d\u0a9e\u0003\u0002\u0002\u0002",
  "\u0a9e\u01b1\u0003\u0002\u0002\u0002\u0a9f\u0aa2\u0005\u01b4\u00db\u0002",
  "\u0aa0\u0aa2\u0005\u01b6\u00dc\u0002\u0aa1\u0a9f\u0003\u0002\u0002\u0002",
  "\u0aa1\u0aa0\u0003\u0002\u0002\u0002\u0aa2\u01b3\u0003\u0002\u0002\u0002",
  "\u0aa3\u0aa6\u0005\u0194\u00cb\u0002\u0aa4\u0aa6\u0005\u018a\u00c6\u0002",
  "\u0aa5\u0aa3\u0003\u0002\u0002\u0002\u0aa5\u0aa4\u0003\u0002\u0002\u0002",
  "\u0aa6\u01b5\u0003\u0002\u0002\u0002\u0aa7\u0aa8\u0005\u0320\u0191\u0002",
  "\u0aa8\u0aaa\u0005\u01d8\u00ed\u0002\u0aa9\u0aab\u0005\u01c0\u00e1\u0002",
  "\u0aaa\u0aa9\u0003\u0002\u0002\u0002\u0aaa\u0aab\u0003\u0002\u0002\u0002",
  "\u0aab\u0aae\u0003\u0002\u0002\u0002\u0aac\u0aad\u0007N\u0002\u0002",
  "\u0aad\u0aaf\u0007\u017c\u0002\u0002\u0aae\u0aac\u0003\u0002\u0002\u0002",
  "\u0aae\u0aaf\u0003\u0002\u0002\u0002\u0aaf\u01b7\u0003\u0002\u0002\u0002",
  "\u0ab0\u0ab3\u0007\u015a\u0002\u0002\u0ab1\u0ab4\u0005\u01ba\u00de\u0002",
  "\u0ab2\u0ab4\u0005\u01bc\u00df\u0002\u0ab3\u0ab1\u0003\u0002\u0002\u0002",
  "\u0ab3\u0ab2\u0003\u0002\u0002\u0002\u0ab4\u01b9\u0003\u0002\u0002\u0002",
  "\u0ab5\u0ab6\u0007\u015b\u0002\u0002\u0ab6\u0ab7\u0007\u0018\u0002\u0002",
  "\u0ab7\u0ab8\u0007\u0162\u0002\u0002\u0ab8\u0ab9\u0005\u0300\u0181\u0002",
  "\u0ab9\u0aba\u0007\u0163\u0002\u0002\u0aba\u01bb\u0003\u0002\u0002\u0002",
  "\u0abb\u0abf\u0007\u015b\u0002\u0002\u0abc\u0abd\u0007\u0014\u0002\u0002",
  "\u0abd\u0abf\u0007\u0140\u0002\u0002\u0abe\u0abb\u0003\u0002\u0002\u0002",
  "\u0abe\u0abc\u0003\u0002\u0002\u0002\u0abf\u0ac0\u0003\u0002\u0002\u0002",
  "\u0ac0\u0ac1\u0007\u0018\u0002\u0002\u0ac1\u0ace\u0007\u015c\u0002\u0002",
  "\u0ac2\u0ac6\u0007\u0162\u0002\u0002\u0ac3\u0ac4\u0007\u0116\u0002\u0002",
  "\u0ac4\u0ac5\u0007\u0097\u0002\u0002\u0ac5\u0ac7\u0007\u0181\u0002\u0002",
  "\u0ac6\u0ac3\u0003\u0002\u0002\u0002\u0ac6\u0ac7\u0003\u0002\u0002\u0002",
  "\u0ac7\u0acb\u0003\u0002\u0002\u0002\u0ac8\u0ac9\u0007\u015d\u0002\u0002",
  "\u0ac9\u0aca\u0007\u0014\u0002\u0002\u0aca\u0acc\u0007\u0181\u0002\u0002",
  "\u0acb\u0ac8\u0003\u0002\u0002\u0002\u0acb\u0acc\u0003\u0002\u0002\u0002",
  "\u0acc\u0acd\u0003\u0002\u0002\u0002\u0acd\u0acf\u0007\u0163\u0002\u0002",
  "\u0ace\u0ac2\u0003\u0002\u0002\u0002\u0ace\u0acf\u0003\u0002\u0002\u0002",
  "\u0acf\u01bd\u0003\u0002\u0002\u0002\u0ad0\u0ad2\u0005\u0320\u0191\u0002",
  "\u0ad1\u0ad3\u0005\u01d8\u00ed\u0002\u0ad2\u0ad1\u0003\u0002\u0002\u0002",
  "\u0ad2\u0ad3\u0003\u0002\u0002\u0002\u0ad3\u01bf\u0003\u0002\u0002\u0002",
  "\u0ad4\u0ad7\u0005\u01c2\u00e2\u0002\u0ad5\u0ad7\u0005\u01c4\u00e3\u0002",
  "\u0ad6\u0ad4\u0003\u0002\u0002\u0002\u0ad6\u0ad5\u0003\u0002\u0002\u0002",
  "\u0ad7\u01c1\u0003\u0002\u0002\u0002\u0ad8\u0ad9\u0007\u0125\u0002\u0002",
  "\u0ad9\u0adb\u0005\u0320\u0191\u0002\u0ada\u0ad8\u0003\u0002\u0002\u0002",
  "\u0ada\u0adb\u0003\u0002\u0002\u0002\u0adb\u0adc\u0003\u0002\u0002\u0002",
  "\u0adc\u0add\u0007\u0124\u0002\u0002\u0add\u0ade\u0005\u0278\u013d\u0002",
  "\u0ade\u0adf\u0007\u0162\u0002\u0002\u0adf\u0ae0\u0005\u0178\u00bd\u0002",
  "\u0ae0\u0ae2\u0007\u0163\u0002\u0002\u0ae1\u0ae3\u0005\u01d2\u00ea\u0002",
  "\u0ae2\u0ae1\u0003\u0002\u0002\u0002\u0ae2\u0ae3\u0003\u0002\u0002\u0002",
  "\u0ae3\u01c3\u0003\u0002\u0002\u0002\u0ae4\u0ae5\u0007\u0125\u0002\u0002",
  "\u0ae5\u0ae7\u0005\u0320\u0191\u0002\u0ae6\u0ae4\u0003\u0002\u0002\u0002",
  "\u0ae6\u0ae7\u0003\u0002\u0002\u0002\u0ae7\u0ae8\u0003\u0002\u0002\u0002",
  "\u0ae8\u0aec\u0005\u01cc\u00e7\u0002\u0ae9\u0aeb\u0005\u01cc\u00e7\u0002",
  "\u0aea\u0ae9\u0003\u0002\u0002\u0002\u0aeb\u0aee\u0003\u0002\u0002\u0002",
  "\u0aec\u0aea\u0003\u0002\u0002\u0002\u0aec\u0aed\u0003\u0002\u0002\u0002",
  "\u0aed\u0af0\u0003\u0002\u0002\u0002\u0aee\u0aec\u0003\u0002\u0002\u0002",
  "\u0aef\u0af1\u0005\u01d2\u00ea\u0002\u0af0\u0aef\u0003\u0002\u0002\u0002",
  "\u0af0\u0af1\u0003\u0002\u0002\u0002\u0af1\u01c5\u0003\u0002\u0002\u0002",
  "\u0af2\u0af5\u0005\u01c8\u00e5\u0002\u0af3\u0af5\u0005\u01ca\u00e6\u0002",
  "\u0af4\u0af2\u0003\u0002\u0002\u0002\u0af4\u0af3\u0003\u0002\u0002\u0002",
  "\u0af5\u01c7\u0003\u0002\u0002\u0002\u0af6\u0af7\u0007\u0125\u0002\u0002",
  "\u0af7\u0af9\u0005\u0320\u0191\u0002\u0af8\u0af6\u0003\u0002\u0002\u0002",
  "\u0af8\u0af9\u0003\u0002\u0002\u0002\u0af9\u0afa\u0003\u0002\u0002\u0002",
  "\u0afa\u0afb\u0007\u0124\u0002\u0002\u0afb\u0afc\u0005\u0278\u013d\u0002",
  "\u0afc\u0afd\u0007\u0162\u0002\u0002\u0afd\u0afe\u0005\u0178\u00bd\u0002",
  "\u0afe\u0b00\u0007\u0163\u0002\u0002\u0aff\u0b01\u0005\u01d4\u00eb\u0002",
  "\u0b00\u0aff\u0003\u0002\u0002\u0002\u0b00\u0b01\u0003\u0002\u0002\u0002",
  "\u0b01\u01c9\u0003\u0002\u0002\u0002\u0b02\u0b03\u0007\u0125\u0002\u0002",
  "\u0b03\u0b05\u0005\u0320\u0191\u0002\u0b04\u0b02\u0003\u0002\u0002\u0002",
  "\u0b04\u0b05\u0003\u0002\u0002\u0002\u0b05\u0b06\u0003\u0002\u0002\u0002",
  "\u0b06\u0b08\u0005\u01cc\u00e7\u0002\u0b07\u0b09\u0005\u01d4\u00eb\u0002",
  "\u0b08\u0b07\u0003\u0002\u0002\u0002\u0b08\u0b09\u0003\u0002\u0002\u0002",
  "\u0b09\u01cb\u0003\u0002\u0002\u0002\u0b0a\u0b0b\u0007\t\u0002\u0002",
  "\u0b0b\u0b12\u0007B\u0002\u0002\u0b0c\u0b0d\u0007\u0140\u0002\u0002",
  "\u0b0d\u0b12\u0005\u01ce\u00e8\u0002\u0b0e\u0b12\u0005\u01b8\u00dd\u0002",
  "\u0b0f\u0b12\u0005\u0192\u00ca\u0002\u0b10\u0b12\u0005\u01d0\u00e9\u0002",
  "\u0b11\u0b0a\u0003\u0002\u0002\u0002\u0b11\u0b0c\u0003\u0002\u0002\u0002",
  "\u0b11\u0b0e\u0003\u0002\u0002\u0002\u0b11\u0b0f\u0003\u0002\u0002\u0002",
  "\u0b11\u0b10\u0003\u0002\u0002\u0002\u0b12\u01cd\u0003\u0002\u0002\u0002",
  "\u0b13\u0b17\u0005\u02cc\u0167\u0002\u0b14\u0b17\u0005\u02ba\u015e\u0002",
  "\u0b15\u0b17\u0005\u02be\u0160\u0002\u0b16\u0b13\u0003\u0002\u0002\u0002",
  "\u0b16\u0b14\u0003\u0002\u0002\u0002\u0b16\u0b15\u0003\u0002\u0002\u0002",
  "\u0b17\u01cf\u0003\u0002\u0002\u0002\u0b18\u0b19\u0007\u0122\u0002\u0002",
  "\u0b19\u0b1c\u0007\u012c\u0002\u0002\u0b1a\u0b1c\u0007\u012b\u0002\u0002",
  "\u0b1b\u0b18\u0003\u0002\u0002\u0002\u0b1b\u0b1a\u0003\u0002\u0002\u0002",
  "\u0b1c\u01d1\u0003\u0002\u0002\u0002\u0b1d\u0b1e\u0005\u0180\u00c1\u0002",
  "\u0b1e\u0b1f\u0005\u0188\u00c5\u0002\u0b1f\u01d3\u0003\u0002\u0002\u0002",
  "\u0b20\u0b21\u0005\u0180\u00c1\u0002\u0b21\u0b22\u0005\u0188\u00c5\u0002",
  "\u0b22\u01d5\u0003\u0002\u0002\u0002\u0b23\u0b24\u0005\u0320\u0191\u0002",
  "\u0b24\u0b25\u0007\u015f\u0002\u0002\u0b25\u0b28\u0005\u01d8\u00ed\u0002",
  "\u0b26\u0b27\u0007N\u0002\u0002\u0b27\u0b29\u0007\u017c\u0002\u0002",
  "\u0b28\u0b26\u0003\u0002\u0002\u0002\u0b28\u0b29\u0003\u0002\u0002\u0002",
  "\u0b29\u01d7\u0003\u0002\u0002\u0002\u0b2a\u0b2b\u0005\u01dc\u00ef\u0002",
  "\u0b2b\u01d9\u0003\u0002\u0002\u0002\u0b2c\u0b31\u0005\u01d8\u00ed\u0002",
  "\u0b2d\u0b2e\u0007\u0160\u0002\u0002\u0b2e\u0b30\u0005\u01d8\u00ed\u0002",
  "\u0b2f\u0b2d\u0003\u0002\u0002\u0002\u0b30\u0b33\u0003\u0002\u0002\u0002",
  "\u0b31\u0b2f\u0003\u0002\u0002\u0002\u0b31\u0b32\u0003\u0002\u0002\u0002",
  "\u0b32\u01db\u0003\u0002\u0002\u0002\u0b33\u0b31\u0003\u0002\u0002\u0002",
  "\u0b34\u0b3a\u0005\u01de\u00f0\u0002\u0b35\u0b3a\u0005\u01e0\u00f1\u0002",
  "\u0b36\u0b3a\u0005\u01e2\u00f2\u0002\u0b37\u0b3a\u0005\u01e4\u00f3\u0002",
  "\u0b38\u0b3a\u0005\u01e6\u00f4\u0002\u0b39\u0b34\u0003\u0002\u0002\u0002",
  "\u0b39\u0b35\u0003\u0002\u0002\u0002\u0b39\u0b36\u0003\u0002\u0002\u0002",
  "\u0b39\u0b37\u0003\u0002\u0002\u0002\u0b39\u0b38\u0003\u0002\u0002\u0002",
  "\u0b3a\u01dd\u0003\u0002\u0002\u0002\u0b3b\u0b63\u0007P\u0002\u0002",
  "\u0b3c\u0b63\u0007Q\u0002\u0002\u0b3d\u0b63\u0007R\u0002\u0002\u0b3e",
  "\u0b63\u0007S\u0002\u0002\u0b3f\u0b63\u0007O\u0002\u0002\u0b40\u0b63",
  "\u0007T\u0002\u0002\u0b41\u0b43\u0007U\u0002\u0002\u0b42\u0b44\u0007",
  "V\u0002\u0002\u0b43\u0b42\u0003\u0002\u0002\u0002\u0b43\u0b44\u0003",
  "\u0002\u0002\u0002\u0b44\u0b63\u0003\u0002\u0002\u0002\u0b45\u0b63\u0007",
  "W\u0002\u0002\u0b46\u0b63\u0007X\u0002\u0002\u0b47\u0b63\u0007Y\u0002",
  "\u0002\u0b48\u0b63\u0007Z\u0002\u0002\u0b49\u0b4a\u0007Y\u0002\u0002",
  "\u0b4a\u0b4b\u0007\u0097\u0002\u0002\u0b4b\u0b4c\u00072\u0002\u0002",
  "\u0b4c\u0b4d\u0007[\u0002\u0002\u0b4d\u0b63\u0007\\\u0002\u0002\u0b4e",
  "\u0b63\u0007_\u0002\u0002\u0b4f\u0b63\u0007\u00d0\u0002\u0002\u0b50",
  "\u0b58\u0007^\u0002\u0002\u0b51\u0b52\u0007\u0162\u0002\u0002\u0b52",
  "\u0b55\u0007\u0181\u0002\u0002\u0b53\u0b54\u0007\u0160\u0002\u0002\u0b54",
  "\u0b56\u0007\u0181\u0002\u0002\u0b55\u0b53\u0003\u0002\u0002\u0002\u0b55",
  "\u0b56\u0003\u0002\u0002\u0002\u0b56\u0b57\u0003\u0002\u0002\u0002\u0b57",
  "\u0b59\u0007\u0163\u0002\u0002\u0b58\u0b51\u0003\u0002\u0002\u0002\u0b58",
  "\u0b59\u0003\u0002\u0002\u0002\u0b59\u0b63\u0003\u0002\u0002\u0002\u0b5a",
  "\u0b5b\u0007a\u0002\u0002\u0b5b\u0b5c\u0007\u0162\u0002\u0002\u0b5c",
  "\u0b5d\u0007\u0181\u0002\u0002\u0b5d\u0b63\u0007\u0163\u0002\u0002\u0b5e",
  "\u0b5f\u0007`\u0002\u0002\u0b5f\u0b60\u0007\u0162\u0002\u0002\u0b60",
  "\u0b61\u0007\u0181\u0002\u0002\u0b61\u0b63\u0007\u0163\u0002\u0002\u0b62",
  "\u0b3b\u0003\u0002\u0002\u0002\u0b62\u0b3c\u0003\u0002\u0002\u0002\u0b62",
  "\u0b3d\u0003\u0002\u0002\u0002\u0b62\u0b3e\u0003\u0002\u0002\u0002\u0b62",
  "\u0b3f\u0003\u0002\u0002\u0002\u0b62\u0b40\u0003\u0002\u0002\u0002\u0b62",
  "\u0b41\u0003\u0002\u0002\u0002\u0b62\u0b45\u0003\u0002\u0002\u0002\u0b62",
  "\u0b46\u0003\u0002\u0002\u0002\u0b62\u0b47\u0003\u0002\u0002\u0002\u0b62",
  "\u0b48\u0003\u0002\u0002\u0002\u0b62\u0b49\u0003\u0002\u0002\u0002\u0b62",
  "\u0b4e\u0003\u0002\u0002\u0002\u0b62\u0b4f\u0003\u0002\u0002\u0002\u0b62",
  "\u0b50\u0003\u0002\u0002\u0002\u0b62\u0b5a\u0003\u0002\u0002\u0002\u0b62",
  "\u0b5e\u0003\u0002\u0002\u0002\u0b63\u01df\u0003\u0002\u0002\u0002\u0b64",
  "\u0b65\u0007b\u0002\u0002\u0b65\u0b66\u0007\u016c\u0002\u0002\u0b66",
  "\u0b67\u0005\u01dc\u00ef\u0002\u0b67\u0b68\u0007\u016e\u0002\u0002\u0b68",
  "\u01e1\u0003\u0002\u0002\u0002\u0b69\u0b6a\u0007c\u0002\u0002\u0b6a",
  "\u0b6b\u0007\u016c\u0002\u0002\u0b6b\u0b6c\u0005\u0174\u00bb\u0002\u0b6c",
  "\u0b6d\u0007\u016e\u0002\u0002\u0b6d\u01e3\u0003\u0002\u0002\u0002\u0b6e",
  "\u0b6f\u0007d\u0002\u0002\u0b6f\u0b70\u0007\u016c\u0002\u0002\u0b70",
  "\u0b71\u0005\u01de\u00f0\u0002\u0b71\u0b72\u0007\u0160\u0002\u0002\u0b72",
  "\u0b73\u0005\u01dc\u00ef\u0002\u0b73\u0b74\u0007\u016e\u0002\u0002\u0b74",
  "\u01e5\u0003\u0002\u0002\u0002\u0b75\u0b76\u0007e\u0002\u0002\u0b76",
  "\u0b77\u0007\u016c\u0002\u0002\u0b77\u0b78\u0005\u01da\u00ee\u0002\u0b78",
  "\u0b79\u0007\u016e\u0002\u0002\u0b79\u01e7\u0003\u0002\u0002\u0002\u0b7a",
  "\u0b7b\u00078\u0002\u0002\u0b7b\u0b93\u0007\u0005\u0002\u0002\u0b7c",
  "\u0b7e\u00078\u0002\u0002\u0b7d\u0b7f\u0007\u001a\u0002\u0002\u0b7e",
  "\u0b7d\u0003\u0002\u0002\u0002\u0b7e\u0b7f\u0003\u0002\u0002\u0002\u0b7f",
  "\u0b93\u0003\u0002\u0002\u0002\u0b80\u0b81\u0007\u00b3\u0002\u0002\u0b81",
  "\u0b93\u0007\u0005\u0002\u0002\u0b82\u0b84\u0007\u00b3\u0002\u0002\u0b83",
  "\u0b85\u0007\u001a\u0002\u0002\u0b84\u0b83\u0003\u0002\u0002\u0002\u0b84",
  "\u0b85\u0003\u0002\u0002\u0002\u0b85\u0b93\u0003\u0002\u0002\u0002\u0b86",
  "\u0b87\u00079\u0002\u0002\u0b87\u0b93\u0007\u0005\u0002\u0002\u0b88",
  "\u0b8a\u00079\u0002\u0002\u0b89\u0b8b\u0007\u001a\u0002\u0002\u0b8a",
  "\u0b89\u0003\u0002\u0002\u0002\u0b8a\u0b8b\u0003\u0002\u0002\u0002\u0b8b",
  "\u0b93\u0003\u0002\u0002\u0002\u0b8c\u0b8d\u0007\u00b1\u0002\u0002\u0b8d",
  "\u0b93\u0007\u0005\u0002\u0002\u0b8e\u0b90\u0007\u00b1\u0002\u0002\u0b8f",
  "\u0b91\u0007\u001a\u0002\u0002\u0b90\u0b8f\u0003\u0002\u0002\u0002\u0b90",
  "\u0b91\u0003\u0002\u0002\u0002\u0b91\u0b93\u0003\u0002\u0002\u0002\u0b92",
  "\u0b7a\u0003\u0002\u0002\u0002\u0b92\u0b7c\u0003\u0002\u0002\u0002\u0b92",
  "\u0b80\u0003\u0002\u0002\u0002\u0b92\u0b82\u0003\u0002\u0002\u0002\u0b92",
  "\u0b86\u0003\u0002\u0002\u0002\u0b92\u0b88\u0003\u0002\u0002\u0002\u0b92",
  "\u0b8c\u0003\u0002\u0002\u0002\u0b92\u0b8e\u0003\u0002\u0002\u0002\u0b93",
  "\u01e9\u0003\u0002\u0002\u0002\u0b94\u0b96\u0005\u01ee\u00f8\u0002\u0b95",
  "\u0b94\u0003\u0002\u0002\u0002\u0b95\u0b96\u0003\u0002\u0002\u0002\u0b96",
  "\u0b97\u0003\u0002\u0002\u0002\u0b97\u0b98\u0005\u01ec\u00f7\u0002\u0b98",
  "\u01eb\u0003\u0002\u0002\u0002\u0b99\u0b9c\u0005\u01f2\u00fa\u0002\u0b9a",
  "\u0b9c\u0005\u01f6\u00fc\u0002\u0b9b\u0b99\u0003\u0002\u0002\u0002\u0b9b",
  "\u0b9a\u0003\u0002\u0002\u0002\u0b9c\u01ed\u0003\u0002\u0002\u0002\u0b9d",
  "\u0b9e\u0007\u0097\u0002\u0002\u0b9e\u0ba3\u0005\u01f0\u00f9\u0002\u0b9f",
  "\u0ba0\u0007\u0160\u0002\u0002\u0ba0\u0ba2\u0005\u01f0\u00f9\u0002\u0ba1",
  "\u0b9f\u0003\u0002\u0002\u0002\u0ba2\u0ba5\u0003\u0002\u0002\u0002\u0ba3",
  "\u0ba1\u0003\u0002\u0002\u0002\u0ba3\u0ba4\u0003\u0002\u0002\u0002\u0ba4",
  "\u01ef\u0003\u0002\u0002\u0002\u0ba5\u0ba3\u0003\u0002\u0002\u0002\u0ba6",
  "\u0ba7\u0005\u0320\u0191\u0002\u0ba7\u0ba8\u0007\u0018\u0002\u0002\u0ba8",
  "\u0ba9\u0007\u0162\u0002\u0002\u0ba9\u0baa\u0005\u01ea\u00f6\u0002\u0baa",
  "\u0bab\u0007\u0163\u0002\u0002\u0bab\u01f1\u0003\u0002\u0002\u0002\u0bac",
  "\u0bb2\u0005\u01f4\u00fb\u0002\u0bad\u0bae\u0005\u01e8\u00f5\u0002\u0bae",
  "\u0baf\u0005\u01f4\u00fb\u0002\u0baf\u0bb1\u0003\u0002\u0002\u0002\u0bb0",
  "\u0bad\u0003\u0002\u0002\u0002\u0bb1\u0bb4\u0003\u0002\u0002\u0002\u0bb2",
  "\u0bb0\u0003\u0002\u0002\u0002\u0bb2\u0bb3\u0003\u0002\u0002\u0002\u0bb3",
  "\u01f3\u0003\u0002\u0002\u0002\u0bb4\u0bb2\u0003\u0002\u0002\u0002\u0bb5",
  "\u0bb7\u0005\u0258\u012d\u0002\u0bb6\u0bb8\u0005\u0200\u0101\u0002\u0bb7",
  "\u0bb6\u0003\u0002\u0002\u0002\u0bb8\u0bb9\u0003\u0002\u0002\u0002\u0bb9",
  "\u0bb7\u0003\u0002\u0002\u0002\u0bb9\u0bba\u0003\u0002\u0002\u0002\u0bba",
  "\u01f5\u0003\u0002\u0002\u0002\u0bbb\u0bbe\u0005\u0202\u0102\u0002\u0bbc",
  "\u0bbf\u0005\u01fa\u00fe\u0002\u0bbd\u0bbf\u0005\u0288\u0145\u0002\u0bbe",
  "\u0bbc\u0003\u0002\u0002\u0002\u0bbe\u0bbd\u0003\u0002\u0002\u0002\u0bbf",
  "\u0bc2\u0003\u0002\u0002\u0002\u0bc0\u0bc2\u0005\u01fa\u00fe\u0002\u0bc1",
  "\u0bbb\u0003\u0002\u0002\u0002\u0bc1\u0bc0\u0003\u0002\u0002\u0002\u0bc2",
  "\u01f7\u0003\u0002\u0002\u0002\u0bc3\u0bc5\u0005\u0232\u011a\u0002\u0bc4",
  "\u0bc6\u0005\u0258\u012d\u0002\u0bc5\u0bc4\u0003\u0002\u0002\u0002\u0bc5",
  "\u0bc6\u0003\u0002\u0002\u0002\u0bc6\u0bc8\u0003\u0002\u0002\u0002\u0bc7",
  "\u0bc9\u0005\u0284\u0143\u0002\u0bc8\u0bc7\u0003\u0002\u0002\u0002\u0bc8",
  "\u0bc9\u0003\u0002\u0002\u0002\u0bc9\u0bcb\u0003\u0002\u0002\u0002\u0bca",
  "\u0bcc\u0005\u0290\u0149\u0002\u0bcb\u0bca\u0003\u0002\u0002\u0002\u0bcb",
  "\u0bcc\u0003\u0002\u0002\u0002\u0bcc\u0bce\u0003\u0002\u0002\u0002\u0bcd",
  "\u0bcf\u0005\u02a0\u0151\u0002\u0bce\u0bcd\u0003\u0002\u0002\u0002\u0bce",
  "\u0bcf\u0003\u0002\u0002\u0002\u0bcf\u0bd1\u0003\u0002\u0002\u0002\u0bd0",
  "\u0bd2\u0005\u0240\u0121\u0002\u0bd1\u0bd0\u0003\u0002\u0002\u0002\u0bd1",
  "\u0bd2\u0003\u0002\u0002\u0002\u0bd2\u0bd8\u0003\u0002\u0002\u0002\u0bd3",
  "\u0bd4\u0007\u0162\u0002\u0002\u0bd4\u0bd5\u0005\u01fa\u00fe\u0002\u0bd5",
  "\u0bd6\u0007\u0163\u0002\u0002\u0bd6\u0bd8\u0003\u0002\u0002\u0002\u0bd7",
  "\u0bc3\u0003\u0002\u0002\u0002\u0bd7\u0bd3\u0003\u0002\u0002\u0002\u0bd8",
  "\u01f9\u0003\u0002\u0002\u0002\u0bd9\u0bdb\u0005\u01f8\u00fd\u0002\u0bda",
  "\u0bdc\u0005\u01fc\u00ff\u0002\u0bdb\u0bda\u0003\u0002\u0002\u0002\u0bdb",
  "\u0bdc\u0003\u0002\u0002\u0002\u0bdc\u0bde\u0003\u0002\u0002\u0002\u0bdd",
  "\u0bdf\u0005\u02b0\u0159\u0002\u0bde\u0bdd\u0003\u0002\u0002\u0002\u0bde",
  "\u0bdf\u0003\u0002\u0002\u0002\u0bdf\u0be1\u0003\u0002\u0002\u0002\u0be0",
  "\u0be2\u0005\u02b2\u015a\u0002\u0be1\u0be0\u0003\u0002\u0002\u0002\u0be1",
  "\u0be2\u0003\u0002\u0002\u0002\u0be2\u0be4\u0003\u0002\u0002\u0002\u0be3",
  "\u0be5\u0005\u02b6\u015c\u0002\u0be4\u0be3\u0003\u0002\u0002\u0002\u0be4",
  "\u0be5\u0003\u0002\u0002\u0002\u0be5\u0be7\u0003\u0002\u0002\u0002\u0be6",
  "\u0be8\u0005\u02b8\u015d\u0002\u0be7\u0be6\u0003\u0002\u0002\u0002\u0be7",
  "\u0be8\u0003\u0002\u0002\u0002\u0be8\u0bea\u0003\u0002\u0002\u0002\u0be9",
  "\u0beb\u0005\u0206\u0104\u0002\u0bea\u0be9\u0003\u0002\u0002\u0002\u0bea",
  "\u0beb\u0003\u0002\u0002\u0002\u0beb\u01fb\u0003\u0002\u0002\u0002\u0bec",
  "\u0bed\u0005\u01e8\u00f5\u0002\u0bed\u0bee\u0005\u01f8\u00fd\u0002\u0bee",
  "\u0bf0\u0003\u0002\u0002\u0002\u0bef\u0bec\u0003\u0002\u0002\u0002\u0bf0",
  "\u0bf1\u0003\u0002\u0002\u0002\u0bf1\u0bef\u0003\u0002\u0002\u0002\u0bf1",
  "\u0bf2\u0003\u0002\u0002\u0002\u0bf2\u01fd\u0003\u0002\u0002\u0002\u0bf3",
  "\u0bf5\u0005\u01ee\u00f8\u0002\u0bf4\u0bf3\u0003\u0002\u0002\u0002\u0bf4",
  "\u0bf5\u0003\u0002\u0002\u0002\u0bf5\u0bf6\u0003\u0002\u0002\u0002\u0bf6",
  "\u0bf7\u0005\u01fa\u00fe\u0002\u0bf7\u01ff\u0003\u0002\u0002\u0002\u0bf8",
  "\u0bf9\u0005\u0202\u0102\u0002\u0bf9\u0bfb\u0005\u0232\u011a\u0002\u0bfa",
  "\u0bfc\u0005\u026a\u0136\u0002\u0bfb\u0bfa\u0003\u0002\u0002\u0002\u0bfb",
  "\u0bfc\u0003\u0002\u0002\u0002\u0bfc\u0bfe\u0003\u0002\u0002\u0002\u0bfd",
  "\u0bff\u0005\u0284\u0143\u0002\u0bfe\u0bfd\u0003\u0002\u0002\u0002\u0bfe",
  "\u0bff\u0003\u0002\u0002\u0002\u0bff\u0c01\u0003\u0002\u0002\u0002\u0c00",
  "\u0c02\u0005\u0290\u0149\u0002\u0c01\u0c00\u0003\u0002\u0002\u0002\u0c01",
  "\u0c02\u0003\u0002\u0002\u0002\u0c02\u0c04\u0003\u0002\u0002\u0002\u0c03",
  "\u0c05\u0005\u02a0\u0151\u0002\u0c04\u0c03\u0003\u0002\u0002\u0002\u0c04",
  "\u0c05\u0003\u0002\u0002\u0002\u0c05\u0c07\u0003\u0002\u0002\u0002\u0c06",
  "\u0c08\u0005\u0240\u0121\u0002\u0c07\u0c06\u0003\u0002\u0002\u0002\u0c07",
  "\u0c08\u0003\u0002\u0002\u0002\u0c08\u0c0a\u0003\u0002\u0002\u0002\u0c09",
  "\u0c0b\u0005\u02b0\u0159\u0002\u0c0a\u0c09\u0003\u0002\u0002\u0002\u0c0a",
  "\u0c0b\u0003\u0002\u0002\u0002\u0c0b\u0c0d\u0003\u0002\u0002\u0002\u0c0c",
  "\u0c0e\u0005\u02b2\u015a\u0002\u0c0d\u0c0c\u0003\u0002\u0002\u0002\u0c0d",
  "\u0c0e\u0003\u0002\u0002\u0002\u0c0e\u0c10\u0003\u0002\u0002\u0002\u0c0f",
  "\u0c11\u0005\u02b6\u015c\u0002\u0c10\u0c0f\u0003\u0002\u0002\u0002\u0c10",
  "\u0c11\u0003\u0002\u0002\u0002\u0c11\u0c13\u0003\u0002\u0002\u0002\u0c12",
  "\u0c14\u0005\u02b8\u015d\u0002\u0c13\u0c12\u0003\u0002\u0002\u0002\u0c13",
  "\u0c14\u0003\u0002\u0002\u0002\u0c14\u0c16\u0003\u0002\u0002\u0002\u0c15",
  "\u0c17\u0005\u0206\u0104\u0002\u0c16\u0c15\u0003\u0002\u0002\u0002\u0c16",
  "\u0c17\u0003\u0002\u0002\u0002\u0c17\u0c38\u0003\u0002\u0002\u0002\u0c18",
  "\u0c1a\u0005\u0232\u011a\u0002\u0c19\u0c1b\u0005\u026a\u0136\u0002\u0c1a",
  "\u0c19\u0003\u0002\u0002\u0002\u0c1a\u0c1b\u0003\u0002\u0002\u0002\u0c1b",
  "\u0c1d\u0003\u0002\u0002\u0002\u0c1c\u0c1e\u0005\u0284\u0143\u0002\u0c1d",
  "\u0c1c\u0003\u0002\u0002\u0002\u0c1d\u0c1e\u0003\u0002\u0002\u0002\u0c1e",
  "\u0c20\u0003\u0002\u0002\u0002\u0c1f\u0c21\u0005\u0290\u0149\u0002\u0c20",
  "\u0c1f\u0003\u0002\u0002\u0002\u0c20\u0c21\u0003\u0002\u0002\u0002\u0c21",
  "\u0c23\u0003\u0002\u0002\u0002\u0c22\u0c24\u0005\u02a0\u0151\u0002\u0c23",
  "\u0c22\u0003\u0002\u0002\u0002\u0c23\u0c24\u0003\u0002\u0002\u0002\u0c24",
  "\u0c26\u0003\u0002\u0002\u0002\u0c25\u0c27\u0005\u0240\u0121\u0002\u0c26",
  "\u0c25\u0003\u0002\u0002\u0002\u0c26\u0c27\u0003\u0002\u0002\u0002\u0c27",
  "\u0c29\u0003\u0002\u0002\u0002\u0c28\u0c2a\u0005\u02b0\u0159\u0002\u0c29",
  "\u0c28\u0003\u0002\u0002\u0002\u0c29\u0c2a\u0003\u0002\u0002\u0002\u0c2a",
  "\u0c2c\u0003\u0002\u0002\u0002\u0c2b\u0c2d\u0005\u02b2\u015a\u0002\u0c2c",
  "\u0c2b\u0003\u0002\u0002\u0002\u0c2c\u0c2d\u0003\u0002\u0002\u0002\u0c2d",
  "\u0c2f\u0003\u0002\u0002\u0002\u0c2e\u0c30\u0005\u02b6\u015c\u0002\u0c2f",
  "\u0c2e\u0003\u0002\u0002\u0002\u0c2f\u0c30\u0003\u0002\u0002\u0002\u0c30",
  "\u0c32\u0003\u0002\u0002\u0002\u0c31\u0c33\u0005\u02b8\u015d\u0002\u0c32",
  "\u0c31\u0003\u0002\u0002\u0002\u0c32\u0c33\u0003\u0002\u0002\u0002\u0c33",
  "\u0c35\u0003\u0002\u0002\u0002\u0c34\u0c36\u0005\u0206\u0104\u0002\u0c35",
  "\u0c34\u0003\u0002\u0002\u0002\u0c35\u0c36\u0003\u0002\u0002\u0002\u0c36",
  "\u0c38\u0003\u0002\u0002\u0002\u0c37\u0bf8\u0003\u0002\u0002\u0002\u0c37",
  "\u0c18\u0003\u0002\u0002\u0002\u0c38\u0201\u0003\u0002\u0002\u0002\u0c39",
  "\u0c3a\u0007\u001b\u0002\u0002\u0c3a\u0c3b\u0007\u001c\u0002\u0002\u0c3b",
  "\u0c3d\u0005\u0204\u0103\u0002\u0c3c\u0c3e\u0005,\u0017\u0002\u0c3d",
  "\u0c3c\u0003\u0002\u0002\u0002\u0c3d\u0c3e\u0003\u0002\u0002\u0002\u0c3e",
  "\u0c4c\u0003\u0002\u0002\u0002\u0c3f\u0c40\u0007\u001b\u0002\u0002\u0c40",
  "\u0c42\u0007j\u0002\u0002\u0c41\u0c43\u0007'\u0002\u0002\u0c42\u0c41",
  "\u0003\u0002\u0002\u0002\u0c42\u0c43\u0003\u0002\u0002\u0002\u0c43\u0c44",
  "\u0003\u0002\u0002\u0002\u0c44\u0c49\u0005\u0310\u0189\u0002\u0c45\u0c46",
  "\u0007\u0162\u0002\u0002\u0c46\u0c47\u0005\u0176\u00bc\u0002\u0c47\u0c48",
  "\u0007\u0163\u0002\u0002\u0c48\u0c4a\u0003\u0002\u0002\u0002\u0c49\u0c45",
  "\u0003\u0002\u0002\u0002\u0c49\u0c4a\u0003\u0002\u0002\u0002\u0c4a\u0c4c",
  "\u0003\u0002\u0002\u0002\u0c4b\u0c39\u0003\u0002\u0002\u0002\u0c4b\u0c3f",
  "\u0003\u0002\u0002\u0002\u0c4c\u0203\u0003\u0002\u0002\u0002\u0c4d\u0c4f",
  "\u00072\u0002\u0002\u0c4e\u0c4d\u0003\u0002\u0002\u0002\u0c4e\u0c4f",
  "\u0003\u0002\u0002\u0002\u0c4f\u0c50\u0003\u0002\u0002\u0002\u0c50\u0c51",
  "\u00071\u0002\u0002\u0c51\u0c53\u0007\u017c\u0002\u0002\u0c52\u0c54",
  "\u0005\u0144\u00a3\u0002\u0c53\u0c52\u0003\u0002\u0002\u0002\u0c53\u0c54",
  "\u0003\u0002\u0002\u0002\u0c54\u0c56\u0003\u0002\u0002\u0002\u0c55\u0c57",
  "\u0005\u0160\u00b1\u0002\u0c56\u0c55\u0003\u0002\u0002\u0002\u0c56\u0c57",
  "\u0003\u0002\u0002\u0002\u0c57\u0c5b\u0003\u0002\u0002\u0002\u0c58\u0c59",
  "\u0007'\u0002\u0002\u0c59\u0c5b\u0005\u0310\u0189\u0002\u0c5a\u0c4e",
  "\u0003\u0002\u0002\u0002\u0c5a\u0c58\u0003\u0002\u0002\u0002\u0c5b\u0205",
  "\u0003\u0002\u0002\u0002\u0c5c\u0c5f\u0007\u009b\u0002\u0002\u0c5d\u0c5e",
  "\u0007\u0181\u0002\u0002\u0c5e\u0c60\u0007\u0160\u0002\u0002\u0c5f\u0c5d",
  "\u0003\u0002\u0002\u0002\u0c5f\u0c60\u0003\u0002\u0002\u0002\u0c60\u0c61",
  "\u0003\u0002\u0002\u0002\u0c61\u0c67\u0007\u0181\u0002\u0002\u0c62\u0c63",
  "\u0007\u009b\u0002\u0002\u0c63\u0c64\u0007\u0181\u0002\u0002\u0c64\u0c65",
  "\u0007\u009c\u0002\u0002\u0c65\u0c67\u0007\u0181\u0002\u0002\u0c66\u0c5c",
  "\u0003\u0002\u0002\u0002\u0c66\u0c62\u0003\u0002\u0002\u0002\u0c67\u0207",
  "\u0003\u0002\u0002\u0002\u0c68\u0c69\u0007\u00af\u0002\u0002\u0c69\u0c6a",
  "\u0007\u0017\u0002\u0002\u0c6a\u0c6c\u0005\u0278\u013d\u0002\u0c6b\u0c6d",
  "\u0005\u0284\u0143\u0002\u0c6c\u0c6b\u0003\u0002\u0002\u0002\u0c6c\u0c6d",
  "\u0003\u0002\u0002\u0002\u0c6d\u0209\u0003\u0002\u0002\u0002\u0c6e\u0c6f",
  "\u0005\u0252\u012a\u0002\u0c6f\u0c70\u0007\u0168\u0002\u0002\u0c70\u0c71",
  "\u0005\u0300\u0181\u0002\u0c71\u020b\u0003\u0002\u0002\u0002\u0c72\u0c73",
  "\u0007\u009d\u0002\u0002\u0c73\u0c78\u0005\u020a\u0106\u0002\u0c74\u0c75",
  "\u0007\u0160\u0002\u0002\u0c75\u0c77\u0005\u020a\u0106\u0002\u0c76\u0c74",
  "\u0003\u0002\u0002\u0002\u0c77\u0c7a\u0003\u0002\u0002\u0002\u0c78\u0c76",
  "\u0003\u0002\u0002\u0002\u0c78\u0c79\u0003\u0002\u0002\u0002\u0c79\u020d",
  "\u0003\u0002\u0002\u0002\u0c7a\u0c78\u0003\u0002\u0002\u0002\u0c7b\u0c7c",
  "\u0007\u00e3\u0002\u0002\u0c7c\u0c7d\u0005\u0278\u013d\u0002\u0c7d\u0c7f",
  "\u0005\u020c\u0107\u0002\u0c7e\u0c80\u0005\u0284\u0143\u0002\u0c7f\u0c7e",
  "\u0003\u0002\u0002\u0002\u0c7f\u0c80\u0003\u0002\u0002\u0002\u0c80\u020f",
  "\u0003\u0002\u0002\u0002\u0c81\u0c86\u0005\u0212\u010a\u0002\u0c82\u0c86",
  "\u0005\u021c\u010f\u0002\u0c83\u0c86\u0005\u021e\u0110\u0002\u0c84\u0c86",
  "\u0005\u0220\u0111\u0002\u0c85\u0c81\u0003\u0002\u0002\u0002\u0c85\u0c82",
  "\u0003\u0002\u0002\u0002\u0c85\u0c83\u0003\u0002\u0002\u0002\u0c85\u0c84",
  "\u0003\u0002\u0002\u0002\u0c86\u0211\u0003\u0002\u0002\u0002\u0c87\u0c88",
  "\u0007\u0116\u0002\u0002\u0c88\u0c91\u0007\u0117\u0002\u0002\u0c89\u0c8e",
  "\u0005\u0214\u010b\u0002\u0c8a\u0c8b\u0007\u0160\u0002\u0002\u0c8b\u0c8d",
  "\u0005\u0214\u010b\u0002\u0c8c\u0c8a\u0003\u0002\u0002\u0002\u0c8d\u0c90",
  "\u0003\u0002\u0002\u0002\u0c8e\u0c8c\u0003\u0002\u0002\u0002\u0c8e\u0c8f",
  "\u0003\u0002\u0002\u0002\u0c8f\u0c92\u0003\u0002\u0002\u0002\u0c90\u0c8e",
  "\u0003\u0002\u0002\u0002\u0c91\u0c89\u0003\u0002\u0002\u0002\u0c91\u0c92",
  "\u0003\u0002\u0002\u0002\u0c92\u0213\u0003\u0002\u0002\u0002\u0c93\u0c96",
  "\u0005\u0218\u010d\u0002\u0c94\u0c96\u0005\u0216\u010c\u0002\u0c95\u0c93",
  "\u0003\u0002\u0002\u0002\u0c95\u0c94\u0003\u0002\u0002\u0002\u0c96\u0215",
  "\u0003\u0002\u0002\u0002\u0c97\u0c98\u0007\u00c8\u0002\u0002\u0c98\u0c9c",
  "\u0007\u011b\u0002\u0002\u0c99\u0c9a\u0007\u00c8\u0002\u0002\u0c9a\u0c9c",
  "\u0007\u011c\u0002\u0002\u0c9b\u0c97\u0003\u0002\u0002\u0002\u0c9b\u0c99",
  "\u0003\u0002\u0002\u0002\u0c9c\u0217\u0003\u0002\u0002\u0002\u0c9d\u0c9e",
  "\u0007\u011d\u0002\u0002\u0c9e\u0c9f\u0007\u011e\u0002\u0002\u0c9f\u0ca0",
  "\u0005\u021a\u010e\u0002\u0ca0\u0219\u0003\u0002\u0002\u0002\u0ca1\u0ca2",
  "\u0007\u011f\u0002\u0002\u0ca2\u021b\u0003\u0002\u0002\u0002\u0ca3\u0ca5",
  "\u0007\u0118\u0002\u0002\u0ca4\u0ca6\u0007\u011a\u0002\u0002\u0ca5\u0ca4",
  "\u0003\u0002\u0002\u0002\u0ca5\u0ca6\u0003\u0002\u0002\u0002\u0ca6\u021d",
  "\u0003\u0002\u0002\u0002\u0ca7\u0ca9\u0007\u0119\u0002\u0002\u0ca8\u0caa",
  "\u0007\u011a\u0002\u0002\u0ca9\u0ca8\u0003\u0002\u0002\u0002\u0ca9\u0caa",
  "\u0003\u0002\u0002\u0002\u0caa\u021f\u0003\u0002\u0002\u0002\u0cab\u0cac",
  "\u0007\u009d\u0002\u0002\u0cac\u0cad\u0007\u0120\u0002\u0002\u0cad\u0cae",
  "\u0005\u030e\u0188\u0002\u0cae\u0221\u0003\u0002\u0002\u0002\u0caf\u0cb0",
  "\u0007\u012d\u0002\u0002\u0cb0\u0cb2\u0007\u0105\u0002\u0002\u0cb1\u0cb3",
  "\u0007\u0181\u0002\u0002\u0cb2\u0cb1\u0003\u0002\u0002\u0002\u0cb3\u0cb4",
  "\u0003\u0002\u0002\u0002\u0cb4\u0cb2\u0003\u0002\u0002\u0002\u0cb4\u0cb5",
  "\u0003\u0002\u0002\u0002\u0cb5\u0223\u0003\u0002\u0002\u0002\u0cb6\u0cb7",
  "\u0007\u0130\u0002\u0002\u0cb7\u0cb8\u0007j\u0002\u0002\u0cb8\u0cbd",
  "\u0005\u0278\u013d\u0002\u0cb9\u0cbb\u0007\u0018\u0002\u0002\u0cba\u0cb9",
  "\u0003\u0002\u0002\u0002\u0cba\u0cbb\u0003\u0002\u0002\u0002\u0cbb\u0cbc",
  "\u0003\u0002\u0002\u0002\u0cbc\u0cbe\u0005\u0320\u0191\u0002\u0cbd\u0cba",
  "\u0003\u0002\u0002\u0002\u0cbd\u0cbe\u0003\u0002\u0002\u0002\u0cbe\u0cbf",
  "\u0003\u0002\u0002\u0002\u0cbf\u0cc0\u00074\u0002\u0002\u0cc0\u0cc1",
  "\u0005\u0260\u0131\u0002\u0cc1\u0cc2\u0007$\u0002\u0002\u0cc2\u0cc3",
  "\u0005\u0300\u0181\u0002\u0cc3\u0cc4\u0005\u0226\u0114\u0002\u0cc4\u0225",
  "\u0003\u0002\u0002\u0002\u0cc5\u0cc8\u0005\u022a\u0116\u0002\u0cc6\u0cc8",
  "\u0005\u022c\u0117\u0002\u0cc7\u0cc5\u0003\u0002\u0002\u0002\u0cc7\u0cc6",
  "\u0003\u0002\u0002\u0002\u0cc8\u0ccb\u0003\u0002\u0002\u0002\u0cc9\u0cc7",
  "\u0003\u0002\u0002\u0002\u0cc9\u0cca\u0003\u0002\u0002\u0002\u0cca\u0ccd",
  "\u0003\u0002\u0002\u0002\u0ccb\u0cc9\u0003\u0002\u0002\u0002\u0ccc\u0cce",
  "\u0005\u0228\u0115\u0002\u0ccd\u0ccc\u0003\u0002\u0002\u0002\u0ccd\u0cce",
  "\u0003\u0002\u0002\u0002\u0cce\u0227\u0003\u0002\u0002\u0002\u0ccf\u0cd0",
  "\u0007\u00a5\u0002\u0002\u0cd0\u0cd1\u0007\t\u0002\u0002\u0cd1\u0cd4",
  "\u0007\u0131\u0002\u0002\u0cd2\u0cd3\u0007\u0007\u0002\u0002\u0cd3\u0cd5",
  "\u0005\u0300\u0181\u0002\u0cd4\u0cd2\u0003\u0002\u0002\u0002\u0cd4\u0cd5",
  "\u0003\u0002\u0002\u0002\u0cd5\u0cd6\u0003\u0002\u0002\u0002\u0cd6\u0cd7",
  "\u0007\u00a6\u0002\u0002\u0cd7\u0cd8\u0007\u001b\u0002\u0002\u0cd8\u0cd9",
  "\u0007\u010a\u0002\u0002\u0cd9\u0cda\u0005\u028c\u0147\u0002\u0cda\u0229",
  "\u0003\u0002\u0002\u0002\u0cdb\u0cdc\u0007\u00a5\u0002\u0002\u0cdc\u0cdd",
  "\u0007\u0131\u0002\u0002\u0cdd\u0cde\u0007\u0007\u0002\u0002\u0cde\u0cdf",
  "\u0005\u0300\u0181\u0002\u0cdf\u0ce0\u0007\u00a6\u0002\u0002\u0ce0\u0ce1",
  "\u0005\u022e\u0118\u0002\u0ce1\u022b\u0003\u0002\u0002\u0002\u0ce2\u0ce3",
  "\u0007\u00a5\u0002\u0002\u0ce3\u0ce4\u0007\u0131\u0002\u0002\u0ce4\u0ce5",
  "\u0007\u00a6\u0002\u0002\u0ce5\u0ce6\u0005\u022e\u0118\u0002\u0ce6\u022d",
  "\u0003\u0002\u0002\u0002\u0ce7\u0ce8\u0007\u00e3\u0002\u0002\u0ce8\u0ceb",
  "\u0005\u020c\u0107\u0002\u0ce9\u0ceb\u0007\u00af\u0002\u0002\u0cea\u0ce7",
  "\u0003\u0002\u0002\u0002\u0cea\u0ce9\u0003\u0002\u0002\u0002\u0ceb\u022f",
  "\u0003\u0002\u0002\u0002\u0cec\u0ced\u0007w\u0002\u0002\u0ced\u0cef",
  "\u0007\u010d\u0002\u0002\u0cee\u0cf0\u0007\u017c\u0002\u0002\u0cef\u0cee",
  "\u0003\u0002\u0002\u0002\u0cf0\u0cf1\u0003\u0002\u0002\u0002\u0cf1\u0cef",
  "\u0003\u0002\u0002\u0002\u0cf1\u0cf2\u0003\u0002\u0002\u0002\u0cf2\u0231",
  "\u0003\u0002\u0002\u0002\u0cf3\u0cf5\u0007\u0019\u0002\u0002\u0cf4\u0cf6",
  "\u0007\u0187\u0002\u0002\u0cf5\u0cf4\u0003\u0002\u0002\u0002\u0cf5\u0cf6",
  "\u0003\u0002\u0002\u0002\u0cf6\u0cfd\u0003\u0002\u0002\u0002\u0cf7\u0cf9",
  "\t\u0013\u0002\u0002\u0cf8\u0cf7\u0003\u0002\u0002\u0002\u0cf8\u0cf9",
  "\u0003\u0002\u0002\u0002\u0cf9\u0cfa\u0003\u0002\u0002\u0002\u0cfa\u0cfe",
  "\u0005\u0234\u011b\u0002\u0cfb\u0cfc\u00073\u0002\u0002\u0cfc\u0cfe",
  "\u0005\u0236\u011c\u0002\u0cfd\u0cf8\u0003\u0002\u0002\u0002\u0cfd\u0cfb",
  "\u0003\u0002\u0002\u0002\u0cfe\u0d01\u0003\u0002\u0002\u0002\u0cff\u0d01",
  "\u0005\u023a\u011e\u0002\u0d00\u0cf3\u0003\u0002\u0002\u0002\u0d00\u0cff",
  "\u0003\u0002\u0002\u0002\u0d01\u0233\u0003\u0002\u0002\u0002\u0d02\u0d07",
  "\u0005\u0238\u011d\u0002\u0d03\u0d04\u0007\u0160\u0002\u0002\u0d04\u0d06",
  "\u0005\u0238\u011d\u0002\u0d05\u0d03\u0003\u0002\u0002\u0002\u0d06\u0d09",
  "\u0003\u0002\u0002\u0002\u0d07\u0d05\u0003\u0002\u0002\u0002\u0d07\u0d08",
  "\u0003\u0002\u0002\u0002\u0d08\u0235\u0003\u0002\u0002\u0002\u0d09\u0d07",
  "\u0003\u0002\u0002\u0002\u0d0a\u0d0b\u0007\u0162\u0002\u0002\u0d0b\u0d0c",
  "\u0005\u023e\u0120\u0002\u0d0c\u0d0e\u0007\u0163\u0002\u0002\u0d0d\u0d0f",
  "\u0005\u013a\u009e\u0002\u0d0e\u0d0d\u0003\u0002\u0002\u0002\u0d0e\u0d0f",
  "\u0003\u0002\u0002\u0002\u0d0f\u0d11\u0003\u0002\u0002\u0002\u0d10\u0d12",
  "\u0005\u013e\u00a0\u0002\u0d11\u0d10\u0003\u0002\u0002\u0002\u0d11\u0d12",
  "\u0003\u0002\u0002\u0002\u0d12\u0d13\u0003\u0002\u0002\u0002\u0d13\u0d14",
  "\u00074\u0002\u0002\u0d14\u0d23\u0007\u017c\u0002\u0002\u0d15\u0d21",
  "\u0007\u0018\u0002\u0002\u0d16\u0d19\u0007\u0162\u0002\u0002\u0d17\u0d1a",
  "\u0005\u0256\u012c\u0002\u0d18\u0d1a\u0005\u0170\u00b9\u0002\u0d19\u0d17",
  "\u0003\u0002\u0002\u0002\u0d19\u0d18\u0003\u0002\u0002\u0002\u0d1a\u0d1b",
  "\u0003\u0002\u0002\u0002\u0d1b\u0d1c\u0007\u0163\u0002\u0002\u0d1c\u0d22",
  "\u0003\u0002\u0002\u0002\u0d1d\u0d20\u0005\u0256\u012c\u0002\u0d1e\u0d20",
  "\u0005\u0170\u00b9\u0002\u0d1f\u0d1d\u0003\u0002\u0002\u0002\u0d1f\u0d1e",
  "\u0003\u0002\u0002\u0002\u0d20\u0d22\u0003\u0002\u0002\u0002\u0d21\u0d16",
  "\u0003\u0002\u0002\u0002\u0d21\u0d1f\u0003\u0002\u0002\u0002\u0d22\u0d24",
  "\u0003\u0002\u0002\u0002\u0d23\u0d15\u0003\u0002\u0002\u0002\u0d23\u0d24",
  "\u0003\u0002\u0002\u0002\u0d24\u0d26\u0003\u0002\u0002\u0002\u0d25\u0d27",
  "\u0005\u013a\u009e\u0002\u0d26\u0d25\u0003\u0002\u0002\u0002\u0d26\u0d27",
  "\u0003\u0002\u0002\u0002\u0d27\u0d29\u0003\u0002\u0002\u0002\u0d28\u0d2a",
  "\u0005\u013c\u009f\u0002\u0d29\u0d28\u0003\u0002\u0002\u0002\u0d29\u0d2a",
  "\u0003\u0002\u0002\u0002\u0d2a\u0237\u0003\u0002\u0002\u0002\u0d2b\u0d40",
  "\u0005\u0250\u0129\u0002\u0d2c\u0d3d\u0005\u0300\u0181\u0002\u0d2d\u0d2f",
  "\u0007\u0018\u0002\u0002\u0d2e\u0d2d\u0003\u0002\u0002\u0002\u0d2e\u0d2f",
  "\u0003\u0002\u0002\u0002\u0d2f\u0d30\u0003\u0002\u0002\u0002\u0d30\u0d3e",
  "\u0005\u0320\u0191\u0002\u0d31\u0d32\u0007\u0018\u0002\u0002\u0d32\u0d33",
  "\u0007\u0162\u0002\u0002\u0d33\u0d38\u0005\u0320\u0191\u0002\u0d34\u0d35",
  "\u0007\u0160\u0002\u0002\u0d35\u0d37\u0005\u0320\u0191\u0002\u0d36\u0d34",
  "\u0003\u0002\u0002\u0002\u0d37\u0d3a\u0003\u0002\u0002\u0002\u0d38\u0d36",
  "\u0003\u0002\u0002\u0002\u0d38\u0d39\u0003\u0002\u0002\u0002\u0d39\u0d3b",
  "\u0003\u0002\u0002\u0002\u0d3a\u0d38\u0003\u0002\u0002\u0002\u0d3b\u0d3c",
  "\u0007\u0163\u0002\u0002\u0d3c\u0d3e\u0003\u0002\u0002\u0002\u0d3d\u0d2e",
  "\u0003\u0002\u0002\u0002\u0d3d\u0d31\u0003\u0002\u0002\u0002\u0d3d\u0d3e",
  "\u0003\u0002\u0002\u0002\u0d3e\u0d40\u0003\u0002\u0002\u0002\u0d3f\u0d2b",
  "\u0003\u0002\u0002\u0002\u0d3f\u0d2c\u0003\u0002\u0002\u0002\u0d40\u0239",
  "\u0003\u0002\u0002\u0002\u0d41\u0d42\u0007d\u0002\u0002\u0d42\u0d46",
  "\u0005\u023e\u0120\u0002\u0d43\u0d44\u0007f\u0002\u0002\u0d44\u0d46",
  "\u0005\u023e\u0120\u0002\u0d45\u0d41\u0003\u0002\u0002\u0002\u0d45\u0d43",
  "\u0003\u0002\u0002\u0002\u0d46\u0d48\u0003\u0002\u0002\u0002\u0d47\u0d49",
  "\u0005\u013a\u009e\u0002\u0d48\u0d47\u0003\u0002\u0002\u0002\u0d48\u0d49",
  "\u0003\u0002\u0002\u0002\u0d49\u0d4b\u0003\u0002\u0002\u0002\u0d4a\u0d4c",
  "\u0005\u013e\u00a0\u0002\u0d4b\u0d4a\u0003\u0002\u0002\u0002\u0d4b\u0d4c",
  "\u0003\u0002\u0002\u0002\u0d4c\u0d4d\u0003\u0002\u0002\u0002\u0d4d\u0d4e",
  "\u00074\u0002\u0002\u0d4e\u0d5d\u0007\u017c\u0002\u0002\u0d4f\u0d5b",
  "\u0007\u0018\u0002\u0002\u0d50\u0d53\u0007\u0162\u0002\u0002\u0d51\u0d54",
  "\u0005\u0256\u012c\u0002\u0d52\u0d54\u0005\u0170\u00b9\u0002\u0d53\u0d51",
  "\u0003\u0002\u0002\u0002\u0d53\u0d52\u0003\u0002\u0002\u0002\u0d54\u0d55",
  "\u0003\u0002\u0002\u0002\u0d55\u0d56\u0007\u0163\u0002\u0002\u0d56\u0d5c",
  "\u0003\u0002\u0002\u0002\u0d57\u0d5a\u0005\u0256\u012c\u0002\u0d58\u0d5a",
  "\u0005\u0170\u00b9\u0002\u0d59\u0d57\u0003\u0002\u0002\u0002\u0d59\u0d58",
  "\u0003\u0002\u0002\u0002\u0d5a\u0d5c\u0003\u0002\u0002\u0002\u0d5b\u0d50",
  "\u0003\u0002\u0002\u0002\u0d5b\u0d59\u0003\u0002\u0002\u0002\u0d5c\u0d5e",
  "\u0003\u0002\u0002\u0002\u0d5d\u0d4f\u0003\u0002\u0002\u0002\u0d5d\u0d5e",
  "\u0003\u0002\u0002\u0002\u0d5e\u0d60\u0003\u0002\u0002\u0002\u0d5f\u0d61",
  "\u0005\u013a\u009e\u0002\u0d60\u0d5f\u0003\u0002\u0002\u0002\u0d60\u0d61",
  "\u0003\u0002\u0002\u0002\u0d61\u0d63\u0003\u0002\u0002\u0002\u0d62\u0d64",
  "\u0005\u013c\u009f\u0002\u0d63\u0d62\u0003\u0002\u0002\u0002\u0d63\u0d64",
  "\u0003\u0002\u0002\u0002\u0d64\u023b\u0003\u0002\u0002\u0002\u0d65\u0d68",
  "\u0005\u0250\u0129\u0002\u0d66\u0d68\u0005\u0300\u0181\u0002\u0d67\u0d65",
  "\u0003\u0002\u0002\u0002\u0d67\u0d66\u0003\u0002\u0002\u0002\u0d68\u023d",
  "\u0003\u0002\u0002\u0002\u0d69\u0d6e\u0005\u023c\u011f\u0002\u0d6a\u0d6b",
  "\u0007\u0160\u0002\u0002\u0d6b\u0d6d\u0005\u023c\u011f\u0002\u0d6c\u0d6a",
  "\u0003\u0002\u0002\u0002\u0d6d\u0d70\u0003\u0002\u0002\u0002\u0d6e\u0d6c",
  "\u0003\u0002\u0002\u0002\u0d6e\u0d6f\u0003\u0002\u0002\u0002\u0d6f\u023f",
  "\u0003\u0002\u0002\u0002\u0d70\u0d6e\u0003\u0002\u0002\u0002\u0d71\u0d72",
  "\u0007\u00eb\u0002\u0002\u0d72\u0d77\u0005\u0242\u0122\u0002\u0d73\u0d74",
  "\u0007\u0160\u0002\u0002\u0d74\u0d76\u0005\u0242\u0122\u0002\u0d75\u0d73",
  "\u0003\u0002\u0002\u0002\u0d76\u0d79\u0003\u0002\u0002\u0002\u0d77\u0d75",
  "\u0003\u0002\u0002\u0002\u0d77\u0d78\u0003\u0002\u0002\u0002\u0d78\u0241",
  "\u0003\u0002\u0002\u0002\u0d79\u0d77\u0003\u0002\u0002\u0002\u0d7a\u0d7b",
  "\u0005\u0320\u0191\u0002\u0d7b\u0d7c\u0007\u0018\u0002\u0002\u0d7c\u0d7d",
  "\u0005\u0244\u0123\u0002\u0d7d\u0243\u0003\u0002\u0002\u0002\u0d7e\u0d8b",
  "\u0005\u0320\u0191\u0002\u0d7f\u0d81\u0007\u0162\u0002\u0002\u0d80\u0d82",
  "\u0005\u0320\u0191\u0002\u0d81\u0d80\u0003\u0002\u0002\u0002\u0d81\u0d82",
  "\u0003\u0002\u0002\u0002\u0d82\u0d84\u0003\u0002\u0002\u0002\u0d83\u0d85",
  "\u0005\u027e\u0140\u0002\u0d84\u0d83\u0003\u0002\u0002\u0002\u0d84\u0d85",
  "\u0003\u0002\u0002\u0002\u0d85\u0d87\u0003\u0002\u0002\u0002\u0d86\u0d88",
  "\u0005\u0246\u0124\u0002\u0d87\u0d86\u0003\u0002\u0002\u0002\u0d87\u0d88",
  "\u0003\u0002\u0002\u0002\u0d88\u0d89\u0003\u0002\u0002\u0002\u0d89\u0d8b",
  "\u0007\u0163\u0002\u0002\u0d8a\u0d7e\u0003\u0002\u0002\u0002\u0d8a\u0d7f",
  "\u0003\u0002\u0002\u0002\u0d8b\u0245\u0003\u0002\u0002\u0002\u0d8c\u0d8f",
  "\u0005\u0248\u0125\u0002\u0d8d\u0d8f\u0005\u024a\u0126\u0002\u0d8e\u0d8c",
  "\u0003\u0002\u0002\u0002\u0d8e\u0d8d\u0003\u0002\u0002\u0002\u0d8f\u0247",
  "\u0003\u0002\u0002\u0002\u0d90\u0d91\u0007m\u0002\u0002\u0d91\u0d99",
  "\u0005\u024c\u0127\u0002\u0d92\u0d93\u0007m\u0002\u0002\u0d93\u0d94",
  "\u0007\u00ce\u0002\u0002\u0d94\u0d95\u0005\u024e\u0128\u0002\u0d95\u0d96",
  "\u0007\u0007\u0002\u0002\u0d96\u0d97\u0005\u024e\u0128\u0002\u0d97\u0d99",
  "\u0003\u0002\u0002\u0002\u0d98\u0d90\u0003\u0002\u0002\u0002\u0d98\u0d92",
  "\u0003\u0002\u0002\u0002\u0d99\u0249\u0003\u0002\u0002\u0002\u0d9a\u0d9b",
  "\u0007\u00cb\u0002\u0002\u0d9b\u0da3\u0005\u024c\u0127\u0002\u0d9c\u0d9d",
  "\u0007\u00cb\u0002\u0002\u0d9d\u0d9e\u0007\u00ce\u0002\u0002\u0d9e\u0d9f",
  "\u0005\u024e\u0128\u0002\u0d9f\u0da0\u0007\u0007\u0002\u0002\u0da0\u0da1",
  "\u0005\u024e\u0128\u0002\u0da1\u0da3\u0003\u0002\u0002\u0002\u0da2\u0d9a",
  "\u0003\u0002\u0002\u0002\u0da2\u0d9c\u0003\u0002\u0002\u0002\u0da3\u024b",
  "\u0003\u0002\u0002\u0002\u0da4\u0da5\u0007\u00ec\u0002\u0002\u0da5\u0dab",
  "\u0007\u00ed\u0002\u0002\u0da6\u0da7\u0007\u00ef\u0002\u0002\u0da7\u0dab",
  "\u0007l\u0002\u0002\u0da8\u0da9\u0007\u0181\u0002\u0002\u0da9\u0dab",
  "\u0007\u00ed\u0002\u0002\u0daa\u0da4\u0003\u0002\u0002\u0002\u0daa\u0da6",
  "\u0003\u0002\u0002\u0002\u0daa\u0da8\u0003\u0002\u0002\u0002\u0dab\u024d",
  "\u0003\u0002\u0002\u0002\u0dac\u0dad\u0007\u00ec\u0002\u0002\u0dad\u0db3",
  "\t\u0014\u0002\u0002\u0dae\u0daf\u0007\u00ef\u0002\u0002\u0daf\u0db3",
  "\u0007l\u0002\u0002\u0db0\u0db1\u0007\u0181\u0002\u0002\u0db1\u0db3",
  "\t\u0014\u0002\u0002\u0db2\u0dac\u0003\u0002\u0002\u0002\u0db2\u0dae",
  "\u0003\u0002\u0002\u0002\u0db2\u0db0\u0003\u0002\u0002\u0002\u0db3\u024f",
  "\u0003\u0002\u0002\u0002\u0db4\u0dba\u0007\u0172\u0002\u0002\u0db5\u0db6",
  "\u0005\u0278\u013d\u0002\u0db6\u0db7\u0007\u015e\u0002\u0002\u0db7\u0db8",
  "\u0007\u0172\u0002\u0002\u0db8\u0dba\u0003\u0002\u0002\u0002\u0db9\u0db4",
  "\u0003\u0002\u0002\u0002\u0db9\u0db5\u0003\u0002\u0002\u0002\u0dba\u0251",
  "\u0003\u0002\u0002\u0002\u0dbb\u0dbc\u0005\u0320\u0191\u0002\u0dbc\u0253",
  "\u0003\u0002\u0002\u0002\u0dbd\u0dc2\u0005\u0300\u0181\u0002\u0dbe\u0dbf",
  "\u0007\u0160\u0002\u0002\u0dbf\u0dc1\u0005\u0300\u0181\u0002\u0dc0\u0dbe",
  "\u0003\u0002\u0002\u0002\u0dc1\u0dc4\u0003\u0002\u0002\u0002\u0dc2\u0dc0",
  "\u0003\u0002\u0002\u0002\u0dc2\u0dc3\u0003\u0002\u0002\u0002\u0dc3\u0255",
  "\u0003\u0002\u0002\u0002\u0dc4\u0dc2\u0003\u0002\u0002\u0002\u0dc5\u0dca",
  "\u0005\u0320\u0191\u0002\u0dc6\u0dc7\u0007\u0160\u0002\u0002\u0dc7\u0dc9",
  "\u0005\u0320\u0191\u0002\u0dc8\u0dc6\u0003\u0002\u0002\u0002\u0dc9\u0dcc",
  "\u0003\u0002\u0002\u0002\u0dca\u0dc8\u0003\u0002\u0002\u0002\u0dca\u0dcb",
  "\u0003\u0002\u0002\u0002\u0dcb\u0257\u0003\u0002\u0002\u0002\u0dcc\u0dca",
  "\u0003\u0002\u0002\u0002\u0dcd\u0dce\u0007\u0017\u0002\u0002\u0dce\u0dcf",
  "\u0005\u025a\u012e\u0002\u0dcf\u0259\u0003\u0002\u0002\u0002\u0dd0\u0dd1",
  "\u0005\u0266\u0134\u0002\u0dd1\u0dd4\u0005\u0262\u0132\u0002\u0dd2\u0dd3",
  "\u0007\u0160\u0002\u0002\u0dd3\u0dd5\u0005\u0262\u0132\u0002\u0dd4\u0dd2",
  "\u0003\u0002\u0002\u0002\u0dd5\u0dd6\u0003\u0002\u0002\u0002\u0dd6\u0dd4",
  "\u0003\u0002\u0002\u0002\u0dd6\u0dd7\u0003\u0002\u0002\u0002\u0dd7\u0dda",
  "\u0003\u0002\u0002\u0002\u0dd8\u0dda\u0005\u025e\u0130\u0002\u0dd9\u0dd0",
  "\u0003\u0002\u0002\u0002\u0dd9\u0dd8\u0003\u0002\u0002\u0002\u0dda\u025b",
  "\u0003\u0002\u0002\u0002\u0ddb\u0ddf\u0005\u0274\u013b\u0002\u0ddc\u0dde",
  "\u0005\u026a\u0136\u0002\u0ddd\u0ddc\u0003\u0002\u0002\u0002\u0dde\u0de1",
  "\u0003\u0002\u0002\u0002\u0ddf\u0ddd\u0003\u0002\u0002\u0002\u0ddf\u0de0",
  "\u0003\u0002\u0002\u0002\u0de0\u0dfc\u0003\u0002\u0002\u0002\u0de1\u0ddf",
  "\u0003\u0002\u0002\u0002\u0de2\u0de6\u0005\u028e\u0148\u0002\u0de3\u0de5",
  "\u0005\u026a\u0136\u0002\u0de4\u0de3\u0003\u0002\u0002\u0002\u0de5\u0de8",
  "\u0003\u0002\u0002\u0002\u0de6\u0de4\u0003\u0002\u0002\u0002\u0de6\u0de7",
  "\u0003\u0002\u0002\u0002\u0de7\u0dfc\u0003\u0002\u0002\u0002\u0de8\u0de6",
  "\u0003\u0002\u0002\u0002\u0de9\u0ded\u0005\u027c\u013f\u0002\u0dea\u0dec",
  "\u0005\u026a\u0136\u0002\u0deb\u0dea\u0003\u0002\u0002\u0002\u0dec\u0def",
  "\u0003\u0002\u0002\u0002\u0ded\u0deb\u0003\u0002\u0002\u0002\u0ded\u0dee",
  "\u0003\u0002\u0002\u0002\u0dee\u0dfc\u0003\u0002\u0002\u0002\u0def\u0ded",
  "\u0003\u0002\u0002\u0002\u0df0\u0df4\u0005\u0282\u0142\u0002\u0df1\u0df3",
  "\u0005\u026a\u0136\u0002\u0df2\u0df1\u0003\u0002\u0002\u0002\u0df3\u0df6",
  "\u0003\u0002\u0002\u0002\u0df4\u0df2\u0003\u0002\u0002\u0002\u0df4\u0df5",
  "\u0003\u0002\u0002\u0002\u0df5\u0dfc\u0003\u0002\u0002\u0002\u0df6\u0df4",
  "\u0003\u0002\u0002\u0002\u0df7\u0df8\u0007\u0162\u0002\u0002\u0df8\u0df9",
  "\u0005\u025e\u0130\u0002\u0df9\u0dfa\u0007\u0163\u0002\u0002\u0dfa\u0dfc",
  "\u0003\u0002\u0002\u0002\u0dfb\u0ddb\u0003\u0002\u0002\u0002\u0dfb\u0de2",
  "\u0003\u0002\u0002\u0002\u0dfb\u0de9\u0003\u0002\u0002\u0002\u0dfb\u0df0",
  "\u0003\u0002\u0002\u0002\u0dfb\u0df7\u0003\u0002\u0002\u0002\u0dfc\u025d",
  "\u0003\u0002\u0002\u0002\u0dfd\u0e08\u0005\u025c\u012f\u0002\u0dfe\u0dff",
  "\u0005\u0268\u0135\u0002\u0dff\u0e04\u0005\u0260\u0131\u0002\u0e00\u0e01",
  "\u0007$\u0002\u0002\u0e01\u0e05\u0005\u0300\u0181\u0002\u0e02\u0e03",
  "\u00074\u0002\u0002\u0e03\u0e05\u0005\u017e\u00c0\u0002\u0e04\u0e00",
  "\u0003\u0002\u0002\u0002\u0e04\u0e02\u0003\u0002\u0002\u0002\u0e04\u0e05",
  "\u0003\u0002\u0002\u0002\u0e05\u0e07\u0003\u0002\u0002\u0002\u0e06\u0dfe",
  "\u0003\u0002\u0002\u0002\u0e07\u0e0a\u0003\u0002\u0002\u0002\u0e08\u0e06",
  "\u0003\u0002\u0002\u0002\u0e08\u0e09\u0003\u0002\u0002\u0002\u0e09\u025f",
  "\u0003\u0002\u0002\u0002\u0e0a\u0e08\u0003\u0002\u0002\u0002\u0e0b\u0e10",
  "\u0005\u0274\u013b\u0002\u0e0c\u0e10\u0005\u028e\u0148\u0002\u0e0d\u0e10",
  "\u0005\u027c\u013f\u0002\u0e0e\u0e10\u0005\u0282\u0142\u0002\u0e0f\u0e0b",
  "\u0003\u0002\u0002\u0002\u0e0f\u0e0c\u0003\u0002\u0002\u0002\u0e0f\u0e0d",
  "\u0003\u0002\u0002\u0002\u0e0f\u0e0e\u0003\u0002\u0002\u0002\u0e10\u0e14",
  "\u0003\u0002\u0002\u0002\u0e11\u0e13\u0005\u026a\u0136\u0002\u0e12\u0e11",
  "\u0003\u0002\u0002\u0002\u0e13\u0e16\u0003\u0002\u0002\u0002\u0e14\u0e12",
  "\u0003\u0002\u0002\u0002\u0e14\u0e15\u0003\u0002\u0002\u0002\u0e15\u0261",
  "\u0003\u0002\u0002\u0002\u0e16\u0e14\u0003\u0002\u0002\u0002\u0e17\u0e19",
  "\u0007\u001f\u0002\u0002\u0e18\u0e17\u0003\u0002\u0002\u0002\u0e18\u0e19",
  "\u0003\u0002\u0002\u0002\u0e19\u0e1a\u0003\u0002\u0002\u0002\u0e1a\u0e1b",
  "\u0005\u0276\u013c\u0002\u0e1b\u0e1c\u0005\u0264\u0133\u0002\u0e1c\u0263",
  "\u0003\u0002\u0002\u0002\u0e1d\u0e1e\u0007\u0162\u0002\u0002\u0e1e\u0e1f",
  "\u0005\u0254\u012b\u0002\u0e1f\u0e20\u0007\u0163\u0002\u0002\u0e20\u0265",
  "\u0003\u0002\u0002\u0002\u0e21\u0e22\u0007\u001e\u0002\u0002\u0e22\u0267",
  "\u0003\u0002\u0002\u0002\u0e23\u0e3c\u0007 \u0002\u0002\u0e24\u0e25",
  "\u0007\u00fc\u0002\u0002\u0e25\u0e3c\u0007 \u0002\u0002\u0e26\u0e3c",
  "\u0007\u0160\u0002\u0002\u0e27\u0e28\u0007\u00d1\u0002\u0002\u0e28\u0e3c",
  "\u0007 \u0002\u0002\u0e29\u0e2b\u0007!\u0002\u0002\u0e2a\u0e2c\u0007",
  "\u001d\u0002\u0002\u0e2b\u0e2a\u0003\u0002\u0002\u0002\u0e2b\u0e2c\u0003",
  "\u0002\u0002\u0002\u0e2c\u0e2d\u0003\u0002\u0002\u0002\u0e2d\u0e3c\u0007",
  ' \u0002\u0002\u0e2e\u0e30\u0007"\u0002\u0002\u0e2f\u0e31\u0007\u001d',
  "\u0002\u0002\u0e30\u0e2f\u0003\u0002\u0002\u0002\u0e30\u0e31\u0003\u0002",
  "\u0002\u0002\u0e31\u0e32\u0003\u0002\u0002\u0002\u0e32\u0e3c\u0007 ",
  "\u0002\u0002\u0e33\u0e35\u0007#\u0002\u0002\u0e34\u0e36\u0007\u001d",
  "\u0002\u0002\u0e35\u0e34\u0003\u0002\u0002\u0002\u0e35\u0e36\u0003\u0002",
  "\u0002\u0002\u0e36\u0e37\u0003\u0002\u0002\u0002\u0e37\u0e3c\u0007 ",
  "\u0002\u0002\u0e38\u0e39\u0007!\u0002\u0002\u0e39\u0e3a\u0007\u00d7",
  "\u0002\u0002\u0e3a\u0e3c\u0007 \u0002\u0002\u0e3b\u0e23\u0003\u0002",
  "\u0002\u0002\u0e3b\u0e24\u0003\u0002\u0002\u0002\u0e3b\u0e26\u0003\u0002",
  "\u0002\u0002\u0e3b\u0e27\u0003\u0002\u0002\u0002\u0e3b\u0e29\u0003\u0002",
  "\u0002\u0002\u0e3b\u0e2e\u0003\u0002\u0002\u0002\u0e3b\u0e33\u0003\u0002",
  "\u0002\u0002\u0e3b\u0e38\u0003\u0002\u0002\u0002\u0e3c\u0269\u0003\u0002",
  "\u0002\u0002\u0e3d\u0e3e\u0007\u00d8\u0002\u0002\u0e3e\u0e3f\u0007\u00b4",
  "\u0002\u0002\u0e3f\u0e40\u0007\u001d\u0002\u0002\u0e40\u0e41\u0005\u02ba",
  "\u015e\u0002\u0e41\u0e4b\u0005\u026c\u0137\u0002\u0e42\u0e43\u0007\u0018",
  "\u0002\u0002\u0e43\u0e48\u0005\u0320\u0191\u0002\u0e44\u0e45\u0007\u0160",
  "\u0002\u0002\u0e45\u0e47\u0005\u0320\u0191\u0002\u0e46\u0e44\u0003\u0002",
  "\u0002\u0002\u0e47\u0e4a\u0003\u0002\u0002\u0002\u0e48\u0e46\u0003\u0002",
  "\u0002\u0002\u0e48\u0e49\u0003\u0002\u0002\u0002\u0e49\u0e4c\u0003\u0002",
  "\u0002\u0002\u0e4a\u0e48\u0003\u0002\u0002\u0002\u0e4b\u0e42\u0003\u0002",
  "\u0002\u0002\u0e4b\u0e4c\u0003\u0002\u0002\u0002\u0e4c\u0e79\u0003\u0002",
  "\u0002\u0002\u0e4d\u0e4f\u0007\u0160\u0002\u0002\u0e4e\u0e4d\u0003\u0002",
  "\u0002\u0002\u0e4e\u0e4f\u0003\u0002\u0002\u0002\u0e4f\u0e50\u0003\u0002",
  "\u0002\u0002\u0e50\u0e51\u0007\u00d8\u0002\u0002\u0e51\u0e52\u0007\u00b4",
  "\u0002\u0002\u0e52\u0e53\u0005\u02ba\u015e\u0002\u0e53\u0e5d\u0005\u026c",
  "\u0137\u0002\u0e54\u0e55\u0007\u0018\u0002\u0002\u0e55\u0e5a\u0005\u0320",
  "\u0191\u0002\u0e56\u0e57\u0007\u0160\u0002\u0002\u0e57\u0e59\u0005\u0320",
  "\u0191\u0002\u0e58\u0e56\u0003\u0002\u0002\u0002\u0e59\u0e5c\u0003\u0002",
  "\u0002\u0002\u0e5a\u0e58\u0003\u0002\u0002\u0002\u0e5a\u0e5b\u0003\u0002",
  "\u0002\u0002\u0e5b\u0e5e\u0003\u0002\u0002\u0002\u0e5c\u0e5a\u0003\u0002",
  "\u0002\u0002\u0e5d\u0e54\u0003\u0002\u0002\u0002\u0e5d\u0e5e\u0003\u0002",
  "\u0002\u0002\u0e5e\u0e79\u0003\u0002\u0002\u0002\u0e5f\u0e61\u0007\u0160",
  "\u0002\u0002\u0e60\u0e5f\u0003\u0002\u0002\u0002\u0e60\u0e61\u0003\u0002",
  "\u0002\u0002\u0e61\u0e62\u0003\u0002\u0002\u0002\u0e62\u0e63\u0007\u00d8",
  "\u0002\u0002\u0e63\u0e64\u0007'\u0002\u0002\u0e64\u0e65\u0007\u0162",
  "\u0002\u0002\u0e65\u0e66\u0005\u0288\u0145\u0002\u0e66\u0e68\u0007\u0163",
  "\u0002\u0002\u0e67\u0e69\u0007\u0018\u0002\u0002\u0e68\u0e67\u0003\u0002",
  "\u0002\u0002\u0e68\u0e69\u0003\u0002\u0002\u0002\u0e69\u0e6a\u0003\u0002",
  "\u0002\u0002\u0e6a\u0e76\u0005\u026c\u0137\u0002\u0e6b\u0e6c\u0007\u0162",
  "\u0002\u0002\u0e6c\u0e71\u0005\u0320\u0191\u0002\u0e6d\u0e6e\u0007\u0160",
  "\u0002\u0002\u0e6e\u0e70\u0005\u0320\u0191\u0002\u0e6f\u0e6d\u0003\u0002",
  "\u0002\u0002\u0e70\u0e73\u0003\u0002\u0002\u0002\u0e71\u0e6f\u0003\u0002",
  "\u0002\u0002\u0e71\u0e72\u0003\u0002\u0002\u0002\u0e72\u0e74\u0003\u0002",
  "\u0002\u0002\u0e73\u0e71\u0003\u0002\u0002\u0002\u0e74\u0e75\u0007\u0163",
  "\u0002\u0002\u0e75\u0e77\u0003\u0002\u0002\u0002\u0e76\u0e6b\u0003\u0002",
  "\u0002\u0002\u0e76\u0e77\u0003\u0002\u0002\u0002\u0e77\u0e79\u0003\u0002",
  "\u0002\u0002\u0e78\u0e3d\u0003\u0002\u0002\u0002\u0e78\u0e4e\u0003\u0002",
  "\u0002\u0002\u0e78\u0e60\u0003\u0002\u0002\u0002\u0e79\u026b\u0003\u0002",
  "\u0002\u0002\u0e7a\u0e7b\u0005\u0320\u0191\u0002\u0e7b\u026d\u0003\u0002",
  "\u0002\u0002\u0e7c\u0e7d\u0007\u0082\u0002\u0002\u0e7d\u0e7e\u0007\u0162",
  "\u0002\u0002\u0e7e\u0e7f\u0007\u0083\u0002\u0002\u0e7f\u0e80\u0007\u0181",
  "\u0002\u0002\u0e80\u0e81\u0007\u0084\u0002\u0002\u0e81\u0e82\u0007\u0085",
  "\u0002\u0002\u0e82\u0e8c\u0007\u0181\u0002\u0002\u0e83\u0e84\u0007$",
  "\u0002\u0002\u0e84\u0e89\u0005\u0300\u0181\u0002\u0e85\u0e86\u0007\u0160",
  "\u0002\u0002\u0e86\u0e88\u0005\u0300\u0181\u0002\u0e87\u0e85\u0003\u0002",
  "\u0002\u0002\u0e88\u0e8b\u0003\u0002\u0002\u0002\u0e89\u0e87\u0003\u0002",
  "\u0002\u0002\u0e89\u0e8a\u0003\u0002\u0002\u0002\u0e8a\u0e8d\u0003\u0002",
  "\u0002\u0002\u0e8b\u0e89\u0003\u0002\u0002\u0002\u0e8c\u0e83\u0003\u0002",
  "\u0002\u0002\u0e8c\u0e8d\u0003\u0002\u0002\u0002\u0e8d\u0e8e\u0003\u0002",
  "\u0002\u0002\u0e8e\u0e8f\u0007\u0163\u0002\u0002\u0e8f\u026f\u0003\u0002",
  "\u0002\u0002\u0e90\u0e91\u0007\u0082\u0002\u0002\u0e91\u0e92\u0007\u0162",
  "\u0002\u0002\u0e92\u0e93\u0007\u0181\u0002\u0002\u0e93\u0e94\t\u0015",
  "\u0002\u0002\u0e94\u0e9a\u0007\u0163\u0002\u0002\u0e95\u0e96\u0007\u0082",
  "\u0002\u0002\u0e96\u0e97\u0007\u0162\u0002\u0002\u0e97\u0e98\u0007\u0180",
  "\u0002\u0002\u0e98\u0e9a\u0007\u0163\u0002\u0002\u0e99\u0e90\u0003\u0002",
  "\u0002\u0002\u0e99\u0e95\u0003\u0002\u0002\u0002\u0e9a\u0271\u0003\u0002",
  "\u0002\u0002\u0e9b\u0e9e\u0005\u026e\u0138\u0002\u0e9c\u0e9e\u0005\u0270",
  "\u0139\u0002\u0e9d\u0e9b\u0003\u0002\u0002\u0002\u0e9d\u0e9c\u0003\u0002",
  "\u0002\u0002\u0e9e\u0273\u0003\u0002\u0002\u0002\u0e9f\u0ea1\u0005\u0278",
  "\u013d\u0002\u0ea0\u0ea2\u0005\u014a\u00a6\u0002\u0ea1\u0ea0\u0003\u0002",
  "\u0002\u0002\u0ea1\u0ea2\u0003\u0002\u0002\u0002\u0ea2\u0ea4\u0003\u0002",
  "\u0002\u0002\u0ea3\u0ea5\u0005\u0272\u013a\u0002\u0ea4\u0ea3\u0003\u0002",
  "\u0002\u0002\u0ea4\u0ea5\u0003\u0002\u0002\u0002\u0ea5\u0eaa\u0003\u0002",
  "\u0002\u0002\u0ea6\u0ea8\u0007\u0018\u0002\u0002\u0ea7\u0ea6\u0003\u0002",
  "\u0002\u0002\u0ea7\u0ea8\u0003\u0002\u0002\u0002\u0ea8\u0ea9\u0003\u0002",
  "\u0002\u0002\u0ea9\u0eab\u0005\u0320\u0191\u0002\u0eaa\u0ea7\u0003\u0002",
  "\u0002\u0002\u0eaa\u0eab\u0003\u0002\u0002\u0002\u0eab\u0275\u0003\u0002",
  "\u0002\u0002\u0eac\u0eae\u0005\u0278\u013d\u0002\u0ead\u0eaf\u0005\u0272",
  "\u013a\u0002\u0eae\u0ead\u0003\u0002\u0002\u0002\u0eae\u0eaf\u0003\u0002",
  "\u0002\u0002\u0eaf\u0eb4\u0003\u0002\u0002\u0002\u0eb0\u0eb2\u0007\u0018",
  "\u0002\u0002\u0eb1\u0eb0\u0003\u0002\u0002\u0002\u0eb1\u0eb2\u0003\u0002",
  "\u0002\u0002\u0eb2\u0eb3\u0003\u0002\u0002\u0002\u0eb3\u0eb5\u0005\u0320",
  "\u0191\u0002\u0eb4\u0eb1\u0003\u0002\u0002\u0002\u0eb4\u0eb5\u0003\u0002",
  "\u0002\u0002\u0eb5\u0277\u0003\u0002\u0002\u0002\u0eb6\u0eb7\u0005\u0320",
  "\u0191\u0002\u0eb7\u0eb8\u0007\u015e\u0002\u0002\u0eb8\u0eb9\u0005\u0320",
  "\u0191\u0002\u0eb9\u0ebc\u0003\u0002\u0002\u0002\u0eba\u0ebc\u0005\u0320",
  "\u0191\u0002\u0ebb\u0eb6\u0003\u0002\u0002\u0002\u0ebb\u0eba\u0003\u0002",
  "\u0002\u0002\u0ebc\u0279\u0003\u0002\u0002\u0002\u0ebd\u0ebe\u0005\u0320",
  "\u0191\u0002\u0ebe\u0ebf\u0007\u015e\u0002\u0002\u0ebf\u0ec1\u0003\u0002",
  "\u0002\u0002\u0ec0\u0ebd\u0003\u0002\u0002\u0002\u0ec0\u0ec1\u0003\u0002",
  "\u0002\u0002\u0ec1\u0ec2\u0003\u0002\u0002\u0002\u0ec2\u0ec3\u0005\u0320",
  "\u0191\u0002\u0ec3\u027b\u0003\u0002\u0002\u0002\u0ec4\u0ec5\u0007\u0162",
  "\u0002\u0002\u0ec5\u0ec6\u0005\u01ea\u00f6\u0002\u0ec6\u0ecb\u0007\u0163",
  "\u0002\u0002\u0ec7\u0ec9\u0007\u0018\u0002\u0002\u0ec8\u0ec7\u0003\u0002",
  "\u0002\u0002\u0ec8\u0ec9\u0003\u0002\u0002\u0002\u0ec9\u0eca\u0003\u0002",
  "\u0002\u0002\u0eca\u0ecc\u0005\u0320\u0191\u0002\u0ecb\u0ec8\u0003\u0002",
  "\u0002\u0002\u0ecb\u0ecc\u0003\u0002\u0002\u0002\u0ecc\u027d\u0003\u0002",
  "\u0002\u0002\u0ecd\u0ecf\u0005\u02b4\u015b\u0002\u0ece\u0ed0\u0005\u02b0",
  "\u0159\u0002\u0ecf\u0ece\u0003\u0002\u0002\u0002\u0ecf\u0ed0\u0003\u0002",
  "\u0002\u0002\u0ed0\u0ed9\u0003\u0002\u0002\u0002\u0ed1\u0ed9\u0005\u02b0",
  "\u0159\u0002\u0ed2\u0ed4\u0005\u02b6\u015c\u0002\u0ed3\u0ed5\u0005\u02b8",
  "\u015d\u0002\u0ed4\u0ed3\u0003\u0002\u0002\u0002\u0ed4\u0ed5\u0003\u0002",
  "\u0002\u0002\u0ed5\u0ed9\u0003\u0002\u0002\u0002\u0ed6\u0ed9\u0005\u02b8",
  "\u015d\u0002\u0ed7\u0ed9\u0005\u02b2\u015a\u0002\u0ed8\u0ecd\u0003\u0002",
  "\u0002\u0002\u0ed8\u0ed1\u0003\u0002\u0002\u0002\u0ed8\u0ed2\u0003\u0002",
  "\u0002\u0002\u0ed8\u0ed6\u0003\u0002\u0002\u0002\u0ed8\u0ed7\u0003\u0002",
  "\u0002\u0002\u0ed9\u027f\u0003\u0002\u0002\u0002\u0eda\u0ede\u0005\u027c",
  "\u013f\u0002\u0edb\u0ede\u0005\u0274\u013b\u0002\u0edc\u0ede\u0005\u0282",
  "\u0142\u0002\u0edd\u0eda\u0003\u0002\u0002\u0002\u0edd\u0edb\u0003\u0002",
  "\u0002\u0002\u0edd\u0edc\u0003\u0002\u0002\u0002\u0ede\u0281\u0003\u0002",
  "\u0002\u0002\u0edf\u0ee0\u0005\u0320\u0191\u0002\u0ee0\u0ee1\u0007\u0162",
  "\u0002\u0002\u0ee1\u0ee2\u0007$\u0002\u0002\u0ee2\u0ee4\u0005\u0280",
  "\u0141\u0002\u0ee3\u0ee5\u0005\u027e\u0140\u0002\u0ee4\u0ee3\u0003\u0002",
  "\u0002\u0002\u0ee4\u0ee5\u0003\u0002\u0002\u0002\u0ee5\u0ef5\u0003\u0002",
  "\u0002\u0002\u0ee6\u0ee7\u0007\u0182\u0002\u0002\u0ee7\u0ee8\u0007\u0162",
  "\u0002\u0002\u0ee8\u0ee9\u0005\u0300\u0181\u0002\u0ee9\u0ef2\u0007\u0163",
  "\u0002\u0002\u0eea\u0eeb\u0007\u0160\u0002\u0002\u0eeb\u0eec\u0007\u0182",
  "\u0002\u0002\u0eec\u0eed\u0007\u0162\u0002\u0002\u0eed\u0eee\u0005\u0300",
  "\u0181\u0002\u0eee\u0eef\u0007\u0163\u0002\u0002\u0eef\u0ef1\u0003\u0002",
  "\u0002\u0002\u0ef0\u0eea\u0003\u0002\u0002\u0002\u0ef1\u0ef4\u0003\u0002",
  "\u0002\u0002\u0ef2\u0ef0\u0003\u0002\u0002\u0002\u0ef2\u0ef3\u0003\u0002",
  "\u0002\u0002\u0ef3\u0ef6\u0003\u0002\u0002\u0002\u0ef4\u0ef2\u0003\u0002",
  "\u0002\u0002\u0ef5\u0ee6\u0003\u0002\u0002\u0002\u0ef5\u0ef6\u0003\u0002",
  "\u0002\u0002\u0ef6\u0ef7\u0003\u0002\u0002\u0002\u0ef7\u0ef9\u0007\u0163",
  "\u0002\u0002\u0ef8\u0efa\u0005\u0320\u0191\u0002\u0ef9\u0ef8\u0003\u0002",
  "\u0002\u0002\u0ef9\u0efa\u0003\u0002\u0002\u0002\u0efa\u0283\u0003\u0002",
  "\u0002\u0002\u0efb\u0efc\u0007\u0016\u0002\u0002\u0efc\u0efd\u0005\u0286",
  "\u0144\u0002\u0efd\u0285\u0003\u0002\u0002\u0002\u0efe\u0eff\u0005\u0300",
  "\u0181\u0002\u0eff\u0287\u0003\u0002\u0002\u0002\u0f00\u0f01\u0007\u010a",
  "\u0002\u0002\u0f01\u0f02\u0005\u028a\u0146\u0002\u0f02\u0289\u0003\u0002",
  "\u0002\u0002\u0f03\u0f08\u0005\u028c\u0147\u0002\u0f04\u0f05\u0007\u0160",
  "\u0002\u0002\u0f05\u0f07\u0005\u028c\u0147\u0002\u0f06\u0f04\u0003\u0002",
  "\u0002\u0002\u0f07\u0f0a\u0003\u0002\u0002\u0002\u0f08\u0f06\u0003\u0002",
  "\u0002\u0002\u0f08\u0f09\u0003\u0002\u0002\u0002\u0f09\u028b\u0003\u0002",
  "\u0002\u0002\u0f0a\u0f08\u0003\u0002\u0002\u0002\u0f0b\u0f0c\u0005\u02a4",
  "\u0153\u0002\u0f0c\u028d\u0003\u0002\u0002\u0002\u0f0d\u0f0e\u0007'",
  "\u0002\u0002\u0f0e\u0f0f\u0007\u0162\u0002\u0002\u0f0f\u0f10\u0005\u0288",
  "\u0145\u0002\u0f10\u0f12\u0007\u0163\u0002\u0002\u0f11\u0f13\u0007\u0018",
  "\u0002\u0002\u0f12\u0f11\u0003\u0002\u0002\u0002\u0f12\u0f13\u0003\u0002",
  "\u0002\u0002\u0f13\u0f14\u0003\u0002\u0002\u0002\u0f14\u0f1e\u0005\u026c",
  "\u0137\u0002\u0f15\u0f16\u0007\u0162\u0002\u0002\u0f16\u0f1b\u0005\u0320",
  "\u0191\u0002\u0f17\u0f18\u0007\u0160\u0002\u0002\u0f18\u0f1a\u0005\u0320",
  "\u0191\u0002\u0f19\u0f17\u0003\u0002\u0002\u0002\u0f1a\u0f1d\u0003\u0002",
  "\u0002\u0002\u0f1b\u0f19\u0003\u0002\u0002\u0002\u0f1b\u0f1c\u0003\u0002",
  "\u0002\u0002\u0f1c\u0f1f\u0003\u0002\u0002\u0002\u0f1d\u0f1b\u0003\u0002",
  "\u0002\u0002\u0f1e\u0f15\u0003\u0002\u0002\u0002\u0f1e\u0f1f\u0003\u0002",
  "\u0002\u0002\u0f1f\u0f20\u0003\u0002\u0002\u0002\u0f20\u0f21\u0007\u0163",
  "\u0002\u0002\u0f21\u028f\u0003\u0002\u0002\u0002\u0f22\u0f23\u0007\u0013",
  "\u0002\u0002\u0f23\u0f24\u0007\u0014\u0002\u0002\u0f24\u0f25\u0005\u0292",
  "\u014a\u0002\u0f25\u0291\u0003\u0002\u0002\u0002\u0f26\u0f2a\u0005\u0296",
  "\u014c\u0002\u0f27\u0f2a\u0005\u0298\u014d\u0002\u0f28\u0f2a\u0005\u0294",
  "\u014b\u0002\u0f29\u0f26\u0003\u0002\u0002\u0002\u0f29\u0f27\u0003\u0002",
  "\u0002\u0002\u0f29\u0f28\u0003\u0002\u0002\u0002\u0f2a\u0293\u0003\u0002",
  "\u0002\u0002\u0f2b\u0f2c\u0007\u0162\u0002\u0002\u0f2c\u0f2d\u0007\u0163",
  "\u0002\u0002\u0f2d\u0295\u0003\u0002\u0002\u0002\u0f2e\u0f2f\t\u0016",
  "\u0002\u0002\u0f2f\u0f30\u0007\u0162\u0002\u0002\u0f30\u0f35\u0005\u0300",
  "\u0181\u0002\u0f31\u0f32\u0007\u0160\u0002\u0002\u0f32\u0f34\u0005\u0300",
  "\u0181\u0002\u0f33\u0f31\u0003\u0002\u0002\u0002\u0f34\u0f37\u0003\u0002",
  "\u0002\u0002\u0f35\u0f33\u0003\u0002\u0002\u0002\u0f35\u0f36\u0003\u0002",
  "\u0002\u0002\u0f36\u0f38\u0003\u0002\u0002\u0002\u0f37\u0f35\u0003\u0002",
  "\u0002\u0002\u0f38\u0f39\u0007\u0163\u0002\u0002\u0f39\u0297\u0003\u0002",
  "\u0002\u0002\u0f3a\u0f3f\u0005\u02a6\u0154\u0002\u0f3b\u0f3c\u0007\u0097",
  "\u0002\u0002\u0f3c\u0f40\u0007\u00e7\u0002\u0002\u0f3d\u0f3e\u0007\u0097",
  "\u0002\u0002\u0f3e\u0f40\u0007\u00e8\u0002\u0002\u0f3f\u0f3b\u0003\u0002",
  "\u0002\u0002\u0f3f\u0f3d\u0003\u0002\u0002\u0002\u0f3f\u0f40\u0003\u0002",
  "\u0002\u0002\u0f40\u0f4e\u0003\u0002\u0002\u0002\u0f41\u0f42\u0007\u00f5",
  "\u0002\u0002\u0f42\u0f43\u0007\u00f6\u0002\u0002\u0f43\u0f44\u0007\u0162",
  "\u0002\u0002\u0f44\u0f49\u0005\u029a\u014e\u0002\u0f45\u0f46\u0007\u0160",
  "\u0002\u0002\u0f46\u0f48\u0005\u029a\u014e\u0002\u0f47\u0f45\u0003\u0002",
  "\u0002\u0002\u0f48\u0f4b\u0003\u0002\u0002\u0002\u0f49\u0f47\u0003\u0002",
  "\u0002\u0002\u0f49\u0f4a\u0003\u0002\u0002\u0002\u0f4a\u0f4c\u0003\u0002",
  "\u0002\u0002\u0f4b\u0f49\u0003\u0002\u0002\u0002\u0f4c\u0f4d\u0007\u0163",
  "\u0002\u0002\u0f4d\u0f4f\u0003\u0002\u0002\u0002\u0f4e\u0f41\u0003\u0002",
  "\u0002\u0002\u0f4e\u0f4f\u0003\u0002\u0002\u0002\u0f4f\u0299\u0003\u0002",
  "\u0002\u0002\u0f50\u0f53\u0005\u029c\u014f\u0002\u0f51\u0f53\u0005\u029e",
  "\u0150\u0002\u0f52\u0f50\u0003\u0002\u0002\u0002\u0f52\u0f51\u0003\u0002",
  "\u0002\u0002\u0f53\u029b\u0003\u0002\u0002\u0002\u0f54\u0f56\u0007\u0162",
  "\u0002\u0002\u0f55\u0f57\u0005\u0300\u0181\u0002\u0f56\u0f55\u0003\u0002",
  "\u0002\u0002\u0f56\u0f57\u0003\u0002\u0002\u0002\u0f57\u0f5c\u0003\u0002",
  "\u0002\u0002\u0f58\u0f59\u0007\u0160\u0002\u0002\u0f59\u0f5b\u0005\u0300",
  "\u0181\u0002\u0f5a\u0f58\u0003\u0002\u0002\u0002\u0f5b\u0f5e\u0003\u0002",
  "\u0002\u0002\u0f5c\u0f5a\u0003\u0002\u0002\u0002\u0f5c\u0f5d\u0003\u0002",
  "\u0002\u0002\u0f5d\u0f5f\u0003\u0002\u0002\u0002\u0f5e\u0f5c\u0003\u0002",
  "\u0002\u0002\u0f5f\u0f60\u0007\u0163\u0002\u0002\u0f60\u029d\u0003\u0002",
  "\u0002\u0002\u0f61\u0f62\u0005\u0300\u0181\u0002\u0f62\u029f\u0003\u0002",
  "\u0002\u0002\u0f63\u0f64\u0007\u0015\u0002\u0002\u0f64\u0f65\u0005\u02a2",
  "\u0152\u0002\u0f65\u02a1\u0003\u0002\u0002\u0002\u0f66\u0f67\u0005\u0300",
  "\u0181\u0002\u0f67\u02a3\u0003\u0002\u0002\u0002\u0f68\u0f69\u0007\u0162",
  "\u0002\u0002\u0f69\u0f6a\u0005\u02a6\u0154\u0002\u0f6a\u0f6b\u0007\u0163",
  "\u0002\u0002\u0f6b\u02a5\u0003\u0002\u0002\u0002\u0f6c\u0f6e\u0005\u0300",
  "\u0181\u0002\u0f6d\u0f6f\u0005\u02a8\u0155\u0002\u0f6e\u0f6d\u0003\u0002",
  "\u0002\u0002\u0f6e\u0f6f\u0003\u0002\u0002\u0002\u0f6f\u02a7\u0003\u0002",
  "\u0002\u0002\u0f70\u0f71\u0007\u0160\u0002\u0002\u0f71\u0f73\u0005\u0300",
  "\u0181\u0002\u0f72\u0f70\u0003\u0002\u0002\u0002\u0f73\u0f74\u0003\u0002",
  "\u0002\u0002\u0f74\u0f72\u0003\u0002\u0002\u0002\u0f74\u0f75\u0003\u0002",
  "\u0002\u0002\u0f75\u02a9\u0003\u0002\u0002\u0002\u0f76\u0f79\u0005\u02a4",
  "\u0153\u0002\u0f77\u0f79\u0005\u02a6\u0154\u0002\u0f78\u0f76\u0003\u0002",
  "\u0002\u0002\u0f78\u0f77\u0003\u0002\u0002\u0002\u0f79\u02ab\u0003\u0002",
  "\u0002\u0002\u0f7a\u0f7b\u0007\u0162\u0002\u0002\u0f7b\u0f80\u0005\u01ae",
  "\u00d8\u0002\u0f7c\u0f7d\u0007\u0160\u0002\u0002\u0f7d\u0f7f\u0005\u01ae",
  "\u00d8\u0002\u0f7e\u0f7c\u0003\u0002\u0002\u0002\u0f7f\u0f82\u0003\u0002",
  "\u0002\u0002\u0f80\u0f7e\u0003\u0002\u0002\u0002\u0f80\u0f81\u0003\u0002",
  "\u0002\u0002\u0f81\u0f83\u0003\u0002\u0002\u0002\u0f82\u0f80\u0003\u0002",
  "\u0002\u0002\u0f83\u0f84\u0007\u0163\u0002\u0002\u0f84\u02ad\u0003\u0002",
  "\u0002\u0002\u0f85\u0f8a\u0005\u01ae\u00d8\u0002\u0f86\u0f87\u0007\u0160",
  "\u0002\u0002\u0f87\u0f89\u0005\u01ae\u00d8\u0002\u0f88\u0f86\u0003\u0002",
  "\u0002\u0002\u0f89\u0f8c\u0003\u0002\u0002\u0002\u0f8a\u0f88\u0003\u0002",
  "\u0002\u0002\u0f8a\u0f8b\u0003\u0002\u0002\u0002\u0f8b\u02af\u0003\u0002",
  "\u0002\u0002\u0f8c\u0f8a\u0003\u0002\u0002\u0002\u0f8d\u0f8e\u0007\u0012",
  "\u0002\u0002\u0f8e\u0f8f\u0007\u0014\u0002\u0002\u0f8f\u0f94\u0005\u01ae",
  "\u00d8\u0002\u0f90\u0f91\u0007\u0160\u0002\u0002\u0f91\u0f93\u0005\u01ae",
  "\u00d8\u0002\u0f92\u0f90\u0003\u0002\u0002\u0002\u0f93\u0f96\u0003\u0002",
  "\u0002\u0002\u0f94\u0f92\u0003\u0002\u0002\u0002\u0f94\u0f95\u0003\u0002",
  "\u0002\u0002\u0f95\u02b1\u0003\u0002\u0002\u0002\u0f96\u0f94\u0003\u0002",
  "\u0002\u0002\u0f97\u0f98\u00075\u0002\u0002\u0f98\u0f99\u0007\u0014",
  "\u0002\u0002\u0f99\u0f9a\u0005\u02aa\u0156\u0002\u0f9a\u02b3\u0003\u0002",
  "\u0002\u0002\u0f9b\u0f9c\u0007%\u0002\u0002\u0f9c\u0f9d\u0007\u0014",
  "\u0002\u0002\u0f9d\u0f9e\u0005\u02aa\u0156\u0002\u0f9e\u02b5\u0003\u0002",
  "\u0002\u0002\u0f9f\u0fa0\u00076\u0002\u0002\u0fa0\u0fa1\u0007\u0014",
  "\u0002\u0002\u0fa1\u0fa2\u0005\u02aa\u0156\u0002\u0fa2\u02b7\u0003\u0002",
  "\u0002\u0002\u0fa3\u0fa4\u00077\u0002\u0002\u0fa4\u0fa7\u0007\u0014",
  "\u0002\u0002\u0fa5\u0fa8\u0005\u02ac\u0157\u0002\u0fa6\u0fa8\u0005\u02ae",
  "\u0158\u0002\u0fa7\u0fa5\u0003\u0002\u0002\u0002\u0fa7\u0fa6\u0003\u0002",
  "\u0002\u0002\u0fa8\u02b9\u0003\u0002\u0002\u0002\u0fa9\u0faa\u0005\u02bc",
  "\u015f\u0002\u0faa\u0fb9\u0007\u0162\u0002\u0002\u0fab\u0fba\u0007\u0172",
  "\u0002\u0002\u0fac\u0fae\t\u0013\u0002\u0002\u0fad\u0fac\u0003\u0002",
  "\u0002\u0002\u0fad\u0fae\u0003\u0002\u0002\u0002\u0fae\u0fb7\u0003\u0002",
  "\u0002\u0002\u0faf\u0fb4\u0005\u023c\u011f\u0002\u0fb0\u0fb1\u0007\u0160",
  "\u0002\u0002\u0fb1\u0fb3\u0005\u023c\u011f\u0002\u0fb2\u0fb0\u0003\u0002",
  "\u0002\u0002\u0fb3\u0fb6\u0003\u0002\u0002\u0002\u0fb4\u0fb2\u0003\u0002",
  "\u0002\u0002\u0fb4\u0fb5\u0003\u0002\u0002\u0002\u0fb5\u0fb8\u0003\u0002",
  "\u0002\u0002\u0fb6\u0fb4\u0003\u0002\u0002\u0002\u0fb7\u0faf\u0003\u0002",
  "\u0002\u0002\u0fb7\u0fb8\u0003\u0002\u0002\u0002\u0fb8\u0fba\u0003\u0002",
  "\u0002\u0002\u0fb9\u0fab\u0003\u0002\u0002\u0002\u0fb9\u0fad\u0003\u0002",
  "\u0002\u0002\u0fba\u0fbb\u0003\u0002\u0002\u0002\u0fbb\u0fbe\u0007\u0163",
  "\u0002\u0002\u0fbc\u0fbd\u0007\u00f4\u0002\u0002\u0fbd\u0fbf\u0005\u0244",
  "\u0123\u0002\u0fbe\u0fbc\u0003\u0002\u0002\u0002\u0fbe\u0fbf\u0003\u0002",
  "\u0002\u0002\u0fbf\u02bb\u0003\u0002\u0002\u0002\u0fc0\u0fc3\u0005\u0322",
  "\u0192\u0002\u0fc1\u0fc3\u0005\u0328\u0195\u0002\u0fc2\u0fc0\u0003\u0002",
  "\u0002\u0002\u0fc2\u0fc1\u0003\u0002\u0002\u0002\u0fc3\u02bd\u0003\u0002",
  "\u0002\u0002\u0fc4\u0fc5\u0007\u0087\u0002\u0002\u0fc5\u0fc6\u0007\u0162",
  "\u0002\u0002\u0fc6\u0fc7\u0005\u0300\u0181\u0002\u0fc7\u0fca\u0007\u0018",
  "\u0002\u0002\u0fc8\u0fcb\u0005\u01de\u00f0\u0002\u0fc9\u0fcb\u0005\u01e2",
  "\u00f2\u0002\u0fca\u0fc8\u0003\u0002\u0002\u0002\u0fca\u0fc9\u0003\u0002",
  "\u0002\u0002\u0fcb\u0fcc\u0003\u0002\u0002\u0002\u0fcc\u0fcd\u0007\u0163",
  "\u0002\u0002\u0fcd\u02bf\u0003\u0002\u0002\u0002\u0fce\u0fcf\u0007\u00a4",
  "\u0002\u0002\u0fcf\u0fd5\u0005\u0300\u0181\u0002\u0fd0\u0fd1\u0007\u00a5",
  "\u0002\u0002\u0fd1\u0fd2\u0005\u0300\u0181\u0002\u0fd2\u0fd3\u0007\u00a6",
  "\u0002\u0002\u0fd3\u0fd4\u0005\u0300\u0181\u0002\u0fd4\u0fd6\u0003\u0002",
  "\u0002\u0002\u0fd5\u0fd0\u0003\u0002\u0002\u0002\u0fd6\u0fd7\u0003\u0002",
  "\u0002\u0002\u0fd7\u0fd5\u0003\u0002\u0002\u0002\u0fd7\u0fd8\u0003\u0002",
  "\u0002\u0002\u0fd8\u0fdb\u0003\u0002\u0002\u0002\u0fd9\u0fda\u0007\u00a7",
  "\u0002\u0002\u0fda\u0fdc\u0005\u0300\u0181\u0002\u0fdb\u0fd9\u0003\u0002",
  "\u0002\u0002\u0fdb\u0fdc\u0003\u0002\u0002\u0002\u0fdc\u0fdd\u0003\u0002",
  "\u0002\u0002\u0fdd\u0fde\u0007\u00a8\u0002\u0002\u0fde\u02c1\u0003\u0002",
  "\u0002\u0002\u0fdf\u0fe5\u0007\u00a4\u0002\u0002\u0fe0\u0fe1\u0007\u00a5",
  "\u0002\u0002\u0fe1\u0fe2\u0005\u0300\u0181\u0002\u0fe2\u0fe3\u0007\u00a6",
  "\u0002\u0002\u0fe3\u0fe4\u0005\u0300\u0181\u0002\u0fe4\u0fe6\u0003\u0002",
  "\u0002\u0002\u0fe5\u0fe0\u0003\u0002\u0002\u0002\u0fe6\u0fe7\u0003\u0002",
  "\u0002\u0002\u0fe7\u0fe5\u0003\u0002\u0002\u0002\u0fe7\u0fe8\u0003\u0002",
  "\u0002\u0002\u0fe8\u0feb\u0003\u0002\u0002\u0002\u0fe9\u0fea\u0007\u00a7",
  "\u0002\u0002\u0fea\u0fec\u0005\u0300\u0181\u0002\u0feb\u0fe9\u0003\u0002",
  "\u0002\u0002\u0feb\u0fec\u0003\u0002\u0002\u0002\u0fec\u0fed\u0003\u0002",
  "\u0002\u0002\u0fed\u0fee\u0007\u00a8\u0002\u0002\u0fee\u02c3\u0003\u0002",
  "\u0002\u0002\u0fef\u0ff0\u0007\u012f\u0002\u0002\u0ff0\u0ff1\u0007\u0162",
  "\u0002\u0002\u0ff1\u0ff4\u0005\u0300\u0181\u0002\u0ff2\u0ff3\u0007M",
  "\u0002\u0002\u0ff3\u0ff5\u0005\u02c6\u0164\u0002\u0ff4\u0ff2\u0003\u0002",
  "\u0002\u0002\u0ff4\u0ff5\u0003\u0002\u0002\u0002\u0ff5\u0ff6\u0003\u0002",
  "\u0002\u0002\u0ff6\u0ff7\u0007\u0163\u0002\u0002\u0ff7\u02c5\u0003\u0002",
  "\u0002\u0002\u0ff8\u0ff9\t\u0017\u0002\u0002\u0ff9\u02c7\u0003\u0002",
  "\u0002\u0002\u0ffa\u0ffb\u0007\u012e\u0002\u0002\u0ffb\u0ffc\u0007\u0162",
  "\u0002\u0002\u0ffc\u0ffd\u0005\u02ca\u0166\u0002\u0ffd\u0ffe\u0007\u0017",
  "\u0002\u0002\u0ffe\u0fff\u0005\u0300\u0181\u0002\u0fff\u1000\u0007\u0163",
  "\u0002\u0002\u1000\u02c9\u0003\u0002\u0002\u0002\u1001\u1002\t\u0018",
  "\u0002\u0002\u1002\u02cb\u0003\u0002\u0002\u0002\u1003\u1010\u0005\u02da",
  "\u016e\u0002\u1004\u1010\u0007\u0181\u0002\u0002\u1005\u1010\u0005\u02d2",
  "\u016a\u0002\u1006\u1010\u0005\u02d4\u016b\u0002\u1007\u1010\u0005\u02d6",
  "\u016c\u0002\u1008\u1010\u0007\u017c\u0002\u0002\u1009\u1010\u0005\u02ce",
  "\u0168\u0002\u100a\u1010\u0007\u017e\u0002\u0002\u100b\u1010\u0007\u017f",
  "\u0002\u0002\u100c\u1010\u0005\u02d0\u0169\u0002\u100d\u1010\u0005\u030c",
  "\u0187\u0002\u100e\u1010\u0007B\u0002\u0002\u100f\u1003\u0003\u0002",
  "\u0002\u0002\u100f\u1004\u0003\u0002\u0002\u0002\u100f\u1005\u0003\u0002",
  "\u0002\u0002\u100f\u1006\u0003\u0002\u0002\u0002\u100f\u1007\u0003\u0002",
  "\u0002\u0002\u100f\u1008\u0003\u0002\u0002\u0002\u100f\u1009\u0003\u0002",
  "\u0002\u0002\u100f\u100a\u0003\u0002\u0002\u0002\u100f\u100b\u0003\u0002",
  "\u0002\u0002\u100f\u100c\u0003\u0002\u0002\u0002\u100f\u100d\u0003\u0002",
  "\u0002\u0002\u100f\u100e\u0003\u0002\u0002\u0002\u1010\u02cd\u0003\u0002",
  "\u0002\u0002\u1011\u1013\u0007\u017c\u0002\u0002\u1012\u1014\u0007\u017c",
  "\u0002\u0002\u1013\u1012\u0003\u0002\u0002\u0002\u1014\u1015\u0003\u0002",
  "\u0002\u0002\u1015\u1013\u0003\u0002\u0002\u0002\u1015\u1016\u0003\u0002",
  "\u0002\u0002\u1016\u02cf\u0003\u0002\u0002\u0002\u1017\u1018\u0007\u0184",
  "\u0002\u0002\u1018\u1019\u0007\u017d\u0002\u0002\u1019\u02d1\u0003\u0002",
  "\u0002\u0002\u101a\u101b\u0007W\u0002\u0002\u101b\u101e\u0007\u017c",
  "\u0002\u0002\u101c\u101e\u0007\u00f0\u0002\u0002\u101d\u101a\u0003\u0002",
  "\u0002\u0002\u101d\u101c\u0003\u0002\u0002\u0002\u101e\u02d3\u0003\u0002",
  "\u0002\u0002\u101f\u1020\u0007Y\u0002\u0002\u1020\u1023\u0007\u017c",
  "\u0002\u0002\u1021\u1023\u0007\u00f1\u0002\u0002\u1022\u101f\u0003\u0002",
  "\u0002\u0002\u1022\u1021\u0003\u0002\u0002\u0002\u1023\u02d5\u0003\u0002",
  "\u0002\u0002\u1024\u1025\u0007Z\u0002\u0002\u1025\u1026\u0007\u017c",
  "\u0002\u0002\u1026\u02d7\u0003\u0002\u0002\u0002\u1027\u1028\t\u0019",
  "\u0002\u0002\u1028\u02d9\u0003\u0002\u0002\u0002\u1029\u102a\u0005\u02d8",
  "\u016d\u0002\u102a\u102b\u0005\u02de\u0170\u0002\u102b\u02db\u0003\u0002",
  "\u0002\u0002\u102c\u102d\u0007\u0162\u0002\u0002\u102d\u102e\u0005\u02d8",
  "\u016d\u0002\u102e\u102f\u0007\u0163\u0002\u0002\u102f\u1030\u0005\u02de",
  "\u0170\u0002\u1030\u103c\u0003\u0002\u0002\u0002\u1031\u1032\u0007]",
  "\u0002\u0002\u1032\u1033\u0005\u02d8\u016d\u0002\u1033\u1034\u0005\u02de",
  "\u0170\u0002\u1034\u103c\u0003\u0002\u0002\u0002\u1035\u1036\u0007]",
  "\u0002\u0002\u1036\u1037\u0007\u0162\u0002\u0002\u1037\u1038\u0005\u0300",
  "\u0181\u0002\u1038\u1039\u0007\u0163\u0002\u0002\u1039\u103a\u0005\u02de",
  "\u0170\u0002\u103a\u103c\u0003\u0002\u0002\u0002\u103b\u102c\u0003\u0002",
  "\u0002\u0002\u103b\u1031\u0003\u0002\u0002\u0002\u103b\u1035\u0003\u0002",
  "\u0002\u0002\u103c\u02dd\u0003\u0002\u0002\u0002\u103d\u103e\u0007\u010c",
  "\u0002\u0002\u103e\u103f\u0007M\u0002\u0002\u103f\u104a\u0007\u010f",
  "\u0002\u0002\u1040\u1041\u0007\u0111\u0002\u0002\u1041\u1042\u0007M",
  "\u0002\u0002\u1042\u104a\u0007\u0115\u0002\u0002\u1043\u104a\u0007\u010c",
  "\u0002\u0002\u1044\u104a\u0007\u010f\u0002\u0002\u1045\u104a\u0007\u0111",
  "\u0002\u0002\u1046\u104a\u0007\u0113\u0002\u0002\u1047\u104a\u0007\u0114",
  "\u0002\u0002\u1048\u104a\u0007\u0115\u0002\u0002\u1049\u103d\u0003\u0002",
  "\u0002\u0002\u1049\u1040\u0003\u0002\u0002\u0002\u1049\u1043\u0003\u0002",
  "\u0002\u0002\u1049\u1044\u0003\u0002\u0002\u0002\u1049\u1045\u0003\u0002",
  "\u0002\u0002\u1049\u1046\u0003\u0002\u0002\u0002\u1049\u1047\u0003\u0002",
  "\u0002\u0002\u1049\u1048\u0003\u0002\u0002\u0002\u104a\u02df\u0003\u0002",
  "\u0002\u0002\u104b\u1057\u0005\u02cc\u0167\u0002\u104c\u1057\u0005\u02dc",
  "\u016f\u0002\u104d\u1057\u0005\u02be\u0160\u0002\u104e\u1057\u0005\u02c8",
  "\u0165\u0002\u104f\u1057\u0005\u02c4\u0163\u0002\u1050\u1057\u0005\u02c0",
  "\u0161\u0002\u1051\u1057\u0005\u02c2\u0162\u0002\u1052\u1057\u0005\u0302",
  "\u0182\u0002\u1053\u1057\u0005\u02ba\u015e\u0002\u1054\u1057\u0005\u0252",
  "\u012a\u0002\u1055\u1057\u0005\u02a4\u0153\u0002\u1056\u104b\u0003\u0002",
  "\u0002\u0002\u1056\u104c\u0003\u0002\u0002\u0002\u1056\u104d\u0003\u0002",
  "\u0002\u0002\u1056\u104e\u0003\u0002\u0002\u0002\u1056\u104f\u0003\u0002",
  "\u0002\u0002\u1056\u1050\u0003\u0002\u0002\u0002\u1056\u1051\u0003\u0002",
  "\u0002\u0002\u1056\u1052\u0003\u0002\u0002\u0002\u1056\u1053\u0003\u0002",
  "\u0002\u0002\u1056\u1054\u0003\u0002\u0002\u0002\u1056\u1055\u0003\u0002",
  "\u0002\u0002\u1057\u02e1\u0003\u0002\u0002\u0002\u1058\u1059\t\u001a",
  "\u0002\u0002\u1059\u02e3\u0003\u0002\u0002\u0002\u105a\u1064\u0007B",
  "\u0002\u0002\u105b\u1064\u0007\u0003\u0002\u0002\u105c\u1064\u0007\u0004",
  "\u0002\u0002\u105d\u105e\u0007\t\u0002\u0002\u105e\u1064\u0007B\u0002",
  "\u0002\u105f\u1060\u0007\t\u0002\u0002\u1060\u1064\u0007\u0003\u0002",
  "\u0002\u1061\u1062\u0007\t\u0002\u0002\u1062\u1064\u0007\u0004\u0002",
  "\u0002\u1063\u105a\u0003\u0002\u0002\u0002\u1063\u105b\u0003\u0002\u0002",
  "\u0002\u1063\u105c\u0003\u0002\u0002\u0002\u1063\u105d\u0003\u0002\u0002",
  "\u0002\u1063\u105f\u0003\u0002\u0002\u0002\u1063\u1061\u0003\u0002\u0002",
  "\u0002\u1064\u02e5\u0003\u0002\u0002\u0002\u1065\u1066\u0007\u0179\u0002",
  "\u0002\u1066\u02e7\u0003\u0002\u0002\u0002\u1067\u1068\t\u001b\u0002",
  "\u0002\u1068\u02e9\u0003\u0002\u0002\u0002\u1069\u106a\t\u001c\u0002",
  "\u0002\u106a\u02eb\u0003\u0002\u0002\u0002\u106b\u106c\u0007\u0178\u0002",
  "\u0002\u106c\u02ed\u0003\u0002\u0002\u0002\u106d\u106e\u0007\u0175\u0002",
  "\u0002\u106e\u02ef\u0003\u0002\u0002\u0002\u106f\u1070\u0007\u0177\u0002",
  "\u0002\u1070\u02f1\u0003\u0002\u0002\u0002\u1071\u1072\t\u001d\u0002",
  "\u0002\u1072\u02f3\u0003\u0002\u0002\u0002\u1073\u1079\u0005\u02f2\u017a",
  "\u0002\u1074\u1079\u0007\u016b\u0002\u0002\u1075\u1079\u0007\u016c\u0002",
  "\u0002\u1076\u1079\u0007\u016d\u0002\u0002\u1077\u1079\u0007\u016e\u0002",
  "\u0002\u1078\u1073\u0003\u0002\u0002\u0002\u1078\u1074\u0003\u0002\u0002",
  "\u0002\u1078\u1075\u0003\u0002\u0002\u0002\u1078\u1076\u0003\u0002\u0002",
  "\u0002\u1078\u1077\u0003\u0002\u0002\u0002\u1079\u02f5\u0003\u0002\u0002",
  "\u0002\u107a\u107b\u0007A\u0002\u0002\u107b\u107c\u0007\u001a\u0002",
  "\u0002\u107c\u107d\u0007\u0017\u0002\u0002\u107d\u02f7\u0003\u0002\u0002",
  "\u0002\u107e\u1086\u0007\u0168\u0002\u0002\u107f\u1086\u0007\u0169\u0002",
  "\u0002\u1080\u1086\u0007\u016a\u0002\u0002\u1081\u1082\u0007A\u0002",
  "\u0002\u1082\u1083\u0007\t\u0002\u0002\u1083\u1084\u0007\u001a\u0002",
  "\u0002\u1084\u1086\u0007\u0017\u0002\u0002\u1085\u107e\u0003\u0002\u0002",
  "\u0002\u1085\u107f\u0003\u0002\u0002\u0002\u1085\u1080\u0003\u0002\u0002",
  "\u0002\u1085\u1081\u0003\u0002\u0002\u0002\u1086\u02f9\u0003\u0002\u0002",
  "\u0002\u1087\u1088\u0007\t\u0002\u0002\u1088\u02fb\u0003\u0002\u0002",
  "\u0002\u1089\u108a\u0007\u0007\u0002\u0002\u108a\u02fd\u0003\u0002\u0002",
  "\u0002\u108b\u108c\u0007\b\u0002\u0002\u108c\u02ff\u0003\u0002\u0002",
  "\u0002\u108d\u108e\b\u0181\u0001\u0002\u108e\u1097\u0005\u02e0\u0171",
  "\u0002\u108f\u1090\u0007\u0164\u0002\u0002\u1090\u1091\u0005\u0300\u0181",
  "\u0002\u1091\u1092\u0007\u0165\u0002\u0002\u1092\u1096\u0003\u0002\u0002",
  "\u0002\u1093\u1094\u0007\u015e\u0002\u0002\u1094\u1096\u0005\u0320\u0191",
  "\u0002\u1095\u108f\u0003\u0002\u0002\u0002\u1095\u1093\u0003\u0002\u0002",
  "\u0002\u1096\u1099\u0003\u0002\u0002\u0002\u1097\u1095\u0003\u0002\u0002",
  "\u0002\u1097\u1098\u0003\u0002\u0002\u0002\u1098\u10a7\u0003\u0002\u0002",
  "\u0002\u1099\u1097\u0003\u0002\u0002\u0002\u109a\u109b\u0005\u02e2\u0172",
  "\u0002\u109b\u109c\u0005\u0300\u0181\u0011\u109c\u10a7\u0003\u0002\u0002",
  "\u0002\u109d\u109e\u0007\r\u0002\u0002\u109e\u10a7\u0005\u0302\u0182",
  "\u0002\u109f\u10a0\u0005\u02fa\u017e\u0002\u10a0\u10a1\u0005\u0300\u0181",
  "\u0006\u10a1\u10a7\u0003\u0002\u0002\u0002\u10a2\u10a3\u0007\u0162\u0002",
  "\u0002\u10a3\u10a4\u0005\u0300\u0181\u0002\u10a4\u10a5\u0007\u0163\u0002",
  "\u0002\u10a5\u10a7\u0003\u0002\u0002\u0002\u10a6\u108d\u0003\u0002\u0002",
  "\u0002\u10a6\u109a\u0003\u0002\u0002\u0002\u10a6\u109d\u0003\u0002\u0002",
  "\u0002\u10a6\u109f\u0003\u0002\u0002\u0002\u10a6\u10a2\u0003\u0002\u0002",
  "\u0002\u10a7\u10d6\u0003\u0002\u0002\u0002\u10a8\u10a9\f\u000f\u0002",
  "\u0002\u10a9\u10aa\u0005\u02e6\u0174\u0002\u10aa\u10ab\u0005\u0300\u0181",
  "\u0010\u10ab\u10d5\u0003\u0002\u0002\u0002\u10ac\u10ad\f\u000e\u0002",
  "\u0002\u10ad\u10ae\u0005\u02e8\u0175\u0002\u10ae\u10af\u0005\u0300\u0181",
  "\u000f\u10af\u10d5\u0003\u0002\u0002\u0002\u10b0\u10b1\f\r\u0002\u0002",
  "\u10b1\u10b2\u0005\u02ea\u0176\u0002\u10b2\u10b3\u0005\u0300\u0181\u000e",
  "\u10b3\u10d5\u0003\u0002\u0002\u0002\u10b4\u10b5\f\f\u0002\u0002\u10b5",
  "\u10b6\u0005\u02ec\u0177\u0002\u10b6\u10b7\u0005\u0300\u0181\r\u10b7",
  "\u10d5\u0003\u0002\u0002\u0002\u10b8\u10b9\f\u000b\u0002\u0002\u10b9",
  "\u10ba\u0005\u02ee\u0178\u0002\u10ba\u10bb\u0005\u0300\u0181\f\u10bb",
  "\u10d5\u0003\u0002\u0002\u0002\u10bc\u10bd\f\n\u0002\u0002\u10bd\u10be",
  "\u0005\u02f0\u0179\u0002\u10be\u10bf\u0005\u0300\u0181\u000b\u10bf\u10d5",
  "\u0003\u0002\u0002\u0002\u10c0\u10c3\f\u0007\u0002\u0002\u10c1\u10c4",
  "\u0005\u02f8\u017d\u0002\u10c2\u10c4\u0005\u02f6\u017c\u0002\u10c3\u10c1",
  "\u0003\u0002\u0002\u0002\u10c3\u10c2\u0003\u0002\u0002\u0002\u10c4\u10c5",
  "\u0003\u0002\u0002\u0002\u10c5\u10c6\u0005\u0300\u0181\b\u10c6\u10d5",
  "\u0003\u0002\u0002\u0002\u10c7\u10c8\f\u0005\u0002\u0002\u10c8\u10c9",
  "\u0005\u02fc\u017f\u0002\u10c9\u10ca\u0005\u0300\u0181\u0006\u10ca\u10d5",
  "\u0003\u0002\u0002\u0002\u10cb\u10cc\f\u0004\u0002\u0002\u10cc\u10cd",
  "\u0005\u02fe\u0180\u0002\u10cd\u10ce\u0005\u0300\u0181\u0005\u10ce\u10d5",
  "\u0003\u0002\u0002\u0002\u10cf\u10d0\f\u0010\u0002\u0002\u10d0\u10d1",
  "\u0007A\u0002\u0002\u10d1\u10d5\u0005\u02e4\u0173\u0002\u10d2\u10d3",
  "\f\t\u0002\u0002\u10d3\u10d5\u0005\u0304\u0183\u0002\u10d4\u10a8\u0003",
  "\u0002\u0002\u0002\u10d4\u10ac\u0003\u0002\u0002\u0002\u10d4\u10b0\u0003",
  "\u0002\u0002\u0002\u10d4\u10b4\u0003\u0002\u0002\u0002\u10d4\u10b8\u0003",
  "\u0002\u0002\u0002\u10d4\u10bc\u0003\u0002\u0002\u0002\u10d4\u10c0\u0003",
  "\u0002\u0002\u0002\u10d4\u10c7\u0003\u0002\u0002\u0002\u10d4\u10cb\u0003",
  "\u0002\u0002\u0002\u10d4\u10cf\u0003\u0002\u0002\u0002\u10d4\u10d2\u0003",
  "\u0002\u0002\u0002\u10d5\u10d8\u0003\u0002\u0002\u0002\u10d6\u10d4\u0003",
  "\u0002\u0002\u0002\u10d6\u10d7\u0003\u0002\u0002\u0002\u10d7\u0301\u0003",
  "\u0002\u0002\u0002\u10d8\u10d6\u0003\u0002\u0002\u0002\u10d9\u10da\u0007",
  "\u0162\u0002\u0002\u10da\u10db\u0005\u01fa\u00fe\u0002\u10db\u10dc\u0007",
  "\u0163\u0002\u0002\u10dc\u0303\u0003\u0002\u0002\u0002\u10dd\u10de\u0005",
  "\u02f4\u017b\u0002\u10de\u10df\u0005\u0300\u0181\u0002\u10df\u10e4\u0003",
  "\u0002\u0002\u0002\u10e0\u10e4\u0005\u0306\u0184\u0002\u10e1\u10e2\u0007",
  "\t\u0002\u0002\u10e2\u10e4\u0005\u030a\u0186\u0002\u10e3\u10dd\u0003",
  "\u0002\u0002\u0002\u10e3\u10e0\u0003\u0002\u0002\u0002\u10e3\u10e1\u0003",
  "\u0002\u0002\u0002\u10e4\u0305\u0003\u0002\u0002\u0002\u10e5\u10e6\u0007",
  "\u00b6\u0002\u0002\u10e6\u10f3\u0005\u0308\u0185\u0002\u10e7\u10e8\u0007",
  "\u00ce\u0002\u0002\u10e8\u10e9\u0005\u0300\u0181\u0002\u10e9\u10ea\u0007",
  "\u0007\u0002\u0002\u10ea\u10eb\u0005\u0300\u0181\u0002\u10eb\u10f3\u0003",
  "\u0002\u0002\u0002\u10ec\u10ed\u0007\n\u0002\u0002\u10ed\u10ee\u0007",
  "\u000b\u0002\u0002\u10ee\u10f3\u0005\u02a4\u0153\u0002\u10ef\u10f0\u0007",
  "\n\u0002\u0002\u10f0\u10f1\u0007\u0005\u0002\u0002\u10f1\u10f3\u0005",
  "\u02a4\u0153\u0002\u10f2\u10e5\u0003\u0002\u0002\u0002\u10f2\u10e7\u0003",
  "\u0002\u0002\u0002\u10f2\u10ec\u0003\u0002\u0002\u0002\u10f2\u10ef\u0003",
  "\u0002\u0002\u0002\u10f3\u0307\u0003\u0002\u0002\u0002\u10f4\u10f7\u0005",
  "\u0302\u0182\u0002\u10f5\u10f7\u0005\u02a4\u0153\u0002\u10f6\u10f4\u0003",
  "\u0002\u0002\u0002\u10f6\u10f5\u0003\u0002\u0002\u0002\u10f7\u0309\u0003",
  "\u0002\u0002\u0002\u10f8\u10f9\u0005\u02f2\u017a\u0002\u10f9\u10fa\u0005",
  "\u0300\u0181\u0002\u10fa\u10fd\u0003\u0002\u0002\u0002\u10fb\u10fd\u0005",
  "\u0306\u0184\u0002\u10fc\u10f8\u0003\u0002\u0002\u0002\u10fc\u10fb\u0003",
  "\u0002\u0002\u0002\u10fd\u030b\u0003\u0002\u0002\u0002\u10fe\u10ff\t",
  "\u001e\u0002\u0002\u10ff\u030d\u0003\u0002\u0002\u0002\u1100\u1101\t",
  "\u001e\u0002\u0002\u1101\u030f\u0003\u0002\u0002\u0002\u1102\u1104\u0005",
  "\u0278\u013d\u0002\u1103\u1105\u0005\u0312\u018a\u0002\u1104\u1103\u0003",
  "\u0002\u0002\u0002\u1104\u1105\u0003\u0002\u0002\u0002\u1105\u0311\u0003",
  "\u0002\u0002\u0002\u1106\u1107\u0007%\u0002\u0002\u1107\u1108\u0007",
  "\u0162\u0002\u0002\u1108\u110d\u0005\u0314\u018b\u0002\u1109\u110a\u0007",
  "\u0160\u0002\u0002\u110a\u110c\u0005\u0314\u018b\u0002\u110b\u1109\u0003",
  "\u0002\u0002\u0002\u110c\u110f\u0003\u0002\u0002\u0002\u110d\u110b\u0003",
  "\u0002\u0002\u0002\u110d\u110e\u0003\u0002\u0002\u0002\u110e\u1110\u0003",
  "\u0002\u0002\u0002\u110f\u110d\u0003\u0002\u0002\u0002\u1110\u1111\u0007",
  "\u0163\u0002\u0002\u1111\u0313\u0003\u0002\u0002\u0002\u1112\u1115\u0005",
  "\u0320\u0191\u0002\u1113\u1114\u0007\u0168\u0002\u0002\u1114\u1116\u0005",
  "\u02cc\u0167\u0002\u1115\u1113\u0003\u0002\u0002\u0002\u1115\u1116\u0003",
  "\u0002\u0002\u0002\u1116\u0315\u0003\u0002\u0002\u0002\u1117\u1118\u0007",
  "%\u0002\u0002\u1118\u1119\u0007\u0162\u0002\u0002\u1119\u111e\u0005",
  "\u0318\u018d\u0002\u111a\u111b\u0007\u0160\u0002\u0002\u111b\u111d\u0005",
  "\u0318\u018d\u0002\u111c\u111a\u0003\u0002\u0002\u0002\u111d\u1120\u0003",
  "\u0002\u0002\u0002\u111e\u111c\u0003\u0002\u0002\u0002\u111e\u111f\u0003",
  "\u0002\u0002\u0002\u111f\u1121\u0003\u0002\u0002\u0002\u1120\u111e\u0003",
  "\u0002\u0002\u0002\u1121\u1122\u0007\u0163\u0002\u0002\u1122\u0317\u0003",
  "\u0002\u0002\u0002\u1123\u1124\u0005\u0320\u0191\u0002\u1124\u1125\u0005",
  "\u031a\u018e\u0002\u1125\u1126\u0005\u02cc\u0167\u0002\u1126\u0319\u0003",
  "\u0002\u0002\u0002\u1127\u1128\t\u001f\u0002\u0002\u1128\u031b\u0003",
  "\u0002\u0002\u0002\u1129\u112a\t \u0002\u0002\u112a\u031d\u0003\u0002",
  "\u0002\u0002\u112b\u112f\u0005\u031c\u018f\u0002\u112c\u112f\u0007\u017c",
  "\u0002\u0002\u112d\u112f\u0005\u0322\u0192\u0002\u112e\u112b\u0003\u0002",
  "\u0002\u0002\u112e\u112c\u0003\u0002\u0002\u0002\u112e\u112d\u0003\u0002",
  "\u0002\u0002\u112f\u031f\u0003\u0002\u0002\u0002\u1130\u1139\u0007\u0182",
  "\u0002\u0002\u1131\u1132\u0007\u0166\u0002\u0002\u1132\u1133\u0007\u0166",
  "\u0002\u0002\u1133\u1134\u0007\u0182\u0002\u0002\u1134\u1135\u0007\u0167",
  "\u0002\u0002\u1135\u1139\u0007\u0167\u0002\u0002\u1136\u1139\u0005\u0326",
  "\u0194\u0002\u1137\u1139\u0005\u032a\u0196\u0002\u1138\u1130\u0003\u0002",
  "\u0002\u0002\u1138\u1131\u0003\u0002\u0002\u0002\u1138\u1136\u0003\u0002",
  "\u0002\u0002\u1138\u1137\u0003\u0002\u0002\u0002\u1139\u0321\u0003\u0002",
  "\u0002\u0002\u113a\u113b\u0005\u0320\u0191\u0002\u113b\u113c\u0007\u015e",
  "\u0002\u0002\u113c\u113d\u0005\u0320\u0191\u0002\u113d\u1140\u0003\u0002",
  "\u0002\u0002\u113e\u1140\u0005\u0320\u0191\u0002\u113f\u113a\u0003\u0002",
  "\u0002\u0002\u113f\u113e\u0003\u0002\u0002\u0002\u1140\u0323\u0003\u0002",
  "\u0002\u0002\u1141\u1144\u0005\u0320\u0191\u0002\u1142\u1144\u0007\u0183",
  "\u0002\u0002\u1143\u1141\u0003\u0002\u0002\u0002\u1143\u1142\u0003\u0002",
  "\u0002\u0002\u1144\u0325\u0003\u0002\u0002\u0002\u1145\u1146\t!\u0002",
  '\u0002\u1146\u0327\u0003\u0002\u0002\u0002\u1147\u1148\t"\u0002\u0002',
  "\u1148\u0329\u0003\u0002\u0002\u0002\u1149\u114c\u0005\u0328\u0195\u0002",
  "\u114a\u114c\u0007[\u0002\u0002\u114b\u1149\u0003\u0002\u0002\u0002",
  "\u114b\u114a\u0003\u0002\u0002\u0002\u114c\u032b\u0003\u0002\u0002\u0002",
  "\u114d\u115c\u0005\u0336\u019c\u0002\u114e\u115c\u0005\u0346\u01a4\u0002",
  "\u114f\u115c\u0005\u034e\u01a8\u0002\u1150\u115c\u0005\u034a\u01a6\u0002",
  "\u1151\u115c\u0005\u034c\u01a7\u0002\u1152\u115c\u0005\u0364\u01b3\u0002",
  "\u1153\u115c\u0005\u0366\u01b4\u0002\u1154\u115c\u0005\u036a\u01b6\u0002",
  "\u1155\u115c\u0005\u0370\u01b9\u0002\u1156\u115c\u0005\u0372\u01ba\u0002",
  "\u1157\u115c\u0005\u0374\u01bb\u0002\u1158\u115c\u0005\u0376\u01bc\u0002",
  "\u1159\u115c\u0005\u0378\u01bd\u0002\u115a\u115c\u0005\u037a\u01be\u0002",
  "\u115b\u114d\u0003\u0002\u0002\u0002\u115b\u114e\u0003\u0002\u0002\u0002",
  "\u115b\u114f\u0003\u0002\u0002\u0002\u115b\u1150\u0003\u0002\u0002\u0002",
  "\u115b\u1151\u0003\u0002\u0002\u0002\u115b\u1152\u0003\u0002\u0002\u0002",
  "\u115b\u1153\u0003\u0002\u0002\u0002\u115b\u1154\u0003\u0002\u0002\u0002",
  "\u115b\u1155\u0003\u0002\u0002\u0002\u115b\u1156\u0003\u0002\u0002\u0002",
  "\u115b\u1157\u0003\u0002\u0002\u0002\u115b\u1158\u0003\u0002\u0002\u0002",
  "\u115b\u1159\u0003\u0002\u0002\u0002\u115b\u115a\u0003\u0002\u0002\u0002",
  "\u115c\u032d\u0003\u0002\u0002\u0002\u115d\u115e\u0007\u013d\u0002\u0002",
  "\u115e\u115f\u0007\u0168\u0002\u0002\u115f\u1165\u0007\u0181\u0002\u0002",
  "\u1160\u1161\u0007\u0140\u0002\u0002\u1161\u1162\u0007\u0142\u0002\u0002",
  "\u1162\u1163\u0007\u0168\u0002\u0002\u1163\u1165\u0005\u0350\u01a9\u0002",
  "\u1164\u115d\u0003\u0002\u0002\u0002\u1164\u1160\u0003\u0002\u0002\u0002",
  "\u1165\u032f\u0003\u0002\u0002\u0002\u1166\u116b\u0005\u032e\u0198\u0002",
  "\u1167\u1168\u0007\u0160\u0002\u0002\u1168\u116a\u0005\u032e\u0198\u0002",
  "\u1169\u1167\u0003\u0002\u0002\u0002\u116a\u116d\u0003\u0002\u0002\u0002",
  "\u116b\u1169\u0003\u0002\u0002\u0002\u116b\u116c\u0003\u0002\u0002\u0002",
  "\u116c\u0331\u0003\u0002\u0002\u0002\u116d\u116b\u0003\u0002\u0002\u0002",
  "\u116e\u1172\u0007\u013d\u0002\u0002\u116f\u1170\u0007\u0140\u0002\u0002",
  "\u1170\u1172\u0007\u0142\u0002\u0002\u1171\u116e\u0003\u0002\u0002\u0002",
  "\u1171\u116f\u0003\u0002\u0002\u0002\u1172\u0333\u0003\u0002\u0002\u0002",
  "\u1173\u1178\u0005\u0332\u019a\u0002\u1174\u1175\u0007\u0160\u0002\u0002",
  "\u1175\u1177\u0005\u0332\u019a\u0002\u1176\u1174\u0003\u0002\u0002\u0002",
  "\u1177\u117a\u0003\u0002\u0002\u0002\u1178\u1176\u0003\u0002\u0002\u0002",
  "\u1178\u1179\u0003\u0002\u0002\u0002\u1179\u0335\u0003\u0002\u0002\u0002",
  "\u117a\u1178\u0003\u0002\u0002\u0002\u117b\u117c\u0007C\u0002\u0002",
  "\u117c\u117d\u0007\u013b\u0002\u0002\u117d\u1180\u0007\u013c\u0002\u0002",
  "\u117e\u1181\u0005\u0338\u019d\u0002\u117f\u1181\u0005\u033a\u019e\u0002",
  "\u1180\u117e\u0003\u0002\u0002\u0002\u1180\u117f\u0003\u0002\u0002\u0002",
  "\u1181\u0337\u0003\u0002\u0002\u0002\u1182\u1183\u0005\u0320\u0191\u0002",
  "\u1183\u1184\u0007\n\u0002\u0002\u1184\u1185\u0005\u0320\u0191\u0002",
  "\u1185\u0339\u0003\u0002\u0002\u0002\u1186\u1189\u0005\u0320\u0191\u0002",
  "\u1187\u1188\u0007\u0097\u0002\u0002\u1188\u118a\u0005\u0330\u0199\u0002",
  "\u1189\u1187\u0003\u0002\u0002\u0002\u1189\u118a\u0003\u0002\u0002\u0002",
  "\u118a\u033b\u0003\u0002\u0002\u0002\u118b\u118c\u0007\u0097\u0002\u0002",
  "\u118c\u118d\u0007\u0089\u0002\u0002\u118d\u033d\u0003\u0002\u0002\u0002",
  "\u118e\u1190\u0007\u013f\u0002\u0002\u118f\u1191\u0005\u033c\u019f\u0002",
  "\u1190\u118f\u0003\u0002\u0002\u0002\u1190\u1191\u0003\u0002\u0002\u0002",
  "\u1191\u033f\u0003\u0002\u0002\u0002\u1192\u1193\u0007\u007f\u0002\u0002",
  "\u1193\u0341\u0003\u0002\u0002\u0002\u1194\u1195\u0007\u0080\u0002\u0002",
  "\u1195\u0343\u0003\u0002\u0002\u0002\u1196\u1197\u0007\u014c\u0002\u0002",
  "\u1197\u0345\u0003\u0002\u0002\u0002\u1198\u1199\u0007E\u0002\u0002",
  "\u1199\u119a\u0007\u013b\u0002\u0002\u119a\u119b\u0007\u013c\u0002\u0002",
  "\u119b\u11ad\u0005\u0320\u0191\u0002\u119c\u11ae\u0007\u0127\u0002\u0002",
  "\u119d\u11ae\u0007\u0080\u0002\u0002\u119e\u119f\u0007\u009d\u0002\u0002",
  "\u119f\u11ae\u0005\u0330\u0199\u0002\u11a0\u11a1\u0007\u009e\u0002\u0002",
  "\u11a1\u11ae\u0005\u0334\u019b\u0002\u11a2\u11ae\u0005\u0348\u01a5\u0002",
  "\u11a3\u11a5\u0005\u033e\u01a0\u0002\u11a4\u11a6\u0005\u0340\u01a1\u0002",
  "\u11a5\u11a4\u0003\u0002\u0002\u0002\u11a5\u11a6\u0003\u0002\u0002\u0002",
  "\u11a6\u11ac\u0003\u0002\u0002\u0002\u11a7\u11a9\u0005\u0340\u01a1\u0002",
  "\u11a8\u11aa\u0005\u033e\u01a0\u0002\u11a9\u11a8\u0003\u0002\u0002\u0002",
  "\u11a9\u11aa\u0003\u0002\u0002\u0002\u11aa\u11ac\u0003\u0002\u0002\u0002",
  "\u11ab\u11a3\u0003\u0002\u0002\u0002\u11ab\u11a7\u0003\u0002\u0002\u0002",
  "\u11ac\u11ae\u0003\u0002\u0002\u0002\u11ad\u119c\u0003\u0002\u0002\u0002",
  "\u11ad\u119d\u0003\u0002\u0002\u0002\u11ad\u119e\u0003\u0002\u0002\u0002",
  "\u11ad\u11a0\u0003\u0002\u0002\u0002\u11ad\u11a2\u0003\u0002\u0002\u0002",
  "\u11ad\u11ab\u0003\u0002\u0002\u0002\u11ae\u0347\u0003\u0002\u0002\u0002",
  "\u11af\u11b0\u0007L\u0002\u0002\u11b0\u11b1\u0007M\u0002\u0002\u11b1",
  "\u11b2\u0005\u0320\u0191\u0002\u11b2\u0349\u0003\u0002\u0002\u0002\u11b3",
  "\u11b6\u0005\u0340\u01a1\u0002\u11b4\u11b6\u0005\u0342\u01a2\u0002\u11b5",
  "\u11b3\u0003\u0002\u0002\u0002\u11b5\u11b4\u0003\u0002\u0002\u0002\u11b6",
  "\u11b7\u0003\u0002\u0002\u0002\u11b7\u11b8\u0007\u0149\u0002\u0002\u11b8",
  "\u11b9\u0007\u014a\u0002\u0002\u11b9\u034b\u0003\u0002\u0002\u0002\u11ba",
  "\u11c6\u0007\u0089\u0002\u0002\u11bb\u11bc\u0007\u014b\u0002\u0002\u11bc",
  "\u11bd\u0007\u013b\u0002\u0002\u11bd\u11be\u0007\u013c\u0002\u0002\u11be",
  "\u11bf\u0007\u0097\u0002\u0002\u11bf\u11c7\u0005\u0320\u0191\u0002\u11c0",
  "\u11c1\u0007\u013b\u0002\u0002\u11c1\u11c2\u0007\u013c\u0002\u0002\u11c2",
  "\u11c3\u0005\u0320\u0191\u0002\u11c3\u11c4\u0007\u0097\u0002\u0002\u11c4",
  "\u11c5\u0005\u0320\u0191\u0002\u11c5\u11c7\u0003\u0002\u0002\u0002\u11c6",
  "\u11bb\u0003\u0002\u0002\u0002\u11c6\u11c0\u0003\u0002\u0002\u0002\u11c7",
  "\u034d\u0003\u0002\u0002\u0002\u11c8\u11c9\u0007K\u0002\u0002\u11c9",
  "\u11ca\u0007\u013b\u0002\u0002\u11ca\u11cb\u0007\u013c\u0002\u0002\u11cb",
  "\u11cc\u0005\u0320\u0191\u0002\u11cc\u034f\u0003\u0002\u0002\u0002\u11cd",
  "\u11d2\u0005\u0320\u0191\u0002\u11ce\u11cf\u0007\u015e\u0002\u0002\u11cf",
  "\u11d1\u0005\u0320\u0191\u0002\u11d0\u11ce\u0003\u0002\u0002\u0002\u11d1",
  "\u11d4\u0003\u0002\u0002\u0002\u11d2\u11d0\u0003\u0002\u0002\u0002\u11d2",
  "\u11d3\u0003\u0002\u0002\u0002\u11d3\u0351\u0003\u0002\u0002\u0002\u11d4",
  "\u11d2\u0003\u0002\u0002\u0002\u11d5\u11d6\u0005\u035a\u01ae\u0002\u11d6",
  "\u0353\u0003\u0002\u0002\u0002\u11d7\u11d8\u0005\u0352\u01aa\u0002\u11d8",
  "\u11d9\u0007\u0002\u0002\u0003\u11d9\u0355\u0003\u0002\u0002\u0002\u11da",
  "\u11df\u0005\u0358\u01ad\u0002\u11db\u11dc\u0007\b\u0002\u0002\u11dc",
  "\u11de\u0005\u0358\u01ad\u0002\u11dd\u11db\u0003\u0002\u0002\u0002\u11de",
  "\u11e1\u0003\u0002\u0002\u0002\u11df\u11dd\u0003\u0002\u0002\u0002\u11df",
  "\u11e0\u0003\u0002\u0002\u0002\u11e0\u0357\u0003\u0002\u0002\u0002\u11e1",
  "\u11df\u0003\u0002\u0002\u0002\u11e2\u11e7\u0005\u035a\u01ae\u0002\u11e3",
  "\u11e4\u0007\u0007\u0002\u0002\u11e4\u11e6\u0005\u035a\u01ae\u0002\u11e5",
  "\u11e3\u0003\u0002\u0002\u0002\u11e6\u11e9\u0003\u0002\u0002\u0002\u11e7",
  "\u11e5\u0003\u0002\u0002\u0002\u11e7\u11e8\u0003\u0002\u0002\u0002\u11e8",
  "\u0359\u0003\u0002\u0002\u0002\u11e9\u11e7\u0003\u0002\u0002\u0002\u11ea",
  "\u11eb\u0005\u0320\u0191\u0002\u11eb\u11ec\u0005\u035e\u01b0\u0002\u11ec",
  "\u11ed\u0005\u035c\u01af\u0002\u11ed\u035b\u0003\u0002\u0002\u0002\u11ee",
  "\u11ef\t\u0019\u0002\u0002\u11ef\u035d\u0003\u0002\u0002\u0002\u11f0",
  "\u11f1\u0007\u016e\u0002\u0002\u11f1\u035f\u0003\u0002\u0002\u0002\u11f2",
  "\u11f7\u0007w\u0002\u0002\u11f3\u11f4\u0007\u0143\u0002\u0002\u11f4",
  "\u11f5\u0007M\u0002\u0002\u11f5\u11f7\u0005\u0350\u01a9\u0002\u11f6",
  "\u11f2\u0003\u0002\u0002\u0002\u11f6\u11f3\u0003\u0002\u0002\u0002\u11f7",
  "\u0361\u0003\u0002\u0002\u0002\u11f8\u11f9\u0005\u0360\u01b1\u0002\u11f9",
  "\u11fa\u0007\u0002\u0002\u0003\u11fa\u0363\u0003\u0002\u0002\u0002\u11fb",
  "\u11fc\u0007C\u0002\u0002\u11fc\u11fd\u0007\u00d4\u0002\u0002\u11fd",
  "\u11fe\u0005\u0320\u0191\u0002\u11fe\u11ff\u0007\u015e\u0002\u0002\u11ff",
  "\u1200\u0005\u0320\u0191\u0002\u1200\u1201\u0005\u0368\u01b5\u0002\u1201",
  "\u0365\u0003\u0002\u0002\u0002\u1202\u1203\u0007E\u0002\u0002\u1203",
  "\u1204\u0007\u00d4\u0002\u0002\u1204\u1205\u0005\u0320\u0191\u0002\u1205",
  "\u1206\u0007\u015e\u0002\u0002\u1206\u1216\u0005\u0320\u0191\u0002\u1207",
  "\u1217\u0005\u0368\u01b5\u0002\u1208\u1209\u0007\u0088\u0002\u0002\u1209",
  "\u120a\u0007M\u0002\u0002\u120a\u120b\u0007\u0142\u0002\u0002\u120b",
  "\u1217\u0005\u0350\u01a9\u0002\u120c\u120d\u0007K\u0002\u0002\u120d",
  "\u120e\u0007\u0017\u0002\u0002\u120e\u120f\u0007\u0142\u0002\u0002\u120f",
  "\u1217\u0005\u0350\u01a9\u0002\u1210\u1211\u0007\u0088\u0002\u0002\u1211",
  "\u1212\u0007M\u0002\u0002\u1212\u1217\u0007\u014c\u0002\u0002\u1213",
  "\u1214\u0007K\u0002\u0002\u1214\u1215\u0007\u0017\u0002\u0002\u1215",
  "\u1217\u0007\u014c\u0002\u0002\u1216\u1207\u0003\u0002\u0002\u0002\u1216",
  "\u1208\u0003\u0002\u0002\u0002\u1216\u120c\u0003\u0002\u0002\u0002\u1216",
  "\u1210\u0003\u0002\u0002\u0002\u1216\u1213\u0003\u0002\u0002\u0002\u1217",
  "\u0367\u0003\u0002\u0002\u0002\u1218\u1219\u0007\u00a5\u0002\u0002\u1219",
  "\u121a\u0005\u0352\u01aa\u0002\u121a\u121b\u0007\u0144\u0002\u0002\u121b",
  "\u121c\u0005\u0360\u01b1\u0002\u121c\u0369\u0003\u0002\u0002\u0002\u121d",
  "\u121e\u0007K\u0002\u0002\u121e\u121f\u0007\u00d4\u0002\u0002\u121f",
  "\u1220\u0005\u0320\u0191\u0002\u1220\u1221\u0007\u015e\u0002\u0002\u1221",
  "\u1222\u0005\u0320\u0191\u0002\u1222\u036b\u0003\u0002\u0002\u0002\u1223",
  "\u1224\u0007\u0145\u0002\u0002\u1224\u1225\u0007\u0168\u0002\u0002\u1225",
  "\u1230\u0007\u0181\u0002\u0002\u1226\u1227\u0007\u013d\u0002\u0002\u1227",
  "\u1228\u0007\u0168\u0002\u0002\u1228\u1230\u0007\u0181\u0002\u0002\u1229",
  "\u122a\u0007\u0146\u0002\u0002\u122a\u122b\u0007\u0168\u0002\u0002\u122b",
  "\u1230\u0007\u017c\u0002\u0002\u122c\u122d\u0007\u0147\u0002\u0002\u122d",
  "\u122e\u0007\u0168\u0002\u0002\u122e\u1230\u0005\u0350\u01a9\u0002\u122f",
  "\u1223\u0003\u0002\u0002\u0002\u122f\u1226\u0003\u0002\u0002\u0002\u122f",
  "\u1229\u0003\u0002\u0002\u0002\u122f\u122c\u0003\u0002\u0002\u0002\u1230",
  "\u036d\u0003\u0002\u0002\u0002\u1231\u1236\u0005\u036c\u01b7\u0002\u1232",
  "\u1233\u0007\u0160\u0002\u0002\u1233\u1235\u0005\u036c\u01b7\u0002\u1234",
  "\u1232\u0003\u0002\u0002\u0002\u1235\u1238\u0003\u0002\u0002\u0002\u1236",
  "\u1234\u0003\u0002\u0002\u0002\u1236\u1237\u0003\u0002\u0002\u0002\u1237",
  "\u036f\u0003\u0002\u0002\u0002\u1238\u1236\u0003\u0002\u0002\u0002\u1239",
  "\u123a\u0007C\u0002\u0002\u123a\u123b\u0007\u0142\u0002\u0002\u123b",
  "\u123c\u0005\u0320\u0191\u0002\u123c\u123d\u0007\u015e\u0002\u0002\u123d",
  "\u123e\u0005\u0350\u01a9\u0002\u123e\u123f\u0007\u0097\u0002\u0002\u123f",
  "\u1240\u0005\u036e\u01b8\u0002\u1240\u0371\u0003\u0002\u0002\u0002\u1241",
  "\u1242\u0007E\u0002\u0002\u1242\u1243\u0007\u0142\u0002\u0002\u1243",
  "\u1244\u0005\u0320\u0191\u0002\u1244\u1245\u0007\u015e\u0002\u0002\u1245",
  "\u1250\u0005\u0350\u01a9\u0002\u1246\u1247\u0007\u009d\u0002\u0002\u1247",
  "\u1251\u0005\u036e\u01b8\u0002\u1248\u1249\u0007\u009e\u0002\u0002\u1249",
  "\u1251\u0007\u0146\u0002\u0002\u124a\u124b\u0007\u0088\u0002\u0002\u124b",
  "\u124c\u0007\u00d4\u0002\u0002\u124c\u1251\u0005\u0320\u0191\u0002\u124d",
  "\u124e\u0007K\u0002\u0002\u124e\u124f\u0007\u00d4\u0002\u0002\u124f",
  "\u1251\u0005\u0320\u0191\u0002\u1250\u1246\u0003\u0002\u0002\u0002\u1250",
  "\u1248\u0003\u0002\u0002\u0002\u1250\u124a\u0003\u0002\u0002\u0002\u1250",
  "\u124d\u0003\u0002\u0002\u0002\u1251\u0373\u0003\u0002\u0002\u0002\u1252",
  "\u1253\u0007K\u0002\u0002\u1253\u1254\u0007\u0142\u0002\u0002\u1254",
  "\u1255\u0005\u0320\u0191\u0002\u1255\u1256\u0007\u015e\u0002\u0002\u1256",
  "\u1257\u0005\u0350\u01a9\u0002\u1257\u0375\u0003\u0002\u0002\u0002\u1258",
  "\u1259\u0007C\u0002\u0002\u1259\u125a\t#\u0002\u0002\u125a\u125b\u0007",
  "\u0148\u0002\u0002\u125b\u125c\u0007\u017c\u0002\u0002\u125c\u125d\u0007",
  "\u00b6\u0002\u0002\u125d\u1261\u0005\u0320\u0191\u0002\u125e\u125f\u0007",
  "M\u0002\u0002\u125f\u1262\u0005\u0350\u01a9\u0002\u1260\u1262\u0005",
  "\u0344\u01a3\u0002\u1261\u125e\u0003\u0002\u0002\u0002\u1261\u1260\u0003",
  "\u0002\u0002\u0002\u1262\u1266\u0003\u0002\u0002\u0002\u1263\u1264\u0007",
  "\u0097\u0002\u0002\u1264\u1265\u0007\u0012\u0002\u0002\u1265\u1267\u0007",
  "\u0181\u0002\u0002\u1266\u1263\u0003\u0002\u0002\u0002\u1266\u1267\u0003",
  "\u0002\u0002\u0002\u1267\u0377\u0003\u0002\u0002\u0002\u1268\u1269\u0007",
  "E\u0002\u0002\u1269\u126a\t#\u0002\u0002\u126a\u126b\u0007\u0148\u0002",
  "\u0002\u126b\u126c\u0007\u017c\u0002\u0002\u126c\u126d\u0007\u00b6\u0002",
  "\u0002\u126d\u1271\u0005\u0320\u0191\u0002\u126e\u126f\u0007M\u0002",
  "\u0002\u126f\u1272\u0005\u0350\u01a9\u0002\u1270\u1272\u0005\u0344\u01a3",
  "\u0002\u1271\u126e\u0003\u0002\u0002\u0002\u1271\u1270\u0003\u0002\u0002",
  "\u0002\u1272\u1276\u0003\u0002\u0002\u0002\u1273\u1274\u0007\u0097\u0002",
  "\u0002\u1274\u1275\u0007\u0012\u0002\u0002\u1275\u1277\u0007\u0181\u0002",
  "\u0002\u1276\u1273\u0003\u0002\u0002\u0002\u1276\u1277\u0003\u0002\u0002",
  "\u0002\u1277\u0379\u0003\u0002\u0002\u0002\u1278\u1279\u0007K\u0002",
  "\u0002\u1279\u127a\t#\u0002\u0002\u127a\u127b\u0007\u0148\u0002\u0002",
  "\u127b\u127c\u0007\u017c\u0002\u0002\u127c\u127d\u0007\u00b6\u0002\u0002",
  "\u127d\u127e\u0005\u0320\u0191\u0002\u127e\u037b\u0003\u0002\u0002\u0002",
  "\u0220\u0380\u0382\u038d\u0393\u0399\u03a4\u03a7\u03a9\u03bb\u03c0\u03c5",
  "\u03cb\u03cf\u03dc\u03e0\u03e4\u03e9\u03f0\u03f6\u03fa\u03fc\u0400\u0407",
  "\u0409\u040f\u041a\u0422\u0426\u0453\u046e\u0472\u0475\u047a\u0488\u0491",
  "\u0495\u049c\u049f\u04a3\u04a9\u04ac\u04af\u04b2\u04b5\u04b8\u04be\u04ca",
  "\u04cc\u04d1\u04d3\u04dd\u04e2\u04e6\u04e9\u04f4\u0504\u0513\u0517\u0527",
  "\u0534\u0538\u053d\u0558\u055d\u0562\u056a\u0570\u0574\u0577\u057a\u0580",
  "\u0587\u0591\u0595\u059a\u059e\u05a4\u05ab\u05b2\u05ba\u05c1\u05c5\u05c8",
  "\u05d0\u05d3\u05db\u05de\u05e2\u05ec\u05f1\u05f7\u0604\u0614\u0624\u0634",
  "\u063b\u0647\u064b\u0650\u0655\u0658\u065b\u065f\u0662\u0665\u067b\u067e",
  "\u0685\u0692\u0697\u06a0\u06a7\u06ad\u06b5\u06bb\u06cb\u06ce\u06d8\u06e0",
  "\u06e4\u06e7\u06eb\u06ef\u06f2\u06f7\u06fc\u0702\u070d\u070f\u0713\u0719",
  "\u071f\u0724\u072a\u072f\u0736\u073b\u0743\u0748\u074f\u0755\u075d\u0764",
  "\u0769\u0771\u0778\u077b\u077e\u0780\u078e\u0790\u0796\u07a5\u07b6\u07bb",
  "\u07bf\u07c3\u07ca\u07d1\u07d7\u07db\u07de\u07e5\u07fc\u0801\u0805\u080d",
  "\u0815\u0819\u081f\u0824\u082b\u082e\u0834\u083b\u0843\u084c\u0855\u0869",
  "\u086f\u0872\u0874\u087b\u0885\u088d\u0891\u0895\u08a2\u08ab\u08b1\u08b5",
  "\u08bc\u08bf\u08c2\u08c5\u08ce\u08d2\u08d5\u08d8\u08db\u08de\u08e1\u08ef",
  "\u08f7\u08fd\u0901\u0913\u0923\u0933\u0937\u0946\u094c\u094f\u0952\u0955",
  "\u0958\u095c\u096d\u0975\u0978\u097c\u0983\u098a\u098e\u0995\u09b4\u09bc",
  "\u09cc\u09dc\u09e4\u09ec\u09f4\u09ff\u0a03\u0a0b\u0a14\u0a17\u0a20\u0a24",
  "\u0a26\u0a2a\u0a2e\u0a34\u0a38\u0a42\u0a4b\u0a56\u0a5a\u0a61\u0a6d\u0a74",
  "\u0a7c\u0a80\u0a83\u0a8a\u0a90\u0a94\u0a97\u0a9d\u0aa1\u0aa5\u0aaa\u0aae",
  "\u0ab3\u0abe\u0ac6\u0acb\u0ace\u0ad2\u0ad6\u0ada\u0ae2\u0ae6\u0aec\u0af0",
  "\u0af4\u0af8\u0b00\u0b04\u0b08\u0b11\u0b16\u0b1b\u0b28\u0b31\u0b39\u0b43",
  "\u0b55\u0b58\u0b62\u0b7e\u0b84\u0b8a\u0b90\u0b92\u0b95\u0b9b\u0ba3\u0bb2",
  "\u0bb9\u0bbe\u0bc1\u0bc5\u0bc8\u0bcb\u0bce\u0bd1\u0bd7\u0bdb\u0bde\u0be1",
  "\u0be4\u0be7\u0bea\u0bf1\u0bf4\u0bfb\u0bfe\u0c01\u0c04\u0c07\u0c0a\u0c0d",
  "\u0c10\u0c13\u0c16\u0c1a\u0c1d\u0c20\u0c23\u0c26\u0c29\u0c2c\u0c2f\u0c32",
  "\u0c35\u0c37\u0c3d\u0c42\u0c49\u0c4b\u0c4e\u0c53\u0c56\u0c5a\u0c5f\u0c66",
  "\u0c6c\u0c78\u0c7f\u0c85\u0c8e\u0c91\u0c95\u0c9b\u0ca5\u0ca9\u0cb4\u0cba",
  "\u0cbd\u0cc7\u0cc9\u0ccd\u0cd4\u0cea\u0cf1\u0cf5\u0cf8\u0cfd\u0d00\u0d07",
  "\u0d0e\u0d11\u0d19\u0d1f\u0d21\u0d23\u0d26\u0d29\u0d2e\u0d38\u0d3d\u0d3f",
  "\u0d45\u0d48\u0d4b\u0d53\u0d59\u0d5b\u0d5d\u0d60\u0d63\u0d67\u0d6e\u0d77",
  "\u0d81\u0d84\u0d87\u0d8a\u0d8e\u0d98\u0da2\u0daa\u0db2\u0db9\u0dc2\u0dca",
  "\u0dd6\u0dd9\u0ddf\u0de6\u0ded\u0df4\u0dfb\u0e04\u0e08\u0e0f\u0e14\u0e18",
  "\u0e2b\u0e30\u0e35\u0e3b\u0e48\u0e4b\u0e4e\u0e5a\u0e5d\u0e60\u0e68\u0e71",
  "\u0e76\u0e78\u0e89\u0e8c\u0e99\u0e9d\u0ea1\u0ea4\u0ea7\u0eaa\u0eae\u0eb1",
  "\u0eb4\u0ebb\u0ec0\u0ec8\u0ecb\u0ecf\u0ed4\u0ed8\u0edd\u0ee4\u0ef2\u0ef5",
  "\u0ef9\u0f08\u0f12\u0f1b\u0f1e\u0f29\u0f35\u0f3f\u0f49\u0f4e\u0f52\u0f56",
  "\u0f5c\u0f6e\u0f74\u0f78\u0f80\u0f8a\u0f94\u0fa7\u0fad\u0fb4\u0fb7\u0fb9",
  "\u0fbe\u0fc2\u0fca\u0fd7\u0fdb\u0fe7\u0feb\u0ff4\u100f\u1015\u101d\u1022",
  "\u103b\u1049\u1056\u1063\u1078\u1085\u1095\u1097\u10a6\u10c3\u10d4\u10d6",
  "\u10e3\u10f2\u10f6\u10fc\u1104\u110d\u1115\u111e\u112e\u1138\u113f\u1143",
  "\u114b\u115b\u1164\u116b\u1171\u1178\u1180\u1189\u1190\u11a5\u11a9\u11ab",
  "\u11ad\u11b5\u11c6\u11d2\u11df\u11e7\u11f6\u1216\u122f\u1236\u1250\u1261",
  "\u1266\u1271\u1276",
].join("");

const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map(
  (ds, index) => new antlr4.dfa.DFA(ds, index)
);

const sharedContextCache = new antlr4.PredictionContextCache();

class HiveParser extends antlr4.Parser {
  static grammarFileName = "HiveParser.g4";
  static literalNames = [
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    "'.'",
    "':'",
    "','",
    "';'",
    "'('",
    "')'",
    "'['",
    "']'",
    "'{'",
    "'}'",
    null,
    "'<=>'",
    null,
    "'<='",
    "'<'",
    "'>='",
    "'>'",
    "'/'",
    "'+'",
    "'-'",
    "'*'",
    "'%'",
    "'DIV'",
    "'&'",
    "'~'",
    "'|'",
    "'||'",
    "'^'",
    "'?'",
    "'$'",
  ];
  static symbolicNames = [
    null,
    "KW_TRUE",
    "KW_FALSE",
    "KW_ALL",
    "KW_NONE",
    "KW_AND",
    "KW_OR",
    "KW_NOT",
    "KW_LIKE",
    "KW_ANY",
    "KW_IF",
    "KW_EXISTS",
    "KW_ASC",
    "KW_DESC",
    "KW_NULLS",
    "KW_LAST",
    "KW_ORDER",
    "KW_GROUP",
    "KW_BY",
    "KW_HAVING",
    "KW_WHERE",
    "KW_FROM",
    "KW_AS",
    "KW_SELECT",
    "KW_DISTINCT",
    "KW_INSERT",
    "KW_OVERWRITE",
    "KW_OUTER",
    "KW_UNIQUEJOIN",
    "KW_PRESERVE",
    "KW_JOIN",
    "KW_LEFT",
    "KW_RIGHT",
    "KW_FULL",
    "KW_ON",
    "KW_PARTITION",
    "KW_PARTITIONS",
    "KW_TABLE",
    "KW_TABLES",
    "KW_COLUMNS",
    "KW_INDEX",
    "KW_INDEXES",
    "KW_REBUILD",
    "KW_FUNCTIONS",
    "KW_SHOW",
    "KW_MSCK",
    "KW_REPAIR",
    "KW_DIRECTORY",
    "KW_LOCAL",
    "KW_TRANSFORM",
    "KW_USING",
    "KW_CLUSTER",
    "KW_DISTRIBUTE",
    "KW_SORT",
    "KW_UNION",
    "KW_EXCEPT",
    "KW_LOAD",
    "KW_EXPORT",
    "KW_IMPORT",
    "KW_REPLICATION",
    "KW_METADATA",
    "KW_DATA",
    "KW_INPATH",
    "KW_IS",
    "KW_NULL",
    "KW_CREATE",
    "KW_EXTERNAL",
    "KW_ALTER",
    "KW_CHANGE",
    "KW_COLUMN",
    "KW_FIRST",
    "KW_AFTER",
    "KW_DESCRIBE",
    "KW_DROP",
    "KW_RENAME",
    "KW_TO",
    "KW_COMMENT",
    "KW_BOOLEAN",
    "KW_TINYINT",
    "KW_SMALLINT",
    "KW_INT",
    "KW_BIGINT",
    "KW_FLOAT",
    "KW_DOUBLE",
    "KW_PRECISION",
    "KW_DATE",
    "KW_DATETIME",
    "KW_TIMESTAMP",
    "KW_TIMESTAMPLOCALTZ",
    "KW_TIME",
    "KW_ZONE",
    "KW_INTERVAL",
    "KW_DECIMAL",
    "KW_STRING",
    "KW_CHAR",
    "KW_VARCHAR",
    "KW_ARRAY",
    "KW_STRUCT",
    "KW_MAP",
    "KW_UNIONTYPE",
    "KW_REDUCE",
    "KW_PARTITIONED",
    "KW_CLUSTERED",
    "KW_SORTED",
    "KW_INTO",
    "KW_BUCKETS",
    "KW_ROW",
    "KW_ROWS",
    "KW_FORMAT",
    "KW_DELIMITED",
    "KW_FIELDS",
    "KW_TERMINATED",
    "KW_ESCAPED",
    "KW_COLLECTION",
    "KW_ITEMS",
    "KW_KEYS",
    "KW_KEY_TYPE",
    "KW_KILL",
    "KW_LINES",
    "KW_STORED",
    "KW_FILEFORMAT",
    "KW_INPUTFORMAT",
    "KW_OUTPUTFORMAT",
    "KW_INPUTDRIVER",
    "KW_OUTPUTDRIVER",
    "KW_ENABLE",
    "KW_DISABLE",
    "KW_LOCATION",
    "KW_TABLESAMPLE",
    "KW_BUCKET",
    "KW_OUT",
    "KW_OF",
    "KW_PERCENT",
    "KW_CAST",
    "KW_ADD",
    "KW_REPLACE",
    "KW_RLIKE",
    "KW_REGEXP",
    "KW_TEMPORARY",
    "KW_FUNCTION",
    "KW_MACRO",
    "KW_FILE",
    "KW_JAR",
    "KW_EXPLAIN",
    "KW_EXTENDED",
    "KW_FORMATTED",
    "KW_DEPENDENCY",
    "KW_LOGICAL",
    "KW_SERDE",
    "KW_WITH",
    "KW_DEFERRED",
    "KW_SERDEPROPERTIES",
    "KW_DBPROPERTIES",
    "KW_LIMIT",
    "KW_OFFSET",
    "KW_SET",
    "KW_UNSET",
    "KW_TBLPROPERTIES",
    "KW_IDXPROPERTIES",
    "KW_VALUE_TYPE",
    "KW_ELEM_TYPE",
    "KW_DEFINED",
    "KW_CASE",
    "KW_WHEN",
    "KW_THEN",
    "KW_ELSE",
    "KW_END",
    "KW_MAPJOIN",
    "KW_STREAMTABLE",
    "KW_CLUSTERSTATUS",
    "KW_UTC",
    "KW_UTCTIMESTAMP",
    "KW_LONG",
    "KW_DELETE",
    "KW_PLUS",
    "KW_MINUS",
    "KW_FETCH",
    "KW_INTERSECT",
    "KW_VIEW",
    "KW_VIEWS",
    "KW_IN",
    "KW_DATABASE",
    "KW_DATABASES",
    "KW_MATERIALIZED",
    "KW_SCHEMA",
    "KW_SCHEMAS",
    "KW_GRANT",
    "KW_REVOKE",
    "KW_SSL",
    "KW_UNDO",
    "KW_LOCK",
    "KW_LOCKS",
    "KW_UNLOCK",
    "KW_SHARED",
    "KW_EXCLUSIVE",
    "KW_PROCEDURE",
    "KW_UNSIGNED",
    "KW_WHILE",
    "KW_READ",
    "KW_READS",
    "KW_PURGE",
    "KW_RANGE",
    "KW_ANALYZE",
    "KW_BEFORE",
    "KW_BETWEEN",
    "KW_BOTH",
    "KW_BINARY",
    "KW_CROSS",
    "KW_CONTINUE",
    "KW_CURSOR",
    "KW_TRIGGER",
    "KW_RECORDREADER",
    "KW_RECORDWRITER",
    "KW_SEMI",
    "KW_LATERAL",
    "KW_TOUCH",
    "KW_ARCHIVE",
    "KW_UNARCHIVE",
    "KW_COMPUTE",
    "KW_STATISTICS",
    "KW_USE",
    "KW_OPTIONS",
    "KW_OPTION",
    "KW_CONCATENATE",
    "KW_SHOW_DATABASE",
    "KW_UPDATE",
    "KW_RESTRICT",
    "KW_CASCADE",
    "KW_SKEWED",
    "KW_ROLLUP",
    "KW_CUBE",
    "KW_DIRECTORIES",
    "KW_FOR",
    "KW_WINDOW",
    "KW_UNBOUNDED",
    "KW_PRECEDING",
    "KW_FOLLOWING",
    "KW_CURRENT",
    "KW_CURRENT_DATE",
    "KW_CURRENT_TIMESTAMP",
    "KW_LESS",
    "KW_MORE",
    "KW_OVER",
    "KW_GROUPING",
    "KW_SETS",
    "KW_TRUNCATE",
    "KW_NOSCAN",
    "KW_USER",
    "KW_ROLE",
    "KW_ROLES",
    "KW_INNER",
    "KW_EXCHANGE",
    "KW_URI",
    "KW_SERVER",
    "KW_ADMIN",
    "KW_OWNER",
    "KW_PRINCIPALS",
    "KW_COMPACT",
    "KW_COMPACTIONS",
    "KW_TRANSACTIONS",
    "KW_REWRITE",
    "KW_AUTHORIZATION",
    "KW_REOPTIMIZATION",
    "KW_CONF",
    "KW_VALUES",
    "KW_RELOAD",
    "KW_YEAR",
    "KW_QUERY",
    "KW_QUARTER",
    "KW_MONTH",
    "KW_WEEK",
    "KW_DAY",
    "KW_DOW",
    "KW_HOUR",
    "KW_MINUTE",
    "KW_SECOND",
    "KW_START",
    "KW_TRANSACTION",
    "KW_COMMIT",
    "KW_ROLLBACK",
    "KW_WORK",
    "KW_ONLY",
    "KW_WRITE",
    "KW_ISOLATION",
    "KW_LEVEL",
    "KW_SNAPSHOT",
    "KW_AUTOCOMMIT",
    "KW_CACHE",
    "KW_PRIMARY",
    "KW_FOREIGN",
    "KW_REFERENCES",
    "KW_CONSTRAINT",
    "KW_ENFORCED",
    "KW_VALIDATE",
    "KW_NOVALIDATE",
    "KW_RELY",
    "KW_NORELY",
    "KW_UNIQUE",
    "KW_KEY",
    "KW_ABORT",
    "KW_EXTRACT",
    "KW_FLOOR",
    "KW_MERGE",
    "KW_MATCHED",
    "KW_REPL",
    "KW_DUMP",
    "KW_STATUS",
    "KW_VECTORIZATION",
    "KW_SUMMARY",
    "KW_OPERATOR",
    "KW_EXPRESSION",
    "KW_DETAIL",
    "KW_WAIT",
    "KW_RESOURCE",
    "KW_PLAN",
    "KW_QUERY_PARALLELISM",
    "KW_PLANS",
    "KW_ACTIVATE",
    "KW_DEFAULT",
    "KW_CHECK",
    "KW_POOL",
    "KW_MOVE",
    "KW_DO",
    "KW_ALLOC_FRACTION",
    "KW_SCHEDULING_POLICY",
    "KW_PATH",
    "KW_MAPPING",
    "KW_WORKLOAD",
    "KW_MANAGEMENT",
    "KW_ACTIVE",
    "KW_UNMANAGED",
    "KW_APPLICATION",
    "KW_SYNC",
    "KW_SEQUENCEFILE",
    "KW_TEXTFILE",
    "KW_RCFILE",
    "KW_ORC",
    "KW_PARQUET",
    "KW_DELTA",
    "KW_AVRO",
    "KW_CSV",
    "KW_JSON",
    "KW_JSONFILE",
    "KW_BLOOMFILTER",
    "KW_GENERATED",
    "KW_ALWAYS",
    "KW_IDENTITY",
    "KW_INCREMENT",
    "DOT",
    "COLON",
    "COMMA",
    "SEMICOLON",
    "LPAREN",
    "RPAREN",
    "LSQUARE",
    "RSQUARE",
    "LCURLY",
    "RCURLY",
    "EQUAL",
    "EQUAL_NS",
    "NOTEQUAL",
    "LESSTHANOREQUALTO",
    "LESSTHAN",
    "GREATERTHANOREQUALTO",
    "GREATERTHAN",
    "DIVIDE",
    "PLUS",
    "MINUS",
    "STAR",
    "MOD",
    "DIV",
    "AMPERSAND",
    "TILDE",
    "BITWISEOR",
    "CONCATENATE",
    "BITWISEXOR",
    "QUESTION",
    "DOLLAR",
    "StringLiteral",
    "CharSetLiteral",
    "IntegralLiteral",
    "NumberLiteral",
    "ByteLengthLiteral",
    "Number",
    "Identifier",
    "QuotedIdentifier",
    "CharSetName",
    "WS",
    "LINE_COMMENT",
    "QUERY_HINT",
    "SHOW_HINT",
    "HIDDEN_HINT",
  ];
  static ruleNames = [
    "statements",
    "statementSeparator",
    "empty",
    "statement",
    "explainStatement",
    "explainOption",
    "vectorizationOnly",
    "vectorizatonDetail",
    "execStatement",
    "loadStatement",
    "replicationClause",
    "exportStatement",
    "importStatement",
    "replDumpStatement",
    "replLoadStatement",
    "replConfigs",
    "replConfigsList",
    "replStatusStatement",
    "ddlStatement",
    "ifExists",
    "restrictOrCascade",
    "ifNotExists",
    "rewriteEnabled",
    "rewriteDisabled",
    "storedAsDirs",
    "orReplace",
    "createDatabaseStatement",
    "dbLocation",
    "dbProperties",
    "dbPropertiesList",
    "switchDatabaseStatement",
    "dropDatabaseStatement",
    "databaseComment",
    "createTableStatement",
    "truncateTableStatement",
    "dropTableStatement",
    "alterStatement",
    "alterTableStatementSuffix",
    "alterTblPartitionStatementSuffix",
    "alterStatementPartitionKeyType",
    "alterViewStatementSuffix",
    "alterMaterializedViewStatementSuffix",
    "alterDatabaseStatementSuffix",
    "alterDatabaseSuffixProperties",
    "alterDatabaseSuffixSetOwner",
    "alterDatabaseSuffixSetLocation",
    "alterStatementSuffixRename",
    "alterStatementSuffixAddCol",
    "alterStatementSuffixAddConstraint",
    "alterStatementSuffixUpdateColumns",
    "alterStatementSuffixDropConstraint",
    "alterStatementSuffixRenameCol",
    "alterStatementSuffixUpdateStatsCol",
    "alterStatementSuffixUpdateStats",
    "alterStatementChangeColPosition",
    "alterStatementSuffixAddPartitions",
    "alterStatementSuffixAddPartitionsElement",
    "alterStatementSuffixTouch",
    "alterStatementSuffixArchive",
    "alterStatementSuffixUnArchive",
    "partitionLocation",
    "alterStatementSuffixDropPartitions",
    "alterStatementSuffixProperties",
    "alterViewSuffixProperties",
    "alterMaterializedViewSuffixRewrite",
    "alterMaterializedViewSuffixRebuild",
    "alterStatementSuffixSerdeProperties",
    "alterIndexStatementSuffix",
    "alterStatementSuffixFileFormat",
    "alterStatementSuffixClusterbySortby",
    "alterTblPartitionStatementSuffixSkewedLocation",
    "skewedLocations",
    "skewedLocationsList",
    "skewedLocationMap",
    "alterStatementSuffixLocation",
    "alterStatementSuffixSkewedby",
    "alterStatementSuffixExchangePartition",
    "alterStatementSuffixRenamePart",
    "alterStatementSuffixStatsPart",
    "alterStatementSuffixMergeFiles",
    "alterStatementSuffixBucketNum",
    "createIndexStatement",
    "createIndexMainStatement",
    "dropIndexStatement",
    "createBloomfilterIndexStatement",
    "createBloomfilterIndexMainStatement",
    "bloomfilterColumnParenthesesList",
    "bloomfilterColumnNameList",
    "bloomfilterColumnName",
    "bloomfilterIndexOptions",
    "dropBloomfilterIndexStatement",
    "dropBloomfilterIndexMainStatement",
    "tablePartitionPrefix",
    "blocking",
    "alterStatementSuffixCompact",
    "alterStatementSuffixSetOwner",
    "fileFormat",
    "inputFileFormat",
    "tabTypeExpr",
    "partTypeExpr",
    "tabPartColTypeExpr",
    "descStatement",
    "analyzeStatement",
    "showStatement",
    "lockStatement",
    "lockDatabase",
    "lockMode",
    "unlockStatement",
    "unlockDatabase",
    "createRoleStatement",
    "dropRoleStatement",
    "grantPrivileges",
    "revokePrivileges",
    "grantRole",
    "revokeRole",
    "showRoleGrants",
    "showRoles",
    "showCurrentRole",
    "setRole",
    "showGrants",
    "showRolePrincipals",
    "privilegeIncludeColObject",
    "privilegeObject",
    "privObject",
    "privObjectCols",
    "privilegeList",
    "privlegeDef",
    "privilegeType",
    "principalSpecification",
    "principalName",
    "withGrantOption",
    "grantOptionFor",
    "adminOptionFor",
    "withAdminOption",
    "metastoreCheck",
    "resourceList",
    "resource",
    "resourceType",
    "createFunctionStatement",
    "dropFunctionStatement",
    "reloadFunctionStatement",
    "createMacroStatement",
    "dropMacroStatement",
    "createViewStatement",
    "createMaterializedViewStatement",
    "viewPartition",
    "dropViewStatement",
    "dropMaterializedViewStatement",
    "showFunctionIdentifier",
    "showStmtIdentifier",
    "tableComment",
    "tableUsingDataSource",
    "tableDataSource",
    "tablePartition",
    "tableBuckets",
    "tableSkewed",
    "rowFormat",
    "recordReader",
    "recordWriter",
    "rowFormatSerde",
    "rowFormatDelimited",
    "tableRowFormat",
    "tableOptions",
    "tablePropertiesPrefixed",
    "tableProperties",
    "tablePropertiesList",
    "keyValueProperty",
    "keyValue",
    "keyProperty",
    "tableRowFormatFieldIdentifier",
    "tableRowFormatFieldIdentifierEcapedBy",
    "tableRowFormatCollItemsIdentifier",
    "tableRowFormatMapKeysIdentifier",
    "tableRowFormatLinesIdentifier",
    "tableRowNullFormat",
    "tableFileFormat",
    "tableFileFormatStoredBy",
    "tableFileFormatStoredAs",
    "tableFileFormatStoredAsFormat",
    "tableInputOutputFileFormat",
    "tableInputLiteral",
    "tableOutputLiteral",
    "tableLocation",
    "columnNameTypeList",
    "columnNameTypeOrConstraintList",
    "columnNameColonTypeList",
    "columnNameList",
    "columnName",
    "extColumnName",
    "columnNameOrderList",
    "columnParenthesesList",
    "enableValidateSpecification",
    "enableSpecification",
    "validateSpecification",
    "enforcedSpecification",
    "relySpecification",
    "createConstraint",
    "alterConstraintWithName",
    "tableLevelConstraint",
    "pkUkConstraint",
    "checkConstraint",
    "createForeignKey",
    "alterForeignKeyWithName",
    "skewedValueElement",
    "skewedColumnValuePairList",
    "skewedColumnValuePair",
    "skewedColumnValues",
    "skewedColumnValue",
    "skewedValueLocationElement",
    "orderSpecification",
    "nullOrdering",
    "columnNameOrder",
    "columnNameCommentList",
    "columnNameComment",
    "columnRefOrder",
    "columnNameType",
    "columnNameTypeOrConstraint",
    "tableConstraint",
    "columnNameTypeConstraint",
    "columnGeneratedAs",
    "generatedAsExpression",
    "generatedAsIdentity",
    "partitionedColumnNameTypeConstraint",
    "columnConstraint",
    "foreignKeyConstraint",
    "colConstraint",
    "alterColumnConstraint",
    "alterForeignKeyConstraint",
    "alterColConstraint",
    "columnConstraintType",
    "defaultVal",
    "tableConstraintType",
    "constraintOptsCreate",
    "constraintOptsAlter",
    "columnNameColonType",
    "colType",
    "colTypeList",
    "type_db_col",
    "primitiveType",
    "listType",
    "structType",
    "mapType",
    "unionType",
    "setOperator",
    "queryStatementExpression",
    "queryStatementExpressionBody",
    "withClause",
    "cteStatement",
    "fromStatement",
    "singleFromStatement",
    "regularBody",
    "atomSelectStatement",
    "selectStatement",
    "setOpSelectStatement",
    "selectStatementWithCTE",
    "body",
    "insertClause",
    "destination",
    "limitClause",
    "deleteStatement",
    "columnAssignmentClause",
    "setColumnsClause",
    "updateStatement",
    "sqlTransactionStatement",
    "startTransactionStatement",
    "transactionMode",
    "transactionAccessMode",
    "isolationLevel",
    "levelOfIsolation",
    "commitStatement",
    "rollbackStatement",
    "setAutoCommitStatement",
    "abortTransactionStatement",
    "mergeStatement",
    "whenClauses",
    "whenNotMatchedClause",
    "whenMatchedAndClause",
    "whenMatchedThenClause",
    "updateOrDelete",
    "killQueryStatement",
    "selectClause",
    "selectList",
    "selectTrfmClause",
    "selectItem",
    "trfmClause",
    "selectExpression",
    "selectExpressionList",
    "window_clause",
    "window_defn",
    "window_specification",
    "window_frame",
    "window_range_expression",
    "window_value_expression",
    "window_frame_start_boundary",
    "window_frame_boundary",
    "tableAllColumns",
    "tableOrColumn",
    "expressionList",
    "aliasList",
    "fromClause",
    "fromSource",
    "atomjoinSource",
    "joinSource",
    "joinSourcePart",
    "uniqueJoinSource",
    "uniqueJoinExpr",
    "uniqueJoinToken",
    "joinToken",
    "lateralView",
    "tableAlias",
    "tableBucketSample",
    "splitSample",
    "tableSample",
    "tableSource",
    "uniqueJoinTableSource",
    "tableName",
    "viewName",
    "subQuerySource",
    "partitioningSpec",
    "partitionTableFunctionSource",
    "partitionedTableFunction",
    "whereClause",
    "searchCondition",
    "valuesClause",
    "valuesTableConstructor",
    "valueRowConstructor",
    "virtualTableSource",
    "groupByClause",
    "groupby_expression",
    "groupByEmpty",
    "rollupStandard",
    "rollupOldSyntax",
    "groupingSetExpression",
    "groupingSetExpressionMultiple",
    "groupingExpressionSingle",
    "havingClause",
    "havingCondition",
    "expressionsInParenthesis",
    "expressionsNotInParenthesis",
    "expressionPart",
    "expressions",
    "columnRefOrderInParenthesis",
    "columnRefOrderNotInParenthesis",
    "orderByClause",
    "clusterByClause",
    "partitionByClause",
    "distributeByClause",
    "sortByClause",
    "functionStatement",
    "functionName",
    "castExpression",
    "caseExpression",
    "whenExpression",
    "floorExpression",
    "floorDateQualifiers",
    "extractExpression",
    "timeQualifiers",
    "constant",
    "stringLiteralSequence",
    "charSetStringLiteral",
    "dateLiteral",
    "timestampLiteral",
    "timestampLocalTZLiteral",
    "intervalValue",
    "intervalLiteral",
    "intervalExpression",
    "intervalQualifiers",
    "atomExpression",
    "precedenceUnaryOperator",
    "isCondition",
    "precedenceBitwiseXorOperator",
    "precedenceStarOperator",
    "precedencePlusOperator",
    "precedenceConcatenateOperator",
    "precedenceAmpersandOperator",
    "precedenceBitwiseOrOperator",
    "precedenceRegexpOperator",
    "precedenceSimilarOperator",
    "precedenceDistinctOperator",
    "precedenceEqualOperator",
    "precedenceNotOperator",
    "precedenceAndOperator",
    "precedenceOrOperator",
    "expression",
    "subQueryExpression",
    "precedenceSimilarExpressionPart",
    "precedenceSimilarExpressionAtom",
    "precedenceSimilarExpressionIn",
    "precedenceSimilarExpressionPartNot",
    "booleanValue",
    "booleanValueTok",
    "tableOrPartition",
    "partitionSpec",
    "partitionVal",
    "dropPartitionSpec",
    "dropPartitionVal",
    "dropPartitionOperator",
    "sysFuncNames",
    "descFuncNames",
    "identifier",
    "functionIdentifier",
    "principalIdentifier",
    "nonReserved",
    "sql11ReservedKeywordsUsedAsFunctionName",
    "databricksAllowedReservedNames",
    "resourcePlanDdlStatements",
    "rpAssign",
    "rpAssignList",
    "rpUnassign",
    "rpUnassignList",
    "createResourcePlanStatement",
    "createResourcePlanStatementLikeExisting",
    "createNewResourcePlanStatement",
    "withReplace",
    "activate",
    "enable",
    "disable",
    "unmanaged",
    "alterResourcePlanStatement",
    "alterResourcePlanRenameSuffix",
    "globalWmStatement",
    "replaceResourcePlanStatement",
    "dropResourcePlanStatement",
    "poolPath",
    "triggerExpression",
    "triggerExpressionStandalone",
    "triggerOrExpression",
    "triggerAndExpression",
    "triggerAtomExpression",
    "triggerLiteral",
    "comparisionOperator",
    "triggerActionExpression",
    "triggerActionExpressionStandalone",
    "createTriggerStatement",
    "alterTriggerStatement",
    "triggerConditionExpression",
    "dropTriggerStatement",
    "poolAssign",
    "poolAssignList",
    "createPoolStatement",
    "alterPoolStatement",
    "dropPoolStatement",
    "createMappingStatement",
    "alterMappingStatement",
    "dropMappingStatement",
  ];

  constructor(input) {
    super(input);
    this._interp = new antlr4.atn.ParserATNSimulator(
      this,
      atn,
      decisionsToDFA,
      sharedContextCache
    );
    this.ruleNames = HiveParser.ruleNames;
    this.literalNames = HiveParser.literalNames;
    this.symbolicNames = HiveParser.symbolicNames;
  }

  get atn() {
    return atn;
  }

  sempred(localctx, ruleIndex, predIndex) {
    switch (ruleIndex) {
      case 383:
        return this.expression_sempred(localctx, predIndex);
      default:
        throw "No predicate with index:" + ruleIndex;
    }
  }

  expression_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 0:
        return this.precpred(this._ctx, 13);
      case 1:
        return this.precpred(this._ctx, 12);
      case 2:
        return this.precpred(this._ctx, 11);
      case 3:
        return this.precpred(this._ctx, 10);
      case 4:
        return this.precpred(this._ctx, 9);
      case 5:
        return this.precpred(this._ctx, 8);
      case 6:
        return this.precpred(this._ctx, 5);
      case 7:
        return this.precpred(this._ctx, 3);
      case 8:
        return this.precpred(this._ctx, 2);
      case 9:
        return this.precpred(this._ctx, 14);
      case 10:
        return this.precpred(this._ctx, 7);
      default:
        throw "No predicate with index:" + predIndex;
    }
  }

  statements() {
    let localctx = new StatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, HiveParser.RULE_statements);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 896;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (
        ((_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << HiveParser.KW_DESC) |
              (1 << HiveParser.KW_FROM) |
              (1 << HiveParser.KW_SELECT) |
              (1 << HiveParser.KW_INSERT))) !==
            0) ||
        (((_la - 44) & ~0x1f) == 0 &&
          ((1 << (_la - 44)) &
            ((1 << (HiveParser.KW_SHOW - 44)) |
              (1 << (HiveParser.KW_MSCK - 44)) |
              (1 << (HiveParser.KW_LOAD - 44)) |
              (1 << (HiveParser.KW_EXPORT - 44)) |
              (1 << (HiveParser.KW_IMPORT - 44)) |
              (1 << (HiveParser.KW_CREATE - 44)) |
              (1 << (HiveParser.KW_ALTER - 44)) |
              (1 << (HiveParser.KW_DESCRIBE - 44)) |
              (1 << (HiveParser.KW_DROP - 44)))) !==
            0) ||
        (((_la - 98) & ~0x1f) == 0 &&
          ((1 << (_la - 98)) &
            ((1 << (HiveParser.KW_MAP - 98)) |
              (1 << (HiveParser.KW_REDUCE - 98)) |
              (1 << (HiveParser.KW_KILL - 98)) |
              (1 << (HiveParser.KW_ENABLE - 98)) |
              (1 << (HiveParser.KW_DISABLE - 98)))) !==
            0) ||
        (((_la - 135) & ~0x1f) == 0 &&
          ((1 << (_la - 135)) &
            ((1 << (HiveParser.KW_REPLACE - 135)) |
              (1 << (HiveParser.KW_EXPLAIN - 135)) |
              (1 << (HiveParser.KW_WITH - 135)) |
              (1 << (HiveParser.KW_SET - 135)))) !==
            0) ||
        (((_la - 173) & ~0x1f) == 0 &&
          ((1 << (_la - 173)) &
            ((1 << (HiveParser.KW_DELETE - 173)) |
              (1 << (HiveParser.KW_GRANT - 173)) |
              (1 << (HiveParser.KW_REVOKE - 173)) |
              (1 << (HiveParser.KW_LOCK - 173)) |
              (1 << (HiveParser.KW_UNLOCK - 173)) |
              (1 << (HiveParser.KW_ANALYZE - 173)))) !==
            0) ||
        (((_la - 220) & ~0x1f) == 0 &&
          ((1 << (_la - 220)) &
            ((1 << (HiveParser.KW_USE - 220)) |
              (1 << (HiveParser.KW_UPDATE - 220)) |
              (1 << (HiveParser.KW_TRUNCATE - 220)))) !==
            0) ||
        (((_la - 265) & ~0x1f) == 0 &&
          ((1 << (_la - 265)) &
            ((1 << (HiveParser.KW_RELOAD - 265)) |
              (1 << (HiveParser.KW_START - 265)) |
              (1 << (HiveParser.KW_COMMIT - 265)) |
              (1 << (HiveParser.KW_ROLLBACK - 265)))) !==
            0) ||
        (((_la - 299) & ~0x1f) == 0 &&
          ((1 << (_la - 299)) &
            ((1 << (HiveParser.KW_ABORT - 299)) |
              (1 << (HiveParser.KW_MERGE - 299)) |
              (1 << (HiveParser.KW_REPL - 299)))) !==
            0) ||
        _la === HiveParser.SEMICOLON ||
        _la === HiveParser.LPAREN
      ) {
        this.state = 894;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case HiveParser.KW_DESC:
          case HiveParser.KW_FROM:
          case HiveParser.KW_SELECT:
          case HiveParser.KW_INSERT:
          case HiveParser.KW_SHOW:
          case HiveParser.KW_MSCK:
          case HiveParser.KW_LOAD:
          case HiveParser.KW_EXPORT:
          case HiveParser.KW_IMPORT:
          case HiveParser.KW_CREATE:
          case HiveParser.KW_ALTER:
          case HiveParser.KW_DESCRIBE:
          case HiveParser.KW_DROP:
          case HiveParser.KW_MAP:
          case HiveParser.KW_REDUCE:
          case HiveParser.KW_KILL:
          case HiveParser.KW_ENABLE:
          case HiveParser.KW_DISABLE:
          case HiveParser.KW_REPLACE:
          case HiveParser.KW_EXPLAIN:
          case HiveParser.KW_WITH:
          case HiveParser.KW_SET:
          case HiveParser.KW_DELETE:
          case HiveParser.KW_GRANT:
          case HiveParser.KW_REVOKE:
          case HiveParser.KW_LOCK:
          case HiveParser.KW_UNLOCK:
          case HiveParser.KW_ANALYZE:
          case HiveParser.KW_USE:
          case HiveParser.KW_UPDATE:
          case HiveParser.KW_TRUNCATE:
          case HiveParser.KW_RELOAD:
          case HiveParser.KW_START:
          case HiveParser.KW_COMMIT:
          case HiveParser.KW_ROLLBACK:
          case HiveParser.KW_ABORT:
          case HiveParser.KW_MERGE:
          case HiveParser.KW_REPL:
          case HiveParser.LPAREN:
            this.state = 890;
            this.statement();
            this.state = 891;
            this.statementSeparator();
            break;
          case HiveParser.SEMICOLON:
            this.state = 893;
            this.empty();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 898;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 899;
      this.match(HiveParser.EOF);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  statementSeparator() {
    let localctx = new StatementSeparatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, HiveParser.RULE_statementSeparator);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 901;
      this.match(HiveParser.SEMICOLON);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  empty() {
    let localctx = new EmptyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, HiveParser.RULE_empty);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 903;
      this.statementSeparator();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  statement() {
    let localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, HiveParser.RULE_statement);
    try {
      this.state = 907;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_EXPLAIN:
          this.enterOuterAlt(localctx, 1);
          this.state = 905;
          this.explainStatement();
          break;
        case HiveParser.KW_DESC:
        case HiveParser.KW_FROM:
        case HiveParser.KW_SELECT:
        case HiveParser.KW_INSERT:
        case HiveParser.KW_SHOW:
        case HiveParser.KW_MSCK:
        case HiveParser.KW_LOAD:
        case HiveParser.KW_EXPORT:
        case HiveParser.KW_IMPORT:
        case HiveParser.KW_CREATE:
        case HiveParser.KW_ALTER:
        case HiveParser.KW_DESCRIBE:
        case HiveParser.KW_DROP:
        case HiveParser.KW_MAP:
        case HiveParser.KW_REDUCE:
        case HiveParser.KW_KILL:
        case HiveParser.KW_ENABLE:
        case HiveParser.KW_DISABLE:
        case HiveParser.KW_REPLACE:
        case HiveParser.KW_WITH:
        case HiveParser.KW_SET:
        case HiveParser.KW_DELETE:
        case HiveParser.KW_GRANT:
        case HiveParser.KW_REVOKE:
        case HiveParser.KW_LOCK:
        case HiveParser.KW_UNLOCK:
        case HiveParser.KW_ANALYZE:
        case HiveParser.KW_USE:
        case HiveParser.KW_UPDATE:
        case HiveParser.KW_TRUNCATE:
        case HiveParser.KW_RELOAD:
        case HiveParser.KW_START:
        case HiveParser.KW_COMMIT:
        case HiveParser.KW_ROLLBACK:
        case HiveParser.KW_ABORT:
        case HiveParser.KW_MERGE:
        case HiveParser.KW_REPL:
        case HiveParser.LPAREN:
          this.enterOuterAlt(localctx, 2);
          this.state = 906;
          this.execStatement();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  explainStatement() {
    let localctx = new ExplainStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, HiveParser.RULE_explainStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 909;
      this.match(HiveParser.KW_EXPLAIN);
      this.state = 919;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_DESC:
        case HiveParser.KW_FROM:
        case HiveParser.KW_SELECT:
        case HiveParser.KW_INSERT:
        case HiveParser.KW_SHOW:
        case HiveParser.KW_MSCK:
        case HiveParser.KW_LOAD:
        case HiveParser.KW_EXPORT:
        case HiveParser.KW_IMPORT:
        case HiveParser.KW_CREATE:
        case HiveParser.KW_ALTER:
        case HiveParser.KW_DESCRIBE:
        case HiveParser.KW_DROP:
        case HiveParser.KW_MAP:
        case HiveParser.KW_REDUCE:
        case HiveParser.KW_KILL:
        case HiveParser.KW_ENABLE:
        case HiveParser.KW_DISABLE:
        case HiveParser.KW_REPLACE:
        case HiveParser.KW_EXTENDED:
        case HiveParser.KW_FORMATTED:
        case HiveParser.KW_DEPENDENCY:
        case HiveParser.KW_LOGICAL:
        case HiveParser.KW_WITH:
        case HiveParser.KW_SET:
        case HiveParser.KW_DELETE:
        case HiveParser.KW_GRANT:
        case HiveParser.KW_REVOKE:
        case HiveParser.KW_LOCK:
        case HiveParser.KW_UNLOCK:
        case HiveParser.KW_ANALYZE:
        case HiveParser.KW_USE:
        case HiveParser.KW_UPDATE:
        case HiveParser.KW_TRUNCATE:
        case HiveParser.KW_AUTHORIZATION:
        case HiveParser.KW_REOPTIMIZATION:
        case HiveParser.KW_RELOAD:
        case HiveParser.KW_START:
        case HiveParser.KW_COMMIT:
        case HiveParser.KW_ROLLBACK:
        case HiveParser.KW_ABORT:
        case HiveParser.KW_MERGE:
        case HiveParser.KW_REPL:
        case HiveParser.KW_VECTORIZATION:
        case HiveParser.LPAREN:
          this.state = 913;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 3, this._ctx);
          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 910;
              this.explainOption();
            }
            this.state = 915;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 3, this._ctx);
          }

          this.state = 916;
          this.execStatement();
          break;
        case HiveParser.KW_REWRITE:
          this.state = 917;
          this.match(HiveParser.KW_REWRITE);
          this.state = 918;
          this.queryStatementExpression();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  explainOption() {
    let localctx = new ExplainOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, HiveParser.RULE_explainOption);
    var _la = 0; // Token type
    try {
      this.state = 935;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_EXTENDED:
          this.enterOuterAlt(localctx, 1);
          this.state = 921;
          this.match(HiveParser.KW_EXTENDED);
          break;
        case HiveParser.KW_FORMATTED:
          this.enterOuterAlt(localctx, 2);
          this.state = 922;
          this.match(HiveParser.KW_FORMATTED);
          break;
        case HiveParser.KW_DEPENDENCY:
          this.enterOuterAlt(localctx, 3);
          this.state = 923;
          this.match(HiveParser.KW_DEPENDENCY);
          break;
        case HiveParser.KW_LOGICAL:
          this.enterOuterAlt(localctx, 4);
          this.state = 924;
          this.match(HiveParser.KW_LOGICAL);
          break;
        case HiveParser.KW_AUTHORIZATION:
          this.enterOuterAlt(localctx, 5);
          this.state = 925;
          this.match(HiveParser.KW_AUTHORIZATION);
          break;
        case HiveParser.KW_ANALYZE:
          this.enterOuterAlt(localctx, 6);
          this.state = 926;
          this.match(HiveParser.KW_ANALYZE);
          break;
        case HiveParser.KW_REOPTIMIZATION:
          this.enterOuterAlt(localctx, 7);
          this.state = 927;
          this.match(HiveParser.KW_REOPTIMIZATION);
          break;
        case HiveParser.KW_VECTORIZATION:
          this.enterOuterAlt(localctx, 8);
          this.state = 928;
          this.match(HiveParser.KW_VECTORIZATION);
          this.state = 930;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_ONLY) {
            this.state = 929;
            this.vectorizationOnly();
          }

          this.state = 933;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (
            ((_la - 308) & ~0x1f) == 0 &&
            ((1 << (_la - 308)) &
              ((1 << (HiveParser.KW_SUMMARY - 308)) |
                (1 << (HiveParser.KW_OPERATOR - 308)) |
                (1 << (HiveParser.KW_EXPRESSION - 308)) |
                (1 << (HiveParser.KW_DETAIL - 308)))) !==
              0
          ) {
            this.state = 932;
            this.vectorizatonDetail();
          }

          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  vectorizationOnly() {
    let localctx = new VectorizationOnlyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, HiveParser.RULE_vectorizationOnly);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 937;
      this.match(HiveParser.KW_ONLY);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  vectorizatonDetail() {
    let localctx = new VectorizatonDetailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, HiveParser.RULE_vectorizatonDetail);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 939;
      _la = this._input.LA(1);
      if (
        !(
          ((_la - 308) & ~0x1f) == 0 &&
          ((1 << (_la - 308)) &
            ((1 << (HiveParser.KW_SUMMARY - 308)) |
              (1 << (HiveParser.KW_OPERATOR - 308)) |
              (1 << (HiveParser.KW_EXPRESSION - 308)) |
              (1 << (HiveParser.KW_DETAIL - 308)))) !==
            0
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  execStatement() {
    let localctx = new ExecStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, HiveParser.RULE_execStatement);
    try {
      this.state = 953;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 8, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 941;
          this.queryStatementExpression();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 942;
          this.loadStatement();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 943;
          this.exportStatement();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 944;
          this.importStatement();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 945;
          this.replDumpStatement();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 946;
          this.replLoadStatement();
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 947;
          this.replStatusStatement();
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 948;
          this.ddlStatement();
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 949;
          this.deleteStatement();
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 950;
          this.updateStatement();
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 951;
          this.sqlTransactionStatement();
          break;

        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 952;
          this.mergeStatement();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  loadStatement() {
    let localctx = new LoadStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, HiveParser.RULE_loadStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 955;
      this.match(HiveParser.KW_LOAD);
      this.state = 956;
      this.match(HiveParser.KW_DATA);
      this.state = 958;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_LOCAL) {
        this.state = 957;
        this.match(HiveParser.KW_LOCAL);
      }

      this.state = 960;
      this.match(HiveParser.KW_INPATH);
      this.state = 961;
      this.match(HiveParser.StringLiteral);
      this.state = 963;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_OVERWRITE) {
        this.state = 962;
        this.match(HiveParser.KW_OVERWRITE);
      }

      this.state = 965;
      this.match(HiveParser.KW_INTO);
      this.state = 966;
      this.match(HiveParser.KW_TABLE);
      this.state = 967;
      this.tableOrPartition();
      this.state = 969;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_INPUTFORMAT) {
        this.state = 968;
        this.inputFileFormat();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  replicationClause() {
    let localctx = new ReplicationClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, HiveParser.RULE_replicationClause);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 971;
      this.match(HiveParser.KW_FOR);
      this.state = 973;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_METADATA) {
        this.state = 972;
        this.match(HiveParser.KW_METADATA);
      }

      this.state = 975;
      this.match(HiveParser.KW_REPLICATION);
      this.state = 976;
      this.match(HiveParser.LPAREN);
      this.state = 977;
      this.match(HiveParser.StringLiteral);
      this.state = 978;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  exportStatement() {
    let localctx = new ExportStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, HiveParser.RULE_exportStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 980;
      this.match(HiveParser.KW_EXPORT);
      this.state = 981;
      this.match(HiveParser.KW_TABLE);
      this.state = 982;
      this.tableOrPartition();
      this.state = 983;
      this.match(HiveParser.KW_TO);
      this.state = 984;
      this.match(HiveParser.StringLiteral);
      this.state = 986;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_FOR) {
        this.state = 985;
        this.replicationClause();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  importStatement() {
    let localctx = new ImportStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, HiveParser.RULE_importStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 988;
      this.match(HiveParser.KW_IMPORT);
      this.state = 994;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_TABLE || _la === HiveParser.KW_EXTERNAL) {
        this.state = 990;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === HiveParser.KW_EXTERNAL) {
          this.state = 989;
          this.match(HiveParser.KW_EXTERNAL);
        }

        this.state = 992;
        this.match(HiveParser.KW_TABLE);
        this.state = 993;
        this.tableOrPartition();
      }

      this.state = 996;
      this.match(HiveParser.KW_FROM);

      this.state = 997;
      localctx.path = this.match(HiveParser.StringLiteral);
      this.state = 999;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_LOCATION) {
        this.state = 998;
        this.tableLocation();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  replDumpStatement() {
    let localctx = new ReplDumpStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, HiveParser.RULE_replDumpStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1001;
      this.match(HiveParser.KW_REPL);
      this.state = 1002;
      this.match(HiveParser.KW_DUMP);
      this.state = 1003;
      this.identifier();
      this.state = 1006;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.DOT) {
        this.state = 1004;
        this.match(HiveParser.DOT);
        this.state = 1005;
        this.identifier();
      }

      this.state = 1018;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_FROM) {
        this.state = 1008;
        this.match(HiveParser.KW_FROM);
        this.state = 1009;
        this.match(HiveParser.Number);
        this.state = 1012;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === HiveParser.KW_TO) {
          this.state = 1010;
          this.match(HiveParser.KW_TO);
          this.state = 1011;
          this.match(HiveParser.Number);
        }

        this.state = 1016;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === HiveParser.KW_LIMIT) {
          this.state = 1014;
          this.match(HiveParser.KW_LIMIT);
          this.state = 1015;
          this.match(HiveParser.Number);
        }
      }

      this.state = 1022;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WITH) {
        this.state = 1020;
        this.match(HiveParser.KW_WITH);
        this.state = 1021;
        this.replConfigs();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  replLoadStatement() {
    let localctx = new ReplLoadStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, HiveParser.RULE_replLoadStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1024;
      this.match(HiveParser.KW_REPL);
      this.state = 1025;
      this.match(HiveParser.KW_LOAD);
      this.state = 1031;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        ((_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << HiveParser.KW_IF) |
              (1 << HiveParser.KW_ASC) |
              (1 << HiveParser.KW_DESC) |
              (1 << HiveParser.KW_NULLS) |
              (1 << HiveParser.KW_LAST) |
              (1 << HiveParser.KW_OVERWRITE))) !==
            0) ||
        (((_la - 36) & ~0x1f) == 0 &&
          ((1 << (_la - 36)) &
            ((1 << (HiveParser.KW_PARTITIONS - 36)) |
              (1 << (HiveParser.KW_TABLES - 36)) |
              (1 << (HiveParser.KW_COLUMNS - 36)) |
              (1 << (HiveParser.KW_INDEX - 36)) |
              (1 << (HiveParser.KW_INDEXES - 36)) |
              (1 << (HiveParser.KW_REBUILD - 36)) |
              (1 << (HiveParser.KW_FUNCTIONS - 36)) |
              (1 << (HiveParser.KW_SHOW - 36)) |
              (1 << (HiveParser.KW_MSCK - 36)) |
              (1 << (HiveParser.KW_REPAIR - 36)) |
              (1 << (HiveParser.KW_DIRECTORY - 36)) |
              (1 << (HiveParser.KW_CLUSTER - 36)) |
              (1 << (HiveParser.KW_DISTRIBUTE - 36)) |
              (1 << (HiveParser.KW_SORT - 36)) |
              (1 << (HiveParser.KW_LOAD - 36)) |
              (1 << (HiveParser.KW_EXPORT - 36)) |
              (1 << (HiveParser.KW_REPLICATION - 36)) |
              (1 << (HiveParser.KW_METADATA - 36)) |
              (1 << (HiveParser.KW_DATA - 36)) |
              (1 << (HiveParser.KW_INPATH - 36)))) !==
            0) ||
        (((_la - 68) & ~0x1f) == 0 &&
          ((1 << (_la - 68)) &
            ((1 << (HiveParser.KW_CHANGE - 68)) |
              (1 << (HiveParser.KW_FIRST - 68)) |
              (1 << (HiveParser.KW_AFTER - 68)) |
              (1 << (HiveParser.KW_RENAME - 68)) |
              (1 << (HiveParser.KW_COMMENT - 68)) |
              (1 << (HiveParser.KW_BOOLEAN - 68)) |
              (1 << (HiveParser.KW_TINYINT - 68)) |
              (1 << (HiveParser.KW_SMALLINT - 68)) |
              (1 << (HiveParser.KW_INT - 68)) |
              (1 << (HiveParser.KW_BIGINT - 68)) |
              (1 << (HiveParser.KW_FLOAT - 68)) |
              (1 << (HiveParser.KW_DOUBLE - 68)) |
              (1 << (HiveParser.KW_DATE - 68)) |
              (1 << (HiveParser.KW_DATETIME - 68)) |
              (1 << (HiveParser.KW_TIMESTAMP - 68)) |
              (1 << (HiveParser.KW_TIME - 68)) |
              (1 << (HiveParser.KW_ZONE - 68)) |
              (1 << (HiveParser.KW_STRING - 68)) |
              (1 << (HiveParser.KW_ARRAY - 68)) |
              (1 << (HiveParser.KW_STRUCT - 68)) |
              (1 << (HiveParser.KW_MAP - 68)) |
              (1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
            0) ||
        (((_la - 101) & ~0x1f) == 0 &&
          ((1 << (_la - 101)) &
            ((1 << (HiveParser.KW_PARTITIONED - 101)) |
              (1 << (HiveParser.KW_CLUSTERED - 101)) |
              (1 << (HiveParser.KW_SORTED - 101)) |
              (1 << (HiveParser.KW_BUCKETS - 101)) |
              (1 << (HiveParser.KW_FORMAT - 101)) |
              (1 << (HiveParser.KW_DELIMITED - 101)) |
              (1 << (HiveParser.KW_FIELDS - 101)) |
              (1 << (HiveParser.KW_TERMINATED - 101)) |
              (1 << (HiveParser.KW_ESCAPED - 101)) |
              (1 << (HiveParser.KW_COLLECTION - 101)) |
              (1 << (HiveParser.KW_ITEMS - 101)) |
              (1 << (HiveParser.KW_KEYS - 101)) |
              (1 << (HiveParser.KW_KEY_TYPE - 101)) |
              (1 << (HiveParser.KW_KILL - 101)) |
              (1 << (HiveParser.KW_LINES - 101)) |
              (1 << (HiveParser.KW_STORED - 101)) |
              (1 << (HiveParser.KW_FILEFORMAT - 101)) |
              (1 << (HiveParser.KW_INPUTFORMAT - 101)) |
              (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
              (1 << (HiveParser.KW_INPUTDRIVER - 101)) |
              (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
              (1 << (HiveParser.KW_ENABLE - 101)) |
              (1 << (HiveParser.KW_DISABLE - 101)) |
              (1 << (HiveParser.KW_LOCATION - 101)) |
              (1 << (HiveParser.KW_BUCKET - 101)))) !==
            0) ||
        (((_la - 134) & ~0x1f) == 0 &&
          ((1 << (_la - 134)) &
            ((1 << (HiveParser.KW_ADD - 134)) |
              (1 << (HiveParser.KW_REPLACE - 134)) |
              (1 << (HiveParser.KW_TEMPORARY - 134)) |
              (1 << (HiveParser.KW_FILE - 134)) |
              (1 << (HiveParser.KW_JAR - 134)) |
              (1 << (HiveParser.KW_EXPLAIN - 134)) |
              (1 << (HiveParser.KW_FORMATTED - 134)) |
              (1 << (HiveParser.KW_DEPENDENCY - 134)) |
              (1 << (HiveParser.KW_LOGICAL - 134)) |
              (1 << (HiveParser.KW_SERDE - 134)) |
              (1 << (HiveParser.KW_DEFERRED - 134)) |
              (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
              (1 << (HiveParser.KW_DBPROPERTIES - 134)) |
              (1 << (HiveParser.KW_LIMIT - 134)) |
              (1 << (HiveParser.KW_OFFSET - 134)) |
              (1 << (HiveParser.KW_UNSET - 134)) |
              (1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
              (1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
              (1 << (HiveParser.KW_VALUE_TYPE - 134)) |
              (1 << (HiveParser.KW_ELEM_TYPE - 134)) |
              (1 << (HiveParser.KW_DEFINED - 134)))) !==
            0) ||
        (((_la - 167) & ~0x1f) == 0 &&
          ((1 << (_la - 167)) &
            ((1 << (HiveParser.KW_MAPJOIN - 167)) |
              (1 << (HiveParser.KW_STREAMTABLE - 167)) |
              (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
              (1 << (HiveParser.KW_UTC - 167)) |
              (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
              (1 << (HiveParser.KW_LONG - 167)) |
              (1 << (HiveParser.KW_PLUS - 167)) |
              (1 << (HiveParser.KW_VIEW - 167)) |
              (1 << (HiveParser.KW_VIEWS - 167)) |
              (1 << (HiveParser.KW_DATABASES - 167)) |
              (1 << (HiveParser.KW_MATERIALIZED - 167)) |
              (1 << (HiveParser.KW_SCHEMA - 167)) |
              (1 << (HiveParser.KW_SCHEMAS - 167)) |
              (1 << (HiveParser.KW_SSL - 167)) |
              (1 << (HiveParser.KW_UNDO - 167)) |
              (1 << (HiveParser.KW_LOCK - 167)) |
              (1 << (HiveParser.KW_LOCKS - 167)) |
              (1 << (HiveParser.KW_UNLOCK - 167)) |
              (1 << (HiveParser.KW_SHARED - 167)) |
              (1 << (HiveParser.KW_EXCLUSIVE - 167)) |
              (1 << (HiveParser.KW_UNSIGNED - 167)) |
              (1 << (HiveParser.KW_WHILE - 167)) |
              (1 << (HiveParser.KW_READ - 167)))) !==
            0) ||
        (((_la - 200) & ~0x1f) == 0 &&
          ((1 << (_la - 200)) &
            ((1 << (HiveParser.KW_PURGE - 200)) |
              (1 << (HiveParser.KW_ANALYZE - 200)) |
              (1 << (HiveParser.KW_BEFORE - 200)) |
              (1 << (HiveParser.KW_BINARY - 200)) |
              (1 << (HiveParser.KW_CONTINUE - 200)) |
              (1 << (HiveParser.KW_RECORDREADER - 200)) |
              (1 << (HiveParser.KW_RECORDWRITER - 200)) |
              (1 << (HiveParser.KW_SEMI - 200)) |
              (1 << (HiveParser.KW_TOUCH - 200)) |
              (1 << (HiveParser.KW_ARCHIVE - 200)) |
              (1 << (HiveParser.KW_UNARCHIVE - 200)) |
              (1 << (HiveParser.KW_COMPUTE - 200)) |
              (1 << (HiveParser.KW_STATISTICS - 200)) |
              (1 << (HiveParser.KW_USE - 200)) |
              (1 << (HiveParser.KW_OPTION - 200)) |
              (1 << (HiveParser.KW_CONCATENATE - 200)) |
              (1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
              (1 << (HiveParser.KW_RESTRICT - 200)) |
              (1 << (HiveParser.KW_CASCADE - 200)) |
              (1 << (HiveParser.KW_SKEWED - 200)) |
              (1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
            0) ||
        (((_la - 238) & ~0x1f) == 0 &&
          ((1 << (_la - 238)) &
            ((1 << (HiveParser.KW_CURRENT_DATE - 238)) |
              (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 238)) |
              (1 << (HiveParser.KW_GROUPING - 238)) |
              (1 << (HiveParser.KW_SETS - 238)) |
              (1 << (HiveParser.KW_NOSCAN - 238)) |
              (1 << (HiveParser.KW_ROLE - 238)) |
              (1 << (HiveParser.KW_ROLES - 238)) |
              (1 << (HiveParser.KW_URI - 238)) |
              (1 << (HiveParser.KW_SERVER - 238)) |
              (1 << (HiveParser.KW_ADMIN - 238)) |
              (1 << (HiveParser.KW_OWNER - 238)) |
              (1 << (HiveParser.KW_PRINCIPALS - 238)) |
              (1 << (HiveParser.KW_COMPACT - 238)) |
              (1 << (HiveParser.KW_COMPACTIONS - 238)) |
              (1 << (HiveParser.KW_TRANSACTIONS - 238)) |
              (1 << (HiveParser.KW_REWRITE - 238)) |
              (1 << (HiveParser.KW_REOPTIMIZATION - 238)) |
              (1 << (HiveParser.KW_RELOAD - 238)) |
              (1 << (HiveParser.KW_YEAR - 238)) |
              (1 << (HiveParser.KW_QUERY - 238)) |
              (1 << (HiveParser.KW_QUARTER - 238)) |
              (1 << (HiveParser.KW_MONTH - 238)))) !==
            0) ||
        (((_la - 270) & ~0x1f) == 0 &&
          ((1 << (_la - 270)) &
            ((1 << (HiveParser.KW_WEEK - 270)) |
              (1 << (HiveParser.KW_DAY - 270)) |
              (1 << (HiveParser.KW_DOW - 270)) |
              (1 << (HiveParser.KW_HOUR - 270)) |
              (1 << (HiveParser.KW_MINUTE - 270)) |
              (1 << (HiveParser.KW_SECOND - 270)) |
              (1 << (HiveParser.KW_TRANSACTION - 270)) |
              (1 << (HiveParser.KW_WORK - 270)) |
              (1 << (HiveParser.KW_WRITE - 270)) |
              (1 << (HiveParser.KW_ISOLATION - 270)) |
              (1 << (HiveParser.KW_LEVEL - 270)) |
              (1 << (HiveParser.KW_SNAPSHOT - 270)) |
              (1 << (HiveParser.KW_AUTOCOMMIT - 270)) |
              (1 << (HiveParser.KW_CACHE - 270)) |
              (1 << (HiveParser.KW_ENFORCED - 270)) |
              (1 << (HiveParser.KW_VALIDATE - 270)) |
              (1 << (HiveParser.KW_NOVALIDATE - 270)) |
              (1 << (HiveParser.KW_RELY - 270)) |
              (1 << (HiveParser.KW_NORELY - 270)) |
              (1 << (HiveParser.KW_KEY - 270)) |
              (1 << (HiveParser.KW_ABORT - 270)))) !==
            0) ||
        (((_la - 303) & ~0x1f) == 0 &&
          ((1 << (_la - 303)) &
            ((1 << (HiveParser.KW_MATCHED - 303)) |
              (1 << (HiveParser.KW_REPL - 303)) |
              (1 << (HiveParser.KW_DUMP - 303)) |
              (1 << (HiveParser.KW_STATUS - 303)) |
              (1 << (HiveParser.KW_VECTORIZATION - 303)) |
              (1 << (HiveParser.KW_SUMMARY - 303)) |
              (1 << (HiveParser.KW_OPERATOR - 303)) |
              (1 << (HiveParser.KW_EXPRESSION - 303)) |
              (1 << (HiveParser.KW_DETAIL - 303)) |
              (1 << (HiveParser.KW_WAIT - 303)) |
              (1 << (HiveParser.KW_RESOURCE - 303)) |
              (1 << (HiveParser.KW_PLAN - 303)) |
              (1 << (HiveParser.KW_QUERY_PARALLELISM - 303)) |
              (1 << (HiveParser.KW_PLANS - 303)) |
              (1 << (HiveParser.KW_ACTIVATE - 303)) |
              (1 << (HiveParser.KW_DEFAULT - 303)) |
              (1 << (HiveParser.KW_CHECK - 303)) |
              (1 << (HiveParser.KW_POOL - 303)) |
              (1 << (HiveParser.KW_MOVE - 303)) |
              (1 << (HiveParser.KW_DO - 303)) |
              (1 << (HiveParser.KW_ALLOC_FRACTION - 303)) |
              (1 << (HiveParser.KW_SCHEDULING_POLICY - 303)) |
              (1 << (HiveParser.KW_PATH - 303)) |
              (1 << (HiveParser.KW_MAPPING - 303)) |
              (1 << (HiveParser.KW_WORKLOAD - 303)) |
              (1 << (HiveParser.KW_MANAGEMENT - 303)) |
              (1 << (HiveParser.KW_ACTIVE - 303)) |
              (1 << (HiveParser.KW_UNMANAGED - 303)))) !==
            0) ||
        (((_la - 338) & ~0x1f) == 0 &&
          ((1 << (_la - 338)) &
            ((1 << (HiveParser.KW_DELTA - 338)) |
              (1 << (HiveParser.KW_CSV - 338)) |
              (1 << (HiveParser.KW_JSON - 338)) |
              (1 << (HiveParser.KW_BLOOMFILTER - 338)) |
              (1 << (HiveParser.LCURLY - 338)))) !==
            0) ||
        _la === HiveParser.Identifier
      ) {
        this.state = 1026;
        this.identifier();
        this.state = 1029;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === HiveParser.DOT) {
          this.state = 1027;
          this.match(HiveParser.DOT);
          this.state = 1028;
          this.identifier();
        }
      }

      this.state = 1033;
      this.match(HiveParser.KW_FROM);
      this.state = 1034;
      this.match(HiveParser.StringLiteral);
      this.state = 1037;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WITH) {
        this.state = 1035;
        this.match(HiveParser.KW_WITH);
        this.state = 1036;
        this.replConfigs();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  replConfigs() {
    let localctx = new ReplConfigsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, HiveParser.RULE_replConfigs);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1039;
      this.match(HiveParser.LPAREN);
      this.state = 1040;
      this.replConfigsList();
      this.state = 1041;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  replConfigsList() {
    let localctx = new ReplConfigsListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, HiveParser.RULE_replConfigsList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1043;
      this.keyValueProperty();
      this.state = 1048;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 1044;
        this.match(HiveParser.COMMA);
        this.state = 1045;
        this.keyValueProperty();
        this.state = 1050;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  replStatusStatement() {
    let localctx = new ReplStatusStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, HiveParser.RULE_replStatusStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1051;
      this.match(HiveParser.KW_REPL);
      this.state = 1052;
      this.match(HiveParser.KW_STATUS);
      this.state = 1053;
      this.identifier();
      this.state = 1056;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.DOT) {
        this.state = 1054;
        this.match(HiveParser.DOT);
        this.state = 1055;
        this.identifier();
      }

      this.state = 1060;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WITH) {
        this.state = 1058;
        this.match(HiveParser.KW_WITH);
        this.state = 1059;
        this.replConfigs();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  ddlStatement() {
    let localctx = new DdlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, HiveParser.RULE_ddlStatement);
    try {
      this.state = 1105;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 28, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1062;
          this.createDatabaseStatement();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1063;
          this.switchDatabaseStatement();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1064;
          this.dropDatabaseStatement();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1065;
          this.createTableStatement();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 1066;
          this.dropTableStatement();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 1067;
          this.truncateTableStatement();
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 1068;
          this.alterStatement();
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 1069;
          this.descStatement();
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 1070;
          this.showStatement();
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 1071;
          this.metastoreCheck();
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 1072;
          this.createViewStatement();
          break;

        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 1073;
          this.createMaterializedViewStatement();
          break;

        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 1074;
          this.dropViewStatement();
          break;

        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 1075;
          this.dropMaterializedViewStatement();
          break;

        case 15:
          this.enterOuterAlt(localctx, 15);
          this.state = 1076;
          this.createFunctionStatement();
          break;

        case 16:
          this.enterOuterAlt(localctx, 16);
          this.state = 1077;
          this.createMacroStatement();
          break;

        case 17:
          this.enterOuterAlt(localctx, 17);
          this.state = 1078;
          this.dropFunctionStatement();
          break;

        case 18:
          this.enterOuterAlt(localctx, 18);
          this.state = 1079;
          this.reloadFunctionStatement();
          break;

        case 19:
          this.enterOuterAlt(localctx, 19);
          this.state = 1080;
          this.dropMacroStatement();
          break;

        case 20:
          this.enterOuterAlt(localctx, 20);
          this.state = 1081;
          this.analyzeStatement();
          break;

        case 21:
          this.enterOuterAlt(localctx, 21);
          this.state = 1082;
          this.lockStatement();
          break;

        case 22:
          this.enterOuterAlt(localctx, 22);
          this.state = 1083;
          this.unlockStatement();
          break;

        case 23:
          this.enterOuterAlt(localctx, 23);
          this.state = 1084;
          this.lockDatabase();
          break;

        case 24:
          this.enterOuterAlt(localctx, 24);
          this.state = 1085;
          this.unlockDatabase();
          break;

        case 25:
          this.enterOuterAlt(localctx, 25);
          this.state = 1086;
          this.createRoleStatement();
          break;

        case 26:
          this.enterOuterAlt(localctx, 26);
          this.state = 1087;
          this.dropRoleStatement();
          break;

        case 27:
          this.enterOuterAlt(localctx, 27);
          this.state = 1088;
          this.grantPrivileges();
          break;

        case 28:
          this.enterOuterAlt(localctx, 28);
          this.state = 1089;
          this.revokePrivileges();
          break;

        case 29:
          this.enterOuterAlt(localctx, 29);
          this.state = 1090;
          this.showGrants();
          break;

        case 30:
          this.enterOuterAlt(localctx, 30);
          this.state = 1091;
          this.showRoleGrants();
          break;

        case 31:
          this.enterOuterAlt(localctx, 31);
          this.state = 1092;
          this.showRolePrincipals();
          break;

        case 32:
          this.enterOuterAlt(localctx, 32);
          this.state = 1093;
          this.showRoles();
          break;

        case 33:
          this.enterOuterAlt(localctx, 33);
          this.state = 1094;
          this.grantRole();
          break;

        case 34:
          this.enterOuterAlt(localctx, 34);
          this.state = 1095;
          this.revokeRole();
          break;

        case 35:
          this.enterOuterAlt(localctx, 35);
          this.state = 1096;
          this.setRole();
          break;

        case 36:
          this.enterOuterAlt(localctx, 36);
          this.state = 1097;
          this.showCurrentRole();
          break;

        case 37:
          this.enterOuterAlt(localctx, 37);
          this.state = 1098;
          this.abortTransactionStatement();
          break;

        case 38:
          this.enterOuterAlt(localctx, 38);
          this.state = 1099;
          this.killQueryStatement();
          break;

        case 39:
          this.enterOuterAlt(localctx, 39);
          this.state = 1100;
          this.resourcePlanDdlStatements();
          break;

        case 40:
          this.enterOuterAlt(localctx, 40);
          this.state = 1101;
          this.createIndexStatement();
          break;

        case 41:
          this.enterOuterAlt(localctx, 41);
          this.state = 1102;
          this.dropIndexStatement();
          break;

        case 42:
          this.enterOuterAlt(localctx, 42);
          this.state = 1103;
          this.createBloomfilterIndexStatement();
          break;

        case 43:
          this.enterOuterAlt(localctx, 43);
          this.state = 1104;
          this.dropBloomfilterIndexStatement();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  ifExists() {
    let localctx = new IfExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, HiveParser.RULE_ifExists);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1107;
      this.match(HiveParser.KW_IF);
      this.state = 1108;
      this.match(HiveParser.KW_EXISTS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  restrictOrCascade() {
    let localctx = new RestrictOrCascadeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, HiveParser.RULE_restrictOrCascade);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1110;
      _la = this._input.LA(1);
      if (!(_la === HiveParser.KW_RESTRICT || _la === HiveParser.KW_CASCADE)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  ifNotExists() {
    let localctx = new IfNotExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, HiveParser.RULE_ifNotExists);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1112;
      this.match(HiveParser.KW_IF);
      this.state = 1113;
      this.match(HiveParser.KW_NOT);
      this.state = 1114;
      this.match(HiveParser.KW_EXISTS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  rewriteEnabled() {
    let localctx = new RewriteEnabledContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, HiveParser.RULE_rewriteEnabled);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1116;
      this.match(HiveParser.KW_ENABLE);
      this.state = 1117;
      this.match(HiveParser.KW_REWRITE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  rewriteDisabled() {
    let localctx = new RewriteDisabledContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, HiveParser.RULE_rewriteDisabled);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1119;
      this.match(HiveParser.KW_DISABLE);
      this.state = 1120;
      this.match(HiveParser.KW_REWRITE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  storedAsDirs() {
    let localctx = new StoredAsDirsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, HiveParser.RULE_storedAsDirs);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1122;
      this.match(HiveParser.KW_STORED);
      this.state = 1123;
      this.match(HiveParser.KW_AS);
      this.state = 1124;
      this.match(HiveParser.KW_DIRECTORIES);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  orReplace() {
    let localctx = new OrReplaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, HiveParser.RULE_orReplace);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1126;
      this.match(HiveParser.KW_OR);
      this.state = 1127;
      this.match(HiveParser.KW_REPLACE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createDatabaseStatement() {
    let localctx = new CreateDatabaseStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 52, HiveParser.RULE_createDatabaseStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1129;
      this.match(HiveParser.KW_CREATE);
      this.state = 1130;
      _la = this._input.LA(1);
      if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 1132;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 29, this._ctx);
      if (la_ === 1) {
        this.state = 1131;
        this.ifNotExists();
      }
      this.state = 1134;
      this.identifier();
      this.state = 1136;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_COMMENT) {
        this.state = 1135;
        this.databaseComment();
      }

      this.state = 1139;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_LOCATION) {
        this.state = 1138;
        this.dbLocation();
      }

      this.state = 1144;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WITH) {
        this.state = 1141;
        this.match(HiveParser.KW_WITH);
        this.state = 1142;
        this.match(HiveParser.KW_DBPROPERTIES);
        this.state = 1143;
        this.dbProperties();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dbLocation() {
    let localctx = new DbLocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, HiveParser.RULE_dbLocation);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1146;
      this.match(HiveParser.KW_LOCATION);
      this.state = 1147;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dbProperties() {
    let localctx = new DbPropertiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, HiveParser.RULE_dbProperties);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1149;
      this.match(HiveParser.LPAREN);
      this.state = 1150;
      this.dbPropertiesList();
      this.state = 1151;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dbPropertiesList() {
    let localctx = new DbPropertiesListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, HiveParser.RULE_dbPropertiesList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1153;
      this.keyValueProperty();
      this.state = 1158;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 1154;
        this.match(HiveParser.COMMA);
        this.state = 1155;
        this.keyValueProperty();
        this.state = 1160;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  switchDatabaseStatement() {
    let localctx = new SwitchDatabaseStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 60, HiveParser.RULE_switchDatabaseStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1161;
      this.match(HiveParser.KW_USE);
      this.state = 1162;
      this.identifier();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropDatabaseStatement() {
    let localctx = new DropDatabaseStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 62, HiveParser.RULE_dropDatabaseStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1164;
      this.match(HiveParser.KW_DROP);
      this.state = 1165;
      _la = this._input.LA(1);
      if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 1167;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 34, this._ctx);
      if (la_ === 1) {
        this.state = 1166;
        this.ifExists();
      }
      this.state = 1169;
      this.identifier();
      this.state = 1171;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_RESTRICT || _la === HiveParser.KW_CASCADE) {
        this.state = 1170;
        this.restrictOrCascade();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  databaseComment() {
    let localctx = new DatabaseCommentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, HiveParser.RULE_databaseComment);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1173;
      this.match(HiveParser.KW_COMMENT);
      this.state = 1174;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createTableStatement() {
    let localctx = new CreateTableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, HiveParser.RULE_createTableStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1176;
      this.match(HiveParser.KW_CREATE);
      this.state = 1178;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_TEMPORARY) {
        this.state = 1177;
        this.match(HiveParser.KW_TEMPORARY);
      }

      this.state = 1181;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_EXTERNAL) {
        this.state = 1180;
        this.match(HiveParser.KW_EXTERNAL);
      }

      this.state = 1183;
      this.match(HiveParser.KW_TABLE);
      this.state = 1185;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 38, this._ctx);
      if (la_ === 1) {
        this.state = 1184;
        this.ifNotExists();
      }
      this.state = 1187;
      this.tableName();
      this.state = 1233;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_LIKE:
          this.state = 1188;
          this.match(HiveParser.KW_LIKE);
          this.state = 1189;
          this.tableName();
          this.state = 1191;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_ROW) {
            this.state = 1190;
            this.tableRowFormat();
          }

          this.state = 1194;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_STORED) {
            this.state = 1193;
            this.tableFileFormat();
          }

          this.state = 1197;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_USING) {
            this.state = 1196;
            this.tableUsingDataSource();
          }

          this.state = 1200;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_LOCATION) {
            this.state = 1199;
            this.tableLocation();
          }

          this.state = 1203;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_TBLPROPERTIES) {
            this.state = 1202;
            this.tablePropertiesPrefixed();
          }

          this.state = 1206;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_OPTIONS) {
            this.state = 1205;
            this.tableOptions();
          }

          break;
        case HiveParser.KW_AS:
        case HiveParser.KW_USING:
        case HiveParser.KW_COMMENT:
        case HiveParser.KW_PARTITIONED:
        case HiveParser.KW_CLUSTERED:
        case HiveParser.KW_ROW:
        case HiveParser.KW_STORED:
        case HiveParser.KW_LOCATION:
        case HiveParser.KW_TBLPROPERTIES:
        case HiveParser.KW_OPTIONS:
        case HiveParser.KW_SKEWED:
        case HiveParser.SEMICOLON:
        case HiveParser.LPAREN:
          this.state = 1212;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.LPAREN) {
            this.state = 1208;
            this.match(HiveParser.LPAREN);
            this.state = 1209;
            this.columnNameTypeOrConstraintList();
            this.state = 1210;
            this.match(HiveParser.RPAREN);
          }

          this.state = 1226;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (
            _la === HiveParser.KW_USING ||
            _la === HiveParser.KW_COMMENT ||
            (((_la - 101) & ~0x1f) == 0 &&
              ((1 << (_la - 101)) &
                ((1 << (HiveParser.KW_PARTITIONED - 101)) |
                  (1 << (HiveParser.KW_CLUSTERED - 101)) |
                  (1 << (HiveParser.KW_ROW - 101)) |
                  (1 << (HiveParser.KW_STORED - 101)) |
                  (1 << (HiveParser.KW_LOCATION - 101)))) !==
                0) ||
            _la === HiveParser.KW_TBLPROPERTIES ||
            _la === HiveParser.KW_OPTIONS ||
            _la === HiveParser.KW_SKEWED
          ) {
            this.state = 1224;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
              case HiveParser.KW_USING:
                this.state = 1214;
                this.tableUsingDataSource();
                break;
              case HiveParser.KW_CLUSTERED:
                this.state = 1215;
                this.tableBuckets();
                break;
              case HiveParser.KW_SKEWED:
                this.state = 1216;
                this.tableSkewed();
                break;
              case HiveParser.KW_ROW:
                this.state = 1217;
                this.tableRowFormat();
                break;
              case HiveParser.KW_STORED:
                this.state = 1218;
                this.tableFileFormat();
                break;
              case HiveParser.KW_PARTITIONED:
                this.state = 1219;
                this.tablePartition();
                break;
              case HiveParser.KW_LOCATION:
                this.state = 1220;
                this.tableLocation();
                break;
              case HiveParser.KW_TBLPROPERTIES:
                this.state = 1221;
                this.tablePropertiesPrefixed();
                break;
              case HiveParser.KW_OPTIONS:
                this.state = 1222;
                this.tableOptions();
                break;
              case HiveParser.KW_COMMENT:
                this.state = 1223;
                this.tableComment();
                break;
              default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1228;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          this.state = 1231;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_AS) {
            this.state = 1229;
            this.match(HiveParser.KW_AS);
            this.state = 1230;
            this.selectStatementWithCTE();
          }

          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  truncateTableStatement() {
    let localctx = new TruncateTableStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 68, HiveParser.RULE_truncateTableStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1235;
      this.match(HiveParser.KW_TRUNCATE);
      this.state = 1236;
      this.match(HiveParser.KW_TABLE);
      this.state = 1237;
      this.tablePartitionPrefix();
      this.state = 1243;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_COLUMNS) {
        this.state = 1238;
        this.match(HiveParser.KW_COLUMNS);
        this.state = 1239;
        this.match(HiveParser.LPAREN);
        this.state = 1240;
        this.columnNameList();
        this.state = 1241;
        this.match(HiveParser.RPAREN);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropTableStatement() {
    let localctx = new DropTableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, HiveParser.RULE_dropTableStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1245;
      this.match(HiveParser.KW_DROP);
      this.state = 1246;
      this.match(HiveParser.KW_TABLE);
      this.state = 1248;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 51, this._ctx);
      if (la_ === 1) {
        this.state = 1247;
        this.ifExists();
      }
      this.state = 1250;
      this.tableName();
      this.state = 1252;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_PURGE) {
        this.state = 1251;
        this.match(HiveParser.KW_PURGE);
      }

      this.state = 1255;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_FOR) {
        this.state = 1254;
        this.replicationClause();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatement() {
    let localctx = new AlterStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, HiveParser.RULE_alterStatement);
    var _la = 0; // Token type
    try {
      this.state = 1282;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 55, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1257;
          this.match(HiveParser.KW_ALTER);
          this.state = 1258;
          this.match(HiveParser.KW_TABLE);
          this.state = 1259;
          this.tableName();
          this.state = 1260;
          this.alterTableStatementSuffix();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1262;
          this.match(HiveParser.KW_ALTER);
          this.state = 1263;
          this.match(HiveParser.KW_VIEW);
          this.state = 1264;
          this.tableName();
          this.state = 1266;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_AS) {
            this.state = 1265;
            this.match(HiveParser.KW_AS);
          }

          this.state = 1268;
          this.alterViewStatementSuffix();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1270;
          this.match(HiveParser.KW_ALTER);
          this.state = 1271;
          this.match(HiveParser.KW_MATERIALIZED);
          this.state = 1272;
          this.match(HiveParser.KW_VIEW);
          this.state = 1273;
          this.tableName();
          this.state = 1274;
          this.alterMaterializedViewStatementSuffix();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1276;
          this.match(HiveParser.KW_ALTER);
          this.state = 1277;
          _la = this._input.LA(1);
          if (
            !(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1278;
          this.alterDatabaseStatementSuffix();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 1279;
          this.match(HiveParser.KW_ALTER);
          this.state = 1280;
          this.match(HiveParser.KW_INDEX);
          this.state = 1281;
          this.alterIndexStatementSuffix();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTableStatementSuffix() {
    let localctx = new AlterTableStatementSuffixContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 74, HiveParser.RULE_alterTableStatementSuffix);
    var _la = 0; // Token type
    try {
      this.state = 1301;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 57, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1284;
          this.alterStatementSuffixRename();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1285;
          this.alterStatementSuffixDropPartitions();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1286;
          this.alterStatementSuffixAddPartitions();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1287;
          this.alterStatementSuffixTouch();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 1288;
          this.alterStatementSuffixArchive();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 1289;
          this.alterStatementSuffixUnArchive();
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 1290;
          this.alterStatementSuffixProperties();
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 1291;
          this.alterStatementSuffixSkewedby();
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 1292;
          this.alterStatementSuffixExchangePartition();
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 1293;
          this.alterStatementPartitionKeyType();
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 1294;
          this.alterStatementSuffixDropConstraint();
          break;

        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 1295;
          this.alterStatementSuffixAddConstraint();
          break;

        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 1297;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_PARTITION) {
            this.state = 1296;
            this.partitionSpec();
          }

          this.state = 1299;
          this.alterTblPartitionStatementSuffix();
          break;

        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 1300;
          this.alterStatementSuffixSetOwner();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTblPartitionStatementSuffix() {
    let localctx = new AlterTblPartitionStatementSuffixContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      76,
      HiveParser.RULE_alterTblPartitionStatementSuffix
    );
    try {
      this.state = 1317;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 58, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1303;
          this.alterStatementSuffixFileFormat();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1304;
          this.alterStatementSuffixLocation();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1305;
          this.alterStatementSuffixMergeFiles();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1306;
          this.alterStatementSuffixSerdeProperties();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 1307;
          this.alterStatementSuffixRenamePart();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 1308;
          this.alterStatementSuffixBucketNum();
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 1309;
          this.alterTblPartitionStatementSuffixSkewedLocation();
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 1310;
          this.alterStatementSuffixClusterbySortby();
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 1311;
          this.alterStatementSuffixCompact();
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 1312;
          this.alterStatementSuffixUpdateStatsCol();
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 1313;
          this.alterStatementSuffixUpdateStats();
          break;

        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 1314;
          this.alterStatementSuffixRenameCol();
          break;

        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 1315;
          this.alterStatementSuffixAddCol();
          break;

        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 1316;
          this.alterStatementSuffixUpdateColumns();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementPartitionKeyType() {
    let localctx = new AlterStatementPartitionKeyTypeContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      78,
      HiveParser.RULE_alterStatementPartitionKeyType
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1319;
      this.match(HiveParser.KW_PARTITION);
      this.state = 1320;
      this.match(HiveParser.KW_COLUMN);
      this.state = 1321;
      this.match(HiveParser.LPAREN);
      this.state = 1322;
      this.columnNameType();
      this.state = 1323;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterViewStatementSuffix() {
    let localctx = new AlterViewStatementSuffixContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 80, HiveParser.RULE_alterViewStatementSuffix);
    try {
      this.state = 1330;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_SET:
        case HiveParser.KW_UNSET:
          this.enterOuterAlt(localctx, 1);
          this.state = 1325;
          this.alterViewSuffixProperties();
          break;
        case HiveParser.KW_RENAME:
          this.enterOuterAlt(localctx, 2);
          this.state = 1326;
          this.alterStatementSuffixRename();
          break;
        case HiveParser.KW_ADD:
          this.enterOuterAlt(localctx, 3);
          this.state = 1327;
          this.alterStatementSuffixAddPartitions();
          break;
        case HiveParser.KW_DROP:
          this.enterOuterAlt(localctx, 4);
          this.state = 1328;
          this.alterStatementSuffixDropPartitions();
          break;
        case HiveParser.KW_SELECT:
        case HiveParser.KW_MAP:
        case HiveParser.KW_REDUCE:
        case HiveParser.KW_WITH:
        case HiveParser.LPAREN:
          this.enterOuterAlt(localctx, 5);
          this.state = 1329;
          this.selectStatementWithCTE();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterMaterializedViewStatementSuffix() {
    let localctx = new AlterMaterializedViewStatementSuffixContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      82,
      HiveParser.RULE_alterMaterializedViewStatementSuffix
    );
    try {
      this.state = 1334;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_ENABLE:
        case HiveParser.KW_DISABLE:
          this.enterOuterAlt(localctx, 1);
          this.state = 1332;
          this.alterMaterializedViewSuffixRewrite();
          break;
        case HiveParser.KW_REBUILD:
          this.enterOuterAlt(localctx, 2);
          this.state = 1333;
          this.alterMaterializedViewSuffixRebuild();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterDatabaseStatementSuffix() {
    let localctx = new AlterDatabaseStatementSuffixContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 84, HiveParser.RULE_alterDatabaseStatementSuffix);
    try {
      this.state = 1339;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 61, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1336;
          this.alterDatabaseSuffixProperties();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1337;
          this.alterDatabaseSuffixSetOwner();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1338;
          this.alterDatabaseSuffixSetLocation();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterDatabaseSuffixProperties() {
    let localctx = new AlterDatabaseSuffixPropertiesContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 86, HiveParser.RULE_alterDatabaseSuffixProperties);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1341;
      this.identifier();
      this.state = 1342;
      this.match(HiveParser.KW_SET);
      this.state = 1343;
      this.match(HiveParser.KW_DBPROPERTIES);
      this.state = 1344;
      this.dbProperties();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterDatabaseSuffixSetOwner() {
    let localctx = new AlterDatabaseSuffixSetOwnerContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 88, HiveParser.RULE_alterDatabaseSuffixSetOwner);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1346;
      this.identifier();
      this.state = 1347;
      this.match(HiveParser.KW_SET);
      this.state = 1348;
      this.match(HiveParser.KW_OWNER);
      this.state = 1349;
      this.principalName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterDatabaseSuffixSetLocation() {
    let localctx = new AlterDatabaseSuffixSetLocationContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      90,
      HiveParser.RULE_alterDatabaseSuffixSetLocation
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1351;
      this.identifier();
      this.state = 1352;
      this.match(HiveParser.KW_SET);
      this.state = 1353;
      this.match(HiveParser.KW_LOCATION);
      this.state = 1354;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixRename() {
    let localctx = new AlterStatementSuffixRenameContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 92, HiveParser.RULE_alterStatementSuffixRename);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1356;
      this.match(HiveParser.KW_RENAME);
      this.state = 1357;
      this.match(HiveParser.KW_TO);
      this.state = 1358;
      this.tableName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixAddCol() {
    let localctx = new AlterStatementSuffixAddColContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 94, HiveParser.RULE_alterStatementSuffixAddCol);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1360;
      _la = this._input.LA(1);
      if (!(_la === HiveParser.KW_ADD || _la === HiveParser.KW_REPLACE)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 1361;
      this.match(HiveParser.KW_COLUMNS);
      this.state = 1362;
      this.match(HiveParser.LPAREN);
      this.state = 1363;
      this.columnNameTypeList();
      this.state = 1364;
      this.match(HiveParser.RPAREN);
      this.state = 1366;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_RESTRICT || _la === HiveParser.KW_CASCADE) {
        this.state = 1365;
        this.restrictOrCascade();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixAddConstraint() {
    let localctx = new AlterStatementSuffixAddConstraintContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      96,
      HiveParser.RULE_alterStatementSuffixAddConstraint
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1368;
      this.match(HiveParser.KW_ADD);
      this.state = 1371;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 63, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1369;
          this.alterForeignKeyWithName();
          break;

        case 2:
          this.state = 1370;
          this.alterConstraintWithName();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixUpdateColumns() {
    let localctx = new AlterStatementSuffixUpdateColumnsContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      98,
      HiveParser.RULE_alterStatementSuffixUpdateColumns
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1373;
      this.match(HiveParser.KW_UPDATE);
      this.state = 1374;
      this.match(HiveParser.KW_COLUMNS);
      this.state = 1376;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_RESTRICT || _la === HiveParser.KW_CASCADE) {
        this.state = 1375;
        this.restrictOrCascade();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixDropConstraint() {
    let localctx = new AlterStatementSuffixDropConstraintContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      100,
      HiveParser.RULE_alterStatementSuffixDropConstraint
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1378;
      this.match(HiveParser.KW_DROP);
      this.state = 1379;
      this.match(HiveParser.KW_CONSTRAINT);
      this.state = 1380;
      this.identifier();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixRenameCol() {
    let localctx = new AlterStatementSuffixRenameColContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      102,
      HiveParser.RULE_alterStatementSuffixRenameCol
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1382;
      this.match(HiveParser.KW_CHANGE);
      this.state = 1384;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_COLUMN) {
        this.state = 1383;
        this.match(HiveParser.KW_COLUMN);
      }

      this.state = 1386;
      this.identifier();
      this.state = 1387;
      this.identifier();
      this.state = 1388;
      this.colType();
      this.state = 1390;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        _la === HiveParser.KW_NOT ||
        (((_la - 288) & ~0x1f) == 0 &&
          ((1 << (_la - 288)) &
            ((1 << (HiveParser.KW_PRIMARY - 288)) |
              (1 << (HiveParser.KW_REFERENCES - 288)) |
              (1 << (HiveParser.KW_CONSTRAINT - 288)) |
              (1 << (HiveParser.KW_UNIQUE - 288)) |
              (1 << (HiveParser.KW_DEFAULT - 288)) |
              (1 << (HiveParser.KW_CHECK - 288)))) !==
            0) ||
        _la === HiveParser.KW_GENERATED
      ) {
        this.state = 1389;
        this.alterColumnConstraint();
      }

      this.state = 1394;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_COMMENT) {
        this.state = 1392;
        this.match(HiveParser.KW_COMMENT);
        this.state = 1393;
        this.match(HiveParser.StringLiteral);
      }

      this.state = 1397;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_FIRST || _la === HiveParser.KW_AFTER) {
        this.state = 1396;
        this.alterStatementChangeColPosition();
      }

      this.state = 1400;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_RESTRICT || _la === HiveParser.KW_CASCADE) {
        this.state = 1399;
        this.restrictOrCascade();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixUpdateStatsCol() {
    let localctx = new AlterStatementSuffixUpdateStatsColContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      104,
      HiveParser.RULE_alterStatementSuffixUpdateStatsCol
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1402;
      this.match(HiveParser.KW_UPDATE);
      this.state = 1403;
      this.match(HiveParser.KW_STATISTICS);
      this.state = 1404;
      this.match(HiveParser.KW_FOR);
      this.state = 1406;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_COLUMN) {
        this.state = 1405;
        this.match(HiveParser.KW_COLUMN);
      }

      this.state = 1408;
      this.identifier();
      this.state = 1409;
      this.match(HiveParser.KW_SET);
      this.state = 1410;
      this.tableProperties();
      this.state = 1413;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_COMMENT) {
        this.state = 1411;
        this.match(HiveParser.KW_COMMENT);
        this.state = 1412;
        this.match(HiveParser.StringLiteral);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixUpdateStats() {
    let localctx = new AlterStatementSuffixUpdateStatsContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      106,
      HiveParser.RULE_alterStatementSuffixUpdateStats
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1415;
      this.match(HiveParser.KW_UPDATE);
      this.state = 1416;
      this.match(HiveParser.KW_STATISTICS);
      this.state = 1417;
      this.match(HiveParser.KW_SET);
      this.state = 1418;
      this.tableProperties();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementChangeColPosition() {
    let localctx = new AlterStatementChangeColPositionContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      108,
      HiveParser.RULE_alterStatementChangeColPosition
    );
    try {
      this.state = 1423;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_FIRST:
          this.enterOuterAlt(localctx, 1);
          this.state = 1420;
          localctx.first = this.match(HiveParser.KW_FIRST);
          break;
        case HiveParser.KW_AFTER:
          this.enterOuterAlt(localctx, 2);
          this.state = 1421;
          this.match(HiveParser.KW_AFTER);
          this.state = 1422;
          this.identifier();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixAddPartitions() {
    let localctx = new AlterStatementSuffixAddPartitionsContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      110,
      HiveParser.RULE_alterStatementSuffixAddPartitions
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1425;
      this.match(HiveParser.KW_ADD);
      this.state = 1427;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_IF) {
        this.state = 1426;
        this.ifNotExists();
      }

      this.state = 1430;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 1429;
        this.alterStatementSuffixAddPartitionsElement();
        this.state = 1432;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (_la === HiveParser.KW_PARTITION);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixAddPartitionsElement() {
    let localctx = new AlterStatementSuffixAddPartitionsElementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      112,
      HiveParser.RULE_alterStatementSuffixAddPartitionsElement
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1434;
      this.partitionSpec();
      this.state = 1436;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_LOCATION) {
        this.state = 1435;
        this.partitionLocation();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixTouch() {
    let localctx = new AlterStatementSuffixTouchContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 114, HiveParser.RULE_alterStatementSuffixTouch);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1438;
      this.match(HiveParser.KW_TOUCH);
      this.state = 1442;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.KW_PARTITION) {
        this.state = 1439;
        this.partitionSpec();
        this.state = 1444;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixArchive() {
    let localctx = new AlterStatementSuffixArchiveContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 116, HiveParser.RULE_alterStatementSuffixArchive);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1445;
      this.match(HiveParser.KW_ARCHIVE);
      this.state = 1449;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.KW_PARTITION) {
        this.state = 1446;
        this.partitionSpec();
        this.state = 1451;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixUnArchive() {
    let localctx = new AlterStatementSuffixUnArchiveContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      118,
      HiveParser.RULE_alterStatementSuffixUnArchive
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1452;
      this.match(HiveParser.KW_UNARCHIVE);
      this.state = 1456;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.KW_PARTITION) {
        this.state = 1453;
        this.partitionSpec();
        this.state = 1458;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  partitionLocation() {
    let localctx = new PartitionLocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, HiveParser.RULE_partitionLocation);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1459;
      this.match(HiveParser.KW_LOCATION);
      this.state = 1460;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixDropPartitions() {
    let localctx = new AlterStatementSuffixDropPartitionsContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      122,
      HiveParser.RULE_alterStatementSuffixDropPartitions
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1462;
      this.match(HiveParser.KW_DROP);
      this.state = 1464;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_IF) {
        this.state = 1463;
        this.ifExists();
      }

      this.state = 1466;
      this.dropPartitionSpec();
      this.state = 1471;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 1467;
        this.match(HiveParser.COMMA);
        this.state = 1468;
        this.dropPartitionSpec();
        this.state = 1473;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 1475;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_PURGE) {
        this.state = 1474;
        this.match(HiveParser.KW_PURGE);
      }

      this.state = 1478;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_FOR) {
        this.state = 1477;
        this.replicationClause();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixProperties() {
    let localctx = new AlterStatementSuffixPropertiesContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      124,
      HiveParser.RULE_alterStatementSuffixProperties
    );
    var _la = 0; // Token type
    try {
      this.state = 1489;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_SET:
          this.enterOuterAlt(localctx, 1);
          this.state = 1480;
          this.match(HiveParser.KW_SET);
          this.state = 1481;
          this.match(HiveParser.KW_TBLPROPERTIES);
          this.state = 1482;
          this.tableProperties();
          break;
        case HiveParser.KW_UNSET:
          this.enterOuterAlt(localctx, 2);
          this.state = 1483;
          this.match(HiveParser.KW_UNSET);
          this.state = 1484;
          this.match(HiveParser.KW_TBLPROPERTIES);
          this.state = 1486;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_IF) {
            this.state = 1485;
            this.ifExists();
          }

          this.state = 1488;
          this.tableProperties();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterViewSuffixProperties() {
    let localctx = new AlterViewSuffixPropertiesContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 126, HiveParser.RULE_alterViewSuffixProperties);
    var _la = 0; // Token type
    try {
      this.state = 1500;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_SET:
          this.enterOuterAlt(localctx, 1);
          this.state = 1491;
          this.match(HiveParser.KW_SET);
          this.state = 1492;
          this.match(HiveParser.KW_TBLPROPERTIES);
          this.state = 1493;
          this.tableProperties();
          break;
        case HiveParser.KW_UNSET:
          this.enterOuterAlt(localctx, 2);
          this.state = 1494;
          this.match(HiveParser.KW_UNSET);
          this.state = 1495;
          this.match(HiveParser.KW_TBLPROPERTIES);
          this.state = 1497;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_IF) {
            this.state = 1496;
            this.ifExists();
          }

          this.state = 1499;
          this.tableProperties();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterMaterializedViewSuffixRewrite() {
    let localctx = new AlterMaterializedViewSuffixRewriteContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      128,
      HiveParser.RULE_alterMaterializedViewSuffixRewrite
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1504;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_ENABLE:
          this.state = 1502;
          this.rewriteEnabled();
          break;
        case HiveParser.KW_DISABLE:
          this.state = 1503;
          this.rewriteDisabled();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterMaterializedViewSuffixRebuild() {
    let localctx = new AlterMaterializedViewSuffixRebuildContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      130,
      HiveParser.RULE_alterMaterializedViewSuffixRebuild
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1506;
      this.match(HiveParser.KW_REBUILD);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixSerdeProperties() {
    let localctx = new AlterStatementSuffixSerdePropertiesContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      132,
      HiveParser.RULE_alterStatementSuffixSerdeProperties
    );
    var _la = 0; // Token type
    try {
      this.state = 1519;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 89, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1508;
          this.match(HiveParser.KW_SET);
          this.state = 1509;
          this.match(HiveParser.KW_SERDE);
          this.state = 1510;
          this.match(HiveParser.StringLiteral);
          this.state = 1514;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_WITH) {
            this.state = 1511;
            this.match(HiveParser.KW_WITH);
            this.state = 1512;
            this.match(HiveParser.KW_SERDEPROPERTIES);
            this.state = 1513;
            this.tableProperties();
          }

          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1516;
          this.match(HiveParser.KW_SET);
          this.state = 1517;
          this.match(HiveParser.KW_SERDEPROPERTIES);
          this.state = 1518;
          this.tableProperties();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterIndexStatementSuffix() {
    let localctx = new AlterIndexStatementSuffixContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 134, HiveParser.RULE_alterIndexStatementSuffix);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1521;
      this.identifier();
      this.state = 1522;
      this.match(HiveParser.KW_ON);
      this.state = 1523;
      this.tableName();
      this.state = 1525;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_PARTITION) {
        this.state = 1524;
        this.partitionSpec();
      }

      this.state = 1527;
      this.match(HiveParser.KW_REBUILD);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixFileFormat() {
    let localctx = new AlterStatementSuffixFileFormatContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      136,
      HiveParser.RULE_alterStatementSuffixFileFormat
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1529;
      this.match(HiveParser.KW_SET);
      this.state = 1530;
      this.match(HiveParser.KW_FILEFORMAT);
      this.state = 1531;
      this.fileFormat();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixClusterbySortby() {
    let localctx = new AlterStatementSuffixClusterbySortbyContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      138,
      HiveParser.RULE_alterStatementSuffixClusterbySortby
    );
    try {
      this.state = 1538;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 91, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1533;
          this.match(HiveParser.KW_NOT);
          this.state = 1534;
          this.match(HiveParser.KW_CLUSTERED);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1535;
          this.match(HiveParser.KW_NOT);
          this.state = 1536;
          this.match(HiveParser.KW_SORTED);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1537;
          this.tableBuckets();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTblPartitionStatementSuffixSkewedLocation() {
    let localctx = new AlterTblPartitionStatementSuffixSkewedLocationContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      140,
      HiveParser.RULE_alterTblPartitionStatementSuffixSkewedLocation
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1540;
      this.match(HiveParser.KW_SET);
      this.state = 1541;
      this.match(HiveParser.KW_SKEWED);
      this.state = 1542;
      this.match(HiveParser.KW_LOCATION);
      this.state = 1543;
      this.skewedLocations();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  skewedLocations() {
    let localctx = new SkewedLocationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, HiveParser.RULE_skewedLocations);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1545;
      this.match(HiveParser.LPAREN);
      this.state = 1546;
      this.skewedLocationsList();
      this.state = 1547;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  skewedLocationsList() {
    let localctx = new SkewedLocationsListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, HiveParser.RULE_skewedLocationsList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1549;
      this.skewedLocationMap();
      this.state = 1554;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 1550;
        this.match(HiveParser.COMMA);
        this.state = 1551;
        this.skewedLocationMap();
        this.state = 1556;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  skewedLocationMap() {
    let localctx = new SkewedLocationMapContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, HiveParser.RULE_skewedLocationMap);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1557;
      this.skewedValueLocationElement();
      this.state = 1558;
      this.match(HiveParser.EQUAL);
      this.state = 1559;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixLocation() {
    let localctx = new AlterStatementSuffixLocationContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 148, HiveParser.RULE_alterStatementSuffixLocation);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1561;
      this.match(HiveParser.KW_SET);
      this.state = 1562;
      this.match(HiveParser.KW_LOCATION);
      this.state = 1563;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixSkewedby() {
    let localctx = new AlterStatementSuffixSkewedbyContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 150, HiveParser.RULE_alterStatementSuffixSkewedby);
    try {
      this.state = 1570;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 93, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1565;
          this.tableSkewed();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1566;
          this.match(HiveParser.KW_NOT);
          this.state = 1567;
          this.match(HiveParser.KW_SKEWED);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1568;
          this.match(HiveParser.KW_NOT);
          this.state = 1569;
          this.storedAsDirs();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixExchangePartition() {
    let localctx = new AlterStatementSuffixExchangePartitionContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      152,
      HiveParser.RULE_alterStatementSuffixExchangePartition
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1572;
      this.match(HiveParser.KW_EXCHANGE);
      this.state = 1573;
      this.partitionSpec();
      this.state = 1574;
      this.match(HiveParser.KW_WITH);
      this.state = 1575;
      this.match(HiveParser.KW_TABLE);
      this.state = 1576;
      this.tableName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixRenamePart() {
    let localctx = new AlterStatementSuffixRenamePartContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      154,
      HiveParser.RULE_alterStatementSuffixRenamePart
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1578;
      this.match(HiveParser.KW_RENAME);
      this.state = 1579;
      this.match(HiveParser.KW_TO);
      this.state = 1580;
      this.partitionSpec();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixStatsPart() {
    let localctx = new AlterStatementSuffixStatsPartContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      156,
      HiveParser.RULE_alterStatementSuffixStatsPart
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1582;
      this.match(HiveParser.KW_UPDATE);
      this.state = 1583;
      this.match(HiveParser.KW_STATISTICS);
      this.state = 1584;
      this.match(HiveParser.KW_FOR);
      this.state = 1586;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_COLUMN) {
        this.state = 1585;
        this.match(HiveParser.KW_COLUMN);
      }

      this.state = 1588;
      this.identifier();
      this.state = 1589;
      this.match(HiveParser.KW_SET);
      this.state = 1590;
      this.tableProperties();
      this.state = 1593;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_COMMENT) {
        this.state = 1591;
        this.match(HiveParser.KW_COMMENT);
        this.state = 1592;
        this.match(HiveParser.StringLiteral);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixMergeFiles() {
    let localctx = new AlterStatementSuffixMergeFilesContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      158,
      HiveParser.RULE_alterStatementSuffixMergeFiles
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1595;
      this.match(HiveParser.KW_CONCATENATE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixBucketNum() {
    let localctx = new AlterStatementSuffixBucketNumContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      160,
      HiveParser.RULE_alterStatementSuffixBucketNum
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1597;
      this.match(HiveParser.KW_INTO);
      this.state = 1598;
      this.match(HiveParser.Number);
      this.state = 1599;
      this.match(HiveParser.KW_BUCKETS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createIndexStatement() {
    let localctx = new CreateIndexStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, HiveParser.RULE_createIndexStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1601;
      this.createIndexMainStatement();
      this.state = 1605;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WITH) {
        this.state = 1602;
        this.match(HiveParser.KW_WITH);
        this.state = 1603;
        this.match(HiveParser.KW_DEFERRED);
        this.state = 1604;
        this.match(HiveParser.KW_REBUILD);
      }

      this.state = 1609;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_IDXPROPERTIES) {
        this.state = 1607;
        this.match(HiveParser.KW_IDXPROPERTIES);
        this.state = 1608;
        this.tableProperties();
      }

      this.state = 1614;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_IN) {
        this.state = 1611;
        this.match(HiveParser.KW_IN);
        this.state = 1612;
        this.match(HiveParser.KW_TABLE);
        this.state = 1613;
        this.tableName();
      }

      this.state = 1619;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_PARTITIONED) {
        this.state = 1616;
        this.match(HiveParser.KW_PARTITIONED);
        this.state = 1617;
        this.match(HiveParser.KW_BY);
        this.state = 1618;
        this.columnParenthesesList();
      }

      this.state = 1625;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_ROW || _la === HiveParser.KW_STORED) {
        this.state = 1622;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === HiveParser.KW_ROW) {
          this.state = 1621;
          this.tableRowFormat();
        }

        this.state = 1624;
        this.tableFileFormat();
      }

      this.state = 1629;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_LOCATION) {
        this.state = 1627;
        this.match(HiveParser.KW_LOCATION);
        this.state = 1628;
        this.poolPath();
      }

      this.state = 1632;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_TBLPROPERTIES) {
        this.state = 1631;
        this.tablePropertiesPrefixed();
      }

      this.state = 1635;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_COMMENT) {
        this.state = 1634;
        this.tableComment();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createIndexMainStatement() {
    let localctx = new CreateIndexMainStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 164, HiveParser.RULE_createIndexMainStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1637;
      this.match(HiveParser.KW_CREATE);
      this.state = 1638;
      this.match(HiveParser.KW_INDEX);
      this.state = 1639;
      this.identifier();
      this.state = 1640;
      this.match(HiveParser.KW_ON);
      this.state = 1641;
      this.match(HiveParser.KW_TABLE);
      this.state = 1642;
      this.tableName();
      this.state = 1643;
      this.columnParenthesesList();
      this.state = 1644;
      this.match(HiveParser.KW_AS);
      this.state = 1645;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropIndexStatement() {
    let localctx = new DropIndexStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, HiveParser.RULE_dropIndexStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1647;
      this.match(HiveParser.KW_DROP);
      this.state = 1648;
      this.match(HiveParser.KW_INDEX);
      this.state = 1649;
      this.identifier();
      this.state = 1650;
      this.match(HiveParser.KW_ON);
      this.state = 1651;
      this.tableName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createBloomfilterIndexStatement() {
    let localctx = new CreateBloomfilterIndexStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      168,
      HiveParser.RULE_createBloomfilterIndexStatement
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1653;
      this.createBloomfilterIndexMainStatement();
      this.state = 1657;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_FOR) {
        this.state = 1654;
        this.match(HiveParser.KW_FOR);
        this.state = 1655;
        this.match(HiveParser.KW_COLUMNS);
        this.state = 1656;
        this.bloomfilterColumnParenthesesList();
      }

      this.state = 1660;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_OPTIONS) {
        this.state = 1659;
        this.bloomfilterIndexOptions();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createBloomfilterIndexMainStatement() {
    let localctx = new CreateBloomfilterIndexMainStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      170,
      HiveParser.RULE_createBloomfilterIndexMainStatement
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1662;
      this.match(HiveParser.KW_CREATE);
      this.state = 1663;
      this.match(HiveParser.KW_BLOOMFILTER);
      this.state = 1664;
      this.match(HiveParser.KW_INDEX);
      this.state = 1665;
      this.match(HiveParser.KW_ON);
      this.state = 1667;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_TABLE) {
        this.state = 1666;
        this.match(HiveParser.KW_TABLE);
      }

      this.state = 1669;
      this.tableName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  bloomfilterColumnParenthesesList() {
    let localctx = new BloomfilterColumnParenthesesListContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      172,
      HiveParser.RULE_bloomfilterColumnParenthesesList
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1671;
      this.match(HiveParser.LPAREN);
      this.state = 1672;
      this.bloomfilterColumnNameList();
      this.state = 1673;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  bloomfilterColumnNameList() {
    let localctx = new BloomfilterColumnNameListContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 174, HiveParser.RULE_bloomfilterColumnNameList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1675;
      this.bloomfilterColumnName();
      this.state = 1680;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 1676;
        this.match(HiveParser.COMMA);
        this.state = 1677;
        this.bloomfilterColumnName();
        this.state = 1682;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  bloomfilterColumnName() {
    let localctx = new BloomfilterColumnNameContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 176, HiveParser.RULE_bloomfilterColumnName);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1683;
      this.identifier();
      this.state = 1685;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_OPTIONS) {
        this.state = 1684;
        this.bloomfilterIndexOptions();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  bloomfilterIndexOptions() {
    let localctx = new BloomfilterIndexOptionsContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 178, HiveParser.RULE_bloomfilterIndexOptions);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1687;
      this.match(HiveParser.KW_OPTIONS);
      this.state = 1688;
      this.tableProperties();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropBloomfilterIndexStatement() {
    let localctx = new DropBloomfilterIndexStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      180,
      HiveParser.RULE_dropBloomfilterIndexStatement
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1690;
      this.dropBloomfilterIndexMainStatement();
      this.state = 1694;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_FOR) {
        this.state = 1691;
        this.match(HiveParser.KW_FOR);
        this.state = 1692;
        this.match(HiveParser.KW_COLUMNS);
        this.state = 1693;
        this.bloomfilterColumnParenthesesList();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropBloomfilterIndexMainStatement() {
    let localctx = new DropBloomfilterIndexMainStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      182,
      HiveParser.RULE_dropBloomfilterIndexMainStatement
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1696;
      this.match(HiveParser.KW_DROP);
      this.state = 1697;
      this.match(HiveParser.KW_BLOOMFILTER);
      this.state = 1698;
      this.match(HiveParser.KW_INDEX);
      this.state = 1699;
      this.match(HiveParser.KW_ON);
      this.state = 1701;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_TABLE) {
        this.state = 1700;
        this.match(HiveParser.KW_TABLE);
      }

      this.state = 1703;
      this.tableName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tablePartitionPrefix() {
    let localctx = new TablePartitionPrefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, HiveParser.RULE_tablePartitionPrefix);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1705;
      this.tableName();
      this.state = 1707;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_PARTITION) {
        this.state = 1706;
        this.partitionSpec();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  blocking() {
    let localctx = new BlockingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, HiveParser.RULE_blocking);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1709;
      this.match(HiveParser.KW_AND);
      this.state = 1710;
      this.match(HiveParser.KW_WAIT);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixCompact() {
    let localctx = new AlterStatementSuffixCompactContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 188, HiveParser.RULE_alterStatementSuffixCompact);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1712;
      this.match(HiveParser.KW_COMPACT);
      this.state = 1713;
      this.match(HiveParser.StringLiteral);
      this.state = 1715;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_AND) {
        this.state = 1714;
        this.blocking();
      }

      this.state = 1721;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WITH) {
        this.state = 1717;
        this.match(HiveParser.KW_WITH);
        this.state = 1718;
        this.match(HiveParser.KW_OVERWRITE);
        this.state = 1719;
        this.match(HiveParser.KW_TBLPROPERTIES);
        this.state = 1720;
        this.tableProperties();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterStatementSuffixSetOwner() {
    let localctx = new AlterStatementSuffixSetOwnerContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 190, HiveParser.RULE_alterStatementSuffixSetOwner);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1723;
      this.match(HiveParser.KW_SET);
      this.state = 1724;
      this.match(HiveParser.KW_OWNER);
      this.state = 1725;
      this.principalName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  fileFormat() {
    let localctx = new FileFormatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, HiveParser.RULE_fileFormat);
    var _la = 0; // Token type
    try {
      this.state = 1740;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_INPUTFORMAT:
          this.enterOuterAlt(localctx, 1);
          this.state = 1727;
          this.match(HiveParser.KW_INPUTFORMAT);
          this.state = 1728;
          this.match(HiveParser.StringLiteral);
          this.state = 1729;
          this.match(HiveParser.KW_OUTPUTFORMAT);
          this.state = 1730;
          this.match(HiveParser.StringLiteral);
          this.state = 1731;
          this.match(HiveParser.KW_SERDE);
          this.state = 1732;
          this.match(HiveParser.StringLiteral);
          this.state = 1737;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_INPUTDRIVER) {
            this.state = 1733;
            this.match(HiveParser.KW_INPUTDRIVER);
            this.state = 1734;
            this.match(HiveParser.StringLiteral);
            this.state = 1735;
            this.match(HiveParser.KW_OUTPUTDRIVER);
            this.state = 1736;
            this.match(HiveParser.StringLiteral);
          }

          break;
        case HiveParser.KW_SEQUENCEFILE:
        case HiveParser.KW_TEXTFILE:
        case HiveParser.KW_RCFILE:
        case HiveParser.KW_ORC:
        case HiveParser.KW_PARQUET:
        case HiveParser.KW_AVRO:
        case HiveParser.KW_JSONFILE:
          this.enterOuterAlt(localctx, 2);
          this.state = 1739;
          this.tableFileFormatStoredAsFormat();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  inputFileFormat() {
    let localctx = new InputFileFormatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, HiveParser.RULE_inputFileFormat);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1742;
      this.match(HiveParser.KW_INPUTFORMAT);
      this.state = 1743;
      this.match(HiveParser.StringLiteral);
      this.state = 1744;
      this.match(HiveParser.KW_SERDE);
      this.state = 1745;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tabTypeExpr() {
    let localctx = new TabTypeExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, HiveParser.RULE_tabTypeExpr);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1747;
      this.identifier();
      this.state = 1750;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.DOT) {
        this.state = 1748;
        this.match(HiveParser.DOT);
        this.state = 1749;
        this.identifier();
      }

      this.state = 1765;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        ((_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << HiveParser.KW_IF) |
              (1 << HiveParser.KW_ASC) |
              (1 << HiveParser.KW_DESC) |
              (1 << HiveParser.KW_NULLS) |
              (1 << HiveParser.KW_LAST) |
              (1 << HiveParser.KW_OVERWRITE))) !==
            0) ||
        (((_la - 36) & ~0x1f) == 0 &&
          ((1 << (_la - 36)) &
            ((1 << (HiveParser.KW_PARTITIONS - 36)) |
              (1 << (HiveParser.KW_TABLES - 36)) |
              (1 << (HiveParser.KW_COLUMNS - 36)) |
              (1 << (HiveParser.KW_INDEX - 36)) |
              (1 << (HiveParser.KW_INDEXES - 36)) |
              (1 << (HiveParser.KW_REBUILD - 36)) |
              (1 << (HiveParser.KW_FUNCTIONS - 36)) |
              (1 << (HiveParser.KW_SHOW - 36)) |
              (1 << (HiveParser.KW_MSCK - 36)) |
              (1 << (HiveParser.KW_REPAIR - 36)) |
              (1 << (HiveParser.KW_DIRECTORY - 36)) |
              (1 << (HiveParser.KW_CLUSTER - 36)) |
              (1 << (HiveParser.KW_DISTRIBUTE - 36)) |
              (1 << (HiveParser.KW_SORT - 36)) |
              (1 << (HiveParser.KW_LOAD - 36)) |
              (1 << (HiveParser.KW_EXPORT - 36)) |
              (1 << (HiveParser.KW_REPLICATION - 36)) |
              (1 << (HiveParser.KW_METADATA - 36)) |
              (1 << (HiveParser.KW_DATA - 36)) |
              (1 << (HiveParser.KW_INPATH - 36)))) !==
            0) ||
        (((_la - 68) & ~0x1f) == 0 &&
          ((1 << (_la - 68)) &
            ((1 << (HiveParser.KW_CHANGE - 68)) |
              (1 << (HiveParser.KW_FIRST - 68)) |
              (1 << (HiveParser.KW_AFTER - 68)) |
              (1 << (HiveParser.KW_RENAME - 68)) |
              (1 << (HiveParser.KW_COMMENT - 68)) |
              (1 << (HiveParser.KW_BOOLEAN - 68)) |
              (1 << (HiveParser.KW_TINYINT - 68)) |
              (1 << (HiveParser.KW_SMALLINT - 68)) |
              (1 << (HiveParser.KW_INT - 68)) |
              (1 << (HiveParser.KW_BIGINT - 68)) |
              (1 << (HiveParser.KW_FLOAT - 68)) |
              (1 << (HiveParser.KW_DOUBLE - 68)) |
              (1 << (HiveParser.KW_DATE - 68)) |
              (1 << (HiveParser.KW_DATETIME - 68)) |
              (1 << (HiveParser.KW_TIMESTAMP - 68)) |
              (1 << (HiveParser.KW_TIME - 68)) |
              (1 << (HiveParser.KW_ZONE - 68)) |
              (1 << (HiveParser.KW_STRING - 68)) |
              (1 << (HiveParser.KW_ARRAY - 68)) |
              (1 << (HiveParser.KW_STRUCT - 68)) |
              (1 << (HiveParser.KW_MAP - 68)) |
              (1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
            0) ||
        (((_la - 101) & ~0x1f) == 0 &&
          ((1 << (_la - 101)) &
            ((1 << (HiveParser.KW_PARTITIONED - 101)) |
              (1 << (HiveParser.KW_CLUSTERED - 101)) |
              (1 << (HiveParser.KW_SORTED - 101)) |
              (1 << (HiveParser.KW_BUCKETS - 101)) |
              (1 << (HiveParser.KW_FORMAT - 101)) |
              (1 << (HiveParser.KW_DELIMITED - 101)) |
              (1 << (HiveParser.KW_FIELDS - 101)) |
              (1 << (HiveParser.KW_TERMINATED - 101)) |
              (1 << (HiveParser.KW_ESCAPED - 101)) |
              (1 << (HiveParser.KW_COLLECTION - 101)) |
              (1 << (HiveParser.KW_ITEMS - 101)) |
              (1 << (HiveParser.KW_KEYS - 101)) |
              (1 << (HiveParser.KW_KEY_TYPE - 101)) |
              (1 << (HiveParser.KW_KILL - 101)) |
              (1 << (HiveParser.KW_LINES - 101)) |
              (1 << (HiveParser.KW_STORED - 101)) |
              (1 << (HiveParser.KW_FILEFORMAT - 101)) |
              (1 << (HiveParser.KW_INPUTFORMAT - 101)) |
              (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
              (1 << (HiveParser.KW_INPUTDRIVER - 101)) |
              (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
              (1 << (HiveParser.KW_ENABLE - 101)) |
              (1 << (HiveParser.KW_DISABLE - 101)) |
              (1 << (HiveParser.KW_LOCATION - 101)) |
              (1 << (HiveParser.KW_BUCKET - 101)))) !==
            0) ||
        (((_la - 134) & ~0x1f) == 0 &&
          ((1 << (_la - 134)) &
            ((1 << (HiveParser.KW_ADD - 134)) |
              (1 << (HiveParser.KW_REPLACE - 134)) |
              (1 << (HiveParser.KW_TEMPORARY - 134)) |
              (1 << (HiveParser.KW_FILE - 134)) |
              (1 << (HiveParser.KW_JAR - 134)) |
              (1 << (HiveParser.KW_EXPLAIN - 134)) |
              (1 << (HiveParser.KW_FORMATTED - 134)) |
              (1 << (HiveParser.KW_DEPENDENCY - 134)) |
              (1 << (HiveParser.KW_LOGICAL - 134)) |
              (1 << (HiveParser.KW_SERDE - 134)) |
              (1 << (HiveParser.KW_DEFERRED - 134)) |
              (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
              (1 << (HiveParser.KW_DBPROPERTIES - 134)) |
              (1 << (HiveParser.KW_LIMIT - 134)) |
              (1 << (HiveParser.KW_OFFSET - 134)) |
              (1 << (HiveParser.KW_UNSET - 134)) |
              (1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
              (1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
              (1 << (HiveParser.KW_VALUE_TYPE - 134)) |
              (1 << (HiveParser.KW_ELEM_TYPE - 134)) |
              (1 << (HiveParser.KW_DEFINED - 134)))) !==
            0) ||
        (((_la - 167) & ~0x1f) == 0 &&
          ((1 << (_la - 167)) &
            ((1 << (HiveParser.KW_MAPJOIN - 167)) |
              (1 << (HiveParser.KW_STREAMTABLE - 167)) |
              (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
              (1 << (HiveParser.KW_UTC - 167)) |
              (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
              (1 << (HiveParser.KW_LONG - 167)) |
              (1 << (HiveParser.KW_PLUS - 167)) |
              (1 << (HiveParser.KW_VIEW - 167)) |
              (1 << (HiveParser.KW_VIEWS - 167)) |
              (1 << (HiveParser.KW_DATABASES - 167)) |
              (1 << (HiveParser.KW_MATERIALIZED - 167)) |
              (1 << (HiveParser.KW_SCHEMA - 167)) |
              (1 << (HiveParser.KW_SCHEMAS - 167)) |
              (1 << (HiveParser.KW_SSL - 167)) |
              (1 << (HiveParser.KW_UNDO - 167)) |
              (1 << (HiveParser.KW_LOCK - 167)) |
              (1 << (HiveParser.KW_LOCKS - 167)) |
              (1 << (HiveParser.KW_UNLOCK - 167)) |
              (1 << (HiveParser.KW_SHARED - 167)) |
              (1 << (HiveParser.KW_EXCLUSIVE - 167)) |
              (1 << (HiveParser.KW_UNSIGNED - 167)) |
              (1 << (HiveParser.KW_WHILE - 167)) |
              (1 << (HiveParser.KW_READ - 167)))) !==
            0) ||
        (((_la - 200) & ~0x1f) == 0 &&
          ((1 << (_la - 200)) &
            ((1 << (HiveParser.KW_PURGE - 200)) |
              (1 << (HiveParser.KW_ANALYZE - 200)) |
              (1 << (HiveParser.KW_BEFORE - 200)) |
              (1 << (HiveParser.KW_BINARY - 200)) |
              (1 << (HiveParser.KW_CONTINUE - 200)) |
              (1 << (HiveParser.KW_RECORDREADER - 200)) |
              (1 << (HiveParser.KW_RECORDWRITER - 200)) |
              (1 << (HiveParser.KW_SEMI - 200)) |
              (1 << (HiveParser.KW_TOUCH - 200)) |
              (1 << (HiveParser.KW_ARCHIVE - 200)) |
              (1 << (HiveParser.KW_UNARCHIVE - 200)) |
              (1 << (HiveParser.KW_COMPUTE - 200)) |
              (1 << (HiveParser.KW_STATISTICS - 200)) |
              (1 << (HiveParser.KW_USE - 200)) |
              (1 << (HiveParser.KW_OPTION - 200)) |
              (1 << (HiveParser.KW_CONCATENATE - 200)) |
              (1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
              (1 << (HiveParser.KW_RESTRICT - 200)) |
              (1 << (HiveParser.KW_CASCADE - 200)) |
              (1 << (HiveParser.KW_SKEWED - 200)) |
              (1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
            0) ||
        (((_la - 238) & ~0x1f) == 0 &&
          ((1 << (_la - 238)) &
            ((1 << (HiveParser.KW_CURRENT_DATE - 238)) |
              (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 238)) |
              (1 << (HiveParser.KW_GROUPING - 238)) |
              (1 << (HiveParser.KW_SETS - 238)) |
              (1 << (HiveParser.KW_NOSCAN - 238)) |
              (1 << (HiveParser.KW_ROLE - 238)) |
              (1 << (HiveParser.KW_ROLES - 238)) |
              (1 << (HiveParser.KW_URI - 238)) |
              (1 << (HiveParser.KW_SERVER - 238)) |
              (1 << (HiveParser.KW_ADMIN - 238)) |
              (1 << (HiveParser.KW_OWNER - 238)) |
              (1 << (HiveParser.KW_PRINCIPALS - 238)) |
              (1 << (HiveParser.KW_COMPACT - 238)) |
              (1 << (HiveParser.KW_COMPACTIONS - 238)) |
              (1 << (HiveParser.KW_TRANSACTIONS - 238)) |
              (1 << (HiveParser.KW_REWRITE - 238)) |
              (1 << (HiveParser.KW_REOPTIMIZATION - 238)) |
              (1 << (HiveParser.KW_RELOAD - 238)) |
              (1 << (HiveParser.KW_YEAR - 238)) |
              (1 << (HiveParser.KW_QUERY - 238)) |
              (1 << (HiveParser.KW_QUARTER - 238)) |
              (1 << (HiveParser.KW_MONTH - 238)))) !==
            0) ||
        (((_la - 270) & ~0x1f) == 0 &&
          ((1 << (_la - 270)) &
            ((1 << (HiveParser.KW_WEEK - 270)) |
              (1 << (HiveParser.KW_DAY - 270)) |
              (1 << (HiveParser.KW_DOW - 270)) |
              (1 << (HiveParser.KW_HOUR - 270)) |
              (1 << (HiveParser.KW_MINUTE - 270)) |
              (1 << (HiveParser.KW_SECOND - 270)) |
              (1 << (HiveParser.KW_TRANSACTION - 270)) |
              (1 << (HiveParser.KW_WORK - 270)) |
              (1 << (HiveParser.KW_WRITE - 270)) |
              (1 << (HiveParser.KW_ISOLATION - 270)) |
              (1 << (HiveParser.KW_LEVEL - 270)) |
              (1 << (HiveParser.KW_SNAPSHOT - 270)) |
              (1 << (HiveParser.KW_AUTOCOMMIT - 270)) |
              (1 << (HiveParser.KW_CACHE - 270)) |
              (1 << (HiveParser.KW_ENFORCED - 270)) |
              (1 << (HiveParser.KW_VALIDATE - 270)) |
              (1 << (HiveParser.KW_NOVALIDATE - 270)) |
              (1 << (HiveParser.KW_RELY - 270)) |
              (1 << (HiveParser.KW_NORELY - 270)) |
              (1 << (HiveParser.KW_KEY - 270)) |
              (1 << (HiveParser.KW_ABORT - 270)))) !==
            0) ||
        (((_la - 303) & ~0x1f) == 0 &&
          ((1 << (_la - 303)) &
            ((1 << (HiveParser.KW_MATCHED - 303)) |
              (1 << (HiveParser.KW_REPL - 303)) |
              (1 << (HiveParser.KW_DUMP - 303)) |
              (1 << (HiveParser.KW_STATUS - 303)) |
              (1 << (HiveParser.KW_VECTORIZATION - 303)) |
              (1 << (HiveParser.KW_SUMMARY - 303)) |
              (1 << (HiveParser.KW_OPERATOR - 303)) |
              (1 << (HiveParser.KW_EXPRESSION - 303)) |
              (1 << (HiveParser.KW_DETAIL - 303)) |
              (1 << (HiveParser.KW_WAIT - 303)) |
              (1 << (HiveParser.KW_RESOURCE - 303)) |
              (1 << (HiveParser.KW_PLAN - 303)) |
              (1 << (HiveParser.KW_QUERY_PARALLELISM - 303)) |
              (1 << (HiveParser.KW_PLANS - 303)) |
              (1 << (HiveParser.KW_ACTIVATE - 303)) |
              (1 << (HiveParser.KW_DEFAULT - 303)) |
              (1 << (HiveParser.KW_CHECK - 303)) |
              (1 << (HiveParser.KW_POOL - 303)) |
              (1 << (HiveParser.KW_MOVE - 303)) |
              (1 << (HiveParser.KW_DO - 303)) |
              (1 << (HiveParser.KW_ALLOC_FRACTION - 303)) |
              (1 << (HiveParser.KW_SCHEDULING_POLICY - 303)) |
              (1 << (HiveParser.KW_PATH - 303)) |
              (1 << (HiveParser.KW_MAPPING - 303)) |
              (1 << (HiveParser.KW_WORKLOAD - 303)) |
              (1 << (HiveParser.KW_MANAGEMENT - 303)) |
              (1 << (HiveParser.KW_ACTIVE - 303)) |
              (1 << (HiveParser.KW_UNMANAGED - 303)))) !==
            0) ||
        (((_la - 338) & ~0x1f) == 0 &&
          ((1 << (_la - 338)) &
            ((1 << (HiveParser.KW_DELTA - 338)) |
              (1 << (HiveParser.KW_CSV - 338)) |
              (1 << (HiveParser.KW_JSON - 338)) |
              (1 << (HiveParser.KW_BLOOMFILTER - 338)) |
              (1 << (HiveParser.LCURLY - 338)))) !==
            0) ||
        _la === HiveParser.Identifier
      ) {
        this.state = 1752;
        this.identifier();
        this.state = 1762;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === HiveParser.DOT) {
          this.state = 1753;
          this.match(HiveParser.DOT);
          this.state = 1758;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 118, this._ctx);
          switch (la_) {
            case 1:
              this.state = 1754;
              this.match(HiveParser.KW_ELEM_TYPE);
              break;

            case 2:
              this.state = 1755;
              this.match(HiveParser.KW_KEY_TYPE);
              break;

            case 3:
              this.state = 1756;
              this.match(HiveParser.KW_VALUE_TYPE);
              break;

            case 4:
              this.state = 1757;
              this.identifier();
              break;
          }
          this.state = 1764;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  partTypeExpr() {
    let localctx = new PartTypeExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, HiveParser.RULE_partTypeExpr);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1767;
      this.tabTypeExpr();
      this.state = 1769;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_PARTITION) {
        this.state = 1768;
        this.partitionSpec();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tabPartColTypeExpr() {
    let localctx = new TabPartColTypeExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, HiveParser.RULE_tabPartColTypeExpr);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1771;
      this.tableName();
      this.state = 1773;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_PARTITION) {
        this.state = 1772;
        this.partitionSpec();
      }

      this.state = 1776;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        ((_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << HiveParser.KW_IF) |
              (1 << HiveParser.KW_ASC) |
              (1 << HiveParser.KW_DESC) |
              (1 << HiveParser.KW_NULLS) |
              (1 << HiveParser.KW_LAST) |
              (1 << HiveParser.KW_OVERWRITE))) !==
            0) ||
        (((_la - 36) & ~0x1f) == 0 &&
          ((1 << (_la - 36)) &
            ((1 << (HiveParser.KW_PARTITIONS - 36)) |
              (1 << (HiveParser.KW_TABLES - 36)) |
              (1 << (HiveParser.KW_COLUMNS - 36)) |
              (1 << (HiveParser.KW_INDEX - 36)) |
              (1 << (HiveParser.KW_INDEXES - 36)) |
              (1 << (HiveParser.KW_REBUILD - 36)) |
              (1 << (HiveParser.KW_FUNCTIONS - 36)) |
              (1 << (HiveParser.KW_SHOW - 36)) |
              (1 << (HiveParser.KW_MSCK - 36)) |
              (1 << (HiveParser.KW_REPAIR - 36)) |
              (1 << (HiveParser.KW_DIRECTORY - 36)) |
              (1 << (HiveParser.KW_CLUSTER - 36)) |
              (1 << (HiveParser.KW_DISTRIBUTE - 36)) |
              (1 << (HiveParser.KW_SORT - 36)) |
              (1 << (HiveParser.KW_LOAD - 36)) |
              (1 << (HiveParser.KW_EXPORT - 36)) |
              (1 << (HiveParser.KW_REPLICATION - 36)) |
              (1 << (HiveParser.KW_METADATA - 36)) |
              (1 << (HiveParser.KW_DATA - 36)) |
              (1 << (HiveParser.KW_INPATH - 36)))) !==
            0) ||
        (((_la - 68) & ~0x1f) == 0 &&
          ((1 << (_la - 68)) &
            ((1 << (HiveParser.KW_CHANGE - 68)) |
              (1 << (HiveParser.KW_FIRST - 68)) |
              (1 << (HiveParser.KW_AFTER - 68)) |
              (1 << (HiveParser.KW_RENAME - 68)) |
              (1 << (HiveParser.KW_COMMENT - 68)) |
              (1 << (HiveParser.KW_BOOLEAN - 68)) |
              (1 << (HiveParser.KW_TINYINT - 68)) |
              (1 << (HiveParser.KW_SMALLINT - 68)) |
              (1 << (HiveParser.KW_INT - 68)) |
              (1 << (HiveParser.KW_BIGINT - 68)) |
              (1 << (HiveParser.KW_FLOAT - 68)) |
              (1 << (HiveParser.KW_DOUBLE - 68)) |
              (1 << (HiveParser.KW_DATE - 68)) |
              (1 << (HiveParser.KW_DATETIME - 68)) |
              (1 << (HiveParser.KW_TIMESTAMP - 68)) |
              (1 << (HiveParser.KW_TIME - 68)) |
              (1 << (HiveParser.KW_ZONE - 68)) |
              (1 << (HiveParser.KW_STRING - 68)) |
              (1 << (HiveParser.KW_ARRAY - 68)) |
              (1 << (HiveParser.KW_STRUCT - 68)) |
              (1 << (HiveParser.KW_MAP - 68)) |
              (1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
            0) ||
        (((_la - 101) & ~0x1f) == 0 &&
          ((1 << (_la - 101)) &
            ((1 << (HiveParser.KW_PARTITIONED - 101)) |
              (1 << (HiveParser.KW_CLUSTERED - 101)) |
              (1 << (HiveParser.KW_SORTED - 101)) |
              (1 << (HiveParser.KW_BUCKETS - 101)) |
              (1 << (HiveParser.KW_FORMAT - 101)) |
              (1 << (HiveParser.KW_DELIMITED - 101)) |
              (1 << (HiveParser.KW_FIELDS - 101)) |
              (1 << (HiveParser.KW_TERMINATED - 101)) |
              (1 << (HiveParser.KW_ESCAPED - 101)) |
              (1 << (HiveParser.KW_COLLECTION - 101)) |
              (1 << (HiveParser.KW_ITEMS - 101)) |
              (1 << (HiveParser.KW_KEYS - 101)) |
              (1 << (HiveParser.KW_KEY_TYPE - 101)) |
              (1 << (HiveParser.KW_KILL - 101)) |
              (1 << (HiveParser.KW_LINES - 101)) |
              (1 << (HiveParser.KW_STORED - 101)) |
              (1 << (HiveParser.KW_FILEFORMAT - 101)) |
              (1 << (HiveParser.KW_INPUTFORMAT - 101)) |
              (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
              (1 << (HiveParser.KW_INPUTDRIVER - 101)) |
              (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
              (1 << (HiveParser.KW_ENABLE - 101)) |
              (1 << (HiveParser.KW_DISABLE - 101)) |
              (1 << (HiveParser.KW_LOCATION - 101)) |
              (1 << (HiveParser.KW_BUCKET - 101)))) !==
            0) ||
        (((_la - 134) & ~0x1f) == 0 &&
          ((1 << (_la - 134)) &
            ((1 << (HiveParser.KW_ADD - 134)) |
              (1 << (HiveParser.KW_REPLACE - 134)) |
              (1 << (HiveParser.KW_TEMPORARY - 134)) |
              (1 << (HiveParser.KW_FILE - 134)) |
              (1 << (HiveParser.KW_JAR - 134)) |
              (1 << (HiveParser.KW_EXPLAIN - 134)) |
              (1 << (HiveParser.KW_FORMATTED - 134)) |
              (1 << (HiveParser.KW_DEPENDENCY - 134)) |
              (1 << (HiveParser.KW_LOGICAL - 134)) |
              (1 << (HiveParser.KW_SERDE - 134)) |
              (1 << (HiveParser.KW_DEFERRED - 134)) |
              (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
              (1 << (HiveParser.KW_DBPROPERTIES - 134)) |
              (1 << (HiveParser.KW_LIMIT - 134)) |
              (1 << (HiveParser.KW_OFFSET - 134)) |
              (1 << (HiveParser.KW_UNSET - 134)) |
              (1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
              (1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
              (1 << (HiveParser.KW_VALUE_TYPE - 134)) |
              (1 << (HiveParser.KW_ELEM_TYPE - 134)) |
              (1 << (HiveParser.KW_DEFINED - 134)))) !==
            0) ||
        (((_la - 167) & ~0x1f) == 0 &&
          ((1 << (_la - 167)) &
            ((1 << (HiveParser.KW_MAPJOIN - 167)) |
              (1 << (HiveParser.KW_STREAMTABLE - 167)) |
              (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
              (1 << (HiveParser.KW_UTC - 167)) |
              (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
              (1 << (HiveParser.KW_LONG - 167)) |
              (1 << (HiveParser.KW_PLUS - 167)) |
              (1 << (HiveParser.KW_VIEW - 167)) |
              (1 << (HiveParser.KW_VIEWS - 167)) |
              (1 << (HiveParser.KW_DATABASES - 167)) |
              (1 << (HiveParser.KW_MATERIALIZED - 167)) |
              (1 << (HiveParser.KW_SCHEMA - 167)) |
              (1 << (HiveParser.KW_SCHEMAS - 167)) |
              (1 << (HiveParser.KW_SSL - 167)) |
              (1 << (HiveParser.KW_UNDO - 167)) |
              (1 << (HiveParser.KW_LOCK - 167)) |
              (1 << (HiveParser.KW_LOCKS - 167)) |
              (1 << (HiveParser.KW_UNLOCK - 167)) |
              (1 << (HiveParser.KW_SHARED - 167)) |
              (1 << (HiveParser.KW_EXCLUSIVE - 167)) |
              (1 << (HiveParser.KW_UNSIGNED - 167)) |
              (1 << (HiveParser.KW_WHILE - 167)) |
              (1 << (HiveParser.KW_READ - 167)))) !==
            0) ||
        (((_la - 200) & ~0x1f) == 0 &&
          ((1 << (_la - 200)) &
            ((1 << (HiveParser.KW_PURGE - 200)) |
              (1 << (HiveParser.KW_ANALYZE - 200)) |
              (1 << (HiveParser.KW_BEFORE - 200)) |
              (1 << (HiveParser.KW_BINARY - 200)) |
              (1 << (HiveParser.KW_CONTINUE - 200)) |
              (1 << (HiveParser.KW_RECORDREADER - 200)) |
              (1 << (HiveParser.KW_RECORDWRITER - 200)) |
              (1 << (HiveParser.KW_SEMI - 200)) |
              (1 << (HiveParser.KW_TOUCH - 200)) |
              (1 << (HiveParser.KW_ARCHIVE - 200)) |
              (1 << (HiveParser.KW_UNARCHIVE - 200)) |
              (1 << (HiveParser.KW_COMPUTE - 200)) |
              (1 << (HiveParser.KW_STATISTICS - 200)) |
              (1 << (HiveParser.KW_USE - 200)) |
              (1 << (HiveParser.KW_OPTION - 200)) |
              (1 << (HiveParser.KW_CONCATENATE - 200)) |
              (1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
              (1 << (HiveParser.KW_RESTRICT - 200)) |
              (1 << (HiveParser.KW_CASCADE - 200)) |
              (1 << (HiveParser.KW_SKEWED - 200)) |
              (1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
            0) ||
        (((_la - 238) & ~0x1f) == 0 &&
          ((1 << (_la - 238)) &
            ((1 << (HiveParser.KW_CURRENT_DATE - 238)) |
              (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 238)) |
              (1 << (HiveParser.KW_GROUPING - 238)) |
              (1 << (HiveParser.KW_SETS - 238)) |
              (1 << (HiveParser.KW_NOSCAN - 238)) |
              (1 << (HiveParser.KW_ROLE - 238)) |
              (1 << (HiveParser.KW_ROLES - 238)) |
              (1 << (HiveParser.KW_URI - 238)) |
              (1 << (HiveParser.KW_SERVER - 238)) |
              (1 << (HiveParser.KW_ADMIN - 238)) |
              (1 << (HiveParser.KW_OWNER - 238)) |
              (1 << (HiveParser.KW_PRINCIPALS - 238)) |
              (1 << (HiveParser.KW_COMPACT - 238)) |
              (1 << (HiveParser.KW_COMPACTIONS - 238)) |
              (1 << (HiveParser.KW_TRANSACTIONS - 238)) |
              (1 << (HiveParser.KW_REWRITE - 238)) |
              (1 << (HiveParser.KW_REOPTIMIZATION - 238)) |
              (1 << (HiveParser.KW_RELOAD - 238)) |
              (1 << (HiveParser.KW_YEAR - 238)) |
              (1 << (HiveParser.KW_QUERY - 238)) |
              (1 << (HiveParser.KW_QUARTER - 238)) |
              (1 << (HiveParser.KW_MONTH - 238)))) !==
            0) ||
        (((_la - 270) & ~0x1f) == 0 &&
          ((1 << (_la - 270)) &
            ((1 << (HiveParser.KW_WEEK - 270)) |
              (1 << (HiveParser.KW_DAY - 270)) |
              (1 << (HiveParser.KW_DOW - 270)) |
              (1 << (HiveParser.KW_HOUR - 270)) |
              (1 << (HiveParser.KW_MINUTE - 270)) |
              (1 << (HiveParser.KW_SECOND - 270)) |
              (1 << (HiveParser.KW_TRANSACTION - 270)) |
              (1 << (HiveParser.KW_WORK - 270)) |
              (1 << (HiveParser.KW_WRITE - 270)) |
              (1 << (HiveParser.KW_ISOLATION - 270)) |
              (1 << (HiveParser.KW_LEVEL - 270)) |
              (1 << (HiveParser.KW_SNAPSHOT - 270)) |
              (1 << (HiveParser.KW_AUTOCOMMIT - 270)) |
              (1 << (HiveParser.KW_CACHE - 270)) |
              (1 << (HiveParser.KW_ENFORCED - 270)) |
              (1 << (HiveParser.KW_VALIDATE - 270)) |
              (1 << (HiveParser.KW_NOVALIDATE - 270)) |
              (1 << (HiveParser.KW_RELY - 270)) |
              (1 << (HiveParser.KW_NORELY - 270)) |
              (1 << (HiveParser.KW_KEY - 270)) |
              (1 << (HiveParser.KW_ABORT - 270)))) !==
            0) ||
        (((_la - 303) & ~0x1f) == 0 &&
          ((1 << (_la - 303)) &
            ((1 << (HiveParser.KW_MATCHED - 303)) |
              (1 << (HiveParser.KW_REPL - 303)) |
              (1 << (HiveParser.KW_DUMP - 303)) |
              (1 << (HiveParser.KW_STATUS - 303)) |
              (1 << (HiveParser.KW_VECTORIZATION - 303)) |
              (1 << (HiveParser.KW_SUMMARY - 303)) |
              (1 << (HiveParser.KW_OPERATOR - 303)) |
              (1 << (HiveParser.KW_EXPRESSION - 303)) |
              (1 << (HiveParser.KW_DETAIL - 303)) |
              (1 << (HiveParser.KW_WAIT - 303)) |
              (1 << (HiveParser.KW_RESOURCE - 303)) |
              (1 << (HiveParser.KW_PLAN - 303)) |
              (1 << (HiveParser.KW_QUERY_PARALLELISM - 303)) |
              (1 << (HiveParser.KW_PLANS - 303)) |
              (1 << (HiveParser.KW_ACTIVATE - 303)) |
              (1 << (HiveParser.KW_DEFAULT - 303)) |
              (1 << (HiveParser.KW_CHECK - 303)) |
              (1 << (HiveParser.KW_POOL - 303)) |
              (1 << (HiveParser.KW_MOVE - 303)) |
              (1 << (HiveParser.KW_DO - 303)) |
              (1 << (HiveParser.KW_ALLOC_FRACTION - 303)) |
              (1 << (HiveParser.KW_SCHEDULING_POLICY - 303)) |
              (1 << (HiveParser.KW_PATH - 303)) |
              (1 << (HiveParser.KW_MAPPING - 303)) |
              (1 << (HiveParser.KW_WORKLOAD - 303)) |
              (1 << (HiveParser.KW_MANAGEMENT - 303)) |
              (1 << (HiveParser.KW_ACTIVE - 303)) |
              (1 << (HiveParser.KW_UNMANAGED - 303)))) !==
            0) ||
        (((_la - 338) & ~0x1f) == 0 &&
          ((1 << (_la - 338)) &
            ((1 << (HiveParser.KW_DELTA - 338)) |
              (1 << (HiveParser.KW_CSV - 338)) |
              (1 << (HiveParser.KW_JSON - 338)) |
              (1 << (HiveParser.KW_BLOOMFILTER - 338)) |
              (1 << (HiveParser.LCURLY - 338)))) !==
            0) ||
        _la === HiveParser.Identifier
      ) {
        this.state = 1775;
        this.extColumnName();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  descStatement() {
    let localctx = new DescStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, HiveParser.RULE_descStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1778;
      _la = this._input.LA(1);
      if (!(_la === HiveParser.KW_DESC || _la === HiveParser.KW_DESCRIBE)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 1792;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 126, this._ctx);
      switch (la_) {
        case 1:
          this.state = 1779;
          _la = this._input.LA(1);
          if (
            !(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1781;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_EXTENDED) {
            this.state = 1780;
            this.match(HiveParser.KW_EXTENDED);
          }

          this.state = 1783;
          this.identifier();
          break;

        case 2:
          this.state = 1784;
          this.match(HiveParser.KW_FUNCTION);
          this.state = 1786;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_EXTENDED) {
            this.state = 1785;
            this.match(HiveParser.KW_EXTENDED);
          }

          this.state = 1788;
          this.descFuncNames();
          break;

        case 3:
          this.state = 1789;
          _la = this._input.LA(1);
          if (
            !(_la === HiveParser.KW_EXTENDED || _la === HiveParser.KW_FORMATTED)
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1790;
          this.tabPartColTypeExpr();
          break;

        case 4:
          this.state = 1791;
          this.tabPartColTypeExpr();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  analyzeStatement() {
    let localctx = new AnalyzeStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, HiveParser.RULE_analyzeStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1794;
      this.match(HiveParser.KW_ANALYZE);
      this.state = 1795;
      this.match(HiveParser.KW_TABLE);

      this.state = 1796;
      this.tableOrPartition();
      this.state = 1809;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_COMPUTE:
          this.state = 1797;
          this.match(HiveParser.KW_COMPUTE);
          this.state = 1798;
          this.match(HiveParser.KW_STATISTICS);
          this.state = 1805;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case HiveParser.KW_NOSCAN:
              this.state = 1799;
              this.match(HiveParser.KW_NOSCAN);
              break;
            case HiveParser.KW_FOR:
              this.state = 1800;
              this.match(HiveParser.KW_FOR);
              this.state = 1801;
              this.match(HiveParser.KW_COLUMNS);
              this.state = 1803;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (
                ((_la & ~0x1f) == 0 &&
                  ((1 << _la) &
                    ((1 << HiveParser.KW_IF) |
                      (1 << HiveParser.KW_ASC) |
                      (1 << HiveParser.KW_DESC) |
                      (1 << HiveParser.KW_NULLS) |
                      (1 << HiveParser.KW_LAST) |
                      (1 << HiveParser.KW_OVERWRITE))) !==
                    0) ||
                (((_la - 36) & ~0x1f) == 0 &&
                  ((1 << (_la - 36)) &
                    ((1 << (HiveParser.KW_PARTITIONS - 36)) |
                      (1 << (HiveParser.KW_TABLES - 36)) |
                      (1 << (HiveParser.KW_COLUMNS - 36)) |
                      (1 << (HiveParser.KW_INDEX - 36)) |
                      (1 << (HiveParser.KW_INDEXES - 36)) |
                      (1 << (HiveParser.KW_REBUILD - 36)) |
                      (1 << (HiveParser.KW_FUNCTIONS - 36)) |
                      (1 << (HiveParser.KW_SHOW - 36)) |
                      (1 << (HiveParser.KW_MSCK - 36)) |
                      (1 << (HiveParser.KW_REPAIR - 36)) |
                      (1 << (HiveParser.KW_DIRECTORY - 36)) |
                      (1 << (HiveParser.KW_CLUSTER - 36)) |
                      (1 << (HiveParser.KW_DISTRIBUTE - 36)) |
                      (1 << (HiveParser.KW_SORT - 36)) |
                      (1 << (HiveParser.KW_LOAD - 36)) |
                      (1 << (HiveParser.KW_EXPORT - 36)) |
                      (1 << (HiveParser.KW_REPLICATION - 36)) |
                      (1 << (HiveParser.KW_METADATA - 36)) |
                      (1 << (HiveParser.KW_DATA - 36)) |
                      (1 << (HiveParser.KW_INPATH - 36)))) !==
                    0) ||
                (((_la - 68) & ~0x1f) == 0 &&
                  ((1 << (_la - 68)) &
                    ((1 << (HiveParser.KW_CHANGE - 68)) |
                      (1 << (HiveParser.KW_FIRST - 68)) |
                      (1 << (HiveParser.KW_AFTER - 68)) |
                      (1 << (HiveParser.KW_RENAME - 68)) |
                      (1 << (HiveParser.KW_COMMENT - 68)) |
                      (1 << (HiveParser.KW_BOOLEAN - 68)) |
                      (1 << (HiveParser.KW_TINYINT - 68)) |
                      (1 << (HiveParser.KW_SMALLINT - 68)) |
                      (1 << (HiveParser.KW_INT - 68)) |
                      (1 << (HiveParser.KW_BIGINT - 68)) |
                      (1 << (HiveParser.KW_FLOAT - 68)) |
                      (1 << (HiveParser.KW_DOUBLE - 68)) |
                      (1 << (HiveParser.KW_DATE - 68)) |
                      (1 << (HiveParser.KW_DATETIME - 68)) |
                      (1 << (HiveParser.KW_TIMESTAMP - 68)) |
                      (1 << (HiveParser.KW_TIME - 68)) |
                      (1 << (HiveParser.KW_ZONE - 68)) |
                      (1 << (HiveParser.KW_STRING - 68)) |
                      (1 << (HiveParser.KW_ARRAY - 68)) |
                      (1 << (HiveParser.KW_STRUCT - 68)) |
                      (1 << (HiveParser.KW_MAP - 68)) |
                      (1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
                    0) ||
                (((_la - 101) & ~0x1f) == 0 &&
                  ((1 << (_la - 101)) &
                    ((1 << (HiveParser.KW_PARTITIONED - 101)) |
                      (1 << (HiveParser.KW_CLUSTERED - 101)) |
                      (1 << (HiveParser.KW_SORTED - 101)) |
                      (1 << (HiveParser.KW_BUCKETS - 101)) |
                      (1 << (HiveParser.KW_FORMAT - 101)) |
                      (1 << (HiveParser.KW_DELIMITED - 101)) |
                      (1 << (HiveParser.KW_FIELDS - 101)) |
                      (1 << (HiveParser.KW_TERMINATED - 101)) |
                      (1 << (HiveParser.KW_ESCAPED - 101)) |
                      (1 << (HiveParser.KW_COLLECTION - 101)) |
                      (1 << (HiveParser.KW_ITEMS - 101)) |
                      (1 << (HiveParser.KW_KEYS - 101)) |
                      (1 << (HiveParser.KW_KEY_TYPE - 101)) |
                      (1 << (HiveParser.KW_KILL - 101)) |
                      (1 << (HiveParser.KW_LINES - 101)) |
                      (1 << (HiveParser.KW_STORED - 101)) |
                      (1 << (HiveParser.KW_FILEFORMAT - 101)) |
                      (1 << (HiveParser.KW_INPUTFORMAT - 101)) |
                      (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
                      (1 << (HiveParser.KW_INPUTDRIVER - 101)) |
                      (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
                      (1 << (HiveParser.KW_ENABLE - 101)) |
                      (1 << (HiveParser.KW_DISABLE - 101)) |
                      (1 << (HiveParser.KW_LOCATION - 101)) |
                      (1 << (HiveParser.KW_BUCKET - 101)))) !==
                    0) ||
                (((_la - 134) & ~0x1f) == 0 &&
                  ((1 << (_la - 134)) &
                    ((1 << (HiveParser.KW_ADD - 134)) |
                      (1 << (HiveParser.KW_REPLACE - 134)) |
                      (1 << (HiveParser.KW_TEMPORARY - 134)) |
                      (1 << (HiveParser.KW_FILE - 134)) |
                      (1 << (HiveParser.KW_JAR - 134)) |
                      (1 << (HiveParser.KW_EXPLAIN - 134)) |
                      (1 << (HiveParser.KW_FORMATTED - 134)) |
                      (1 << (HiveParser.KW_DEPENDENCY - 134)) |
                      (1 << (HiveParser.KW_LOGICAL - 134)) |
                      (1 << (HiveParser.KW_SERDE - 134)) |
                      (1 << (HiveParser.KW_DEFERRED - 134)) |
                      (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
                      (1 << (HiveParser.KW_DBPROPERTIES - 134)) |
                      (1 << (HiveParser.KW_LIMIT - 134)) |
                      (1 << (HiveParser.KW_OFFSET - 134)) |
                      (1 << (HiveParser.KW_UNSET - 134)) |
                      (1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
                      (1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
                      (1 << (HiveParser.KW_VALUE_TYPE - 134)) |
                      (1 << (HiveParser.KW_ELEM_TYPE - 134)) |
                      (1 << (HiveParser.KW_DEFINED - 134)))) !==
                    0) ||
                (((_la - 167) & ~0x1f) == 0 &&
                  ((1 << (_la - 167)) &
                    ((1 << (HiveParser.KW_MAPJOIN - 167)) |
                      (1 << (HiveParser.KW_STREAMTABLE - 167)) |
                      (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
                      (1 << (HiveParser.KW_UTC - 167)) |
                      (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
                      (1 << (HiveParser.KW_LONG - 167)) |
                      (1 << (HiveParser.KW_PLUS - 167)) |
                      (1 << (HiveParser.KW_VIEW - 167)) |
                      (1 << (HiveParser.KW_VIEWS - 167)) |
                      (1 << (HiveParser.KW_DATABASES - 167)) |
                      (1 << (HiveParser.KW_MATERIALIZED - 167)) |
                      (1 << (HiveParser.KW_SCHEMA - 167)) |
                      (1 << (HiveParser.KW_SCHEMAS - 167)) |
                      (1 << (HiveParser.KW_SSL - 167)) |
                      (1 << (HiveParser.KW_UNDO - 167)) |
                      (1 << (HiveParser.KW_LOCK - 167)) |
                      (1 << (HiveParser.KW_LOCKS - 167)) |
                      (1 << (HiveParser.KW_UNLOCK - 167)) |
                      (1 << (HiveParser.KW_SHARED - 167)) |
                      (1 << (HiveParser.KW_EXCLUSIVE - 167)) |
                      (1 << (HiveParser.KW_UNSIGNED - 167)) |
                      (1 << (HiveParser.KW_WHILE - 167)) |
                      (1 << (HiveParser.KW_READ - 167)))) !==
                    0) ||
                (((_la - 200) & ~0x1f) == 0 &&
                  ((1 << (_la - 200)) &
                    ((1 << (HiveParser.KW_PURGE - 200)) |
                      (1 << (HiveParser.KW_ANALYZE - 200)) |
                      (1 << (HiveParser.KW_BEFORE - 200)) |
                      (1 << (HiveParser.KW_BINARY - 200)) |
                      (1 << (HiveParser.KW_CONTINUE - 200)) |
                      (1 << (HiveParser.KW_RECORDREADER - 200)) |
                      (1 << (HiveParser.KW_RECORDWRITER - 200)) |
                      (1 << (HiveParser.KW_SEMI - 200)) |
                      (1 << (HiveParser.KW_TOUCH - 200)) |
                      (1 << (HiveParser.KW_ARCHIVE - 200)) |
                      (1 << (HiveParser.KW_UNARCHIVE - 200)) |
                      (1 << (HiveParser.KW_COMPUTE - 200)) |
                      (1 << (HiveParser.KW_STATISTICS - 200)) |
                      (1 << (HiveParser.KW_USE - 200)) |
                      (1 << (HiveParser.KW_OPTION - 200)) |
                      (1 << (HiveParser.KW_CONCATENATE - 200)) |
                      (1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
                      (1 << (HiveParser.KW_RESTRICT - 200)) |
                      (1 << (HiveParser.KW_CASCADE - 200)) |
                      (1 << (HiveParser.KW_SKEWED - 200)) |
                      (1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
                    0) ||
                (((_la - 238) & ~0x1f) == 0 &&
                  ((1 << (_la - 238)) &
                    ((1 << (HiveParser.KW_CURRENT_DATE - 238)) |
                      (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 238)) |
                      (1 << (HiveParser.KW_GROUPING - 238)) |
                      (1 << (HiveParser.KW_SETS - 238)) |
                      (1 << (HiveParser.KW_NOSCAN - 238)) |
                      (1 << (HiveParser.KW_ROLE - 238)) |
                      (1 << (HiveParser.KW_ROLES - 238)) |
                      (1 << (HiveParser.KW_URI - 238)) |
                      (1 << (HiveParser.KW_SERVER - 238)) |
                      (1 << (HiveParser.KW_ADMIN - 238)) |
                      (1 << (HiveParser.KW_OWNER - 238)) |
                      (1 << (HiveParser.KW_PRINCIPALS - 238)) |
                      (1 << (HiveParser.KW_COMPACT - 238)) |
                      (1 << (HiveParser.KW_COMPACTIONS - 238)) |
                      (1 << (HiveParser.KW_TRANSACTIONS - 238)) |
                      (1 << (HiveParser.KW_REWRITE - 238)) |
                      (1 << (HiveParser.KW_REOPTIMIZATION - 238)) |
                      (1 << (HiveParser.KW_RELOAD - 238)) |
                      (1 << (HiveParser.KW_YEAR - 238)) |
                      (1 << (HiveParser.KW_QUERY - 238)) |
                      (1 << (HiveParser.KW_QUARTER - 238)) |
                      (1 << (HiveParser.KW_MONTH - 238)))) !==
                    0) ||
                (((_la - 270) & ~0x1f) == 0 &&
                  ((1 << (_la - 270)) &
                    ((1 << (HiveParser.KW_WEEK - 270)) |
                      (1 << (HiveParser.KW_DAY - 270)) |
                      (1 << (HiveParser.KW_DOW - 270)) |
                      (1 << (HiveParser.KW_HOUR - 270)) |
                      (1 << (HiveParser.KW_MINUTE - 270)) |
                      (1 << (HiveParser.KW_SECOND - 270)) |
                      (1 << (HiveParser.KW_TRANSACTION - 270)) |
                      (1 << (HiveParser.KW_WORK - 270)) |
                      (1 << (HiveParser.KW_WRITE - 270)) |
                      (1 << (HiveParser.KW_ISOLATION - 270)) |
                      (1 << (HiveParser.KW_LEVEL - 270)) |
                      (1 << (HiveParser.KW_SNAPSHOT - 270)) |
                      (1 << (HiveParser.KW_AUTOCOMMIT - 270)) |
                      (1 << (HiveParser.KW_CACHE - 270)) |
                      (1 << (HiveParser.KW_ENFORCED - 270)) |
                      (1 << (HiveParser.KW_VALIDATE - 270)) |
                      (1 << (HiveParser.KW_NOVALIDATE - 270)) |
                      (1 << (HiveParser.KW_RELY - 270)) |
                      (1 << (HiveParser.KW_NORELY - 270)) |
                      (1 << (HiveParser.KW_KEY - 270)) |
                      (1 << (HiveParser.KW_ABORT - 270)))) !==
                    0) ||
                (((_la - 303) & ~0x1f) == 0 &&
                  ((1 << (_la - 303)) &
                    ((1 << (HiveParser.KW_MATCHED - 303)) |
                      (1 << (HiveParser.KW_REPL - 303)) |
                      (1 << (HiveParser.KW_DUMP - 303)) |
                      (1 << (HiveParser.KW_STATUS - 303)) |
                      (1 << (HiveParser.KW_VECTORIZATION - 303)) |
                      (1 << (HiveParser.KW_SUMMARY - 303)) |
                      (1 << (HiveParser.KW_OPERATOR - 303)) |
                      (1 << (HiveParser.KW_EXPRESSION - 303)) |
                      (1 << (HiveParser.KW_DETAIL - 303)) |
                      (1 << (HiveParser.KW_WAIT - 303)) |
                      (1 << (HiveParser.KW_RESOURCE - 303)) |
                      (1 << (HiveParser.KW_PLAN - 303)) |
                      (1 << (HiveParser.KW_QUERY_PARALLELISM - 303)) |
                      (1 << (HiveParser.KW_PLANS - 303)) |
                      (1 << (HiveParser.KW_ACTIVATE - 303)) |
                      (1 << (HiveParser.KW_DEFAULT - 303)) |
                      (1 << (HiveParser.KW_CHECK - 303)) |
                      (1 << (HiveParser.KW_POOL - 303)) |
                      (1 << (HiveParser.KW_MOVE - 303)) |
                      (1 << (HiveParser.KW_DO - 303)) |
                      (1 << (HiveParser.KW_ALLOC_FRACTION - 303)) |
                      (1 << (HiveParser.KW_SCHEDULING_POLICY - 303)) |
                      (1 << (HiveParser.KW_PATH - 303)) |
                      (1 << (HiveParser.KW_MAPPING - 303)) |
                      (1 << (HiveParser.KW_WORKLOAD - 303)) |
                      (1 << (HiveParser.KW_MANAGEMENT - 303)) |
                      (1 << (HiveParser.KW_ACTIVE - 303)) |
                      (1 << (HiveParser.KW_UNMANAGED - 303)))) !==
                    0) ||
                (((_la - 338) & ~0x1f) == 0 &&
                  ((1 << (_la - 338)) &
                    ((1 << (HiveParser.KW_DELTA - 338)) |
                      (1 << (HiveParser.KW_CSV - 338)) |
                      (1 << (HiveParser.KW_JSON - 338)) |
                      (1 << (HiveParser.KW_BLOOMFILTER - 338)) |
                      (1 << (HiveParser.LCURLY - 338)))) !==
                    0) ||
                _la === HiveParser.Identifier
              ) {
                this.state = 1802;
                this.columnNameList();
              }

              break;
            case HiveParser.SEMICOLON:
              break;
            default:
              break;
          }
          break;
        case HiveParser.KW_CACHE:
          this.state = 1807;
          this.match(HiveParser.KW_CACHE);
          this.state = 1808;
          this.match(HiveParser.KW_METADATA);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  showStatement() {
    let localctx = new ShowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, HiveParser.RULE_showStatement);
    var _la = 0; // Token type
    try {
      this.state = 1934;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 150, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1811;
          this.match(HiveParser.KW_SHOW);
          this.state = 1812;
          _la = this._input.LA(1);
          if (
            !(_la === HiveParser.KW_DATABASES || _la === HiveParser.KW_SCHEMAS)
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1815;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_LIKE) {
            this.state = 1813;
            this.match(HiveParser.KW_LIKE);
            this.state = 1814;
            this.showStmtIdentifier();
          }

          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1817;
          this.match(HiveParser.KW_SHOW);
          this.state = 1818;
          this.match(HiveParser.KW_TABLES);
          this.state = 1821;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN) {
            this.state = 1819;
            _la = this._input.LA(1);
            if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 1820;
            this.identifier();
          }

          this.state = 1826;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case HiveParser.KW_LIKE:
              this.state = 1823;
              this.match(HiveParser.KW_LIKE);
              this.state = 1824;
              this.showStmtIdentifier();
              break;
            case HiveParser.KW_IF:
            case HiveParser.KW_ASC:
            case HiveParser.KW_DESC:
            case HiveParser.KW_NULLS:
            case HiveParser.KW_LAST:
            case HiveParser.KW_OVERWRITE:
            case HiveParser.KW_PARTITIONS:
            case HiveParser.KW_TABLES:
            case HiveParser.KW_COLUMNS:
            case HiveParser.KW_INDEX:
            case HiveParser.KW_INDEXES:
            case HiveParser.KW_REBUILD:
            case HiveParser.KW_FUNCTIONS:
            case HiveParser.KW_SHOW:
            case HiveParser.KW_MSCK:
            case HiveParser.KW_REPAIR:
            case HiveParser.KW_DIRECTORY:
            case HiveParser.KW_CLUSTER:
            case HiveParser.KW_DISTRIBUTE:
            case HiveParser.KW_SORT:
            case HiveParser.KW_LOAD:
            case HiveParser.KW_EXPORT:
            case HiveParser.KW_REPLICATION:
            case HiveParser.KW_METADATA:
            case HiveParser.KW_DATA:
            case HiveParser.KW_INPATH:
            case HiveParser.KW_CHANGE:
            case HiveParser.KW_FIRST:
            case HiveParser.KW_AFTER:
            case HiveParser.KW_RENAME:
            case HiveParser.KW_COMMENT:
            case HiveParser.KW_BOOLEAN:
            case HiveParser.KW_TINYINT:
            case HiveParser.KW_SMALLINT:
            case HiveParser.KW_INT:
            case HiveParser.KW_BIGINT:
            case HiveParser.KW_FLOAT:
            case HiveParser.KW_DOUBLE:
            case HiveParser.KW_DATE:
            case HiveParser.KW_DATETIME:
            case HiveParser.KW_TIMESTAMP:
            case HiveParser.KW_TIME:
            case HiveParser.KW_ZONE:
            case HiveParser.KW_STRING:
            case HiveParser.KW_ARRAY:
            case HiveParser.KW_STRUCT:
            case HiveParser.KW_MAP:
            case HiveParser.KW_UNIONTYPE:
            case HiveParser.KW_PARTITIONED:
            case HiveParser.KW_CLUSTERED:
            case HiveParser.KW_SORTED:
            case HiveParser.KW_BUCKETS:
            case HiveParser.KW_FORMAT:
            case HiveParser.KW_DELIMITED:
            case HiveParser.KW_FIELDS:
            case HiveParser.KW_TERMINATED:
            case HiveParser.KW_ESCAPED:
            case HiveParser.KW_COLLECTION:
            case HiveParser.KW_ITEMS:
            case HiveParser.KW_KEYS:
            case HiveParser.KW_KEY_TYPE:
            case HiveParser.KW_KILL:
            case HiveParser.KW_LINES:
            case HiveParser.KW_STORED:
            case HiveParser.KW_FILEFORMAT:
            case HiveParser.KW_INPUTFORMAT:
            case HiveParser.KW_OUTPUTFORMAT:
            case HiveParser.KW_INPUTDRIVER:
            case HiveParser.KW_OUTPUTDRIVER:
            case HiveParser.KW_ENABLE:
            case HiveParser.KW_DISABLE:
            case HiveParser.KW_LOCATION:
            case HiveParser.KW_BUCKET:
            case HiveParser.KW_ADD:
            case HiveParser.KW_REPLACE:
            case HiveParser.KW_TEMPORARY:
            case HiveParser.KW_FILE:
            case HiveParser.KW_JAR:
            case HiveParser.KW_EXPLAIN:
            case HiveParser.KW_FORMATTED:
            case HiveParser.KW_DEPENDENCY:
            case HiveParser.KW_LOGICAL:
            case HiveParser.KW_SERDE:
            case HiveParser.KW_DEFERRED:
            case HiveParser.KW_SERDEPROPERTIES:
            case HiveParser.KW_DBPROPERTIES:
            case HiveParser.KW_LIMIT:
            case HiveParser.KW_OFFSET:
            case HiveParser.KW_UNSET:
            case HiveParser.KW_TBLPROPERTIES:
            case HiveParser.KW_IDXPROPERTIES:
            case HiveParser.KW_VALUE_TYPE:
            case HiveParser.KW_ELEM_TYPE:
            case HiveParser.KW_DEFINED:
            case HiveParser.KW_MAPJOIN:
            case HiveParser.KW_STREAMTABLE:
            case HiveParser.KW_CLUSTERSTATUS:
            case HiveParser.KW_UTC:
            case HiveParser.KW_UTCTIMESTAMP:
            case HiveParser.KW_LONG:
            case HiveParser.KW_PLUS:
            case HiveParser.KW_VIEW:
            case HiveParser.KW_VIEWS:
            case HiveParser.KW_DATABASES:
            case HiveParser.KW_MATERIALIZED:
            case HiveParser.KW_SCHEMA:
            case HiveParser.KW_SCHEMAS:
            case HiveParser.KW_SSL:
            case HiveParser.KW_UNDO:
            case HiveParser.KW_LOCK:
            case HiveParser.KW_LOCKS:
            case HiveParser.KW_UNLOCK:
            case HiveParser.KW_SHARED:
            case HiveParser.KW_EXCLUSIVE:
            case HiveParser.KW_UNSIGNED:
            case HiveParser.KW_WHILE:
            case HiveParser.KW_READ:
            case HiveParser.KW_PURGE:
            case HiveParser.KW_ANALYZE:
            case HiveParser.KW_BEFORE:
            case HiveParser.KW_BINARY:
            case HiveParser.KW_CONTINUE:
            case HiveParser.KW_RECORDREADER:
            case HiveParser.KW_RECORDWRITER:
            case HiveParser.KW_SEMI:
            case HiveParser.KW_TOUCH:
            case HiveParser.KW_ARCHIVE:
            case HiveParser.KW_UNARCHIVE:
            case HiveParser.KW_COMPUTE:
            case HiveParser.KW_STATISTICS:
            case HiveParser.KW_USE:
            case HiveParser.KW_OPTION:
            case HiveParser.KW_CONCATENATE:
            case HiveParser.KW_SHOW_DATABASE:
            case HiveParser.KW_RESTRICT:
            case HiveParser.KW_CASCADE:
            case HiveParser.KW_SKEWED:
            case HiveParser.KW_DIRECTORIES:
            case HiveParser.KW_CURRENT_DATE:
            case HiveParser.KW_CURRENT_TIMESTAMP:
            case HiveParser.KW_GROUPING:
            case HiveParser.KW_SETS:
            case HiveParser.KW_NOSCAN:
            case HiveParser.KW_ROLE:
            case HiveParser.KW_ROLES:
            case HiveParser.KW_URI:
            case HiveParser.KW_SERVER:
            case HiveParser.KW_ADMIN:
            case HiveParser.KW_OWNER:
            case HiveParser.KW_PRINCIPALS:
            case HiveParser.KW_COMPACT:
            case HiveParser.KW_COMPACTIONS:
            case HiveParser.KW_TRANSACTIONS:
            case HiveParser.KW_REWRITE:
            case HiveParser.KW_REOPTIMIZATION:
            case HiveParser.KW_RELOAD:
            case HiveParser.KW_YEAR:
            case HiveParser.KW_QUERY:
            case HiveParser.KW_QUARTER:
            case HiveParser.KW_MONTH:
            case HiveParser.KW_WEEK:
            case HiveParser.KW_DAY:
            case HiveParser.KW_DOW:
            case HiveParser.KW_HOUR:
            case HiveParser.KW_MINUTE:
            case HiveParser.KW_SECOND:
            case HiveParser.KW_TRANSACTION:
            case HiveParser.KW_WORK:
            case HiveParser.KW_WRITE:
            case HiveParser.KW_ISOLATION:
            case HiveParser.KW_LEVEL:
            case HiveParser.KW_SNAPSHOT:
            case HiveParser.KW_AUTOCOMMIT:
            case HiveParser.KW_CACHE:
            case HiveParser.KW_ENFORCED:
            case HiveParser.KW_VALIDATE:
            case HiveParser.KW_NOVALIDATE:
            case HiveParser.KW_RELY:
            case HiveParser.KW_NORELY:
            case HiveParser.KW_KEY:
            case HiveParser.KW_ABORT:
            case HiveParser.KW_MATCHED:
            case HiveParser.KW_REPL:
            case HiveParser.KW_DUMP:
            case HiveParser.KW_STATUS:
            case HiveParser.KW_VECTORIZATION:
            case HiveParser.KW_SUMMARY:
            case HiveParser.KW_OPERATOR:
            case HiveParser.KW_EXPRESSION:
            case HiveParser.KW_DETAIL:
            case HiveParser.KW_WAIT:
            case HiveParser.KW_RESOURCE:
            case HiveParser.KW_PLAN:
            case HiveParser.KW_QUERY_PARALLELISM:
            case HiveParser.KW_PLANS:
            case HiveParser.KW_ACTIVATE:
            case HiveParser.KW_DEFAULT:
            case HiveParser.KW_CHECK:
            case HiveParser.KW_POOL:
            case HiveParser.KW_MOVE:
            case HiveParser.KW_DO:
            case HiveParser.KW_ALLOC_FRACTION:
            case HiveParser.KW_SCHEDULING_POLICY:
            case HiveParser.KW_PATH:
            case HiveParser.KW_MAPPING:
            case HiveParser.KW_WORKLOAD:
            case HiveParser.KW_MANAGEMENT:
            case HiveParser.KW_ACTIVE:
            case HiveParser.KW_UNMANAGED:
            case HiveParser.KW_DELTA:
            case HiveParser.KW_CSV:
            case HiveParser.KW_JSON:
            case HiveParser.KW_BLOOMFILTER:
            case HiveParser.LCURLY:
            case HiveParser.StringLiteral:
            case HiveParser.Identifier:
              this.state = 1825;
              this.showStmtIdentifier();
              break;
            case HiveParser.SEMICOLON:
              break;
            default:
              break;
          }
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1828;
          this.match(HiveParser.KW_SHOW);
          this.state = 1829;
          this.match(HiveParser.KW_VIEWS);
          this.state = 1832;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN) {
            this.state = 1830;
            _la = this._input.LA(1);
            if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 1831;
            this.identifier();
          }

          this.state = 1837;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case HiveParser.KW_LIKE:
              this.state = 1834;
              this.match(HiveParser.KW_LIKE);
              this.state = 1835;
              this.showStmtIdentifier();
              break;
            case HiveParser.KW_IF:
            case HiveParser.KW_ASC:
            case HiveParser.KW_DESC:
            case HiveParser.KW_NULLS:
            case HiveParser.KW_LAST:
            case HiveParser.KW_OVERWRITE:
            case HiveParser.KW_PARTITIONS:
            case HiveParser.KW_TABLES:
            case HiveParser.KW_COLUMNS:
            case HiveParser.KW_INDEX:
            case HiveParser.KW_INDEXES:
            case HiveParser.KW_REBUILD:
            case HiveParser.KW_FUNCTIONS:
            case HiveParser.KW_SHOW:
            case HiveParser.KW_MSCK:
            case HiveParser.KW_REPAIR:
            case HiveParser.KW_DIRECTORY:
            case HiveParser.KW_CLUSTER:
            case HiveParser.KW_DISTRIBUTE:
            case HiveParser.KW_SORT:
            case HiveParser.KW_LOAD:
            case HiveParser.KW_EXPORT:
            case HiveParser.KW_REPLICATION:
            case HiveParser.KW_METADATA:
            case HiveParser.KW_DATA:
            case HiveParser.KW_INPATH:
            case HiveParser.KW_CHANGE:
            case HiveParser.KW_FIRST:
            case HiveParser.KW_AFTER:
            case HiveParser.KW_RENAME:
            case HiveParser.KW_COMMENT:
            case HiveParser.KW_BOOLEAN:
            case HiveParser.KW_TINYINT:
            case HiveParser.KW_SMALLINT:
            case HiveParser.KW_INT:
            case HiveParser.KW_BIGINT:
            case HiveParser.KW_FLOAT:
            case HiveParser.KW_DOUBLE:
            case HiveParser.KW_DATE:
            case HiveParser.KW_DATETIME:
            case HiveParser.KW_TIMESTAMP:
            case HiveParser.KW_TIME:
            case HiveParser.KW_ZONE:
            case HiveParser.KW_STRING:
            case HiveParser.KW_ARRAY:
            case HiveParser.KW_STRUCT:
            case HiveParser.KW_MAP:
            case HiveParser.KW_UNIONTYPE:
            case HiveParser.KW_PARTITIONED:
            case HiveParser.KW_CLUSTERED:
            case HiveParser.KW_SORTED:
            case HiveParser.KW_BUCKETS:
            case HiveParser.KW_FORMAT:
            case HiveParser.KW_DELIMITED:
            case HiveParser.KW_FIELDS:
            case HiveParser.KW_TERMINATED:
            case HiveParser.KW_ESCAPED:
            case HiveParser.KW_COLLECTION:
            case HiveParser.KW_ITEMS:
            case HiveParser.KW_KEYS:
            case HiveParser.KW_KEY_TYPE:
            case HiveParser.KW_KILL:
            case HiveParser.KW_LINES:
            case HiveParser.KW_STORED:
            case HiveParser.KW_FILEFORMAT:
            case HiveParser.KW_INPUTFORMAT:
            case HiveParser.KW_OUTPUTFORMAT:
            case HiveParser.KW_INPUTDRIVER:
            case HiveParser.KW_OUTPUTDRIVER:
            case HiveParser.KW_ENABLE:
            case HiveParser.KW_DISABLE:
            case HiveParser.KW_LOCATION:
            case HiveParser.KW_BUCKET:
            case HiveParser.KW_ADD:
            case HiveParser.KW_REPLACE:
            case HiveParser.KW_TEMPORARY:
            case HiveParser.KW_FILE:
            case HiveParser.KW_JAR:
            case HiveParser.KW_EXPLAIN:
            case HiveParser.KW_FORMATTED:
            case HiveParser.KW_DEPENDENCY:
            case HiveParser.KW_LOGICAL:
            case HiveParser.KW_SERDE:
            case HiveParser.KW_DEFERRED:
            case HiveParser.KW_SERDEPROPERTIES:
            case HiveParser.KW_DBPROPERTIES:
            case HiveParser.KW_LIMIT:
            case HiveParser.KW_OFFSET:
            case HiveParser.KW_UNSET:
            case HiveParser.KW_TBLPROPERTIES:
            case HiveParser.KW_IDXPROPERTIES:
            case HiveParser.KW_VALUE_TYPE:
            case HiveParser.KW_ELEM_TYPE:
            case HiveParser.KW_DEFINED:
            case HiveParser.KW_MAPJOIN:
            case HiveParser.KW_STREAMTABLE:
            case HiveParser.KW_CLUSTERSTATUS:
            case HiveParser.KW_UTC:
            case HiveParser.KW_UTCTIMESTAMP:
            case HiveParser.KW_LONG:
            case HiveParser.KW_PLUS:
            case HiveParser.KW_VIEW:
            case HiveParser.KW_VIEWS:
            case HiveParser.KW_DATABASES:
            case HiveParser.KW_MATERIALIZED:
            case HiveParser.KW_SCHEMA:
            case HiveParser.KW_SCHEMAS:
            case HiveParser.KW_SSL:
            case HiveParser.KW_UNDO:
            case HiveParser.KW_LOCK:
            case HiveParser.KW_LOCKS:
            case HiveParser.KW_UNLOCK:
            case HiveParser.KW_SHARED:
            case HiveParser.KW_EXCLUSIVE:
            case HiveParser.KW_UNSIGNED:
            case HiveParser.KW_WHILE:
            case HiveParser.KW_READ:
            case HiveParser.KW_PURGE:
            case HiveParser.KW_ANALYZE:
            case HiveParser.KW_BEFORE:
            case HiveParser.KW_BINARY:
            case HiveParser.KW_CONTINUE:
            case HiveParser.KW_RECORDREADER:
            case HiveParser.KW_RECORDWRITER:
            case HiveParser.KW_SEMI:
            case HiveParser.KW_TOUCH:
            case HiveParser.KW_ARCHIVE:
            case HiveParser.KW_UNARCHIVE:
            case HiveParser.KW_COMPUTE:
            case HiveParser.KW_STATISTICS:
            case HiveParser.KW_USE:
            case HiveParser.KW_OPTION:
            case HiveParser.KW_CONCATENATE:
            case HiveParser.KW_SHOW_DATABASE:
            case HiveParser.KW_RESTRICT:
            case HiveParser.KW_CASCADE:
            case HiveParser.KW_SKEWED:
            case HiveParser.KW_DIRECTORIES:
            case HiveParser.KW_CURRENT_DATE:
            case HiveParser.KW_CURRENT_TIMESTAMP:
            case HiveParser.KW_GROUPING:
            case HiveParser.KW_SETS:
            case HiveParser.KW_NOSCAN:
            case HiveParser.KW_ROLE:
            case HiveParser.KW_ROLES:
            case HiveParser.KW_URI:
            case HiveParser.KW_SERVER:
            case HiveParser.KW_ADMIN:
            case HiveParser.KW_OWNER:
            case HiveParser.KW_PRINCIPALS:
            case HiveParser.KW_COMPACT:
            case HiveParser.KW_COMPACTIONS:
            case HiveParser.KW_TRANSACTIONS:
            case HiveParser.KW_REWRITE:
            case HiveParser.KW_REOPTIMIZATION:
            case HiveParser.KW_RELOAD:
            case HiveParser.KW_YEAR:
            case HiveParser.KW_QUERY:
            case HiveParser.KW_QUARTER:
            case HiveParser.KW_MONTH:
            case HiveParser.KW_WEEK:
            case HiveParser.KW_DAY:
            case HiveParser.KW_DOW:
            case HiveParser.KW_HOUR:
            case HiveParser.KW_MINUTE:
            case HiveParser.KW_SECOND:
            case HiveParser.KW_TRANSACTION:
            case HiveParser.KW_WORK:
            case HiveParser.KW_WRITE:
            case HiveParser.KW_ISOLATION:
            case HiveParser.KW_LEVEL:
            case HiveParser.KW_SNAPSHOT:
            case HiveParser.KW_AUTOCOMMIT:
            case HiveParser.KW_CACHE:
            case HiveParser.KW_ENFORCED:
            case HiveParser.KW_VALIDATE:
            case HiveParser.KW_NOVALIDATE:
            case HiveParser.KW_RELY:
            case HiveParser.KW_NORELY:
            case HiveParser.KW_KEY:
            case HiveParser.KW_ABORT:
            case HiveParser.KW_MATCHED:
            case HiveParser.KW_REPL:
            case HiveParser.KW_DUMP:
            case HiveParser.KW_STATUS:
            case HiveParser.KW_VECTORIZATION:
            case HiveParser.KW_SUMMARY:
            case HiveParser.KW_OPERATOR:
            case HiveParser.KW_EXPRESSION:
            case HiveParser.KW_DETAIL:
            case HiveParser.KW_WAIT:
            case HiveParser.KW_RESOURCE:
            case HiveParser.KW_PLAN:
            case HiveParser.KW_QUERY_PARALLELISM:
            case HiveParser.KW_PLANS:
            case HiveParser.KW_ACTIVATE:
            case HiveParser.KW_DEFAULT:
            case HiveParser.KW_CHECK:
            case HiveParser.KW_POOL:
            case HiveParser.KW_MOVE:
            case HiveParser.KW_DO:
            case HiveParser.KW_ALLOC_FRACTION:
            case HiveParser.KW_SCHEDULING_POLICY:
            case HiveParser.KW_PATH:
            case HiveParser.KW_MAPPING:
            case HiveParser.KW_WORKLOAD:
            case HiveParser.KW_MANAGEMENT:
            case HiveParser.KW_ACTIVE:
            case HiveParser.KW_UNMANAGED:
            case HiveParser.KW_DELTA:
            case HiveParser.KW_CSV:
            case HiveParser.KW_JSON:
            case HiveParser.KW_BLOOMFILTER:
            case HiveParser.LCURLY:
            case HiveParser.StringLiteral:
            case HiveParser.Identifier:
              this.state = 1836;
              this.showStmtIdentifier();
              break;
            case HiveParser.SEMICOLON:
              break;
            default:
              break;
          }
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1839;
          this.match(HiveParser.KW_SHOW);
          this.state = 1840;
          this.match(HiveParser.KW_MATERIALIZED);
          this.state = 1841;
          this.match(HiveParser.KW_VIEWS);
          this.state = 1844;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN) {
            this.state = 1842;
            _la = this._input.LA(1);
            if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 1843;
            this.identifier();
          }

          this.state = 1849;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case HiveParser.KW_LIKE:
              this.state = 1846;
              this.match(HiveParser.KW_LIKE);
              this.state = 1847;
              this.showStmtIdentifier();
              break;
            case HiveParser.KW_IF:
            case HiveParser.KW_ASC:
            case HiveParser.KW_DESC:
            case HiveParser.KW_NULLS:
            case HiveParser.KW_LAST:
            case HiveParser.KW_OVERWRITE:
            case HiveParser.KW_PARTITIONS:
            case HiveParser.KW_TABLES:
            case HiveParser.KW_COLUMNS:
            case HiveParser.KW_INDEX:
            case HiveParser.KW_INDEXES:
            case HiveParser.KW_REBUILD:
            case HiveParser.KW_FUNCTIONS:
            case HiveParser.KW_SHOW:
            case HiveParser.KW_MSCK:
            case HiveParser.KW_REPAIR:
            case HiveParser.KW_DIRECTORY:
            case HiveParser.KW_CLUSTER:
            case HiveParser.KW_DISTRIBUTE:
            case HiveParser.KW_SORT:
            case HiveParser.KW_LOAD:
            case HiveParser.KW_EXPORT:
            case HiveParser.KW_REPLICATION:
            case HiveParser.KW_METADATA:
            case HiveParser.KW_DATA:
            case HiveParser.KW_INPATH:
            case HiveParser.KW_CHANGE:
            case HiveParser.KW_FIRST:
            case HiveParser.KW_AFTER:
            case HiveParser.KW_RENAME:
            case HiveParser.KW_COMMENT:
            case HiveParser.KW_BOOLEAN:
            case HiveParser.KW_TINYINT:
            case HiveParser.KW_SMALLINT:
            case HiveParser.KW_INT:
            case HiveParser.KW_BIGINT:
            case HiveParser.KW_FLOAT:
            case HiveParser.KW_DOUBLE:
            case HiveParser.KW_DATE:
            case HiveParser.KW_DATETIME:
            case HiveParser.KW_TIMESTAMP:
            case HiveParser.KW_TIME:
            case HiveParser.KW_ZONE:
            case HiveParser.KW_STRING:
            case HiveParser.KW_ARRAY:
            case HiveParser.KW_STRUCT:
            case HiveParser.KW_MAP:
            case HiveParser.KW_UNIONTYPE:
            case HiveParser.KW_PARTITIONED:
            case HiveParser.KW_CLUSTERED:
            case HiveParser.KW_SORTED:
            case HiveParser.KW_BUCKETS:
            case HiveParser.KW_FORMAT:
            case HiveParser.KW_DELIMITED:
            case HiveParser.KW_FIELDS:
            case HiveParser.KW_TERMINATED:
            case HiveParser.KW_ESCAPED:
            case HiveParser.KW_COLLECTION:
            case HiveParser.KW_ITEMS:
            case HiveParser.KW_KEYS:
            case HiveParser.KW_KEY_TYPE:
            case HiveParser.KW_KILL:
            case HiveParser.KW_LINES:
            case HiveParser.KW_STORED:
            case HiveParser.KW_FILEFORMAT:
            case HiveParser.KW_INPUTFORMAT:
            case HiveParser.KW_OUTPUTFORMAT:
            case HiveParser.KW_INPUTDRIVER:
            case HiveParser.KW_OUTPUTDRIVER:
            case HiveParser.KW_ENABLE:
            case HiveParser.KW_DISABLE:
            case HiveParser.KW_LOCATION:
            case HiveParser.KW_BUCKET:
            case HiveParser.KW_ADD:
            case HiveParser.KW_REPLACE:
            case HiveParser.KW_TEMPORARY:
            case HiveParser.KW_FILE:
            case HiveParser.KW_JAR:
            case HiveParser.KW_EXPLAIN:
            case HiveParser.KW_FORMATTED:
            case HiveParser.KW_DEPENDENCY:
            case HiveParser.KW_LOGICAL:
            case HiveParser.KW_SERDE:
            case HiveParser.KW_DEFERRED:
            case HiveParser.KW_SERDEPROPERTIES:
            case HiveParser.KW_DBPROPERTIES:
            case HiveParser.KW_LIMIT:
            case HiveParser.KW_OFFSET:
            case HiveParser.KW_UNSET:
            case HiveParser.KW_TBLPROPERTIES:
            case HiveParser.KW_IDXPROPERTIES:
            case HiveParser.KW_VALUE_TYPE:
            case HiveParser.KW_ELEM_TYPE:
            case HiveParser.KW_DEFINED:
            case HiveParser.KW_MAPJOIN:
            case HiveParser.KW_STREAMTABLE:
            case HiveParser.KW_CLUSTERSTATUS:
            case HiveParser.KW_UTC:
            case HiveParser.KW_UTCTIMESTAMP:
            case HiveParser.KW_LONG:
            case HiveParser.KW_PLUS:
            case HiveParser.KW_VIEW:
            case HiveParser.KW_VIEWS:
            case HiveParser.KW_DATABASES:
            case HiveParser.KW_MATERIALIZED:
            case HiveParser.KW_SCHEMA:
            case HiveParser.KW_SCHEMAS:
            case HiveParser.KW_SSL:
            case HiveParser.KW_UNDO:
            case HiveParser.KW_LOCK:
            case HiveParser.KW_LOCKS:
            case HiveParser.KW_UNLOCK:
            case HiveParser.KW_SHARED:
            case HiveParser.KW_EXCLUSIVE:
            case HiveParser.KW_UNSIGNED:
            case HiveParser.KW_WHILE:
            case HiveParser.KW_READ:
            case HiveParser.KW_PURGE:
            case HiveParser.KW_ANALYZE:
            case HiveParser.KW_BEFORE:
            case HiveParser.KW_BINARY:
            case HiveParser.KW_CONTINUE:
            case HiveParser.KW_RECORDREADER:
            case HiveParser.KW_RECORDWRITER:
            case HiveParser.KW_SEMI:
            case HiveParser.KW_TOUCH:
            case HiveParser.KW_ARCHIVE:
            case HiveParser.KW_UNARCHIVE:
            case HiveParser.KW_COMPUTE:
            case HiveParser.KW_STATISTICS:
            case HiveParser.KW_USE:
            case HiveParser.KW_OPTION:
            case HiveParser.KW_CONCATENATE:
            case HiveParser.KW_SHOW_DATABASE:
            case HiveParser.KW_RESTRICT:
            case HiveParser.KW_CASCADE:
            case HiveParser.KW_SKEWED:
            case HiveParser.KW_DIRECTORIES:
            case HiveParser.KW_CURRENT_DATE:
            case HiveParser.KW_CURRENT_TIMESTAMP:
            case HiveParser.KW_GROUPING:
            case HiveParser.KW_SETS:
            case HiveParser.KW_NOSCAN:
            case HiveParser.KW_ROLE:
            case HiveParser.KW_ROLES:
            case HiveParser.KW_URI:
            case HiveParser.KW_SERVER:
            case HiveParser.KW_ADMIN:
            case HiveParser.KW_OWNER:
            case HiveParser.KW_PRINCIPALS:
            case HiveParser.KW_COMPACT:
            case HiveParser.KW_COMPACTIONS:
            case HiveParser.KW_TRANSACTIONS:
            case HiveParser.KW_REWRITE:
            case HiveParser.KW_REOPTIMIZATION:
            case HiveParser.KW_RELOAD:
            case HiveParser.KW_YEAR:
            case HiveParser.KW_QUERY:
            case HiveParser.KW_QUARTER:
            case HiveParser.KW_MONTH:
            case HiveParser.KW_WEEK:
            case HiveParser.KW_DAY:
            case HiveParser.KW_DOW:
            case HiveParser.KW_HOUR:
            case HiveParser.KW_MINUTE:
            case HiveParser.KW_SECOND:
            case HiveParser.KW_TRANSACTION:
            case HiveParser.KW_WORK:
            case HiveParser.KW_WRITE:
            case HiveParser.KW_ISOLATION:
            case HiveParser.KW_LEVEL:
            case HiveParser.KW_SNAPSHOT:
            case HiveParser.KW_AUTOCOMMIT:
            case HiveParser.KW_CACHE:
            case HiveParser.KW_ENFORCED:
            case HiveParser.KW_VALIDATE:
            case HiveParser.KW_NOVALIDATE:
            case HiveParser.KW_RELY:
            case HiveParser.KW_NORELY:
            case HiveParser.KW_KEY:
            case HiveParser.KW_ABORT:
            case HiveParser.KW_MATCHED:
            case HiveParser.KW_REPL:
            case HiveParser.KW_DUMP:
            case HiveParser.KW_STATUS:
            case HiveParser.KW_VECTORIZATION:
            case HiveParser.KW_SUMMARY:
            case HiveParser.KW_OPERATOR:
            case HiveParser.KW_EXPRESSION:
            case HiveParser.KW_DETAIL:
            case HiveParser.KW_WAIT:
            case HiveParser.KW_RESOURCE:
            case HiveParser.KW_PLAN:
            case HiveParser.KW_QUERY_PARALLELISM:
            case HiveParser.KW_PLANS:
            case HiveParser.KW_ACTIVATE:
            case HiveParser.KW_DEFAULT:
            case HiveParser.KW_CHECK:
            case HiveParser.KW_POOL:
            case HiveParser.KW_MOVE:
            case HiveParser.KW_DO:
            case HiveParser.KW_ALLOC_FRACTION:
            case HiveParser.KW_SCHEDULING_POLICY:
            case HiveParser.KW_PATH:
            case HiveParser.KW_MAPPING:
            case HiveParser.KW_WORKLOAD:
            case HiveParser.KW_MANAGEMENT:
            case HiveParser.KW_ACTIVE:
            case HiveParser.KW_UNMANAGED:
            case HiveParser.KW_DELTA:
            case HiveParser.KW_CSV:
            case HiveParser.KW_JSON:
            case HiveParser.KW_BLOOMFILTER:
            case HiveParser.LCURLY:
            case HiveParser.StringLiteral:
            case HiveParser.Identifier:
              this.state = 1848;
              this.showStmtIdentifier();
              break;
            case HiveParser.SEMICOLON:
              break;
            default:
              break;
          }
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 1851;
          this.match(HiveParser.KW_SHOW);
          this.state = 1852;
          this.match(HiveParser.KW_COLUMNS);
          this.state = 1853;
          _la = this._input.LA(1);
          if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 1854;
          this.tableName();
          this.state = 1857;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN) {
            this.state = 1855;
            _la = this._input.LA(1);
            if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 1856;
            this.identifier();
          }

          this.state = 1862;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case HiveParser.KW_LIKE:
              this.state = 1859;
              this.match(HiveParser.KW_LIKE);
              this.state = 1860;
              this.showStmtIdentifier();
              break;
            case HiveParser.KW_IF:
            case HiveParser.KW_ASC:
            case HiveParser.KW_DESC:
            case HiveParser.KW_NULLS:
            case HiveParser.KW_LAST:
            case HiveParser.KW_OVERWRITE:
            case HiveParser.KW_PARTITIONS:
            case HiveParser.KW_TABLES:
            case HiveParser.KW_COLUMNS:
            case HiveParser.KW_INDEX:
            case HiveParser.KW_INDEXES:
            case HiveParser.KW_REBUILD:
            case HiveParser.KW_FUNCTIONS:
            case HiveParser.KW_SHOW:
            case HiveParser.KW_MSCK:
            case HiveParser.KW_REPAIR:
            case HiveParser.KW_DIRECTORY:
            case HiveParser.KW_CLUSTER:
            case HiveParser.KW_DISTRIBUTE:
            case HiveParser.KW_SORT:
            case HiveParser.KW_LOAD:
            case HiveParser.KW_EXPORT:
            case HiveParser.KW_REPLICATION:
            case HiveParser.KW_METADATA:
            case HiveParser.KW_DATA:
            case HiveParser.KW_INPATH:
            case HiveParser.KW_CHANGE:
            case HiveParser.KW_FIRST:
            case HiveParser.KW_AFTER:
            case HiveParser.KW_RENAME:
            case HiveParser.KW_COMMENT:
            case HiveParser.KW_BOOLEAN:
            case HiveParser.KW_TINYINT:
            case HiveParser.KW_SMALLINT:
            case HiveParser.KW_INT:
            case HiveParser.KW_BIGINT:
            case HiveParser.KW_FLOAT:
            case HiveParser.KW_DOUBLE:
            case HiveParser.KW_DATE:
            case HiveParser.KW_DATETIME:
            case HiveParser.KW_TIMESTAMP:
            case HiveParser.KW_TIME:
            case HiveParser.KW_ZONE:
            case HiveParser.KW_STRING:
            case HiveParser.KW_ARRAY:
            case HiveParser.KW_STRUCT:
            case HiveParser.KW_MAP:
            case HiveParser.KW_UNIONTYPE:
            case HiveParser.KW_PARTITIONED:
            case HiveParser.KW_CLUSTERED:
            case HiveParser.KW_SORTED:
            case HiveParser.KW_BUCKETS:
            case HiveParser.KW_FORMAT:
            case HiveParser.KW_DELIMITED:
            case HiveParser.KW_FIELDS:
            case HiveParser.KW_TERMINATED:
            case HiveParser.KW_ESCAPED:
            case HiveParser.KW_COLLECTION:
            case HiveParser.KW_ITEMS:
            case HiveParser.KW_KEYS:
            case HiveParser.KW_KEY_TYPE:
            case HiveParser.KW_KILL:
            case HiveParser.KW_LINES:
            case HiveParser.KW_STORED:
            case HiveParser.KW_FILEFORMAT:
            case HiveParser.KW_INPUTFORMAT:
            case HiveParser.KW_OUTPUTFORMAT:
            case HiveParser.KW_INPUTDRIVER:
            case HiveParser.KW_OUTPUTDRIVER:
            case HiveParser.KW_ENABLE:
            case HiveParser.KW_DISABLE:
            case HiveParser.KW_LOCATION:
            case HiveParser.KW_BUCKET:
            case HiveParser.KW_ADD:
            case HiveParser.KW_REPLACE:
            case HiveParser.KW_TEMPORARY:
            case HiveParser.KW_FILE:
            case HiveParser.KW_JAR:
            case HiveParser.KW_EXPLAIN:
            case HiveParser.KW_FORMATTED:
            case HiveParser.KW_DEPENDENCY:
            case HiveParser.KW_LOGICAL:
            case HiveParser.KW_SERDE:
            case HiveParser.KW_DEFERRED:
            case HiveParser.KW_SERDEPROPERTIES:
            case HiveParser.KW_DBPROPERTIES:
            case HiveParser.KW_LIMIT:
            case HiveParser.KW_OFFSET:
            case HiveParser.KW_UNSET:
            case HiveParser.KW_TBLPROPERTIES:
            case HiveParser.KW_IDXPROPERTIES:
            case HiveParser.KW_VALUE_TYPE:
            case HiveParser.KW_ELEM_TYPE:
            case HiveParser.KW_DEFINED:
            case HiveParser.KW_MAPJOIN:
            case HiveParser.KW_STREAMTABLE:
            case HiveParser.KW_CLUSTERSTATUS:
            case HiveParser.KW_UTC:
            case HiveParser.KW_UTCTIMESTAMP:
            case HiveParser.KW_LONG:
            case HiveParser.KW_PLUS:
            case HiveParser.KW_VIEW:
            case HiveParser.KW_VIEWS:
            case HiveParser.KW_DATABASES:
            case HiveParser.KW_MATERIALIZED:
            case HiveParser.KW_SCHEMA:
            case HiveParser.KW_SCHEMAS:
            case HiveParser.KW_SSL:
            case HiveParser.KW_UNDO:
            case HiveParser.KW_LOCK:
            case HiveParser.KW_LOCKS:
            case HiveParser.KW_UNLOCK:
            case HiveParser.KW_SHARED:
            case HiveParser.KW_EXCLUSIVE:
            case HiveParser.KW_UNSIGNED:
            case HiveParser.KW_WHILE:
            case HiveParser.KW_READ:
            case HiveParser.KW_PURGE:
            case HiveParser.KW_ANALYZE:
            case HiveParser.KW_BEFORE:
            case HiveParser.KW_BINARY:
            case HiveParser.KW_CONTINUE:
            case HiveParser.KW_RECORDREADER:
            case HiveParser.KW_RECORDWRITER:
            case HiveParser.KW_SEMI:
            case HiveParser.KW_TOUCH:
            case HiveParser.KW_ARCHIVE:
            case HiveParser.KW_UNARCHIVE:
            case HiveParser.KW_COMPUTE:
            case HiveParser.KW_STATISTICS:
            case HiveParser.KW_USE:
            case HiveParser.KW_OPTION:
            case HiveParser.KW_CONCATENATE:
            case HiveParser.KW_SHOW_DATABASE:
            case HiveParser.KW_RESTRICT:
            case HiveParser.KW_CASCADE:
            case HiveParser.KW_SKEWED:
            case HiveParser.KW_DIRECTORIES:
            case HiveParser.KW_CURRENT_DATE:
            case HiveParser.KW_CURRENT_TIMESTAMP:
            case HiveParser.KW_GROUPING:
            case HiveParser.KW_SETS:
            case HiveParser.KW_NOSCAN:
            case HiveParser.KW_ROLE:
            case HiveParser.KW_ROLES:
            case HiveParser.KW_URI:
            case HiveParser.KW_SERVER:
            case HiveParser.KW_ADMIN:
            case HiveParser.KW_OWNER:
            case HiveParser.KW_PRINCIPALS:
            case HiveParser.KW_COMPACT:
            case HiveParser.KW_COMPACTIONS:
            case HiveParser.KW_TRANSACTIONS:
            case HiveParser.KW_REWRITE:
            case HiveParser.KW_REOPTIMIZATION:
            case HiveParser.KW_RELOAD:
            case HiveParser.KW_YEAR:
            case HiveParser.KW_QUERY:
            case HiveParser.KW_QUARTER:
            case HiveParser.KW_MONTH:
            case HiveParser.KW_WEEK:
            case HiveParser.KW_DAY:
            case HiveParser.KW_DOW:
            case HiveParser.KW_HOUR:
            case HiveParser.KW_MINUTE:
            case HiveParser.KW_SECOND:
            case HiveParser.KW_TRANSACTION:
            case HiveParser.KW_WORK:
            case HiveParser.KW_WRITE:
            case HiveParser.KW_ISOLATION:
            case HiveParser.KW_LEVEL:
            case HiveParser.KW_SNAPSHOT:
            case HiveParser.KW_AUTOCOMMIT:
            case HiveParser.KW_CACHE:
            case HiveParser.KW_ENFORCED:
            case HiveParser.KW_VALIDATE:
            case HiveParser.KW_NOVALIDATE:
            case HiveParser.KW_RELY:
            case HiveParser.KW_NORELY:
            case HiveParser.KW_KEY:
            case HiveParser.KW_ABORT:
            case HiveParser.KW_MATCHED:
            case HiveParser.KW_REPL:
            case HiveParser.KW_DUMP:
            case HiveParser.KW_STATUS:
            case HiveParser.KW_VECTORIZATION:
            case HiveParser.KW_SUMMARY:
            case HiveParser.KW_OPERATOR:
            case HiveParser.KW_EXPRESSION:
            case HiveParser.KW_DETAIL:
            case HiveParser.KW_WAIT:
            case HiveParser.KW_RESOURCE:
            case HiveParser.KW_PLAN:
            case HiveParser.KW_QUERY_PARALLELISM:
            case HiveParser.KW_PLANS:
            case HiveParser.KW_ACTIVATE:
            case HiveParser.KW_DEFAULT:
            case HiveParser.KW_CHECK:
            case HiveParser.KW_POOL:
            case HiveParser.KW_MOVE:
            case HiveParser.KW_DO:
            case HiveParser.KW_ALLOC_FRACTION:
            case HiveParser.KW_SCHEDULING_POLICY:
            case HiveParser.KW_PATH:
            case HiveParser.KW_MAPPING:
            case HiveParser.KW_WORKLOAD:
            case HiveParser.KW_MANAGEMENT:
            case HiveParser.KW_ACTIVE:
            case HiveParser.KW_UNMANAGED:
            case HiveParser.KW_DELTA:
            case HiveParser.KW_CSV:
            case HiveParser.KW_JSON:
            case HiveParser.KW_BLOOMFILTER:
            case HiveParser.LCURLY:
            case HiveParser.StringLiteral:
            case HiveParser.Identifier:
              this.state = 1861;
              this.showStmtIdentifier();
              break;
            case HiveParser.SEMICOLON:
              break;
            default:
              break;
          }
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 1864;
          this.match(HiveParser.KW_SHOW);
          this.state = 1865;
          this.match(HiveParser.KW_FUNCTIONS);
          this.state = 1869;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case HiveParser.KW_LIKE:
              this.state = 1866;
              this.match(HiveParser.KW_LIKE);
              this.state = 1867;
              this.showFunctionIdentifier();
              break;
            case HiveParser.KW_IF:
            case HiveParser.KW_ASC:
            case HiveParser.KW_DESC:
            case HiveParser.KW_NULLS:
            case HiveParser.KW_LAST:
            case HiveParser.KW_OVERWRITE:
            case HiveParser.KW_PARTITIONS:
            case HiveParser.KW_TABLES:
            case HiveParser.KW_COLUMNS:
            case HiveParser.KW_INDEX:
            case HiveParser.KW_INDEXES:
            case HiveParser.KW_REBUILD:
            case HiveParser.KW_FUNCTIONS:
            case HiveParser.KW_SHOW:
            case HiveParser.KW_MSCK:
            case HiveParser.KW_REPAIR:
            case HiveParser.KW_DIRECTORY:
            case HiveParser.KW_CLUSTER:
            case HiveParser.KW_DISTRIBUTE:
            case HiveParser.KW_SORT:
            case HiveParser.KW_LOAD:
            case HiveParser.KW_EXPORT:
            case HiveParser.KW_REPLICATION:
            case HiveParser.KW_METADATA:
            case HiveParser.KW_DATA:
            case HiveParser.KW_INPATH:
            case HiveParser.KW_CHANGE:
            case HiveParser.KW_FIRST:
            case HiveParser.KW_AFTER:
            case HiveParser.KW_RENAME:
            case HiveParser.KW_COMMENT:
            case HiveParser.KW_BOOLEAN:
            case HiveParser.KW_TINYINT:
            case HiveParser.KW_SMALLINT:
            case HiveParser.KW_INT:
            case HiveParser.KW_BIGINT:
            case HiveParser.KW_FLOAT:
            case HiveParser.KW_DOUBLE:
            case HiveParser.KW_DATE:
            case HiveParser.KW_DATETIME:
            case HiveParser.KW_TIMESTAMP:
            case HiveParser.KW_TIME:
            case HiveParser.KW_ZONE:
            case HiveParser.KW_STRING:
            case HiveParser.KW_ARRAY:
            case HiveParser.KW_STRUCT:
            case HiveParser.KW_MAP:
            case HiveParser.KW_UNIONTYPE:
            case HiveParser.KW_PARTITIONED:
            case HiveParser.KW_CLUSTERED:
            case HiveParser.KW_SORTED:
            case HiveParser.KW_BUCKETS:
            case HiveParser.KW_FORMAT:
            case HiveParser.KW_DELIMITED:
            case HiveParser.KW_FIELDS:
            case HiveParser.KW_TERMINATED:
            case HiveParser.KW_ESCAPED:
            case HiveParser.KW_COLLECTION:
            case HiveParser.KW_ITEMS:
            case HiveParser.KW_KEYS:
            case HiveParser.KW_KEY_TYPE:
            case HiveParser.KW_KILL:
            case HiveParser.KW_LINES:
            case HiveParser.KW_STORED:
            case HiveParser.KW_FILEFORMAT:
            case HiveParser.KW_INPUTFORMAT:
            case HiveParser.KW_OUTPUTFORMAT:
            case HiveParser.KW_INPUTDRIVER:
            case HiveParser.KW_OUTPUTDRIVER:
            case HiveParser.KW_ENABLE:
            case HiveParser.KW_DISABLE:
            case HiveParser.KW_LOCATION:
            case HiveParser.KW_BUCKET:
            case HiveParser.KW_ADD:
            case HiveParser.KW_REPLACE:
            case HiveParser.KW_TEMPORARY:
            case HiveParser.KW_FILE:
            case HiveParser.KW_JAR:
            case HiveParser.KW_EXPLAIN:
            case HiveParser.KW_FORMATTED:
            case HiveParser.KW_DEPENDENCY:
            case HiveParser.KW_LOGICAL:
            case HiveParser.KW_SERDE:
            case HiveParser.KW_DEFERRED:
            case HiveParser.KW_SERDEPROPERTIES:
            case HiveParser.KW_DBPROPERTIES:
            case HiveParser.KW_LIMIT:
            case HiveParser.KW_OFFSET:
            case HiveParser.KW_UNSET:
            case HiveParser.KW_TBLPROPERTIES:
            case HiveParser.KW_IDXPROPERTIES:
            case HiveParser.KW_VALUE_TYPE:
            case HiveParser.KW_ELEM_TYPE:
            case HiveParser.KW_DEFINED:
            case HiveParser.KW_MAPJOIN:
            case HiveParser.KW_STREAMTABLE:
            case HiveParser.KW_CLUSTERSTATUS:
            case HiveParser.KW_UTC:
            case HiveParser.KW_UTCTIMESTAMP:
            case HiveParser.KW_LONG:
            case HiveParser.KW_PLUS:
            case HiveParser.KW_VIEW:
            case HiveParser.KW_VIEWS:
            case HiveParser.KW_DATABASES:
            case HiveParser.KW_MATERIALIZED:
            case HiveParser.KW_SCHEMA:
            case HiveParser.KW_SCHEMAS:
            case HiveParser.KW_SSL:
            case HiveParser.KW_UNDO:
            case HiveParser.KW_LOCK:
            case HiveParser.KW_LOCKS:
            case HiveParser.KW_UNLOCK:
            case HiveParser.KW_SHARED:
            case HiveParser.KW_EXCLUSIVE:
            case HiveParser.KW_UNSIGNED:
            case HiveParser.KW_WHILE:
            case HiveParser.KW_READ:
            case HiveParser.KW_PURGE:
            case HiveParser.KW_ANALYZE:
            case HiveParser.KW_BEFORE:
            case HiveParser.KW_BINARY:
            case HiveParser.KW_CONTINUE:
            case HiveParser.KW_RECORDREADER:
            case HiveParser.KW_RECORDWRITER:
            case HiveParser.KW_SEMI:
            case HiveParser.KW_TOUCH:
            case HiveParser.KW_ARCHIVE:
            case HiveParser.KW_UNARCHIVE:
            case HiveParser.KW_COMPUTE:
            case HiveParser.KW_STATISTICS:
            case HiveParser.KW_USE:
            case HiveParser.KW_OPTION:
            case HiveParser.KW_CONCATENATE:
            case HiveParser.KW_SHOW_DATABASE:
            case HiveParser.KW_RESTRICT:
            case HiveParser.KW_CASCADE:
            case HiveParser.KW_SKEWED:
            case HiveParser.KW_DIRECTORIES:
            case HiveParser.KW_CURRENT_DATE:
            case HiveParser.KW_CURRENT_TIMESTAMP:
            case HiveParser.KW_GROUPING:
            case HiveParser.KW_SETS:
            case HiveParser.KW_NOSCAN:
            case HiveParser.KW_ROLE:
            case HiveParser.KW_ROLES:
            case HiveParser.KW_URI:
            case HiveParser.KW_SERVER:
            case HiveParser.KW_ADMIN:
            case HiveParser.KW_OWNER:
            case HiveParser.KW_PRINCIPALS:
            case HiveParser.KW_COMPACT:
            case HiveParser.KW_COMPACTIONS:
            case HiveParser.KW_TRANSACTIONS:
            case HiveParser.KW_REWRITE:
            case HiveParser.KW_REOPTIMIZATION:
            case HiveParser.KW_RELOAD:
            case HiveParser.KW_YEAR:
            case HiveParser.KW_QUERY:
            case HiveParser.KW_QUARTER:
            case HiveParser.KW_MONTH:
            case HiveParser.KW_WEEK:
            case HiveParser.KW_DAY:
            case HiveParser.KW_DOW:
            case HiveParser.KW_HOUR:
            case HiveParser.KW_MINUTE:
            case HiveParser.KW_SECOND:
            case HiveParser.KW_TRANSACTION:
            case HiveParser.KW_WORK:
            case HiveParser.KW_WRITE:
            case HiveParser.KW_ISOLATION:
            case HiveParser.KW_LEVEL:
            case HiveParser.KW_SNAPSHOT:
            case HiveParser.KW_AUTOCOMMIT:
            case HiveParser.KW_CACHE:
            case HiveParser.KW_ENFORCED:
            case HiveParser.KW_VALIDATE:
            case HiveParser.KW_NOVALIDATE:
            case HiveParser.KW_RELY:
            case HiveParser.KW_NORELY:
            case HiveParser.KW_KEY:
            case HiveParser.KW_ABORT:
            case HiveParser.KW_MATCHED:
            case HiveParser.KW_REPL:
            case HiveParser.KW_DUMP:
            case HiveParser.KW_STATUS:
            case HiveParser.KW_VECTORIZATION:
            case HiveParser.KW_SUMMARY:
            case HiveParser.KW_OPERATOR:
            case HiveParser.KW_EXPRESSION:
            case HiveParser.KW_DETAIL:
            case HiveParser.KW_WAIT:
            case HiveParser.KW_RESOURCE:
            case HiveParser.KW_PLAN:
            case HiveParser.KW_QUERY_PARALLELISM:
            case HiveParser.KW_PLANS:
            case HiveParser.KW_ACTIVATE:
            case HiveParser.KW_DEFAULT:
            case HiveParser.KW_CHECK:
            case HiveParser.KW_POOL:
            case HiveParser.KW_MOVE:
            case HiveParser.KW_DO:
            case HiveParser.KW_ALLOC_FRACTION:
            case HiveParser.KW_SCHEDULING_POLICY:
            case HiveParser.KW_PATH:
            case HiveParser.KW_MAPPING:
            case HiveParser.KW_WORKLOAD:
            case HiveParser.KW_MANAGEMENT:
            case HiveParser.KW_ACTIVE:
            case HiveParser.KW_UNMANAGED:
            case HiveParser.KW_DELTA:
            case HiveParser.KW_CSV:
            case HiveParser.KW_JSON:
            case HiveParser.KW_BLOOMFILTER:
            case HiveParser.LCURLY:
            case HiveParser.StringLiteral:
            case HiveParser.Identifier:
              this.state = 1868;
              this.showFunctionIdentifier();
              break;
            case HiveParser.SEMICOLON:
              break;
            default:
              break;
          }
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 1871;
          this.match(HiveParser.KW_SHOW);
          this.state = 1872;
          this.match(HiveParser.KW_PARTITIONS);
          this.state = 1873;
          this.tableName();
          this.state = 1875;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_PARTITION) {
            this.state = 1874;
            this.partitionSpec();
          }

          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 1877;
          this.match(HiveParser.KW_SHOW);
          this.state = 1878;
          this.match(HiveParser.KW_CREATE);
          this.state = 1883;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case HiveParser.KW_DATABASE:
            case HiveParser.KW_SCHEMA:
              this.state = 1879;
              _la = this._input.LA(1);
              if (
                !(
                  _la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA
                )
              ) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 1880;
              this.identifier();
              break;
            case HiveParser.KW_TABLE:
              this.state = 1881;
              this.match(HiveParser.KW_TABLE);
              this.state = 1882;
              this.tableName();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 1885;
          this.match(HiveParser.KW_SHOW);
          this.state = 1886;
          this.match(HiveParser.KW_TABLE);
          this.state = 1887;
          this.match(HiveParser.KW_EXTENDED);
          this.state = 1890;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN) {
            this.state = 1888;
            _la = this._input.LA(1);
            if (!(_la === HiveParser.KW_FROM || _la === HiveParser.KW_IN)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 1889;
            this.identifier();
          }

          this.state = 1892;
          this.match(HiveParser.KW_LIKE);
          this.state = 1893;
          this.showStmtIdentifier();
          this.state = 1895;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_PARTITION) {
            this.state = 1894;
            this.partitionSpec();
          }

          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 1897;
          this.match(HiveParser.KW_SHOW);
          this.state = 1898;
          this.match(HiveParser.KW_TBLPROPERTIES);
          this.state = 1899;
          this.tableName();
          this.state = 1903;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.LPAREN) {
            this.state = 1900;
            this.match(HiveParser.LPAREN);
            this.state = 1901;
            this.match(HiveParser.StringLiteral);
            this.state = 1902;
            this.match(HiveParser.RPAREN);
          }

          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 1905;
          this.match(HiveParser.KW_SHOW);
          this.state = 1906;
          this.match(HiveParser.KW_LOCKS);
          this.state = 1918;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 148, this._ctx);
          switch (la_) {
            case 1:
              this.state = 1907;
              _la = this._input.LA(1);
              if (
                !(
                  _la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA
                )
              ) {
                this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 1908;
              this.identifier();
              this.state = 1910;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === HiveParser.KW_EXTENDED) {
                this.state = 1909;
                this.match(HiveParser.KW_EXTENDED);
              }

              break;

            case 2:
              this.state = 1913;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (
                ((_la & ~0x1f) == 0 &&
                  ((1 << _la) &
                    ((1 << HiveParser.KW_IF) |
                      (1 << HiveParser.KW_ASC) |
                      (1 << HiveParser.KW_DESC) |
                      (1 << HiveParser.KW_NULLS) |
                      (1 << HiveParser.KW_LAST) |
                      (1 << HiveParser.KW_OVERWRITE))) !==
                    0) ||
                (((_la - 36) & ~0x1f) == 0 &&
                  ((1 << (_la - 36)) &
                    ((1 << (HiveParser.KW_PARTITIONS - 36)) |
                      (1 << (HiveParser.KW_TABLES - 36)) |
                      (1 << (HiveParser.KW_COLUMNS - 36)) |
                      (1 << (HiveParser.KW_INDEX - 36)) |
                      (1 << (HiveParser.KW_INDEXES - 36)) |
                      (1 << (HiveParser.KW_REBUILD - 36)) |
                      (1 << (HiveParser.KW_FUNCTIONS - 36)) |
                      (1 << (HiveParser.KW_SHOW - 36)) |
                      (1 << (HiveParser.KW_MSCK - 36)) |
                      (1 << (HiveParser.KW_REPAIR - 36)) |
                      (1 << (HiveParser.KW_DIRECTORY - 36)) |
                      (1 << (HiveParser.KW_CLUSTER - 36)) |
                      (1 << (HiveParser.KW_DISTRIBUTE - 36)) |
                      (1 << (HiveParser.KW_SORT - 36)) |
                      (1 << (HiveParser.KW_LOAD - 36)) |
                      (1 << (HiveParser.KW_EXPORT - 36)) |
                      (1 << (HiveParser.KW_REPLICATION - 36)) |
                      (1 << (HiveParser.KW_METADATA - 36)) |
                      (1 << (HiveParser.KW_DATA - 36)) |
                      (1 << (HiveParser.KW_INPATH - 36)))) !==
                    0) ||
                (((_la - 68) & ~0x1f) == 0 &&
                  ((1 << (_la - 68)) &
                    ((1 << (HiveParser.KW_CHANGE - 68)) |
                      (1 << (HiveParser.KW_FIRST - 68)) |
                      (1 << (HiveParser.KW_AFTER - 68)) |
                      (1 << (HiveParser.KW_RENAME - 68)) |
                      (1 << (HiveParser.KW_COMMENT - 68)) |
                      (1 << (HiveParser.KW_BOOLEAN - 68)) |
                      (1 << (HiveParser.KW_TINYINT - 68)) |
                      (1 << (HiveParser.KW_SMALLINT - 68)) |
                      (1 << (HiveParser.KW_INT - 68)) |
                      (1 << (HiveParser.KW_BIGINT - 68)) |
                      (1 << (HiveParser.KW_FLOAT - 68)) |
                      (1 << (HiveParser.KW_DOUBLE - 68)) |
                      (1 << (HiveParser.KW_DATE - 68)) |
                      (1 << (HiveParser.KW_DATETIME - 68)) |
                      (1 << (HiveParser.KW_TIMESTAMP - 68)) |
                      (1 << (HiveParser.KW_TIME - 68)) |
                      (1 << (HiveParser.KW_ZONE - 68)) |
                      (1 << (HiveParser.KW_STRING - 68)) |
                      (1 << (HiveParser.KW_ARRAY - 68)) |
                      (1 << (HiveParser.KW_STRUCT - 68)) |
                      (1 << (HiveParser.KW_MAP - 68)) |
                      (1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
                    0) ||
                (((_la - 101) & ~0x1f) == 0 &&
                  ((1 << (_la - 101)) &
                    ((1 << (HiveParser.KW_PARTITIONED - 101)) |
                      (1 << (HiveParser.KW_CLUSTERED - 101)) |
                      (1 << (HiveParser.KW_SORTED - 101)) |
                      (1 << (HiveParser.KW_BUCKETS - 101)) |
                      (1 << (HiveParser.KW_FORMAT - 101)) |
                      (1 << (HiveParser.KW_DELIMITED - 101)) |
                      (1 << (HiveParser.KW_FIELDS - 101)) |
                      (1 << (HiveParser.KW_TERMINATED - 101)) |
                      (1 << (HiveParser.KW_ESCAPED - 101)) |
                      (1 << (HiveParser.KW_COLLECTION - 101)) |
                      (1 << (HiveParser.KW_ITEMS - 101)) |
                      (1 << (HiveParser.KW_KEYS - 101)) |
                      (1 << (HiveParser.KW_KEY_TYPE - 101)) |
                      (1 << (HiveParser.KW_KILL - 101)) |
                      (1 << (HiveParser.KW_LINES - 101)) |
                      (1 << (HiveParser.KW_STORED - 101)) |
                      (1 << (HiveParser.KW_FILEFORMAT - 101)) |
                      (1 << (HiveParser.KW_INPUTFORMAT - 101)) |
                      (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
                      (1 << (HiveParser.KW_INPUTDRIVER - 101)) |
                      (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
                      (1 << (HiveParser.KW_ENABLE - 101)) |
                      (1 << (HiveParser.KW_DISABLE - 101)) |
                      (1 << (HiveParser.KW_LOCATION - 101)) |
                      (1 << (HiveParser.KW_BUCKET - 101)))) !==
                    0) ||
                (((_la - 134) & ~0x1f) == 0 &&
                  ((1 << (_la - 134)) &
                    ((1 << (HiveParser.KW_ADD - 134)) |
                      (1 << (HiveParser.KW_REPLACE - 134)) |
                      (1 << (HiveParser.KW_TEMPORARY - 134)) |
                      (1 << (HiveParser.KW_FILE - 134)) |
                      (1 << (HiveParser.KW_JAR - 134)) |
                      (1 << (HiveParser.KW_EXPLAIN - 134)) |
                      (1 << (HiveParser.KW_FORMATTED - 134)) |
                      (1 << (HiveParser.KW_DEPENDENCY - 134)) |
                      (1 << (HiveParser.KW_LOGICAL - 134)) |
                      (1 << (HiveParser.KW_SERDE - 134)) |
                      (1 << (HiveParser.KW_DEFERRED - 134)) |
                      (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
                      (1 << (HiveParser.KW_DBPROPERTIES - 134)) |
                      (1 << (HiveParser.KW_LIMIT - 134)) |
                      (1 << (HiveParser.KW_OFFSET - 134)) |
                      (1 << (HiveParser.KW_UNSET - 134)) |
                      (1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
                      (1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
                      (1 << (HiveParser.KW_VALUE_TYPE - 134)) |
                      (1 << (HiveParser.KW_ELEM_TYPE - 134)) |
                      (1 << (HiveParser.KW_DEFINED - 134)))) !==
                    0) ||
                (((_la - 167) & ~0x1f) == 0 &&
                  ((1 << (_la - 167)) &
                    ((1 << (HiveParser.KW_MAPJOIN - 167)) |
                      (1 << (HiveParser.KW_STREAMTABLE - 167)) |
                      (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
                      (1 << (HiveParser.KW_UTC - 167)) |
                      (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
                      (1 << (HiveParser.KW_LONG - 167)) |
                      (1 << (HiveParser.KW_PLUS - 167)) |
                      (1 << (HiveParser.KW_VIEW - 167)) |
                      (1 << (HiveParser.KW_VIEWS - 167)) |
                      (1 << (HiveParser.KW_DATABASES - 167)) |
                      (1 << (HiveParser.KW_MATERIALIZED - 167)) |
                      (1 << (HiveParser.KW_SCHEMA - 167)) |
                      (1 << (HiveParser.KW_SCHEMAS - 167)) |
                      (1 << (HiveParser.KW_SSL - 167)) |
                      (1 << (HiveParser.KW_UNDO - 167)) |
                      (1 << (HiveParser.KW_LOCK - 167)) |
                      (1 << (HiveParser.KW_LOCKS - 167)) |
                      (1 << (HiveParser.KW_UNLOCK - 167)) |
                      (1 << (HiveParser.KW_SHARED - 167)) |
                      (1 << (HiveParser.KW_EXCLUSIVE - 167)) |
                      (1 << (HiveParser.KW_UNSIGNED - 167)) |
                      (1 << (HiveParser.KW_WHILE - 167)) |
                      (1 << (HiveParser.KW_READ - 167)))) !==
                    0) ||
                (((_la - 200) & ~0x1f) == 0 &&
                  ((1 << (_la - 200)) &
                    ((1 << (HiveParser.KW_PURGE - 200)) |
                      (1 << (HiveParser.KW_ANALYZE - 200)) |
                      (1 << (HiveParser.KW_BEFORE - 200)) |
                      (1 << (HiveParser.KW_BINARY - 200)) |
                      (1 << (HiveParser.KW_CONTINUE - 200)) |
                      (1 << (HiveParser.KW_RECORDREADER - 200)) |
                      (1 << (HiveParser.KW_RECORDWRITER - 200)) |
                      (1 << (HiveParser.KW_SEMI - 200)) |
                      (1 << (HiveParser.KW_TOUCH - 200)) |
                      (1 << (HiveParser.KW_ARCHIVE - 200)) |
                      (1 << (HiveParser.KW_UNARCHIVE - 200)) |
                      (1 << (HiveParser.KW_COMPUTE - 200)) |
                      (1 << (HiveParser.KW_STATISTICS - 200)) |
                      (1 << (HiveParser.KW_USE - 200)) |
                      (1 << (HiveParser.KW_OPTION - 200)) |
                      (1 << (HiveParser.KW_CONCATENATE - 200)) |
                      (1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
                      (1 << (HiveParser.KW_RESTRICT - 200)) |
                      (1 << (HiveParser.KW_CASCADE - 200)) |
                      (1 << (HiveParser.KW_SKEWED - 200)) |
                      (1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
                    0) ||
                (((_la - 238) & ~0x1f) == 0 &&
                  ((1 << (_la - 238)) &
                    ((1 << (HiveParser.KW_CURRENT_DATE - 238)) |
                      (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 238)) |
                      (1 << (HiveParser.KW_GROUPING - 238)) |
                      (1 << (HiveParser.KW_SETS - 238)) |
                      (1 << (HiveParser.KW_NOSCAN - 238)) |
                      (1 << (HiveParser.KW_ROLE - 238)) |
                      (1 << (HiveParser.KW_ROLES - 238)) |
                      (1 << (HiveParser.KW_URI - 238)) |
                      (1 << (HiveParser.KW_SERVER - 238)) |
                      (1 << (HiveParser.KW_ADMIN - 238)) |
                      (1 << (HiveParser.KW_OWNER - 238)) |
                      (1 << (HiveParser.KW_PRINCIPALS - 238)) |
                      (1 << (HiveParser.KW_COMPACT - 238)) |
                      (1 << (HiveParser.KW_COMPACTIONS - 238)) |
                      (1 << (HiveParser.KW_TRANSACTIONS - 238)) |
                      (1 << (HiveParser.KW_REWRITE - 238)) |
                      (1 << (HiveParser.KW_REOPTIMIZATION - 238)) |
                      (1 << (HiveParser.KW_RELOAD - 238)) |
                      (1 << (HiveParser.KW_YEAR - 238)) |
                      (1 << (HiveParser.KW_QUERY - 238)) |
                      (1 << (HiveParser.KW_QUARTER - 238)) |
                      (1 << (HiveParser.KW_MONTH - 238)))) !==
                    0) ||
                (((_la - 270) & ~0x1f) == 0 &&
                  ((1 << (_la - 270)) &
                    ((1 << (HiveParser.KW_WEEK - 270)) |
                      (1 << (HiveParser.KW_DAY - 270)) |
                      (1 << (HiveParser.KW_DOW - 270)) |
                      (1 << (HiveParser.KW_HOUR - 270)) |
                      (1 << (HiveParser.KW_MINUTE - 270)) |
                      (1 << (HiveParser.KW_SECOND - 270)) |
                      (1 << (HiveParser.KW_TRANSACTION - 270)) |
                      (1 << (HiveParser.KW_WORK - 270)) |
                      (1 << (HiveParser.KW_WRITE - 270)) |
                      (1 << (HiveParser.KW_ISOLATION - 270)) |
                      (1 << (HiveParser.KW_LEVEL - 270)) |
                      (1 << (HiveParser.KW_SNAPSHOT - 270)) |
                      (1 << (HiveParser.KW_AUTOCOMMIT - 270)) |
                      (1 << (HiveParser.KW_CACHE - 270)) |
                      (1 << (HiveParser.KW_ENFORCED - 270)) |
                      (1 << (HiveParser.KW_VALIDATE - 270)) |
                      (1 << (HiveParser.KW_NOVALIDATE - 270)) |
                      (1 << (HiveParser.KW_RELY - 270)) |
                      (1 << (HiveParser.KW_NORELY - 270)) |
                      (1 << (HiveParser.KW_KEY - 270)) |
                      (1 << (HiveParser.KW_ABORT - 270)))) !==
                    0) ||
                (((_la - 303) & ~0x1f) == 0 &&
                  ((1 << (_la - 303)) &
                    ((1 << (HiveParser.KW_MATCHED - 303)) |
                      (1 << (HiveParser.KW_REPL - 303)) |
                      (1 << (HiveParser.KW_DUMP - 303)) |
                      (1 << (HiveParser.KW_STATUS - 303)) |
                      (1 << (HiveParser.KW_VECTORIZATION - 303)) |
                      (1 << (HiveParser.KW_SUMMARY - 303)) |
                      (1 << (HiveParser.KW_OPERATOR - 303)) |
                      (1 << (HiveParser.KW_EXPRESSION - 303)) |
                      (1 << (HiveParser.KW_DETAIL - 303)) |
                      (1 << (HiveParser.KW_WAIT - 303)) |
                      (1 << (HiveParser.KW_RESOURCE - 303)) |
                      (1 << (HiveParser.KW_PLAN - 303)) |
                      (1 << (HiveParser.KW_QUERY_PARALLELISM - 303)) |
                      (1 << (HiveParser.KW_PLANS - 303)) |
                      (1 << (HiveParser.KW_ACTIVATE - 303)) |
                      (1 << (HiveParser.KW_DEFAULT - 303)) |
                      (1 << (HiveParser.KW_CHECK - 303)) |
                      (1 << (HiveParser.KW_POOL - 303)) |
                      (1 << (HiveParser.KW_MOVE - 303)) |
                      (1 << (HiveParser.KW_DO - 303)) |
                      (1 << (HiveParser.KW_ALLOC_FRACTION - 303)) |
                      (1 << (HiveParser.KW_SCHEDULING_POLICY - 303)) |
                      (1 << (HiveParser.KW_PATH - 303)) |
                      (1 << (HiveParser.KW_MAPPING - 303)) |
                      (1 << (HiveParser.KW_WORKLOAD - 303)) |
                      (1 << (HiveParser.KW_MANAGEMENT - 303)) |
                      (1 << (HiveParser.KW_ACTIVE - 303)) |
                      (1 << (HiveParser.KW_UNMANAGED - 303)))) !==
                    0) ||
                (((_la - 338) & ~0x1f) == 0 &&
                  ((1 << (_la - 338)) &
                    ((1 << (HiveParser.KW_DELTA - 338)) |
                      (1 << (HiveParser.KW_CSV - 338)) |
                      (1 << (HiveParser.KW_JSON - 338)) |
                      (1 << (HiveParser.KW_BLOOMFILTER - 338)) |
                      (1 << (HiveParser.LCURLY - 338)))) !==
                    0) ||
                _la === HiveParser.Identifier
              ) {
                this.state = 1912;
                this.partTypeExpr();
              }

              this.state = 1916;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === HiveParser.KW_EXTENDED) {
                this.state = 1915;
                this.match(HiveParser.KW_EXTENDED);
              }

              break;
          }
          break;

        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 1920;
          this.match(HiveParser.KW_SHOW);
          this.state = 1921;
          this.match(HiveParser.KW_COMPACTIONS);
          break;

        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 1922;
          this.match(HiveParser.KW_SHOW);
          this.state = 1923;
          this.match(HiveParser.KW_TRANSACTIONS);
          break;

        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 1924;
          this.match(HiveParser.KW_SHOW);
          this.state = 1925;
          this.match(HiveParser.KW_CONF);
          this.state = 1926;
          this.match(HiveParser.StringLiteral);
          break;

        case 15:
          this.enterOuterAlt(localctx, 15);
          this.state = 1927;
          this.match(HiveParser.KW_SHOW);
          this.state = 1928;
          this.match(HiveParser.KW_RESOURCE);
          this.state = 1932;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case HiveParser.KW_PLAN:
              this.state = 1929;
              this.match(HiveParser.KW_PLAN);
              this.state = 1930;
              this.identifier();
              break;
            case HiveParser.KW_PLANS:
              this.state = 1931;
              this.match(HiveParser.KW_PLANS);
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  lockStatement() {
    let localctx = new LockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, HiveParser.RULE_lockStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1936;
      this.match(HiveParser.KW_LOCK);
      this.state = 1937;
      this.match(HiveParser.KW_TABLE);
      this.state = 1938;
      this.tableName();
      this.state = 1940;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_PARTITION) {
        this.state = 1939;
        this.partitionSpec();
      }

      this.state = 1942;
      this.lockMode();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  lockDatabase() {
    let localctx = new LockDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, HiveParser.RULE_lockDatabase);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1944;
      this.match(HiveParser.KW_LOCK);
      this.state = 1945;
      _la = this._input.LA(1);
      if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 1946;
      this.identifier();
      this.state = 1947;
      this.lockMode();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  lockMode() {
    let localctx = new LockModeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, HiveParser.RULE_lockMode);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1949;
      _la = this._input.LA(1);
      if (!(_la === HiveParser.KW_SHARED || _la === HiveParser.KW_EXCLUSIVE)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  unlockStatement() {
    let localctx = new UnlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, HiveParser.RULE_unlockStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1951;
      this.match(HiveParser.KW_UNLOCK);
      this.state = 1952;
      this.match(HiveParser.KW_TABLE);
      this.state = 1953;
      this.tableName();
      this.state = 1955;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_PARTITION) {
        this.state = 1954;
        this.partitionSpec();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  unlockDatabase() {
    let localctx = new UnlockDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, HiveParser.RULE_unlockDatabase);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1957;
      this.match(HiveParser.KW_UNLOCK);
      this.state = 1958;
      _la = this._input.LA(1);
      if (!(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 1959;
      this.identifier();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createRoleStatement() {
    let localctx = new CreateRoleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, HiveParser.RULE_createRoleStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1961;
      this.match(HiveParser.KW_CREATE);
      this.state = 1962;
      this.match(HiveParser.KW_ROLE);
      this.state = 1963;
      this.identifier();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropRoleStatement() {
    let localctx = new DropRoleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, HiveParser.RULE_dropRoleStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1965;
      this.match(HiveParser.KW_DROP);
      this.state = 1966;
      this.match(HiveParser.KW_ROLE);
      this.state = 1967;
      this.identifier();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  grantPrivileges() {
    let localctx = new GrantPrivilegesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, HiveParser.RULE_grantPrivileges);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1969;
      this.match(HiveParser.KW_GRANT);
      this.state = 1970;
      this.privilegeList();
      this.state = 1972;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_ON) {
        this.state = 1971;
        this.privilegeObject();
      }

      this.state = 1974;
      this.match(HiveParser.KW_TO);
      this.state = 1975;
      this.principalSpecification();
      this.state = 1977;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WITH) {
        this.state = 1976;
        this.withGrantOption();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  revokePrivileges() {
    let localctx = new RevokePrivilegesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, HiveParser.RULE_revokePrivileges);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1979;
      this.match(HiveParser.KW_REVOKE);
      this.state = 1981;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_GRANT) {
        this.state = 1980;
        this.grantOptionFor();
      }

      this.state = 1983;
      this.privilegeList();
      this.state = 1985;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_ON) {
        this.state = 1984;
        this.privilegeObject();
      }

      this.state = 1987;
      this.match(HiveParser.KW_FROM);
      this.state = 1988;
      this.principalSpecification();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  grantRole() {
    let localctx = new GrantRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, HiveParser.RULE_grantRole);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1990;
      this.match(HiveParser.KW_GRANT);
      this.state = 1992;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 157, this._ctx);
      if (la_ === 1) {
        this.state = 1991;
        this.match(HiveParser.KW_ROLE);
      }
      this.state = 1994;
      this.identifier();
      this.state = 1999;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 1995;
        this.match(HiveParser.COMMA);
        this.state = 1996;
        this.identifier();
        this.state = 2001;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 2002;
      this.match(HiveParser.KW_TO);
      this.state = 2003;
      this.principalSpecification();
      this.state = 2005;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WITH) {
        this.state = 2004;
        this.withAdminOption();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  revokeRole() {
    let localctx = new RevokeRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, HiveParser.RULE_revokeRole);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2007;
      this.match(HiveParser.KW_REVOKE);
      this.state = 2009;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 160, this._ctx);
      if (la_ === 1) {
        this.state = 2008;
        this.adminOptionFor();
      }
      this.state = 2012;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 161, this._ctx);
      if (la_ === 1) {
        this.state = 2011;
        this.match(HiveParser.KW_ROLE);
      }
      this.state = 2014;
      this.identifier();
      this.state = 2019;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 2015;
        this.match(HiveParser.COMMA);
        this.state = 2016;
        this.identifier();
        this.state = 2021;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 2022;
      this.match(HiveParser.KW_FROM);
      this.state = 2023;
      this.principalSpecification();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  showRoleGrants() {
    let localctx = new ShowRoleGrantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, HiveParser.RULE_showRoleGrants);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2025;
      this.match(HiveParser.KW_SHOW);
      this.state = 2026;
      this.match(HiveParser.KW_ROLE);
      this.state = 2027;
      this.match(HiveParser.KW_GRANT);
      this.state = 2028;
      this.principalName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  showRoles() {
    let localctx = new ShowRolesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, HiveParser.RULE_showRoles);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2030;
      this.match(HiveParser.KW_SHOW);
      this.state = 2031;
      this.match(HiveParser.KW_ROLES);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  showCurrentRole() {
    let localctx = new ShowCurrentRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, HiveParser.RULE_showCurrentRole);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2033;
      this.match(HiveParser.KW_SHOW);
      this.state = 2034;
      this.match(HiveParser.KW_CURRENT);
      this.state = 2035;
      this.match(HiveParser.KW_ROLES);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  setRole() {
    let localctx = new SetRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, HiveParser.RULE_setRole);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2037;
      this.match(HiveParser.KW_SET);
      this.state = 2038;
      this.match(HiveParser.KW_ROLE);
      this.state = 2042;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_ALL:
          this.state = 2039;
          this.match(HiveParser.KW_ALL);
          break;
        case HiveParser.KW_NONE:
          this.state = 2040;
          this.match(HiveParser.KW_NONE);
          break;
        case HiveParser.KW_IF:
        case HiveParser.KW_ASC:
        case HiveParser.KW_DESC:
        case HiveParser.KW_NULLS:
        case HiveParser.KW_LAST:
        case HiveParser.KW_OVERWRITE:
        case HiveParser.KW_PARTITIONS:
        case HiveParser.KW_TABLES:
        case HiveParser.KW_COLUMNS:
        case HiveParser.KW_INDEX:
        case HiveParser.KW_INDEXES:
        case HiveParser.KW_REBUILD:
        case HiveParser.KW_FUNCTIONS:
        case HiveParser.KW_SHOW:
        case HiveParser.KW_MSCK:
        case HiveParser.KW_REPAIR:
        case HiveParser.KW_DIRECTORY:
        case HiveParser.KW_CLUSTER:
        case HiveParser.KW_DISTRIBUTE:
        case HiveParser.KW_SORT:
        case HiveParser.KW_LOAD:
        case HiveParser.KW_EXPORT:
        case HiveParser.KW_REPLICATION:
        case HiveParser.KW_METADATA:
        case HiveParser.KW_DATA:
        case HiveParser.KW_INPATH:
        case HiveParser.KW_CHANGE:
        case HiveParser.KW_FIRST:
        case HiveParser.KW_AFTER:
        case HiveParser.KW_RENAME:
        case HiveParser.KW_COMMENT:
        case HiveParser.KW_BOOLEAN:
        case HiveParser.KW_TINYINT:
        case HiveParser.KW_SMALLINT:
        case HiveParser.KW_INT:
        case HiveParser.KW_BIGINT:
        case HiveParser.KW_FLOAT:
        case HiveParser.KW_DOUBLE:
        case HiveParser.KW_DATE:
        case HiveParser.KW_DATETIME:
        case HiveParser.KW_TIMESTAMP:
        case HiveParser.KW_TIME:
        case HiveParser.KW_ZONE:
        case HiveParser.KW_STRING:
        case HiveParser.KW_ARRAY:
        case HiveParser.KW_STRUCT:
        case HiveParser.KW_MAP:
        case HiveParser.KW_UNIONTYPE:
        case HiveParser.KW_PARTITIONED:
        case HiveParser.KW_CLUSTERED:
        case HiveParser.KW_SORTED:
        case HiveParser.KW_BUCKETS:
        case HiveParser.KW_FORMAT:
        case HiveParser.KW_DELIMITED:
        case HiveParser.KW_FIELDS:
        case HiveParser.KW_TERMINATED:
        case HiveParser.KW_ESCAPED:
        case HiveParser.KW_COLLECTION:
        case HiveParser.KW_ITEMS:
        case HiveParser.KW_KEYS:
        case HiveParser.KW_KEY_TYPE:
        case HiveParser.KW_KILL:
        case HiveParser.KW_LINES:
        case HiveParser.KW_STORED:
        case HiveParser.KW_FILEFORMAT:
        case HiveParser.KW_INPUTFORMAT:
        case HiveParser.KW_OUTPUTFORMAT:
        case HiveParser.KW_INPUTDRIVER:
        case HiveParser.KW_OUTPUTDRIVER:
        case HiveParser.KW_ENABLE:
        case HiveParser.KW_DISABLE:
        case HiveParser.KW_LOCATION:
        case HiveParser.KW_BUCKET:
        case HiveParser.KW_ADD:
        case HiveParser.KW_REPLACE:
        case HiveParser.KW_TEMPORARY:
        case HiveParser.KW_FILE:
        case HiveParser.KW_JAR:
        case HiveParser.KW_EXPLAIN:
        case HiveParser.KW_FORMATTED:
        case HiveParser.KW_DEPENDENCY:
        case HiveParser.KW_LOGICAL:
        case HiveParser.KW_SERDE:
        case HiveParser.KW_DEFERRED:
        case HiveParser.KW_SERDEPROPERTIES:
        case HiveParser.KW_DBPROPERTIES:
        case HiveParser.KW_LIMIT:
        case HiveParser.KW_OFFSET:
        case HiveParser.KW_UNSET:
        case HiveParser.KW_TBLPROPERTIES:
        case HiveParser.KW_IDXPROPERTIES:
        case HiveParser.KW_VALUE_TYPE:
        case HiveParser.KW_ELEM_TYPE:
        case HiveParser.KW_DEFINED:
        case HiveParser.KW_MAPJOIN:
        case HiveParser.KW_STREAMTABLE:
        case HiveParser.KW_CLUSTERSTATUS:
        case HiveParser.KW_UTC:
        case HiveParser.KW_UTCTIMESTAMP:
        case HiveParser.KW_LONG:
        case HiveParser.KW_PLUS:
        case HiveParser.KW_VIEW:
        case HiveParser.KW_VIEWS:
        case HiveParser.KW_DATABASES:
        case HiveParser.KW_MATERIALIZED:
        case HiveParser.KW_SCHEMA:
        case HiveParser.KW_SCHEMAS:
        case HiveParser.KW_SSL:
        case HiveParser.KW_UNDO:
        case HiveParser.KW_LOCK:
        case HiveParser.KW_LOCKS:
        case HiveParser.KW_UNLOCK:
        case HiveParser.KW_SHARED:
        case HiveParser.KW_EXCLUSIVE:
        case HiveParser.KW_UNSIGNED:
        case HiveParser.KW_WHILE:
        case HiveParser.KW_READ:
        case HiveParser.KW_PURGE:
        case HiveParser.KW_ANALYZE:
        case HiveParser.KW_BEFORE:
        case HiveParser.KW_BINARY:
        case HiveParser.KW_CONTINUE:
        case HiveParser.KW_RECORDREADER:
        case HiveParser.KW_RECORDWRITER:
        case HiveParser.KW_SEMI:
        case HiveParser.KW_TOUCH:
        case HiveParser.KW_ARCHIVE:
        case HiveParser.KW_UNARCHIVE:
        case HiveParser.KW_COMPUTE:
        case HiveParser.KW_STATISTICS:
        case HiveParser.KW_USE:
        case HiveParser.KW_OPTION:
        case HiveParser.KW_CONCATENATE:
        case HiveParser.KW_SHOW_DATABASE:
        case HiveParser.KW_RESTRICT:
        case HiveParser.KW_CASCADE:
        case HiveParser.KW_SKEWED:
        case HiveParser.KW_DIRECTORIES:
        case HiveParser.KW_CURRENT_DATE:
        case HiveParser.KW_CURRENT_TIMESTAMP:
        case HiveParser.KW_GROUPING:
        case HiveParser.KW_SETS:
        case HiveParser.KW_NOSCAN:
        case HiveParser.KW_ROLE:
        case HiveParser.KW_ROLES:
        case HiveParser.KW_URI:
        case HiveParser.KW_SERVER:
        case HiveParser.KW_ADMIN:
        case HiveParser.KW_OWNER:
        case HiveParser.KW_PRINCIPALS:
        case HiveParser.KW_COMPACT:
        case HiveParser.KW_COMPACTIONS:
        case HiveParser.KW_TRANSACTIONS:
        case HiveParser.KW_REWRITE:
        case HiveParser.KW_REOPTIMIZATION:
        case HiveParser.KW_RELOAD:
        case HiveParser.KW_YEAR:
        case HiveParser.KW_QUERY:
        case HiveParser.KW_QUARTER:
        case HiveParser.KW_MONTH:
        case HiveParser.KW_WEEK:
        case HiveParser.KW_DAY:
        case HiveParser.KW_DOW:
        case HiveParser.KW_HOUR:
        case HiveParser.KW_MINUTE:
        case HiveParser.KW_SECOND:
        case HiveParser.KW_TRANSACTION:
        case HiveParser.KW_WORK:
        case HiveParser.KW_WRITE:
        case HiveParser.KW_ISOLATION:
        case HiveParser.KW_LEVEL:
        case HiveParser.KW_SNAPSHOT:
        case HiveParser.KW_AUTOCOMMIT:
        case HiveParser.KW_CACHE:
        case HiveParser.KW_ENFORCED:
        case HiveParser.KW_VALIDATE:
        case HiveParser.KW_NOVALIDATE:
        case HiveParser.KW_RELY:
        case HiveParser.KW_NORELY:
        case HiveParser.KW_KEY:
        case HiveParser.KW_ABORT:
        case HiveParser.KW_MATCHED:
        case HiveParser.KW_REPL:
        case HiveParser.KW_DUMP:
        case HiveParser.KW_STATUS:
        case HiveParser.KW_VECTORIZATION:
        case HiveParser.KW_SUMMARY:
        case HiveParser.KW_OPERATOR:
        case HiveParser.KW_EXPRESSION:
        case HiveParser.KW_DETAIL:
        case HiveParser.KW_WAIT:
        case HiveParser.KW_RESOURCE:
        case HiveParser.KW_PLAN:
        case HiveParser.KW_QUERY_PARALLELISM:
        case HiveParser.KW_PLANS:
        case HiveParser.KW_ACTIVATE:
        case HiveParser.KW_DEFAULT:
        case HiveParser.KW_CHECK:
        case HiveParser.KW_POOL:
        case HiveParser.KW_MOVE:
        case HiveParser.KW_DO:
        case HiveParser.KW_ALLOC_FRACTION:
        case HiveParser.KW_SCHEDULING_POLICY:
        case HiveParser.KW_PATH:
        case HiveParser.KW_MAPPING:
        case HiveParser.KW_WORKLOAD:
        case HiveParser.KW_MANAGEMENT:
        case HiveParser.KW_ACTIVE:
        case HiveParser.KW_UNMANAGED:
        case HiveParser.KW_DELTA:
        case HiveParser.KW_CSV:
        case HiveParser.KW_JSON:
        case HiveParser.KW_BLOOMFILTER:
        case HiveParser.LCURLY:
        case HiveParser.Identifier:
          this.state = 2041;
          this.identifier();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  showGrants() {
    let localctx = new ShowGrantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, HiveParser.RULE_showGrants);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2044;
      this.match(HiveParser.KW_SHOW);
      this.state = 2045;
      this.match(HiveParser.KW_GRANT);
      this.state = 2047;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        _la === HiveParser.KW_GROUP ||
        _la === HiveParser.KW_USER ||
        _la === HiveParser.KW_ROLE
      ) {
        this.state = 2046;
        this.principalName();
      }

      this.state = 2051;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_ON) {
        this.state = 2049;
        this.match(HiveParser.KW_ON);
        this.state = 2050;
        this.privilegeIncludeColObject();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  showRolePrincipals() {
    let localctx = new ShowRolePrincipalsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, HiveParser.RULE_showRolePrincipals);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2053;
      this.match(HiveParser.KW_SHOW);
      this.state = 2054;
      this.match(HiveParser.KW_PRINCIPALS);
      this.state = 2055;
      this.identifier();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  privilegeIncludeColObject() {
    let localctx = new PrivilegeIncludeColObjectContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 242, HiveParser.RULE_privilegeIncludeColObject);
    try {
      this.state = 2059;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_ALL:
          this.enterOuterAlt(localctx, 1);
          this.state = 2057;
          this.match(HiveParser.KW_ALL);
          break;
        case HiveParser.KW_IF:
        case HiveParser.KW_ASC:
        case HiveParser.KW_DESC:
        case HiveParser.KW_NULLS:
        case HiveParser.KW_LAST:
        case HiveParser.KW_OVERWRITE:
        case HiveParser.KW_PARTITIONS:
        case HiveParser.KW_TABLE:
        case HiveParser.KW_TABLES:
        case HiveParser.KW_COLUMNS:
        case HiveParser.KW_INDEX:
        case HiveParser.KW_INDEXES:
        case HiveParser.KW_REBUILD:
        case HiveParser.KW_FUNCTIONS:
        case HiveParser.KW_SHOW:
        case HiveParser.KW_MSCK:
        case HiveParser.KW_REPAIR:
        case HiveParser.KW_DIRECTORY:
        case HiveParser.KW_CLUSTER:
        case HiveParser.KW_DISTRIBUTE:
        case HiveParser.KW_SORT:
        case HiveParser.KW_LOAD:
        case HiveParser.KW_EXPORT:
        case HiveParser.KW_REPLICATION:
        case HiveParser.KW_METADATA:
        case HiveParser.KW_DATA:
        case HiveParser.KW_INPATH:
        case HiveParser.KW_CHANGE:
        case HiveParser.KW_FIRST:
        case HiveParser.KW_AFTER:
        case HiveParser.KW_RENAME:
        case HiveParser.KW_COMMENT:
        case HiveParser.KW_BOOLEAN:
        case HiveParser.KW_TINYINT:
        case HiveParser.KW_SMALLINT:
        case HiveParser.KW_INT:
        case HiveParser.KW_BIGINT:
        case HiveParser.KW_FLOAT:
        case HiveParser.KW_DOUBLE:
        case HiveParser.KW_DATE:
        case HiveParser.KW_DATETIME:
        case HiveParser.KW_TIMESTAMP:
        case HiveParser.KW_TIME:
        case HiveParser.KW_ZONE:
        case HiveParser.KW_STRING:
        case HiveParser.KW_ARRAY:
        case HiveParser.KW_STRUCT:
        case HiveParser.KW_MAP:
        case HiveParser.KW_UNIONTYPE:
        case HiveParser.KW_PARTITIONED:
        case HiveParser.KW_CLUSTERED:
        case HiveParser.KW_SORTED:
        case HiveParser.KW_BUCKETS:
        case HiveParser.KW_FORMAT:
        case HiveParser.KW_DELIMITED:
        case HiveParser.KW_FIELDS:
        case HiveParser.KW_TERMINATED:
        case HiveParser.KW_ESCAPED:
        case HiveParser.KW_COLLECTION:
        case HiveParser.KW_ITEMS:
        case HiveParser.KW_KEYS:
        case HiveParser.KW_KEY_TYPE:
        case HiveParser.KW_KILL:
        case HiveParser.KW_LINES:
        case HiveParser.KW_STORED:
        case HiveParser.KW_FILEFORMAT:
        case HiveParser.KW_INPUTFORMAT:
        case HiveParser.KW_OUTPUTFORMAT:
        case HiveParser.KW_INPUTDRIVER:
        case HiveParser.KW_OUTPUTDRIVER:
        case HiveParser.KW_ENABLE:
        case HiveParser.KW_DISABLE:
        case HiveParser.KW_LOCATION:
        case HiveParser.KW_BUCKET:
        case HiveParser.KW_ADD:
        case HiveParser.KW_REPLACE:
        case HiveParser.KW_TEMPORARY:
        case HiveParser.KW_FILE:
        case HiveParser.KW_JAR:
        case HiveParser.KW_EXPLAIN:
        case HiveParser.KW_FORMATTED:
        case HiveParser.KW_DEPENDENCY:
        case HiveParser.KW_LOGICAL:
        case HiveParser.KW_SERDE:
        case HiveParser.KW_DEFERRED:
        case HiveParser.KW_SERDEPROPERTIES:
        case HiveParser.KW_DBPROPERTIES:
        case HiveParser.KW_LIMIT:
        case HiveParser.KW_OFFSET:
        case HiveParser.KW_UNSET:
        case HiveParser.KW_TBLPROPERTIES:
        case HiveParser.KW_IDXPROPERTIES:
        case HiveParser.KW_VALUE_TYPE:
        case HiveParser.KW_ELEM_TYPE:
        case HiveParser.KW_DEFINED:
        case HiveParser.KW_MAPJOIN:
        case HiveParser.KW_STREAMTABLE:
        case HiveParser.KW_CLUSTERSTATUS:
        case HiveParser.KW_UTC:
        case HiveParser.KW_UTCTIMESTAMP:
        case HiveParser.KW_LONG:
        case HiveParser.KW_PLUS:
        case HiveParser.KW_VIEW:
        case HiveParser.KW_VIEWS:
        case HiveParser.KW_DATABASE:
        case HiveParser.KW_DATABASES:
        case HiveParser.KW_MATERIALIZED:
        case HiveParser.KW_SCHEMA:
        case HiveParser.KW_SCHEMAS:
        case HiveParser.KW_SSL:
        case HiveParser.KW_UNDO:
        case HiveParser.KW_LOCK:
        case HiveParser.KW_LOCKS:
        case HiveParser.KW_UNLOCK:
        case HiveParser.KW_SHARED:
        case HiveParser.KW_EXCLUSIVE:
        case HiveParser.KW_UNSIGNED:
        case HiveParser.KW_WHILE:
        case HiveParser.KW_READ:
        case HiveParser.KW_PURGE:
        case HiveParser.KW_ANALYZE:
        case HiveParser.KW_BEFORE:
        case HiveParser.KW_BINARY:
        case HiveParser.KW_CONTINUE:
        case HiveParser.KW_RECORDREADER:
        case HiveParser.KW_RECORDWRITER:
        case HiveParser.KW_SEMI:
        case HiveParser.KW_TOUCH:
        case HiveParser.KW_ARCHIVE:
        case HiveParser.KW_UNARCHIVE:
        case HiveParser.KW_COMPUTE:
        case HiveParser.KW_STATISTICS:
        case HiveParser.KW_USE:
        case HiveParser.KW_OPTION:
        case HiveParser.KW_CONCATENATE:
        case HiveParser.KW_SHOW_DATABASE:
        case HiveParser.KW_RESTRICT:
        case HiveParser.KW_CASCADE:
        case HiveParser.KW_SKEWED:
        case HiveParser.KW_DIRECTORIES:
        case HiveParser.KW_CURRENT_DATE:
        case HiveParser.KW_CURRENT_TIMESTAMP:
        case HiveParser.KW_GROUPING:
        case HiveParser.KW_SETS:
        case HiveParser.KW_NOSCAN:
        case HiveParser.KW_ROLE:
        case HiveParser.KW_ROLES:
        case HiveParser.KW_URI:
        case HiveParser.KW_SERVER:
        case HiveParser.KW_ADMIN:
        case HiveParser.KW_OWNER:
        case HiveParser.KW_PRINCIPALS:
        case HiveParser.KW_COMPACT:
        case HiveParser.KW_COMPACTIONS:
        case HiveParser.KW_TRANSACTIONS:
        case HiveParser.KW_REWRITE:
        case HiveParser.KW_REOPTIMIZATION:
        case HiveParser.KW_RELOAD:
        case HiveParser.KW_YEAR:
        case HiveParser.KW_QUERY:
        case HiveParser.KW_QUARTER:
        case HiveParser.KW_MONTH:
        case HiveParser.KW_WEEK:
        case HiveParser.KW_DAY:
        case HiveParser.KW_DOW:
        case HiveParser.KW_HOUR:
        case HiveParser.KW_MINUTE:
        case HiveParser.KW_SECOND:
        case HiveParser.KW_TRANSACTION:
        case HiveParser.KW_WORK:
        case HiveParser.KW_WRITE:
        case HiveParser.KW_ISOLATION:
        case HiveParser.KW_LEVEL:
        case HiveParser.KW_SNAPSHOT:
        case HiveParser.KW_AUTOCOMMIT:
        case HiveParser.KW_CACHE:
        case HiveParser.KW_ENFORCED:
        case HiveParser.KW_VALIDATE:
        case HiveParser.KW_NOVALIDATE:
        case HiveParser.KW_RELY:
        case HiveParser.KW_NORELY:
        case HiveParser.KW_KEY:
        case HiveParser.KW_ABORT:
        case HiveParser.KW_MATCHED:
        case HiveParser.KW_REPL:
        case HiveParser.KW_DUMP:
        case HiveParser.KW_STATUS:
        case HiveParser.KW_VECTORIZATION:
        case HiveParser.KW_SUMMARY:
        case HiveParser.KW_OPERATOR:
        case HiveParser.KW_EXPRESSION:
        case HiveParser.KW_DETAIL:
        case HiveParser.KW_WAIT:
        case HiveParser.KW_RESOURCE:
        case HiveParser.KW_PLAN:
        case HiveParser.KW_QUERY_PARALLELISM:
        case HiveParser.KW_PLANS:
        case HiveParser.KW_ACTIVATE:
        case HiveParser.KW_DEFAULT:
        case HiveParser.KW_CHECK:
        case HiveParser.KW_POOL:
        case HiveParser.KW_MOVE:
        case HiveParser.KW_DO:
        case HiveParser.KW_ALLOC_FRACTION:
        case HiveParser.KW_SCHEDULING_POLICY:
        case HiveParser.KW_PATH:
        case HiveParser.KW_MAPPING:
        case HiveParser.KW_WORKLOAD:
        case HiveParser.KW_MANAGEMENT:
        case HiveParser.KW_ACTIVE:
        case HiveParser.KW_UNMANAGED:
        case HiveParser.KW_DELTA:
        case HiveParser.KW_CSV:
        case HiveParser.KW_JSON:
        case HiveParser.KW_BLOOMFILTER:
        case HiveParser.LCURLY:
        case HiveParser.Identifier:
          this.enterOuterAlt(localctx, 2);
          this.state = 2058;
          this.privObjectCols();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  privilegeObject() {
    let localctx = new PrivilegeObjectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, HiveParser.RULE_privilegeObject);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2061;
      this.match(HiveParser.KW_ON);
      this.state = 2062;
      this.privObject();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  privObject() {
    let localctx = new PrivObjectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, HiveParser.RULE_privObject);
    var _la = 0; // Token type
    try {
      this.state = 2077;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 169, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2064;
          _la = this._input.LA(1);
          if (
            !(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 2065;
          this.identifier();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2067;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_TABLE) {
            this.state = 2066;
            this.match(HiveParser.KW_TABLE);
          }

          this.state = 2069;
          this.tableName();
          this.state = 2071;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_PARTITION) {
            this.state = 2070;
            this.partitionSpec();
          }

          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2073;
          this.match(HiveParser.KW_URI);
          this.state = 2074;
          this.match(HiveParser.StringLiteral);
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 2075;
          this.match(HiveParser.KW_SERVER);
          this.state = 2076;
          this.identifier();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  privObjectCols() {
    let localctx = new PrivObjectColsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, HiveParser.RULE_privObjectCols);
    var _la = 0; // Token type
    try {
      this.state = 2098;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 173, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2079;
          _la = this._input.LA(1);
          if (
            !(_la === HiveParser.KW_DATABASE || _la === HiveParser.KW_SCHEMA)
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 2080;
          this.identifier();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2082;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_TABLE) {
            this.state = 2081;
            this.match(HiveParser.KW_TABLE);
          }

          this.state = 2084;
          this.tableName();
          this.state = 2089;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.LPAREN) {
            this.state = 2085;
            this.match(HiveParser.LPAREN);
            this.state = 2086;
            this.columnNameList();
            this.state = 2087;
            this.match(HiveParser.RPAREN);
          }

          this.state = 2092;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_PARTITION) {
            this.state = 2091;
            this.partitionSpec();
          }

          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2094;
          this.match(HiveParser.KW_URI);
          this.state = 2095;
          this.match(HiveParser.StringLiteral);
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 2096;
          this.match(HiveParser.KW_SERVER);
          this.state = 2097;
          this.identifier();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  privilegeList() {
    let localctx = new PrivilegeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, HiveParser.RULE_privilegeList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2100;
      this.privlegeDef();
      this.state = 2105;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 2101;
        this.match(HiveParser.COMMA);
        this.state = 2102;
        this.privlegeDef();
        this.state = 2107;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  privlegeDef() {
    let localctx = new PrivlegeDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, HiveParser.RULE_privlegeDef);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2108;
      this.privilegeType();
      this.state = 2113;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.LPAREN) {
        this.state = 2109;
        this.match(HiveParser.LPAREN);
        this.state = 2110;
        this.columnNameList();
        this.state = 2111;
        this.match(HiveParser.RPAREN);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  privilegeType() {
    let localctx = new PrivilegeTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, HiveParser.RULE_privilegeType);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2115;
      _la = this._input.LA(1);
      if (
        !(
          ((_la & ~0x1f) == 0 &&
            ((1 << _la) &
              ((1 << HiveParser.KW_ALL) |
                (1 << HiveParser.KW_SELECT) |
                (1 << HiveParser.KW_INSERT))) !==
              0) ||
          (((_la - 65) & ~0x1f) == 0 &&
            ((1 << (_la - 65)) &
              ((1 << (HiveParser.KW_CREATE - 65)) |
                (1 << (HiveParser.KW_ALTER - 65)) |
                (1 << (HiveParser.KW_DROP - 65)))) !==
              0) ||
          _la === HiveParser.KW_DELETE ||
          _la === HiveParser.KW_LOCK ||
          _la === HiveParser.KW_SHOW_DATABASE ||
          _la === HiveParser.KW_UPDATE
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  principalSpecification() {
    let localctx = new PrincipalSpecificationContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 256, HiveParser.RULE_principalSpecification);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2117;
      this.principalName();
      this.state = 2122;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 2118;
        this.match(HiveParser.COMMA);
        this.state = 2119;
        this.principalName();
        this.state = 2124;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  principalName() {
    let localctx = new PrincipalNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, HiveParser.RULE_principalName);
    try {
      this.state = 2131;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_USER:
          this.enterOuterAlt(localctx, 1);
          this.state = 2125;
          this.match(HiveParser.KW_USER);
          this.state = 2126;
          this.principalIdentifier();
          break;
        case HiveParser.KW_GROUP:
          this.enterOuterAlt(localctx, 2);
          this.state = 2127;
          this.match(HiveParser.KW_GROUP);
          this.state = 2128;
          this.principalIdentifier();
          break;
        case HiveParser.KW_ROLE:
          this.enterOuterAlt(localctx, 3);
          this.state = 2129;
          this.match(HiveParser.KW_ROLE);
          this.state = 2130;
          this.identifier();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  withGrantOption() {
    let localctx = new WithGrantOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, HiveParser.RULE_withGrantOption);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2133;
      this.match(HiveParser.KW_WITH);
      this.state = 2134;
      this.match(HiveParser.KW_GRANT);
      this.state = 2135;
      this.match(HiveParser.KW_OPTION);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  grantOptionFor() {
    let localctx = new GrantOptionForContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, HiveParser.RULE_grantOptionFor);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2137;
      this.match(HiveParser.KW_GRANT);
      this.state = 2138;
      this.match(HiveParser.KW_OPTION);
      this.state = 2139;
      this.match(HiveParser.KW_FOR);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  adminOptionFor() {
    let localctx = new AdminOptionForContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, HiveParser.RULE_adminOptionFor);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2141;
      this.match(HiveParser.KW_ADMIN);
      this.state = 2142;
      this.match(HiveParser.KW_OPTION);
      this.state = 2143;
      this.match(HiveParser.KW_FOR);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  withAdminOption() {
    let localctx = new WithAdminOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, HiveParser.RULE_withAdminOption);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2145;
      this.match(HiveParser.KW_WITH);
      this.state = 2146;
      this.match(HiveParser.KW_ADMIN);
      this.state = 2147;
      this.match(HiveParser.KW_OPTION);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  metastoreCheck() {
    let localctx = new MetastoreCheckContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, HiveParser.RULE_metastoreCheck);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2149;
      this.match(HiveParser.KW_MSCK);
      this.state = 2151;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_REPAIR) {
        this.state = 2150;
        this.match(HiveParser.KW_REPAIR);
      }

      this.state = 2162;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_TABLE:
          this.state = 2153;
          this.match(HiveParser.KW_TABLE);
          this.state = 2154;
          this.tableName();
          this.state = 2157;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (
            _la === HiveParser.KW_DROP ||
            _la === HiveParser.KW_ADD ||
            _la === HiveParser.KW_SYNC
          ) {
            this.state = 2155;
            _la = this._input.LA(1);
            if (
              !(
                _la === HiveParser.KW_DROP ||
                _la === HiveParser.KW_ADD ||
                _la === HiveParser.KW_SYNC
              )
            ) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 2156;
            this.match(HiveParser.KW_PARTITIONS);
          }

          break;
        case HiveParser.KW_PARTITION:
        case HiveParser.SEMICOLON:
          this.state = 2160;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_PARTITION) {
            this.state = 2159;
            this.partitionSpec();
          }

          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  resourceList() {
    let localctx = new ResourceListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, HiveParser.RULE_resourceList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2164;
      this.resource();
      this.state = 2169;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 2165;
        this.match(HiveParser.COMMA);
        this.state = 2166;
        this.resource();
        this.state = 2171;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  resource() {
    let localctx = new ResourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, HiveParser.RULE_resource);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2172;
      this.resourceType();
      this.state = 2173;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  resourceType() {
    let localctx = new ResourceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, HiveParser.RULE_resourceType);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2175;
      _la = this._input.LA(1);
      if (
        !(
          _la === HiveParser.KW_FILE ||
          _la === HiveParser.KW_JAR ||
          _la === HiveParser.KW_ARCHIVE
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createFunctionStatement() {
    let localctx = new CreateFunctionStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 276, HiveParser.RULE_createFunctionStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2177;
      this.match(HiveParser.KW_CREATE);
      this.state = 2179;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_TEMPORARY) {
        this.state = 2178;
        this.match(HiveParser.KW_TEMPORARY);
      }

      this.state = 2181;
      this.match(HiveParser.KW_FUNCTION);
      this.state = 2182;
      this.functionIdentifier();
      this.state = 2183;
      this.match(HiveParser.KW_AS);
      this.state = 2184;
      this.match(HiveParser.StringLiteral);
      this.state = 2187;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_USING) {
        this.state = 2185;
        this.match(HiveParser.KW_USING);
        this.state = 2186;
        this.resourceList();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropFunctionStatement() {
    let localctx = new DropFunctionStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 278, HiveParser.RULE_dropFunctionStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2189;
      this.match(HiveParser.KW_DROP);
      this.state = 2191;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_TEMPORARY) {
        this.state = 2190;
        this.match(HiveParser.KW_TEMPORARY);
      }

      this.state = 2193;
      this.match(HiveParser.KW_FUNCTION);
      this.state = 2195;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 186, this._ctx);
      if (la_ === 1) {
        this.state = 2194;
        this.ifExists();
      }
      this.state = 2197;
      this.functionIdentifier();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  reloadFunctionStatement() {
    let localctx = new ReloadFunctionStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 280, HiveParser.RULE_reloadFunctionStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2199;
      this.match(HiveParser.KW_RELOAD);
      this.state = 2200;
      this.match(HiveParser.KW_FUNCTION);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createMacroStatement() {
    let localctx = new CreateMacroStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, HiveParser.RULE_createMacroStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2202;
      this.match(HiveParser.KW_CREATE);
      this.state = 2203;
      this.match(HiveParser.KW_TEMPORARY);
      this.state = 2204;
      this.match(HiveParser.KW_MACRO);
      this.state = 2205;
      this.match(HiveParser.Identifier);
      this.state = 2206;
      this.match(HiveParser.LPAREN);
      this.state = 2208;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        ((_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << HiveParser.KW_IF) |
              (1 << HiveParser.KW_ASC) |
              (1 << HiveParser.KW_DESC) |
              (1 << HiveParser.KW_NULLS) |
              (1 << HiveParser.KW_LAST) |
              (1 << HiveParser.KW_OVERWRITE))) !==
            0) ||
        (((_la - 36) & ~0x1f) == 0 &&
          ((1 << (_la - 36)) &
            ((1 << (HiveParser.KW_PARTITIONS - 36)) |
              (1 << (HiveParser.KW_TABLES - 36)) |
              (1 << (HiveParser.KW_COLUMNS - 36)) |
              (1 << (HiveParser.KW_INDEX - 36)) |
              (1 << (HiveParser.KW_INDEXES - 36)) |
              (1 << (HiveParser.KW_REBUILD - 36)) |
              (1 << (HiveParser.KW_FUNCTIONS - 36)) |
              (1 << (HiveParser.KW_SHOW - 36)) |
              (1 << (HiveParser.KW_MSCK - 36)) |
              (1 << (HiveParser.KW_REPAIR - 36)) |
              (1 << (HiveParser.KW_DIRECTORY - 36)) |
              (1 << (HiveParser.KW_CLUSTER - 36)) |
              (1 << (HiveParser.KW_DISTRIBUTE - 36)) |
              (1 << (HiveParser.KW_SORT - 36)) |
              (1 << (HiveParser.KW_LOAD - 36)) |
              (1 << (HiveParser.KW_EXPORT - 36)) |
              (1 << (HiveParser.KW_REPLICATION - 36)) |
              (1 << (HiveParser.KW_METADATA - 36)) |
              (1 << (HiveParser.KW_DATA - 36)) |
              (1 << (HiveParser.KW_INPATH - 36)))) !==
            0) ||
        (((_la - 68) & ~0x1f) == 0 &&
          ((1 << (_la - 68)) &
            ((1 << (HiveParser.KW_CHANGE - 68)) |
              (1 << (HiveParser.KW_FIRST - 68)) |
              (1 << (HiveParser.KW_AFTER - 68)) |
              (1 << (HiveParser.KW_RENAME - 68)) |
              (1 << (HiveParser.KW_COMMENT - 68)) |
              (1 << (HiveParser.KW_BOOLEAN - 68)) |
              (1 << (HiveParser.KW_TINYINT - 68)) |
              (1 << (HiveParser.KW_SMALLINT - 68)) |
              (1 << (HiveParser.KW_INT - 68)) |
              (1 << (HiveParser.KW_BIGINT - 68)) |
              (1 << (HiveParser.KW_FLOAT - 68)) |
              (1 << (HiveParser.KW_DOUBLE - 68)) |
              (1 << (HiveParser.KW_DATE - 68)) |
              (1 << (HiveParser.KW_DATETIME - 68)) |
              (1 << (HiveParser.KW_TIMESTAMP - 68)) |
              (1 << (HiveParser.KW_TIME - 68)) |
              (1 << (HiveParser.KW_ZONE - 68)) |
              (1 << (HiveParser.KW_STRING - 68)) |
              (1 << (HiveParser.KW_ARRAY - 68)) |
              (1 << (HiveParser.KW_STRUCT - 68)) |
              (1 << (HiveParser.KW_MAP - 68)) |
              (1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
            0) ||
        (((_la - 101) & ~0x1f) == 0 &&
          ((1 << (_la - 101)) &
            ((1 << (HiveParser.KW_PARTITIONED - 101)) |
              (1 << (HiveParser.KW_CLUSTERED - 101)) |
              (1 << (HiveParser.KW_SORTED - 101)) |
              (1 << (HiveParser.KW_BUCKETS - 101)) |
              (1 << (HiveParser.KW_FORMAT - 101)) |
              (1 << (HiveParser.KW_DELIMITED - 101)) |
              (1 << (HiveParser.KW_FIELDS - 101)) |
              (1 << (HiveParser.KW_TERMINATED - 101)) |
              (1 << (HiveParser.KW_ESCAPED - 101)) |
              (1 << (HiveParser.KW_COLLECTION - 101)) |
              (1 << (HiveParser.KW_ITEMS - 101)) |
              (1 << (HiveParser.KW_KEYS - 101)) |
              (1 << (HiveParser.KW_KEY_TYPE - 101)) |
              (1 << (HiveParser.KW_KILL - 101)) |
              (1 << (HiveParser.KW_LINES - 101)) |
              (1 << (HiveParser.KW_STORED - 101)) |
              (1 << (HiveParser.KW_FILEFORMAT - 101)) |
              (1 << (HiveParser.KW_INPUTFORMAT - 101)) |
              (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
              (1 << (HiveParser.KW_INPUTDRIVER - 101)) |
              (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
              (1 << (HiveParser.KW_ENABLE - 101)) |
              (1 << (HiveParser.KW_DISABLE - 101)) |
              (1 << (HiveParser.KW_LOCATION - 101)) |
              (1 << (HiveParser.KW_BUCKET - 101)))) !==
            0) ||
        (((_la - 134) & ~0x1f) == 0 &&
          ((1 << (_la - 134)) &
            ((1 << (HiveParser.KW_ADD - 134)) |
              (1 << (HiveParser.KW_REPLACE - 134)) |
              (1 << (HiveParser.KW_TEMPORARY - 134)) |
              (1 << (HiveParser.KW_FILE - 134)) |
              (1 << (HiveParser.KW_JAR - 134)) |
              (1 << (HiveParser.KW_EXPLAIN - 134)) |
              (1 << (HiveParser.KW_FORMATTED - 134)) |
              (1 << (HiveParser.KW_DEPENDENCY - 134)) |
              (1 << (HiveParser.KW_LOGICAL - 134)) |
              (1 << (HiveParser.KW_SERDE - 134)) |
              (1 << (HiveParser.KW_DEFERRED - 134)) |
              (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
              (1 << (HiveParser.KW_DBPROPERTIES - 134)) |
              (1 << (HiveParser.KW_LIMIT - 134)) |
              (1 << (HiveParser.KW_OFFSET - 134)) |
              (1 << (HiveParser.KW_UNSET - 134)) |
              (1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
              (1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
              (1 << (HiveParser.KW_VALUE_TYPE - 134)) |
              (1 << (HiveParser.KW_ELEM_TYPE - 134)) |
              (1 << (HiveParser.KW_DEFINED - 134)))) !==
            0) ||
        (((_la - 167) & ~0x1f) == 0 &&
          ((1 << (_la - 167)) &
            ((1 << (HiveParser.KW_MAPJOIN - 167)) |
              (1 << (HiveParser.KW_STREAMTABLE - 167)) |
              (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
              (1 << (HiveParser.KW_UTC - 167)) |
              (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
              (1 << (HiveParser.KW_LONG - 167)) |
              (1 << (HiveParser.KW_PLUS - 167)) |
              (1 << (HiveParser.KW_VIEW - 167)) |
              (1 << (HiveParser.KW_VIEWS - 167)) |
              (1 << (HiveParser.KW_DATABASES - 167)) |
              (1 << (HiveParser.KW_MATERIALIZED - 167)) |
              (1 << (HiveParser.KW_SCHEMA - 167)) |
              (1 << (HiveParser.KW_SCHEMAS - 167)) |
              (1 << (HiveParser.KW_SSL - 167)) |
              (1 << (HiveParser.KW_UNDO - 167)) |
              (1 << (HiveParser.KW_LOCK - 167)) |
              (1 << (HiveParser.KW_LOCKS - 167)) |
              (1 << (HiveParser.KW_UNLOCK - 167)) |
              (1 << (HiveParser.KW_SHARED - 167)) |
              (1 << (HiveParser.KW_EXCLUSIVE - 167)) |
              (1 << (HiveParser.KW_UNSIGNED - 167)) |
              (1 << (HiveParser.KW_WHILE - 167)) |
              (1 << (HiveParser.KW_READ - 167)))) !==
            0) ||
        (((_la - 200) & ~0x1f) == 0 &&
          ((1 << (_la - 200)) &
            ((1 << (HiveParser.KW_PURGE - 200)) |
              (1 << (HiveParser.KW_ANALYZE - 200)) |
              (1 << (HiveParser.KW_BEFORE - 200)) |
              (1 << (HiveParser.KW_BINARY - 200)) |
              (1 << (HiveParser.KW_CONTINUE - 200)) |
              (1 << (HiveParser.KW_RECORDREADER - 200)) |
              (1 << (HiveParser.KW_RECORDWRITER - 200)) |
              (1 << (HiveParser.KW_SEMI - 200)) |
              (1 << (HiveParser.KW_TOUCH - 200)) |
              (1 << (HiveParser.KW_ARCHIVE - 200)) |
              (1 << (HiveParser.KW_UNARCHIVE - 200)) |
              (1 << (HiveParser.KW_COMPUTE - 200)) |
              (1 << (HiveParser.KW_STATISTICS - 200)) |
              (1 << (HiveParser.KW_USE - 200)) |
              (1 << (HiveParser.KW_OPTION - 200)) |
              (1 << (HiveParser.KW_CONCATENATE - 200)) |
              (1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
              (1 << (HiveParser.KW_RESTRICT - 200)) |
              (1 << (HiveParser.KW_CASCADE - 200)) |
              (1 << (HiveParser.KW_SKEWED - 200)) |
              (1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
            0) ||
        (((_la - 238) & ~0x1f) == 0 &&
          ((1 << (_la - 238)) &
            ((1 << (HiveParser.KW_CURRENT_DATE - 238)) |
              (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 238)) |
              (1 << (HiveParser.KW_GROUPING - 238)) |
              (1 << (HiveParser.KW_SETS - 238)) |
              (1 << (HiveParser.KW_NOSCAN - 238)) |
              (1 << (HiveParser.KW_ROLE - 238)) |
              (1 << (HiveParser.KW_ROLES - 238)) |
              (1 << (HiveParser.KW_URI - 238)) |
              (1 << (HiveParser.KW_SERVER - 238)) |
              (1 << (HiveParser.KW_ADMIN - 238)) |
              (1 << (HiveParser.KW_OWNER - 238)) |
              (1 << (HiveParser.KW_PRINCIPALS - 238)) |
              (1 << (HiveParser.KW_COMPACT - 238)) |
              (1 << (HiveParser.KW_COMPACTIONS - 238)) |
              (1 << (HiveParser.KW_TRANSACTIONS - 238)) |
              (1 << (HiveParser.KW_REWRITE - 238)) |
              (1 << (HiveParser.KW_REOPTIMIZATION - 238)) |
              (1 << (HiveParser.KW_RELOAD - 238)) |
              (1 << (HiveParser.KW_YEAR - 238)) |
              (1 << (HiveParser.KW_QUERY - 238)) |
              (1 << (HiveParser.KW_QUARTER - 238)) |
              (1 << (HiveParser.KW_MONTH - 238)))) !==
            0) ||
        (((_la - 270) & ~0x1f) == 0 &&
          ((1 << (_la - 270)) &
            ((1 << (HiveParser.KW_WEEK - 270)) |
              (1 << (HiveParser.KW_DAY - 270)) |
              (1 << (HiveParser.KW_DOW - 270)) |
              (1 << (HiveParser.KW_HOUR - 270)) |
              (1 << (HiveParser.KW_MINUTE - 270)) |
              (1 << (HiveParser.KW_SECOND - 270)) |
              (1 << (HiveParser.KW_TRANSACTION - 270)) |
              (1 << (HiveParser.KW_WORK - 270)) |
              (1 << (HiveParser.KW_WRITE - 270)) |
              (1 << (HiveParser.KW_ISOLATION - 270)) |
              (1 << (HiveParser.KW_LEVEL - 270)) |
              (1 << (HiveParser.KW_SNAPSHOT - 270)) |
              (1 << (HiveParser.KW_AUTOCOMMIT - 270)) |
              (1 << (HiveParser.KW_CACHE - 270)) |
              (1 << (HiveParser.KW_ENFORCED - 270)) |
              (1 << (HiveParser.KW_VALIDATE - 270)) |
              (1 << (HiveParser.KW_NOVALIDATE - 270)) |
              (1 << (HiveParser.KW_RELY - 270)) |
              (1 << (HiveParser.KW_NORELY - 270)) |
              (1 << (HiveParser.KW_KEY - 270)) |
              (1 << (HiveParser.KW_ABORT - 270)))) !==
            0) ||
        (((_la - 303) & ~0x1f) == 0 &&
          ((1 << (_la - 303)) &
            ((1 << (HiveParser.KW_MATCHED - 303)) |
              (1 << (HiveParser.KW_REPL - 303)) |
              (1 << (HiveParser.KW_DUMP - 303)) |
              (1 << (HiveParser.KW_STATUS - 303)) |
              (1 << (HiveParser.KW_VECTORIZATION - 303)) |
              (1 << (HiveParser.KW_SUMMARY - 303)) |
              (1 << (HiveParser.KW_OPERATOR - 303)) |
              (1 << (HiveParser.KW_EXPRESSION - 303)) |
              (1 << (HiveParser.KW_DETAIL - 303)) |
              (1 << (HiveParser.KW_WAIT - 303)) |
              (1 << (HiveParser.KW_RESOURCE - 303)) |
              (1 << (HiveParser.KW_PLAN - 303)) |
              (1 << (HiveParser.KW_QUERY_PARALLELISM - 303)) |
              (1 << (HiveParser.KW_PLANS - 303)) |
              (1 << (HiveParser.KW_ACTIVATE - 303)) |
              (1 << (HiveParser.KW_DEFAULT - 303)) |
              (1 << (HiveParser.KW_CHECK - 303)) |
              (1 << (HiveParser.KW_POOL - 303)) |
              (1 << (HiveParser.KW_MOVE - 303)) |
              (1 << (HiveParser.KW_DO - 303)) |
              (1 << (HiveParser.KW_ALLOC_FRACTION - 303)) |
              (1 << (HiveParser.KW_SCHEDULING_POLICY - 303)) |
              (1 << (HiveParser.KW_PATH - 303)) |
              (1 << (HiveParser.KW_MAPPING - 303)) |
              (1 << (HiveParser.KW_WORKLOAD - 303)) |
              (1 << (HiveParser.KW_MANAGEMENT - 303)) |
              (1 << (HiveParser.KW_ACTIVE - 303)) |
              (1 << (HiveParser.KW_UNMANAGED - 303)))) !==
            0) ||
        (((_la - 338) & ~0x1f) == 0 &&
          ((1 << (_la - 338)) &
            ((1 << (HiveParser.KW_DELTA - 338)) |
              (1 << (HiveParser.KW_CSV - 338)) |
              (1 << (HiveParser.KW_JSON - 338)) |
              (1 << (HiveParser.KW_BLOOMFILTER - 338)) |
              (1 << (HiveParser.LCURLY - 338)))) !==
            0) ||
        _la === HiveParser.Identifier
      ) {
        this.state = 2207;
        this.columnNameTypeList();
      }

      this.state = 2210;
      this.match(HiveParser.RPAREN);
      this.state = 2211;
      this.expression(0);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropMacroStatement() {
    let localctx = new DropMacroStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, HiveParser.RULE_dropMacroStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2213;
      this.match(HiveParser.KW_DROP);
      this.state = 2214;
      this.match(HiveParser.KW_TEMPORARY);
      this.state = 2215;
      this.match(HiveParser.KW_MACRO);
      this.state = 2217;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_IF) {
        this.state = 2216;
        this.ifExists();
      }

      this.state = 2219;
      this.match(HiveParser.Identifier);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createViewStatement() {
    let localctx = new CreateViewStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, HiveParser.RULE_createViewStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2221;
      this.match(HiveParser.KW_CREATE);
      this.state = 2223;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_OR) {
        this.state = 2222;
        this.orReplace();
      }

      this.state = 2225;
      this.match(HiveParser.KW_VIEW);
      this.state = 2227;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 190, this._ctx);
      if (la_ === 1) {
        this.state = 2226;
        this.ifNotExists();
      }
      this.state = 2229;
      this.tableName();
      this.state = 2234;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.LPAREN) {
        this.state = 2230;
        this.match(HiveParser.LPAREN);
        this.state = 2231;
        this.columnNameCommentList();
        this.state = 2232;
        this.match(HiveParser.RPAREN);
      }

      this.state = 2237;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_COMMENT) {
        this.state = 2236;
        this.tableComment();
      }

      this.state = 2240;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_PARTITIONED) {
        this.state = 2239;
        this.viewPartition();
      }

      this.state = 2243;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_TBLPROPERTIES) {
        this.state = 2242;
        this.tablePropertiesPrefixed();
      }

      this.state = 2245;
      this.match(HiveParser.KW_AS);
      this.state = 2246;
      this.selectStatementWithCTE();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createMaterializedViewStatement() {
    let localctx = new CreateMaterializedViewStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      288,
      HiveParser.RULE_createMaterializedViewStatement
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2248;
      this.match(HiveParser.KW_CREATE);
      this.state = 2249;
      this.match(HiveParser.KW_MATERIALIZED);
      this.state = 2250;
      this.match(HiveParser.KW_VIEW);
      this.state = 2252;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 195, this._ctx);
      if (la_ === 1) {
        this.state = 2251;
        this.ifNotExists();
      }
      this.state = 2254;
      this.tableName();
      this.state = 2256;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_DISABLE) {
        this.state = 2255;
        this.rewriteDisabled();
      }

      this.state = 2259;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_COMMENT) {
        this.state = 2258;
        this.tableComment();
      }

      this.state = 2262;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_ROW) {
        this.state = 2261;
        this.tableRowFormat();
      }

      this.state = 2265;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_STORED) {
        this.state = 2264;
        this.tableFileFormat();
      }

      this.state = 2268;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_LOCATION) {
        this.state = 2267;
        this.tableLocation();
      }

      this.state = 2271;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_TBLPROPERTIES) {
        this.state = 2270;
        this.tablePropertiesPrefixed();
      }

      this.state = 2273;
      this.match(HiveParser.KW_AS);
      this.state = 2274;
      this.selectStatementWithCTE();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  viewPartition() {
    let localctx = new ViewPartitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, HiveParser.RULE_viewPartition);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2276;
      this.match(HiveParser.KW_PARTITIONED);
      this.state = 2277;
      this.match(HiveParser.KW_ON);
      this.state = 2278;
      this.match(HiveParser.LPAREN);
      this.state = 2279;
      this.columnNameList();
      this.state = 2280;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropViewStatement() {
    let localctx = new DropViewStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, HiveParser.RULE_dropViewStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2282;
      this.match(HiveParser.KW_DROP);
      this.state = 2283;
      this.match(HiveParser.KW_VIEW);
      this.state = 2285;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 202, this._ctx);
      if (la_ === 1) {
        this.state = 2284;
        this.ifExists();
      }
      this.state = 2287;
      this.viewName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropMaterializedViewStatement() {
    let localctx = new DropMaterializedViewStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      294,
      HiveParser.RULE_dropMaterializedViewStatement
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2289;
      this.match(HiveParser.KW_DROP);
      this.state = 2290;
      this.match(HiveParser.KW_MATERIALIZED);
      this.state = 2291;
      this.match(HiveParser.KW_VIEW);
      this.state = 2293;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 203, this._ctx);
      if (la_ === 1) {
        this.state = 2292;
        this.ifExists();
      }
      this.state = 2295;
      this.viewName();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  showFunctionIdentifier() {
    let localctx = new ShowFunctionIdentifierContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 296, HiveParser.RULE_showFunctionIdentifier);
    try {
      this.state = 2299;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_IF:
        case HiveParser.KW_ASC:
        case HiveParser.KW_DESC:
        case HiveParser.KW_NULLS:
        case HiveParser.KW_LAST:
        case HiveParser.KW_OVERWRITE:
        case HiveParser.KW_PARTITIONS:
        case HiveParser.KW_TABLES:
        case HiveParser.KW_COLUMNS:
        case HiveParser.KW_INDEX:
        case HiveParser.KW_INDEXES:
        case HiveParser.KW_REBUILD:
        case HiveParser.KW_FUNCTIONS:
        case HiveParser.KW_SHOW:
        case HiveParser.KW_MSCK:
        case HiveParser.KW_REPAIR:
        case HiveParser.KW_DIRECTORY:
        case HiveParser.KW_CLUSTER:
        case HiveParser.KW_DISTRIBUTE:
        case HiveParser.KW_SORT:
        case HiveParser.KW_LOAD:
        case HiveParser.KW_EXPORT:
        case HiveParser.KW_REPLICATION:
        case HiveParser.KW_METADATA:
        case HiveParser.KW_DATA:
        case HiveParser.KW_INPATH:
        case HiveParser.KW_CHANGE:
        case HiveParser.KW_FIRST:
        case HiveParser.KW_AFTER:
        case HiveParser.KW_RENAME:
        case HiveParser.KW_COMMENT:
        case HiveParser.KW_BOOLEAN:
        case HiveParser.KW_TINYINT:
        case HiveParser.KW_SMALLINT:
        case HiveParser.KW_INT:
        case HiveParser.KW_BIGINT:
        case HiveParser.KW_FLOAT:
        case HiveParser.KW_DOUBLE:
        case HiveParser.KW_DATE:
        case HiveParser.KW_DATETIME:
        case HiveParser.KW_TIMESTAMP:
        case HiveParser.KW_TIME:
        case HiveParser.KW_ZONE:
        case HiveParser.KW_STRING:
        case HiveParser.KW_ARRAY:
        case HiveParser.KW_STRUCT:
        case HiveParser.KW_MAP:
        case HiveParser.KW_UNIONTYPE:
        case HiveParser.KW_PARTITIONED:
        case HiveParser.KW_CLUSTERED:
        case HiveParser.KW_SORTED:
        case HiveParser.KW_BUCKETS:
        case HiveParser.KW_FORMAT:
        case HiveParser.KW_DELIMITED:
        case HiveParser.KW_FIELDS:
        case HiveParser.KW_TERMINATED:
        case HiveParser.KW_ESCAPED:
        case HiveParser.KW_COLLECTION:
        case HiveParser.KW_ITEMS:
        case HiveParser.KW_KEYS:
        case HiveParser.KW_KEY_TYPE:
        case HiveParser.KW_KILL:
        case HiveParser.KW_LINES:
        case HiveParser.KW_STORED:
        case HiveParser.KW_FILEFORMAT:
        case HiveParser.KW_INPUTFORMAT:
        case HiveParser.KW_OUTPUTFORMAT:
        case HiveParser.KW_INPUTDRIVER:
        case HiveParser.KW_OUTPUTDRIVER:
        case HiveParser.KW_ENABLE:
        case HiveParser.KW_DISABLE:
        case HiveParser.KW_LOCATION:
        case HiveParser.KW_BUCKET:
        case HiveParser.KW_ADD:
        case HiveParser.KW_REPLACE:
        case HiveParser.KW_TEMPORARY:
        case HiveParser.KW_FILE:
        case HiveParser.KW_JAR:
        case HiveParser.KW_EXPLAIN:
        case HiveParser.KW_FORMATTED:
        case HiveParser.KW_DEPENDENCY:
        case HiveParser.KW_LOGICAL:
        case HiveParser.KW_SERDE:
        case HiveParser.KW_DEFERRED:
        case HiveParser.KW_SERDEPROPERTIES:
        case HiveParser.KW_DBPROPERTIES:
        case HiveParser.KW_LIMIT:
        case HiveParser.KW_OFFSET:
        case HiveParser.KW_UNSET:
        case HiveParser.KW_TBLPROPERTIES:
        case HiveParser.KW_IDXPROPERTIES:
        case HiveParser.KW_VALUE_TYPE:
        case HiveParser.KW_ELEM_TYPE:
        case HiveParser.KW_DEFINED:
        case HiveParser.KW_MAPJOIN:
        case HiveParser.KW_STREAMTABLE:
        case HiveParser.KW_CLUSTERSTATUS:
        case HiveParser.KW_UTC:
        case HiveParser.KW_UTCTIMESTAMP:
        case HiveParser.KW_LONG:
        case HiveParser.KW_PLUS:
        case HiveParser.KW_VIEW:
        case HiveParser.KW_VIEWS:
        case HiveParser.KW_DATABASES:
        case HiveParser.KW_MATERIALIZED:
        case HiveParser.KW_SCHEMA:
        case HiveParser.KW_SCHEMAS:
        case HiveParser.KW_SSL:
        case HiveParser.KW_UNDO:
        case HiveParser.KW_LOCK:
        case HiveParser.KW_LOCKS:
        case HiveParser.KW_UNLOCK:
        case HiveParser.KW_SHARED:
        case HiveParser.KW_EXCLUSIVE:
        case HiveParser.KW_UNSIGNED:
        case HiveParser.KW_WHILE:
        case HiveParser.KW_READ:
        case HiveParser.KW_PURGE:
        case HiveParser.KW_ANALYZE:
        case HiveParser.KW_BEFORE:
        case HiveParser.KW_BINARY:
        case HiveParser.KW_CONTINUE:
        case HiveParser.KW_RECORDREADER:
        case HiveParser.KW_RECORDWRITER:
        case HiveParser.KW_SEMI:
        case HiveParser.KW_TOUCH:
        case HiveParser.KW_ARCHIVE:
        case HiveParser.KW_UNARCHIVE:
        case HiveParser.KW_COMPUTE:
        case HiveParser.KW_STATISTICS:
        case HiveParser.KW_USE:
        case HiveParser.KW_OPTION:
        case HiveParser.KW_CONCATENATE:
        case HiveParser.KW_SHOW_DATABASE:
        case HiveParser.KW_RESTRICT:
        case HiveParser.KW_CASCADE:
        case HiveParser.KW_SKEWED:
        case HiveParser.KW_DIRECTORIES:
        case HiveParser.KW_CURRENT_DATE:
        case HiveParser.KW_CURRENT_TIMESTAMP:
        case HiveParser.KW_GROUPING:
        case HiveParser.KW_SETS:
        case HiveParser.KW_NOSCAN:
        case HiveParser.KW_ROLE:
        case HiveParser.KW_ROLES:
        case HiveParser.KW_URI:
        case HiveParser.KW_SERVER:
        case HiveParser.KW_ADMIN:
        case HiveParser.KW_OWNER:
        case HiveParser.KW_PRINCIPALS:
        case HiveParser.KW_COMPACT:
        case HiveParser.KW_COMPACTIONS:
        case HiveParser.KW_TRANSACTIONS:
        case HiveParser.KW_REWRITE:
        case HiveParser.KW_REOPTIMIZATION:
        case HiveParser.KW_RELOAD:
        case HiveParser.KW_YEAR:
        case HiveParser.KW_QUERY:
        case HiveParser.KW_QUARTER:
        case HiveParser.KW_MONTH:
        case HiveParser.KW_WEEK:
        case HiveParser.KW_DAY:
        case HiveParser.KW_DOW:
        case HiveParser.KW_HOUR:
        case HiveParser.KW_MINUTE:
        case HiveParser.KW_SECOND:
        case HiveParser.KW_TRANSACTION:
        case HiveParser.KW_WORK:
        case HiveParser.KW_WRITE:
        case HiveParser.KW_ISOLATION:
        case HiveParser.KW_LEVEL:
        case HiveParser.KW_SNAPSHOT:
        case HiveParser.KW_AUTOCOMMIT:
        case HiveParser.KW_CACHE:
        case HiveParser.KW_ENFORCED:
        case HiveParser.KW_VALIDATE:
        case HiveParser.KW_NOVALIDATE:
        case HiveParser.KW_RELY:
        case HiveParser.KW_NORELY:
        case HiveParser.KW_KEY:
        case HiveParser.KW_ABORT:
        case HiveParser.KW_MATCHED:
        case HiveParser.KW_REPL:
        case HiveParser.KW_DUMP:
        case HiveParser.KW_STATUS:
        case HiveParser.KW_VECTORIZATION:
        case HiveParser.KW_SUMMARY:
        case HiveParser.KW_OPERATOR:
        case HiveParser.KW_EXPRESSION:
        case HiveParser.KW_DETAIL:
        case HiveParser.KW_WAIT:
        case HiveParser.KW_RESOURCE:
        case HiveParser.KW_PLAN:
        case HiveParser.KW_QUERY_PARALLELISM:
        case HiveParser.KW_PLANS:
        case HiveParser.KW_ACTIVATE:
        case HiveParser.KW_DEFAULT:
        case HiveParser.KW_CHECK:
        case HiveParser.KW_POOL:
        case HiveParser.KW_MOVE:
        case HiveParser.KW_DO:
        case HiveParser.KW_ALLOC_FRACTION:
        case HiveParser.KW_SCHEDULING_POLICY:
        case HiveParser.KW_PATH:
        case HiveParser.KW_MAPPING:
        case HiveParser.KW_WORKLOAD:
        case HiveParser.KW_MANAGEMENT:
        case HiveParser.KW_ACTIVE:
        case HiveParser.KW_UNMANAGED:
        case HiveParser.KW_DELTA:
        case HiveParser.KW_CSV:
        case HiveParser.KW_JSON:
        case HiveParser.KW_BLOOMFILTER:
        case HiveParser.LCURLY:
        case HiveParser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 2297;
          this.functionIdentifier();
          break;
        case HiveParser.StringLiteral:
          this.enterOuterAlt(localctx, 2);
          this.state = 2298;
          this.match(HiveParser.StringLiteral);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  showStmtIdentifier() {
    let localctx = new ShowStmtIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, HiveParser.RULE_showStmtIdentifier);
    try {
      this.state = 2303;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_IF:
        case HiveParser.KW_ASC:
        case HiveParser.KW_DESC:
        case HiveParser.KW_NULLS:
        case HiveParser.KW_LAST:
        case HiveParser.KW_OVERWRITE:
        case HiveParser.KW_PARTITIONS:
        case HiveParser.KW_TABLES:
        case HiveParser.KW_COLUMNS:
        case HiveParser.KW_INDEX:
        case HiveParser.KW_INDEXES:
        case HiveParser.KW_REBUILD:
        case HiveParser.KW_FUNCTIONS:
        case HiveParser.KW_SHOW:
        case HiveParser.KW_MSCK:
        case HiveParser.KW_REPAIR:
        case HiveParser.KW_DIRECTORY:
        case HiveParser.KW_CLUSTER:
        case HiveParser.KW_DISTRIBUTE:
        case HiveParser.KW_SORT:
        case HiveParser.KW_LOAD:
        case HiveParser.KW_EXPORT:
        case HiveParser.KW_REPLICATION:
        case HiveParser.KW_METADATA:
        case HiveParser.KW_DATA:
        case HiveParser.KW_INPATH:
        case HiveParser.KW_CHANGE:
        case HiveParser.KW_FIRST:
        case HiveParser.KW_AFTER:
        case HiveParser.KW_RENAME:
        case HiveParser.KW_COMMENT:
        case HiveParser.KW_BOOLEAN:
        case HiveParser.KW_TINYINT:
        case HiveParser.KW_SMALLINT:
        case HiveParser.KW_INT:
        case HiveParser.KW_BIGINT:
        case HiveParser.KW_FLOAT:
        case HiveParser.KW_DOUBLE:
        case HiveParser.KW_DATE:
        case HiveParser.KW_DATETIME:
        case HiveParser.KW_TIMESTAMP:
        case HiveParser.KW_TIME:
        case HiveParser.KW_ZONE:
        case HiveParser.KW_STRING:
        case HiveParser.KW_ARRAY:
        case HiveParser.KW_STRUCT:
        case HiveParser.KW_MAP:
        case HiveParser.KW_UNIONTYPE:
        case HiveParser.KW_PARTITIONED:
        case HiveParser.KW_CLUSTERED:
        case HiveParser.KW_SORTED:
        case HiveParser.KW_BUCKETS:
        case HiveParser.KW_FORMAT:
        case HiveParser.KW_DELIMITED:
        case HiveParser.KW_FIELDS:
        case HiveParser.KW_TERMINATED:
        case HiveParser.KW_ESCAPED:
        case HiveParser.KW_COLLECTION:
        case HiveParser.KW_ITEMS:
        case HiveParser.KW_KEYS:
        case HiveParser.KW_KEY_TYPE:
        case HiveParser.KW_KILL:
        case HiveParser.KW_LINES:
        case HiveParser.KW_STORED:
        case HiveParser.KW_FILEFORMAT:
        case HiveParser.KW_INPUTFORMAT:
        case HiveParser.KW_OUTPUTFORMAT:
        case HiveParser.KW_INPUTDRIVER:
        case HiveParser.KW_OUTPUTDRIVER:
        case HiveParser.KW_ENABLE:
        case HiveParser.KW_DISABLE:
        case HiveParser.KW_LOCATION:
        case HiveParser.KW_BUCKET:
        case HiveParser.KW_ADD:
        case HiveParser.KW_REPLACE:
        case HiveParser.KW_TEMPORARY:
        case HiveParser.KW_FILE:
        case HiveParser.KW_JAR:
        case HiveParser.KW_EXPLAIN:
        case HiveParser.KW_FORMATTED:
        case HiveParser.KW_DEPENDENCY:
        case HiveParser.KW_LOGICAL:
        case HiveParser.KW_SERDE:
        case HiveParser.KW_DEFERRED:
        case HiveParser.KW_SERDEPROPERTIES:
        case HiveParser.KW_DBPROPERTIES:
        case HiveParser.KW_LIMIT:
        case HiveParser.KW_OFFSET:
        case HiveParser.KW_UNSET:
        case HiveParser.KW_TBLPROPERTIES:
        case HiveParser.KW_IDXPROPERTIES:
        case HiveParser.KW_VALUE_TYPE:
        case HiveParser.KW_ELEM_TYPE:
        case HiveParser.KW_DEFINED:
        case HiveParser.KW_MAPJOIN:
        case HiveParser.KW_STREAMTABLE:
        case HiveParser.KW_CLUSTERSTATUS:
        case HiveParser.KW_UTC:
        case HiveParser.KW_UTCTIMESTAMP:
        case HiveParser.KW_LONG:
        case HiveParser.KW_PLUS:
        case HiveParser.KW_VIEW:
        case HiveParser.KW_VIEWS:
        case HiveParser.KW_DATABASES:
        case HiveParser.KW_MATERIALIZED:
        case HiveParser.KW_SCHEMA:
        case HiveParser.KW_SCHEMAS:
        case HiveParser.KW_SSL:
        case HiveParser.KW_UNDO:
        case HiveParser.KW_LOCK:
        case HiveParser.KW_LOCKS:
        case HiveParser.KW_UNLOCK:
        case HiveParser.KW_SHARED:
        case HiveParser.KW_EXCLUSIVE:
        case HiveParser.KW_UNSIGNED:
        case HiveParser.KW_WHILE:
        case HiveParser.KW_READ:
        case HiveParser.KW_PURGE:
        case HiveParser.KW_ANALYZE:
        case HiveParser.KW_BEFORE:
        case HiveParser.KW_BINARY:
        case HiveParser.KW_CONTINUE:
        case HiveParser.KW_RECORDREADER:
        case HiveParser.KW_RECORDWRITER:
        case HiveParser.KW_SEMI:
        case HiveParser.KW_TOUCH:
        case HiveParser.KW_ARCHIVE:
        case HiveParser.KW_UNARCHIVE:
        case HiveParser.KW_COMPUTE:
        case HiveParser.KW_STATISTICS:
        case HiveParser.KW_USE:
        case HiveParser.KW_OPTION:
        case HiveParser.KW_CONCATENATE:
        case HiveParser.KW_SHOW_DATABASE:
        case HiveParser.KW_RESTRICT:
        case HiveParser.KW_CASCADE:
        case HiveParser.KW_SKEWED:
        case HiveParser.KW_DIRECTORIES:
        case HiveParser.KW_CURRENT_DATE:
        case HiveParser.KW_CURRENT_TIMESTAMP:
        case HiveParser.KW_GROUPING:
        case HiveParser.KW_SETS:
        case HiveParser.KW_NOSCAN:
        case HiveParser.KW_ROLE:
        case HiveParser.KW_ROLES:
        case HiveParser.KW_URI:
        case HiveParser.KW_SERVER:
        case HiveParser.KW_ADMIN:
        case HiveParser.KW_OWNER:
        case HiveParser.KW_PRINCIPALS:
        case HiveParser.KW_COMPACT:
        case HiveParser.KW_COMPACTIONS:
        case HiveParser.KW_TRANSACTIONS:
        case HiveParser.KW_REWRITE:
        case HiveParser.KW_REOPTIMIZATION:
        case HiveParser.KW_RELOAD:
        case HiveParser.KW_YEAR:
        case HiveParser.KW_QUERY:
        case HiveParser.KW_QUARTER:
        case HiveParser.KW_MONTH:
        case HiveParser.KW_WEEK:
        case HiveParser.KW_DAY:
        case HiveParser.KW_DOW:
        case HiveParser.KW_HOUR:
        case HiveParser.KW_MINUTE:
        case HiveParser.KW_SECOND:
        case HiveParser.KW_TRANSACTION:
        case HiveParser.KW_WORK:
        case HiveParser.KW_WRITE:
        case HiveParser.KW_ISOLATION:
        case HiveParser.KW_LEVEL:
        case HiveParser.KW_SNAPSHOT:
        case HiveParser.KW_AUTOCOMMIT:
        case HiveParser.KW_CACHE:
        case HiveParser.KW_ENFORCED:
        case HiveParser.KW_VALIDATE:
        case HiveParser.KW_NOVALIDATE:
        case HiveParser.KW_RELY:
        case HiveParser.KW_NORELY:
        case HiveParser.KW_KEY:
        case HiveParser.KW_ABORT:
        case HiveParser.KW_MATCHED:
        case HiveParser.KW_REPL:
        case HiveParser.KW_DUMP:
        case HiveParser.KW_STATUS:
        case HiveParser.KW_VECTORIZATION:
        case HiveParser.KW_SUMMARY:
        case HiveParser.KW_OPERATOR:
        case HiveParser.KW_EXPRESSION:
        case HiveParser.KW_DETAIL:
        case HiveParser.KW_WAIT:
        case HiveParser.KW_RESOURCE:
        case HiveParser.KW_PLAN:
        case HiveParser.KW_QUERY_PARALLELISM:
        case HiveParser.KW_PLANS:
        case HiveParser.KW_ACTIVATE:
        case HiveParser.KW_DEFAULT:
        case HiveParser.KW_CHECK:
        case HiveParser.KW_POOL:
        case HiveParser.KW_MOVE:
        case HiveParser.KW_DO:
        case HiveParser.KW_ALLOC_FRACTION:
        case HiveParser.KW_SCHEDULING_POLICY:
        case HiveParser.KW_PATH:
        case HiveParser.KW_MAPPING:
        case HiveParser.KW_WORKLOAD:
        case HiveParser.KW_MANAGEMENT:
        case HiveParser.KW_ACTIVE:
        case HiveParser.KW_UNMANAGED:
        case HiveParser.KW_DELTA:
        case HiveParser.KW_CSV:
        case HiveParser.KW_JSON:
        case HiveParser.KW_BLOOMFILTER:
        case HiveParser.LCURLY:
        case HiveParser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 2301;
          this.identifier();
          break;
        case HiveParser.StringLiteral:
          this.enterOuterAlt(localctx, 2);
          this.state = 2302;
          this.match(HiveParser.StringLiteral);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableComment() {
    let localctx = new TableCommentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, HiveParser.RULE_tableComment);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2305;
      this.match(HiveParser.KW_COMMENT);
      this.state = 2306;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableUsingDataSource() {
    let localctx = new TableUsingDataSourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, HiveParser.RULE_tableUsingDataSource);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2308;
      this.match(HiveParser.KW_USING);
      this.state = 2309;
      this.tableDataSource();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableDataSource() {
    let localctx = new TableDataSourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, HiveParser.RULE_tableDataSource);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2311;
      _la = this._input.LA(1);
      if (
        !(
          ((_la - 336) & ~0x1f) == 0 &&
          ((1 << (_la - 336)) &
            ((1 << (HiveParser.KW_ORC - 336)) |
              (1 << (HiveParser.KW_PARQUET - 336)) |
              (1 << (HiveParser.KW_DELTA - 336)) |
              (1 << (HiveParser.KW_AVRO - 336)) |
              (1 << (HiveParser.KW_CSV - 336)) |
              (1 << (HiveParser.KW_JSON - 336)))) !==
            0
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tablePartition() {
    let localctx = new TablePartitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, HiveParser.RULE_tablePartition);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2313;
      this.match(HiveParser.KW_PARTITIONED);
      this.state = 2314;
      this.match(HiveParser.KW_BY);
      this.state = 2315;
      this.match(HiveParser.LPAREN);
      this.state = 2316;
      this.partitionedColumnNameTypeConstraint();
      this.state = 2321;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 2317;
        this.match(HiveParser.COMMA);
        this.state = 2318;
        this.partitionedColumnNameTypeConstraint();
        this.state = 2323;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 2324;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableBuckets() {
    let localctx = new TableBucketsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, HiveParser.RULE_tableBuckets);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2326;
      this.match(HiveParser.KW_CLUSTERED);
      this.state = 2327;
      this.match(HiveParser.KW_BY);
      this.state = 2328;
      this.match(HiveParser.LPAREN);
      this.state = 2329;
      this.columnNameList();
      this.state = 2330;
      this.match(HiveParser.RPAREN);
      this.state = 2337;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_SORTED) {
        this.state = 2331;
        this.match(HiveParser.KW_SORTED);
        this.state = 2332;
        this.match(HiveParser.KW_BY);
        this.state = 2333;
        this.match(HiveParser.LPAREN);
        this.state = 2334;
        this.columnNameOrderList();
        this.state = 2335;
        this.match(HiveParser.RPAREN);
      }

      this.state = 2339;
      this.match(HiveParser.KW_INTO);
      this.state = 2340;
      this.match(HiveParser.Number);
      this.state = 2341;
      this.match(HiveParser.KW_BUCKETS);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableSkewed() {
    let localctx = new TableSkewedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, HiveParser.RULE_tableSkewed);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2343;
      this.match(HiveParser.KW_SKEWED);
      this.state = 2344;
      this.match(HiveParser.KW_BY);
      this.state = 2345;
      this.match(HiveParser.LPAREN);
      this.state = 2346;
      this.columnNameList();
      this.state = 2347;
      this.match(HiveParser.RPAREN);
      this.state = 2348;
      this.match(HiveParser.KW_ON);
      this.state = 2349;
      this.match(HiveParser.LPAREN);
      this.state = 2350;
      this.skewedValueElement();
      this.state = 2351;
      this.match(HiveParser.RPAREN);
      this.state = 2353;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 208, this._ctx);
      if (la_ === 1) {
        this.state = 2352;
        this.storedAsDirs();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  rowFormat() {
    let localctx = new RowFormatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, HiveParser.RULE_rowFormat);
    try {
      this.state = 2357;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 209, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2355;
          this.rowFormatSerde();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2356;
          this.rowFormatDelimited();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  recordReader() {
    let localctx = new RecordReaderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, HiveParser.RULE_recordReader);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2359;
      this.match(HiveParser.KW_RECORDREADER);
      this.state = 2360;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  recordWriter() {
    let localctx = new RecordWriterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, HiveParser.RULE_recordWriter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2362;
      this.match(HiveParser.KW_RECORDWRITER);
      this.state = 2363;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  rowFormatSerde() {
    let localctx = new RowFormatSerdeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, HiveParser.RULE_rowFormatSerde);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2365;
      this.match(HiveParser.KW_ROW);
      this.state = 2366;
      this.match(HiveParser.KW_FORMAT);
      this.state = 2367;
      this.match(HiveParser.KW_SERDE);
      this.state = 2368;
      this.match(HiveParser.StringLiteral);
      this.state = 2372;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WITH) {
        this.state = 2369;
        this.match(HiveParser.KW_WITH);
        this.state = 2370;
        this.match(HiveParser.KW_SERDEPROPERTIES);
        this.state = 2371;
        this.tableProperties();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  rowFormatDelimited() {
    let localctx = new RowFormatDelimitedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, HiveParser.RULE_rowFormatDelimited);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2374;
      this.match(HiveParser.KW_ROW);
      this.state = 2375;
      this.match(HiveParser.KW_FORMAT);
      this.state = 2376;
      this.match(HiveParser.KW_DELIMITED);
      this.state = 2378;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_FIELDS) {
        this.state = 2377;
        this.tableRowFormatFieldIdentifier();
      }

      this.state = 2381;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_COLLECTION) {
        this.state = 2380;
        this.tableRowFormatCollItemsIdentifier();
      }

      this.state = 2384;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 213, this._ctx);
      if (la_ === 1) {
        this.state = 2383;
        this.tableRowFormatMapKeysIdentifier();
      }
      this.state = 2387;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_LINES) {
        this.state = 2386;
        this.tableRowFormatLinesIdentifier();
      }

      this.state = 2390;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_NULL) {
        this.state = 2389;
        this.tableRowNullFormat();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableRowFormat() {
    let localctx = new TableRowFormatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, HiveParser.RULE_tableRowFormat);
    try {
      this.state = 2394;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 216, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2392;
          this.rowFormatDelimited();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2393;
          this.rowFormatSerde();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableOptions() {
    let localctx = new TableOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, HiveParser.RULE_tableOptions);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2396;
      this.match(HiveParser.KW_OPTIONS);
      this.state = 2397;
      this.tableProperties();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tablePropertiesPrefixed() {
    let localctx = new TablePropertiesPrefixedContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 326, HiveParser.RULE_tablePropertiesPrefixed);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2399;
      this.match(HiveParser.KW_TBLPROPERTIES);
      this.state = 2400;
      this.tableProperties();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableProperties() {
    let localctx = new TablePropertiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, HiveParser.RULE_tableProperties);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2402;
      this.match(HiveParser.LPAREN);
      this.state = 2403;
      this.tablePropertiesList();
      this.state = 2404;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tablePropertiesList() {
    let localctx = new TablePropertiesListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, HiveParser.RULE_tablePropertiesList);
    var _la = 0; // Token type
    try {
      this.state = 2422;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 219, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2406;
          this.keyValueProperty();
          this.state = 2411;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === HiveParser.COMMA) {
            this.state = 2407;
            this.match(HiveParser.COMMA);
            this.state = 2408;
            this.keyValueProperty();
            this.state = 2413;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2414;
          this.keyProperty();
          this.state = 2419;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === HiveParser.COMMA) {
            this.state = 2415;
            this.match(HiveParser.COMMA);
            this.state = 2416;
            this.keyProperty();
            this.state = 2421;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  keyValueProperty() {
    let localctx = new KeyValuePropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, HiveParser.RULE_keyValueProperty);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2424;
      this.keyProperty();
      this.state = 2426;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.EQUAL) {
        this.state = 2425;
        this.match(HiveParser.EQUAL);
      }

      this.state = 2428;
      this.keyValue();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  keyValue() {
    let localctx = new KeyValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, HiveParser.RULE_keyValue);
    try {
      this.state = 2433;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.Number:
          this.enterOuterAlt(localctx, 1);
          this.state = 2430;
          this.match(HiveParser.Number);
          break;
        case HiveParser.KW_TRUE:
        case HiveParser.KW_FALSE:
          this.enterOuterAlt(localctx, 2);
          this.state = 2431;
          this.booleanValue();
          break;
        case HiveParser.StringLiteral:
          this.enterOuterAlt(localctx, 3);
          this.state = 2432;
          this.match(HiveParser.StringLiteral);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  keyProperty() {
    let localctx = new KeyPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, HiveParser.RULE_keyProperty);
    var _la = 0; // Token type
    try {
      this.state = 2444;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_IF:
        case HiveParser.KW_ASC:
        case HiveParser.KW_DESC:
        case HiveParser.KW_NULLS:
        case HiveParser.KW_LAST:
        case HiveParser.KW_OVERWRITE:
        case HiveParser.KW_PARTITIONS:
        case HiveParser.KW_TABLES:
        case HiveParser.KW_COLUMNS:
        case HiveParser.KW_INDEX:
        case HiveParser.KW_INDEXES:
        case HiveParser.KW_REBUILD:
        case HiveParser.KW_FUNCTIONS:
        case HiveParser.KW_SHOW:
        case HiveParser.KW_MSCK:
        case HiveParser.KW_REPAIR:
        case HiveParser.KW_DIRECTORY:
        case HiveParser.KW_CLUSTER:
        case HiveParser.KW_DISTRIBUTE:
        case HiveParser.KW_SORT:
        case HiveParser.KW_LOAD:
        case HiveParser.KW_EXPORT:
        case HiveParser.KW_REPLICATION:
        case HiveParser.KW_METADATA:
        case HiveParser.KW_DATA:
        case HiveParser.KW_INPATH:
        case HiveParser.KW_CHANGE:
        case HiveParser.KW_FIRST:
        case HiveParser.KW_AFTER:
        case HiveParser.KW_RENAME:
        case HiveParser.KW_COMMENT:
        case HiveParser.KW_BOOLEAN:
        case HiveParser.KW_TINYINT:
        case HiveParser.KW_SMALLINT:
        case HiveParser.KW_INT:
        case HiveParser.KW_BIGINT:
        case HiveParser.KW_FLOAT:
        case HiveParser.KW_DOUBLE:
        case HiveParser.KW_DATE:
        case HiveParser.KW_DATETIME:
        case HiveParser.KW_TIMESTAMP:
        case HiveParser.KW_TIME:
        case HiveParser.KW_ZONE:
        case HiveParser.KW_STRING:
        case HiveParser.KW_ARRAY:
        case HiveParser.KW_STRUCT:
        case HiveParser.KW_MAP:
        case HiveParser.KW_UNIONTYPE:
        case HiveParser.KW_PARTITIONED:
        case HiveParser.KW_CLUSTERED:
        case HiveParser.KW_SORTED:
        case HiveParser.KW_BUCKETS:
        case HiveParser.KW_FORMAT:
        case HiveParser.KW_DELIMITED:
        case HiveParser.KW_FIELDS:
        case HiveParser.KW_TERMINATED:
        case HiveParser.KW_ESCAPED:
        case HiveParser.KW_COLLECTION:
        case HiveParser.KW_ITEMS:
        case HiveParser.KW_KEYS:
        case HiveParser.KW_KEY_TYPE:
        case HiveParser.KW_KILL:
        case HiveParser.KW_LINES:
        case HiveParser.KW_STORED:
        case HiveParser.KW_FILEFORMAT:
        case HiveParser.KW_INPUTFORMAT:
        case HiveParser.KW_OUTPUTFORMAT:
        case HiveParser.KW_INPUTDRIVER:
        case HiveParser.KW_OUTPUTDRIVER:
        case HiveParser.KW_ENABLE:
        case HiveParser.KW_DISABLE:
        case HiveParser.KW_LOCATION:
        case HiveParser.KW_BUCKET:
        case HiveParser.KW_ADD:
        case HiveParser.KW_REPLACE:
        case HiveParser.KW_TEMPORARY:
        case HiveParser.KW_FILE:
        case HiveParser.KW_JAR:
        case HiveParser.KW_EXPLAIN:
        case HiveParser.KW_FORMATTED:
        case HiveParser.KW_DEPENDENCY:
        case HiveParser.KW_LOGICAL:
        case HiveParser.KW_SERDE:
        case HiveParser.KW_DEFERRED:
        case HiveParser.KW_SERDEPROPERTIES:
        case HiveParser.KW_DBPROPERTIES:
        case HiveParser.KW_LIMIT:
        case HiveParser.KW_OFFSET:
        case HiveParser.KW_UNSET:
        case HiveParser.KW_TBLPROPERTIES:
        case HiveParser.KW_IDXPROPERTIES:
        case HiveParser.KW_VALUE_TYPE:
        case HiveParser.KW_ELEM_TYPE:
        case HiveParser.KW_DEFINED:
        case HiveParser.KW_MAPJOIN:
        case HiveParser.KW_STREAMTABLE:
        case HiveParser.KW_CLUSTERSTATUS:
        case HiveParser.KW_UTC:
        case HiveParser.KW_UTCTIMESTAMP:
        case HiveParser.KW_LONG:
        case HiveParser.KW_PLUS:
        case HiveParser.KW_VIEW:
        case HiveParser.KW_VIEWS:
        case HiveParser.KW_DATABASES:
        case HiveParser.KW_MATERIALIZED:
        case HiveParser.KW_SCHEMA:
        case HiveParser.KW_SCHEMAS:
        case HiveParser.KW_SSL:
        case HiveParser.KW_UNDO:
        case HiveParser.KW_LOCK:
        case HiveParser.KW_LOCKS:
        case HiveParser.KW_UNLOCK:
        case HiveParser.KW_SHARED:
        case HiveParser.KW_EXCLUSIVE:
        case HiveParser.KW_UNSIGNED:
        case HiveParser.KW_WHILE:
        case HiveParser.KW_READ:
        case HiveParser.KW_PURGE:
        case HiveParser.KW_ANALYZE:
        case HiveParser.KW_BEFORE:
        case HiveParser.KW_BINARY:
        case HiveParser.KW_CONTINUE:
        case HiveParser.KW_RECORDREADER:
        case HiveParser.KW_RECORDWRITER:
        case HiveParser.KW_SEMI:
        case HiveParser.KW_TOUCH:
        case HiveParser.KW_ARCHIVE:
        case HiveParser.KW_UNARCHIVE:
        case HiveParser.KW_COMPUTE:
        case HiveParser.KW_STATISTICS:
        case HiveParser.KW_USE:
        case HiveParser.KW_OPTION:
        case HiveParser.KW_CONCATENATE:
        case HiveParser.KW_SHOW_DATABASE:
        case HiveParser.KW_RESTRICT:
        case HiveParser.KW_CASCADE:
        case HiveParser.KW_SKEWED:
        case HiveParser.KW_DIRECTORIES:
        case HiveParser.KW_CURRENT_DATE:
        case HiveParser.KW_CURRENT_TIMESTAMP:
        case HiveParser.KW_GROUPING:
        case HiveParser.KW_SETS:
        case HiveParser.KW_NOSCAN:
        case HiveParser.KW_ROLE:
        case HiveParser.KW_ROLES:
        case HiveParser.KW_URI:
        case HiveParser.KW_SERVER:
        case HiveParser.KW_ADMIN:
        case HiveParser.KW_OWNER:
        case HiveParser.KW_PRINCIPALS:
        case HiveParser.KW_COMPACT:
        case HiveParser.KW_COMPACTIONS:
        case HiveParser.KW_TRANSACTIONS:
        case HiveParser.KW_REWRITE:
        case HiveParser.KW_REOPTIMIZATION:
        case HiveParser.KW_RELOAD:
        case HiveParser.KW_YEAR:
        case HiveParser.KW_QUERY:
        case HiveParser.KW_QUARTER:
        case HiveParser.KW_MONTH:
        case HiveParser.KW_WEEK:
        case HiveParser.KW_DAY:
        case HiveParser.KW_DOW:
        case HiveParser.KW_HOUR:
        case HiveParser.KW_MINUTE:
        case HiveParser.KW_SECOND:
        case HiveParser.KW_TRANSACTION:
        case HiveParser.KW_WORK:
        case HiveParser.KW_WRITE:
        case HiveParser.KW_ISOLATION:
        case HiveParser.KW_LEVEL:
        case HiveParser.KW_SNAPSHOT:
        case HiveParser.KW_AUTOCOMMIT:
        case HiveParser.KW_CACHE:
        case HiveParser.KW_ENFORCED:
        case HiveParser.KW_VALIDATE:
        case HiveParser.KW_NOVALIDATE:
        case HiveParser.KW_RELY:
        case HiveParser.KW_NORELY:
        case HiveParser.KW_KEY:
        case HiveParser.KW_ABORT:
        case HiveParser.KW_MATCHED:
        case HiveParser.KW_REPL:
        case HiveParser.KW_DUMP:
        case HiveParser.KW_STATUS:
        case HiveParser.KW_VECTORIZATION:
        case HiveParser.KW_SUMMARY:
        case HiveParser.KW_OPERATOR:
        case HiveParser.KW_EXPRESSION:
        case HiveParser.KW_DETAIL:
        case HiveParser.KW_WAIT:
        case HiveParser.KW_RESOURCE:
        case HiveParser.KW_PLAN:
        case HiveParser.KW_QUERY_PARALLELISM:
        case HiveParser.KW_PLANS:
        case HiveParser.KW_ACTIVATE:
        case HiveParser.KW_DEFAULT:
        case HiveParser.KW_CHECK:
        case HiveParser.KW_POOL:
        case HiveParser.KW_MOVE:
        case HiveParser.KW_DO:
        case HiveParser.KW_ALLOC_FRACTION:
        case HiveParser.KW_SCHEDULING_POLICY:
        case HiveParser.KW_PATH:
        case HiveParser.KW_MAPPING:
        case HiveParser.KW_WORKLOAD:
        case HiveParser.KW_MANAGEMENT:
        case HiveParser.KW_ACTIVE:
        case HiveParser.KW_UNMANAGED:
        case HiveParser.KW_DELTA:
        case HiveParser.KW_CSV:
        case HiveParser.KW_JSON:
        case HiveParser.KW_BLOOMFILTER:
        case HiveParser.LCURLY:
        case HiveParser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 2435;
          this.identifier();
          this.state = 2440;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          while (_la === HiveParser.DOT) {
            this.state = 2436;
            this.match(HiveParser.DOT);
            this.state = 2437;
            this.identifier();
            this.state = 2442;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          }
          break;
        case HiveParser.StringLiteral:
          this.enterOuterAlt(localctx, 2);
          this.state = 2443;
          this.match(HiveParser.StringLiteral);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableRowFormatFieldIdentifier() {
    let localctx = new TableRowFormatFieldIdentifierContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      338,
      HiveParser.RULE_tableRowFormatFieldIdentifier
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2446;
      this.match(HiveParser.KW_FIELDS);
      this.state = 2447;
      this.match(HiveParser.KW_TERMINATED);
      this.state = 2448;
      this.match(HiveParser.KW_BY);
      this.state = 2449;
      this.match(HiveParser.StringLiteral);
      this.state = 2451;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_ESCAPED) {
        this.state = 2450;
        this.tableRowFormatFieldIdentifierEcapedBy();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableRowFormatFieldIdentifierEcapedBy() {
    let localctx = new TableRowFormatFieldIdentifierEcapedByContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      340,
      HiveParser.RULE_tableRowFormatFieldIdentifierEcapedBy
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2453;
      this.match(HiveParser.KW_ESCAPED);
      this.state = 2454;
      this.match(HiveParser.KW_BY);
      this.state = 2455;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableRowFormatCollItemsIdentifier() {
    let localctx = new TableRowFormatCollItemsIdentifierContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      342,
      HiveParser.RULE_tableRowFormatCollItemsIdentifier
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2457;
      this.match(HiveParser.KW_COLLECTION);
      this.state = 2458;
      this.match(HiveParser.KW_ITEMS);
      this.state = 2459;
      this.match(HiveParser.KW_TERMINATED);
      this.state = 2460;
      this.match(HiveParser.KW_BY);
      this.state = 2461;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableRowFormatMapKeysIdentifier() {
    let localctx = new TableRowFormatMapKeysIdentifierContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      344,
      HiveParser.RULE_tableRowFormatMapKeysIdentifier
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2463;
      this.match(HiveParser.KW_MAP);
      this.state = 2464;
      this.match(HiveParser.KW_KEYS);
      this.state = 2465;
      this.match(HiveParser.KW_TERMINATED);
      this.state = 2466;
      this.match(HiveParser.KW_BY);
      this.state = 2467;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableRowFormatLinesIdentifier() {
    let localctx = new TableRowFormatLinesIdentifierContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      346,
      HiveParser.RULE_tableRowFormatLinesIdentifier
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2469;
      this.match(HiveParser.KW_LINES);
      this.state = 2470;
      this.match(HiveParser.KW_TERMINATED);
      this.state = 2471;
      this.match(HiveParser.KW_BY);
      this.state = 2472;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableRowNullFormat() {
    let localctx = new TableRowNullFormatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, HiveParser.RULE_tableRowNullFormat);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2474;
      this.match(HiveParser.KW_NULL);
      this.state = 2475;
      this.match(HiveParser.KW_DEFINED);
      this.state = 2476;
      this.match(HiveParser.KW_AS);
      this.state = 2477;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableFileFormat() {
    let localctx = new TableFileFormatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, HiveParser.RULE_tableFileFormat);
    try {
      this.state = 2482;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 225, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2479;
          this.tableInputOutputFileFormat();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2480;
          this.tableFileFormatStoredBy();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2481;
          this.tableFileFormatStoredAs();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableFileFormatStoredBy() {
    let localctx = new TableFileFormatStoredByContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 352, HiveParser.RULE_tableFileFormatStoredBy);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2484;
      this.match(HiveParser.KW_STORED);
      this.state = 2485;
      this.match(HiveParser.KW_BY);
      this.state = 2486;
      this.match(HiveParser.StringLiteral);
      this.state = 2490;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WITH) {
        this.state = 2487;
        this.match(HiveParser.KW_WITH);
        this.state = 2488;
        this.match(HiveParser.KW_SERDEPROPERTIES);
        this.state = 2489;
        this.tableProperties();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableFileFormatStoredAs() {
    let localctx = new TableFileFormatStoredAsContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 354, HiveParser.RULE_tableFileFormatStoredAs);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2492;
      this.match(HiveParser.KW_STORED);
      this.state = 2493;
      this.match(HiveParser.KW_AS);
      this.state = 2494;
      this.tableFileFormatStoredAsFormat();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableFileFormatStoredAsFormat() {
    let localctx = new TableFileFormatStoredAsFormatContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      356,
      HiveParser.RULE_tableFileFormatStoredAsFormat
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2496;
      _la = this._input.LA(1);
      if (
        !(
          ((_la - 333) & ~0x1f) == 0 &&
          ((1 << (_la - 333)) &
            ((1 << (HiveParser.KW_SEQUENCEFILE - 333)) |
              (1 << (HiveParser.KW_TEXTFILE - 333)) |
              (1 << (HiveParser.KW_RCFILE - 333)) |
              (1 << (HiveParser.KW_ORC - 333)) |
              (1 << (HiveParser.KW_PARQUET - 333)) |
              (1 << (HiveParser.KW_AVRO - 333)) |
              (1 << (HiveParser.KW_JSONFILE - 333)))) !==
            0
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableInputOutputFileFormat() {
    let localctx = new TableInputOutputFileFormatContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 358, HiveParser.RULE_tableInputOutputFileFormat);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2498;
      this.match(HiveParser.KW_STORED);
      this.state = 2499;
      this.match(HiveParser.KW_AS);
      this.state = 2500;
      this.tableInputLiteral();
      this.state = 2501;
      this.tableOutputLiteral();
      this.state = 2506;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_INPUTDRIVER) {
        this.state = 2502;
        this.match(HiveParser.KW_INPUTDRIVER);
        this.state = 2503;
        this.match(HiveParser.StringLiteral);
        this.state = 2504;
        this.match(HiveParser.KW_OUTPUTDRIVER);
        this.state = 2505;
        this.match(HiveParser.StringLiteral);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableInputLiteral() {
    let localctx = new TableInputLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, HiveParser.RULE_tableInputLiteral);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2508;
      this.match(HiveParser.KW_INPUTFORMAT);
      this.state = 2509;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableOutputLiteral() {
    let localctx = new TableOutputLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, HiveParser.RULE_tableOutputLiteral);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2511;
      this.match(HiveParser.KW_OUTPUTFORMAT);
      this.state = 2512;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableLocation() {
    let localctx = new TableLocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, HiveParser.RULE_tableLocation);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2514;
      this.match(HiveParser.KW_LOCATION);
      this.state = 2515;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnNameTypeList() {
    let localctx = new ColumnNameTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, HiveParser.RULE_columnNameTypeList);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2517;
      this.columnNameType();
      this.state = 2522;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 228, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2518;
          this.match(HiveParser.COMMA);
          this.state = 2519;
          this.columnNameType();
        }
        this.state = 2524;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 228, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnNameTypeOrConstraintList() {
    let localctx = new ColumnNameTypeOrConstraintListContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      368,
      HiveParser.RULE_columnNameTypeOrConstraintList
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2525;
      this.columnNameTypeOrConstraint();
      this.state = 2530;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 2526;
        this.match(HiveParser.COMMA);
        this.state = 2527;
        this.columnNameTypeOrConstraint();
        this.state = 2532;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnNameColonTypeList() {
    let localctx = new ColumnNameColonTypeListContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 370, HiveParser.RULE_columnNameColonTypeList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2533;
      this.columnNameColonType();
      this.state = 2538;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 2534;
        this.match(HiveParser.COMMA);
        this.state = 2535;
        this.columnNameColonType();
        this.state = 2540;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnNameList() {
    let localctx = new ColumnNameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, HiveParser.RULE_columnNameList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2541;
      this.columnName();
      this.state = 2546;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 2542;
        this.match(HiveParser.COMMA);
        this.state = 2543;
        this.columnName();
        this.state = 2548;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnName() {
    let localctx = new ColumnNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, HiveParser.RULE_columnName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2549;
      this.identifier();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  extColumnName() {
    let localctx = new ExtColumnNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, HiveParser.RULE_extColumnName);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2551;
      this.identifier();
      this.state = 2561;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.DOT) {
        this.state = 2552;
        this.match(HiveParser.DOT);
        this.state = 2557;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 232, this._ctx);
        switch (la_) {
          case 1:
            this.state = 2553;
            this.match(HiveParser.KW_ELEM_TYPE);
            break;

          case 2:
            this.state = 2554;
            this.match(HiveParser.KW_KEY_TYPE);
            break;

          case 3:
            this.state = 2555;
            this.match(HiveParser.KW_VALUE_TYPE);
            break;

          case 4:
            this.state = 2556;
            this.identifier();
            break;
        }
        this.state = 2563;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnNameOrderList() {
    let localctx = new ColumnNameOrderListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, HiveParser.RULE_columnNameOrderList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2564;
      this.columnNameOrder();
      this.state = 2569;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 2565;
        this.match(HiveParser.COMMA);
        this.state = 2566;
        this.columnNameOrder();
        this.state = 2571;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnParenthesesList() {
    let localctx = new ColumnParenthesesListContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 380, HiveParser.RULE_columnParenthesesList);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2572;
      this.match(HiveParser.LPAREN);
      this.state = 2573;
      this.columnNameList();
      this.state = 2574;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  enableValidateSpecification() {
    let localctx = new EnableValidateSpecificationContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 382, HiveParser.RULE_enableValidateSpecification);
    var _la = 0; // Token type
    try {
      this.state = 2581;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_ENABLE:
        case HiveParser.KW_DISABLE:
          this.enterOuterAlt(localctx, 1);
          this.state = 2576;
          this.enableSpecification();
          this.state = 2578;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (
            _la === HiveParser.KW_VALIDATE ||
            _la === HiveParser.KW_NOVALIDATE
          ) {
            this.state = 2577;
            this.validateSpecification();
          }

          break;
        case HiveParser.KW_NOT:
        case HiveParser.KW_ENFORCED:
          this.enterOuterAlt(localctx, 2);
          this.state = 2580;
          this.enforcedSpecification();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  enableSpecification() {
    let localctx = new EnableSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, HiveParser.RULE_enableSpecification);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2583;
      _la = this._input.LA(1);
      if (!(_la === HiveParser.KW_ENABLE || _la === HiveParser.KW_DISABLE)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  validateSpecification() {
    let localctx = new ValidateSpecificationContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 386, HiveParser.RULE_validateSpecification);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2585;
      _la = this._input.LA(1);
      if (
        !(_la === HiveParser.KW_VALIDATE || _la === HiveParser.KW_NOVALIDATE)
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  enforcedSpecification() {
    let localctx = new EnforcedSpecificationContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 388, HiveParser.RULE_enforcedSpecification);
    try {
      this.state = 2590;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_ENFORCED:
          this.enterOuterAlt(localctx, 1);
          this.state = 2587;
          this.match(HiveParser.KW_ENFORCED);
          break;
        case HiveParser.KW_NOT:
          this.enterOuterAlt(localctx, 2);
          this.state = 2588;
          this.match(HiveParser.KW_NOT);
          this.state = 2589;
          this.match(HiveParser.KW_ENFORCED);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  relySpecification() {
    let localctx = new RelySpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, HiveParser.RULE_relySpecification);
    var _la = 0; // Token type
    try {
      this.state = 2596;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_RELY:
          this.enterOuterAlt(localctx, 1);
          this.state = 2592;
          this.match(HiveParser.KW_RELY);
          break;
        case HiveParser.KW_FIRST:
        case HiveParser.KW_AFTER:
        case HiveParser.KW_COMMENT:
        case HiveParser.KW_RESTRICT:
        case HiveParser.KW_CASCADE:
        case HiveParser.KW_NORELY:
        case HiveParser.COMMA:
        case HiveParser.SEMICOLON:
        case HiveParser.RPAREN:
          this.enterOuterAlt(localctx, 2);
          this.state = 2594;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_NORELY) {
            this.state = 2593;
            this.match(HiveParser.KW_NORELY);
          }

          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createConstraint() {
    let localctx = new CreateConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, HiveParser.RULE_createConstraint);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2600;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_CONSTRAINT) {
        this.state = 2598;
        this.match(HiveParser.KW_CONSTRAINT);
        this.state = 2599;
        this.identifier();
      }

      this.state = 2602;
      this.tableLevelConstraint();
      this.state = 2604;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        _la === HiveParser.KW_NOT ||
        _la === HiveParser.KW_ENABLE ||
        _la === HiveParser.KW_DISABLE ||
        _la === HiveParser.KW_ENFORCED
      ) {
        this.state = 2603;
        this.constraintOptsCreate();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterConstraintWithName() {
    let localctx = new AlterConstraintWithNameContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 394, HiveParser.RULE_alterConstraintWithName);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2606;
      this.match(HiveParser.KW_CONSTRAINT);
      this.state = 2607;
      this.identifier();
      this.state = 2608;
      this.tableLevelConstraint();
      this.state = 2610;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        _la === HiveParser.KW_NOT ||
        _la === HiveParser.KW_ENABLE ||
        _la === HiveParser.KW_DISABLE ||
        _la === HiveParser.KW_ENFORCED
      ) {
        this.state = 2609;
        this.constraintOptsAlter();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableLevelConstraint() {
    let localctx = new TableLevelConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, HiveParser.RULE_tableLevelConstraint);
    try {
      this.state = 2614;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_PRIMARY:
        case HiveParser.KW_UNIQUE:
          this.enterOuterAlt(localctx, 1);
          this.state = 2612;
          this.pkUkConstraint();
          break;
        case HiveParser.KW_CHECK:
          this.enterOuterAlt(localctx, 2);
          this.state = 2613;
          this.checkConstraint();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  pkUkConstraint() {
    let localctx = new PkUkConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, HiveParser.RULE_pkUkConstraint);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2616;
      this.tableConstraintType();
      this.state = 2617;
      localctx.pkCols = this.columnParenthesesList();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  checkConstraint() {
    let localctx = new CheckConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, HiveParser.RULE_checkConstraint);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2619;
      this.match(HiveParser.KW_CHECK);
      this.state = 2620;
      this.expression(0);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createForeignKey() {
    let localctx = new CreateForeignKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, HiveParser.RULE_createForeignKey);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2624;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_CONSTRAINT) {
        this.state = 2622;
        this.match(HiveParser.KW_CONSTRAINT);
        this.state = 2623;
        this.identifier();
      }

      this.state = 2626;
      this.match(HiveParser.KW_FOREIGN);
      this.state = 2627;
      this.match(HiveParser.KW_KEY);
      this.state = 2628;
      this.columnParenthesesList();
      this.state = 2629;
      this.match(HiveParser.KW_REFERENCES);
      this.state = 2630;
      this.tableName();
      this.state = 2631;
      this.columnParenthesesList();
      this.state = 2633;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        _la === HiveParser.KW_NOT ||
        _la === HiveParser.KW_ENABLE ||
        _la === HiveParser.KW_DISABLE ||
        _la === HiveParser.KW_ENFORCED
      ) {
        this.state = 2632;
        this.constraintOptsCreate();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterForeignKeyWithName() {
    let localctx = new AlterForeignKeyWithNameContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 404, HiveParser.RULE_alterForeignKeyWithName);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2635;
      this.match(HiveParser.KW_CONSTRAINT);
      this.state = 2636;
      this.identifier();
      this.state = 2637;
      this.match(HiveParser.KW_FOREIGN);
      this.state = 2638;
      this.match(HiveParser.KW_KEY);
      this.state = 2639;
      this.columnParenthesesList();
      this.state = 2640;
      this.match(HiveParser.KW_REFERENCES);
      this.state = 2641;
      this.tableName();
      this.state = 2642;
      this.columnParenthesesList();
      this.state = 2644;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        _la === HiveParser.KW_NOT ||
        _la === HiveParser.KW_ENABLE ||
        _la === HiveParser.KW_DISABLE ||
        _la === HiveParser.KW_ENFORCED
      ) {
        this.state = 2643;
        this.constraintOptsAlter();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  skewedValueElement() {
    let localctx = new SkewedValueElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, HiveParser.RULE_skewedValueElement);
    try {
      this.state = 2648;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_TRUE:
        case HiveParser.KW_FALSE:
        case HiveParser.KW_NULL:
        case HiveParser.KW_DATE:
        case HiveParser.KW_TIMESTAMP:
        case HiveParser.KW_TIMESTAMPLOCALTZ:
        case HiveParser.KW_CURRENT_DATE:
        case HiveParser.KW_CURRENT_TIMESTAMP:
        case HiveParser.StringLiteral:
        case HiveParser.IntegralLiteral:
        case HiveParser.NumberLiteral:
        case HiveParser.Number:
        case HiveParser.CharSetName:
          this.enterOuterAlt(localctx, 1);
          this.state = 2646;
          this.skewedColumnValues();
          break;
        case HiveParser.LPAREN:
          this.enterOuterAlt(localctx, 2);
          this.state = 2647;
          this.skewedColumnValuePairList();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  skewedColumnValuePairList() {
    let localctx = new SkewedColumnValuePairListContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 408, HiveParser.RULE_skewedColumnValuePairList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2650;
      this.skewedColumnValuePair();
      this.state = 2655;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 2651;
        this.match(HiveParser.COMMA);
        this.state = 2652;
        this.skewedColumnValuePair();
        this.state = 2657;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  skewedColumnValuePair() {
    let localctx = new SkewedColumnValuePairContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 410, HiveParser.RULE_skewedColumnValuePair);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2658;
      this.match(HiveParser.LPAREN);
      this.state = 2659;
      this.skewedColumnValues();
      this.state = 2660;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  skewedColumnValues() {
    let localctx = new SkewedColumnValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, HiveParser.RULE_skewedColumnValues);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2662;
      this.skewedColumnValue();
      this.state = 2667;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 2663;
        this.match(HiveParser.COMMA);
        this.state = 2664;
        this.skewedColumnValue();
        this.state = 2669;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  skewedColumnValue() {
    let localctx = new SkewedColumnValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, HiveParser.RULE_skewedColumnValue);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2670;
      this.constant();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  skewedValueLocationElement() {
    let localctx = new SkewedValueLocationElementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 416, HiveParser.RULE_skewedValueLocationElement);
    try {
      this.state = 2674;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_TRUE:
        case HiveParser.KW_FALSE:
        case HiveParser.KW_NULL:
        case HiveParser.KW_DATE:
        case HiveParser.KW_TIMESTAMP:
        case HiveParser.KW_TIMESTAMPLOCALTZ:
        case HiveParser.KW_CURRENT_DATE:
        case HiveParser.KW_CURRENT_TIMESTAMP:
        case HiveParser.StringLiteral:
        case HiveParser.IntegralLiteral:
        case HiveParser.NumberLiteral:
        case HiveParser.Number:
        case HiveParser.CharSetName:
          this.enterOuterAlt(localctx, 1);
          this.state = 2672;
          this.skewedColumnValue();
          break;
        case HiveParser.LPAREN:
          this.enterOuterAlt(localctx, 2);
          this.state = 2673;
          this.skewedColumnValuePair();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  orderSpecification() {
    let localctx = new OrderSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, HiveParser.RULE_orderSpecification);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2676;
      _la = this._input.LA(1);
      if (!(_la === HiveParser.KW_ASC || _la === HiveParser.KW_DESC)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  nullOrdering() {
    let localctx = new NullOrderingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, HiveParser.RULE_nullOrdering);
    try {
      this.state = 2682;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 251, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2678;
          this.match(HiveParser.KW_NULLS);
          this.state = 2679;
          this.match(HiveParser.KW_FIRST);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2680;
          this.match(HiveParser.KW_NULLS);
          this.state = 2681;
          this.match(HiveParser.KW_LAST);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnNameOrder() {
    let localctx = new ColumnNameOrderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, HiveParser.RULE_columnNameOrder);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2684;
      this.identifier();
      this.state = 2686;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_ASC || _la === HiveParser.KW_DESC) {
        this.state = 2685;
        this.orderSpecification();
      }

      this.state = 2689;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_NULLS) {
        this.state = 2688;
        this.nullOrdering();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnNameCommentList() {
    let localctx = new ColumnNameCommentListContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 424, HiveParser.RULE_columnNameCommentList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2691;
      this.columnNameComment();
      this.state = 2696;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 2692;
        this.match(HiveParser.COMMA);
        this.state = 2693;
        this.columnNameComment();
        this.state = 2698;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnNameComment() {
    let localctx = new ColumnNameCommentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, HiveParser.RULE_columnNameComment);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2699;
      this.identifier();
      this.state = 2702;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_COMMENT) {
        this.state = 2700;
        this.match(HiveParser.KW_COMMENT);
        this.state = 2701;
        this.match(HiveParser.StringLiteral);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnRefOrder() {
    let localctx = new ColumnRefOrderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, HiveParser.RULE_columnRefOrder);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2704;
      this.expression(0);
      this.state = 2706;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_ASC || _la === HiveParser.KW_DESC) {
        this.state = 2705;
        this.orderSpecification();
      }

      this.state = 2709;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_NULLS) {
        this.state = 2708;
        this.nullOrdering();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnNameType() {
    let localctx = new ColumnNameTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, HiveParser.RULE_columnNameType);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2711;
      this.identifier();
      this.state = 2712;
      this.colType();
      this.state = 2715;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_COMMENT) {
        this.state = 2713;
        this.match(HiveParser.KW_COMMENT);
        this.state = 2714;
        this.match(HiveParser.StringLiteral);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnNameTypeOrConstraint() {
    let localctx = new ColumnNameTypeOrConstraintContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 432, HiveParser.RULE_columnNameTypeOrConstraint);
    try {
      this.state = 2719;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 259, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2717;
          this.tableConstraint();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2718;
          this.columnNameTypeConstraint();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableConstraint() {
    let localctx = new TableConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, HiveParser.RULE_tableConstraint);
    try {
      this.state = 2723;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 260, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2721;
          this.createForeignKey();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2722;
          this.createConstraint();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnNameTypeConstraint() {
    let localctx = new ColumnNameTypeConstraintContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 436, HiveParser.RULE_columnNameTypeConstraint);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2725;
      this.identifier();
      this.state = 2726;
      this.colType();
      this.state = 2728;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        _la === HiveParser.KW_NOT ||
        (((_la - 288) & ~0x1f) == 0 &&
          ((1 << (_la - 288)) &
            ((1 << (HiveParser.KW_PRIMARY - 288)) |
              (1 << (HiveParser.KW_REFERENCES - 288)) |
              (1 << (HiveParser.KW_CONSTRAINT - 288)) |
              (1 << (HiveParser.KW_UNIQUE - 288)) |
              (1 << (HiveParser.KW_DEFAULT - 288)) |
              (1 << (HiveParser.KW_CHECK - 288)))) !==
            0) ||
        _la === HiveParser.KW_GENERATED
      ) {
        this.state = 2727;
        this.columnConstraint();
      }

      this.state = 2732;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_COMMENT) {
        this.state = 2730;
        this.match(HiveParser.KW_COMMENT);
        this.state = 2731;
        this.match(HiveParser.StringLiteral);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnGeneratedAs() {
    let localctx = new ColumnGeneratedAsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, HiveParser.RULE_columnGeneratedAs);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2734;
      this.match(HiveParser.KW_GENERATED);
      this.state = 2737;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 263, this._ctx);
      switch (la_) {
        case 1:
          this.state = 2735;
          this.generatedAsExpression();
          break;

        case 2:
          this.state = 2736;
          this.generatedAsIdentity();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  generatedAsExpression() {
    let localctx = new GeneratedAsExpressionContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 440, HiveParser.RULE_generatedAsExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2739;
      this.match(HiveParser.KW_ALWAYS);
      this.state = 2740;
      this.match(HiveParser.KW_AS);
      this.state = 2741;
      this.match(HiveParser.LPAREN);
      this.state = 2742;
      this.expression(0);
      this.state = 2743;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  generatedAsIdentity() {
    let localctx = new GeneratedAsIdentityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, HiveParser.RULE_generatedAsIdentity);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2748;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_ALWAYS:
          this.state = 2745;
          this.match(HiveParser.KW_ALWAYS);
          break;
        case HiveParser.KW_BY:
          this.state = 2746;
          this.match(HiveParser.KW_BY);
          this.state = 2747;
          this.match(HiveParser.KW_DEFAULT);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 2750;
      this.match(HiveParser.KW_AS);
      this.state = 2751;
      this.match(HiveParser.KW_IDENTITY);
      this.state = 2764;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.LPAREN) {
        this.state = 2752;
        this.match(HiveParser.LPAREN);
        this.state = 2756;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === HiveParser.KW_START) {
          this.state = 2753;
          this.match(HiveParser.KW_START);
          this.state = 2754;
          this.match(HiveParser.KW_WITH);
          this.state = 2755;
          this.match(HiveParser.Number);
        }

        this.state = 2761;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === HiveParser.KW_INCREMENT) {
          this.state = 2758;
          this.match(HiveParser.KW_INCREMENT);
          this.state = 2759;
          this.match(HiveParser.KW_BY);
          this.state = 2760;
          this.match(HiveParser.Number);
        }

        this.state = 2763;
        this.match(HiveParser.RPAREN);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  partitionedColumnNameTypeConstraint() {
    let localctx = new PartitionedColumnNameTypeConstraintContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      444,
      HiveParser.RULE_partitionedColumnNameTypeConstraint
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2766;
      this.identifier();
      this.state = 2768;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        (((_la - 77) & ~0x1f) == 0 &&
          ((1 << (_la - 77)) &
            ((1 << (HiveParser.KW_BOOLEAN - 77)) |
              (1 << (HiveParser.KW_TINYINT - 77)) |
              (1 << (HiveParser.KW_SMALLINT - 77)) |
              (1 << (HiveParser.KW_INT - 77)) |
              (1 << (HiveParser.KW_BIGINT - 77)) |
              (1 << (HiveParser.KW_FLOAT - 77)) |
              (1 << (HiveParser.KW_DOUBLE - 77)) |
              (1 << (HiveParser.KW_DATE - 77)) |
              (1 << (HiveParser.KW_DATETIME - 77)) |
              (1 << (HiveParser.KW_TIMESTAMP - 77)) |
              (1 << (HiveParser.KW_TIMESTAMPLOCALTZ - 77)) |
              (1 << (HiveParser.KW_DECIMAL - 77)) |
              (1 << (HiveParser.KW_STRING - 77)) |
              (1 << (HiveParser.KW_CHAR - 77)) |
              (1 << (HiveParser.KW_VARCHAR - 77)) |
              (1 << (HiveParser.KW_ARRAY - 77)) |
              (1 << (HiveParser.KW_STRUCT - 77)) |
              (1 << (HiveParser.KW_MAP - 77)) |
              (1 << (HiveParser.KW_UNIONTYPE - 77)))) !==
            0) ||
        _la === HiveParser.KW_BINARY
      ) {
        this.state = 2767;
        this.colType();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnConstraint() {
    let localctx = new ColumnConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, HiveParser.RULE_columnConstraint);
    try {
      this.state = 2772;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 269, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2770;
          this.foreignKeyConstraint();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2771;
          this.colConstraint();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  foreignKeyConstraint() {
    let localctx = new ForeignKeyConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, HiveParser.RULE_foreignKeyConstraint);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2776;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_CONSTRAINT) {
        this.state = 2774;
        this.match(HiveParser.KW_CONSTRAINT);
        this.state = 2775;
        this.identifier();
      }

      this.state = 2778;
      this.match(HiveParser.KW_REFERENCES);
      this.state = 2779;
      this.tableName();
      this.state = 2780;
      this.match(HiveParser.LPAREN);
      this.state = 2781;
      this.columnName();
      this.state = 2782;
      this.match(HiveParser.RPAREN);
      this.state = 2784;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        _la === HiveParser.KW_NOT ||
        _la === HiveParser.KW_ENABLE ||
        _la === HiveParser.KW_DISABLE ||
        _la === HiveParser.KW_ENFORCED
      ) {
        this.state = 2783;
        this.constraintOptsCreate();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  colConstraint() {
    let localctx = new ColConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, HiveParser.RULE_colConstraint);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2788;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_CONSTRAINT) {
        this.state = 2786;
        this.match(HiveParser.KW_CONSTRAINT);
        this.state = 2787;
        this.identifier();
      }

      this.state = 2790;
      this.columnConstraintType();
      this.state = 2794;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 273, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2791;
          this.columnConstraintType();
        }
        this.state = 2796;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 273, this._ctx);
      }

      this.state = 2798;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        _la === HiveParser.KW_NOT ||
        _la === HiveParser.KW_ENABLE ||
        _la === HiveParser.KW_DISABLE ||
        _la === HiveParser.KW_ENFORCED
      ) {
        this.state = 2797;
        this.constraintOptsCreate();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterColumnConstraint() {
    let localctx = new AlterColumnConstraintContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 452, HiveParser.RULE_alterColumnConstraint);
    try {
      this.state = 2802;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 275, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2800;
          this.alterForeignKeyConstraint();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2801;
          this.alterColConstraint();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterForeignKeyConstraint() {
    let localctx = new AlterForeignKeyConstraintContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 454, HiveParser.RULE_alterForeignKeyConstraint);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2806;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_CONSTRAINT) {
        this.state = 2804;
        this.match(HiveParser.KW_CONSTRAINT);
        this.state = 2805;
        this.identifier();
      }

      this.state = 2808;
      this.match(HiveParser.KW_REFERENCES);
      this.state = 2809;
      this.tableName();
      this.state = 2810;
      this.match(HiveParser.LPAREN);
      this.state = 2811;
      this.columnName();
      this.state = 2812;
      this.match(HiveParser.RPAREN);
      this.state = 2814;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        _la === HiveParser.KW_NOT ||
        _la === HiveParser.KW_ENABLE ||
        _la === HiveParser.KW_DISABLE ||
        _la === HiveParser.KW_ENFORCED
      ) {
        this.state = 2813;
        this.constraintOptsAlter();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterColConstraint() {
    let localctx = new AlterColConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, HiveParser.RULE_alterColConstraint);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2818;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_CONSTRAINT) {
        this.state = 2816;
        this.match(HiveParser.KW_CONSTRAINT);
        this.state = 2817;
        this.identifier();
      }

      this.state = 2820;
      this.columnConstraintType();
      this.state = 2822;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        _la === HiveParser.KW_NOT ||
        _la === HiveParser.KW_ENABLE ||
        _la === HiveParser.KW_DISABLE ||
        _la === HiveParser.KW_ENFORCED
      ) {
        this.state = 2821;
        this.constraintOptsAlter();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnConstraintType() {
    let localctx = new ColumnConstraintTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, HiveParser.RULE_columnConstraintType);
    try {
      this.state = 2831;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_NOT:
          this.enterOuterAlt(localctx, 1);
          this.state = 2824;
          this.match(HiveParser.KW_NOT);
          this.state = 2825;
          this.match(HiveParser.KW_NULL);
          break;
        case HiveParser.KW_DEFAULT:
          this.enterOuterAlt(localctx, 2);
          this.state = 2826;
          this.match(HiveParser.KW_DEFAULT);
          this.state = 2827;
          this.defaultVal();
          break;
        case HiveParser.KW_GENERATED:
          this.enterOuterAlt(localctx, 3);
          this.state = 2828;
          this.columnGeneratedAs();
          break;
        case HiveParser.KW_CHECK:
          this.enterOuterAlt(localctx, 4);
          this.state = 2829;
          this.checkConstraint();
          break;
        case HiveParser.KW_PRIMARY:
        case HiveParser.KW_UNIQUE:
          this.enterOuterAlt(localctx, 5);
          this.state = 2830;
          this.tableConstraintType();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  defaultVal() {
    let localctx = new DefaultValContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, HiveParser.RULE_defaultVal);
    try {
      this.state = 2836;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 281, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2833;
          this.constant();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2834;
          this.functionStatement();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2835;
          this.castExpression();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableConstraintType() {
    let localctx = new TableConstraintTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, HiveParser.RULE_tableConstraintType);
    try {
      this.state = 2841;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_PRIMARY:
          this.enterOuterAlt(localctx, 1);
          this.state = 2838;
          this.match(HiveParser.KW_PRIMARY);
          this.state = 2839;
          this.match(HiveParser.KW_KEY);
          break;
        case HiveParser.KW_UNIQUE:
          this.enterOuterAlt(localctx, 2);
          this.state = 2840;
          this.match(HiveParser.KW_UNIQUE);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  constraintOptsCreate() {
    let localctx = new ConstraintOptsCreateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, HiveParser.RULE_constraintOptsCreate);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2843;
      this.enableValidateSpecification();
      this.state = 2844;
      this.relySpecification();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  constraintOptsAlter() {
    let localctx = new ConstraintOptsAlterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, HiveParser.RULE_constraintOptsAlter);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2846;
      this.enableValidateSpecification();
      this.state = 2847;
      this.relySpecification();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnNameColonType() {
    let localctx = new ColumnNameColonTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 468, HiveParser.RULE_columnNameColonType);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2849;
      this.identifier();
      this.state = 2850;
      this.match(HiveParser.COLON);
      this.state = 2851;
      this.colType();
      this.state = 2854;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_COMMENT) {
        this.state = 2852;
        this.match(HiveParser.KW_COMMENT);
        this.state = 2853;
        this.match(HiveParser.StringLiteral);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  colType() {
    let localctx = new ColTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, HiveParser.RULE_colType);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2856;
      this.type_db_col();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  colTypeList() {
    let localctx = new ColTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, HiveParser.RULE_colTypeList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2858;
      this.colType();
      this.state = 2863;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 2859;
        this.match(HiveParser.COMMA);
        this.state = 2860;
        this.colType();
        this.state = 2865;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  type_db_col() {
    let localctx = new Type_db_colContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, HiveParser.RULE_type_db_col);
    try {
      this.state = 2871;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_BOOLEAN:
        case HiveParser.KW_TINYINT:
        case HiveParser.KW_SMALLINT:
        case HiveParser.KW_INT:
        case HiveParser.KW_BIGINT:
        case HiveParser.KW_FLOAT:
        case HiveParser.KW_DOUBLE:
        case HiveParser.KW_DATE:
        case HiveParser.KW_DATETIME:
        case HiveParser.KW_TIMESTAMP:
        case HiveParser.KW_TIMESTAMPLOCALTZ:
        case HiveParser.KW_DECIMAL:
        case HiveParser.KW_STRING:
        case HiveParser.KW_CHAR:
        case HiveParser.KW_VARCHAR:
        case HiveParser.KW_BINARY:
          this.enterOuterAlt(localctx, 1);
          this.state = 2866;
          this.primitiveType();
          break;
        case HiveParser.KW_ARRAY:
          this.enterOuterAlt(localctx, 2);
          this.state = 2867;
          this.listType();
          break;
        case HiveParser.KW_STRUCT:
          this.enterOuterAlt(localctx, 3);
          this.state = 2868;
          this.structType();
          break;
        case HiveParser.KW_MAP:
          this.enterOuterAlt(localctx, 4);
          this.state = 2869;
          this.mapType();
          break;
        case HiveParser.KW_UNIONTYPE:
          this.enterOuterAlt(localctx, 5);
          this.state = 2870;
          this.unionType();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  primitiveType() {
    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, HiveParser.RULE_primitiveType);
    var _la = 0; // Token type
    try {
      this.state = 2912;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 289, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2873;
          this.match(HiveParser.KW_TINYINT);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2874;
          this.match(HiveParser.KW_SMALLINT);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2875;
          this.match(HiveParser.KW_INT);
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 2876;
          this.match(HiveParser.KW_BIGINT);
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 2877;
          this.match(HiveParser.KW_BOOLEAN);
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 2878;
          this.match(HiveParser.KW_FLOAT);
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 2879;
          this.match(HiveParser.KW_DOUBLE);
          this.state = 2881;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_PRECISION) {
            this.state = 2880;
            this.match(HiveParser.KW_PRECISION);
          }

          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 2883;
          this.match(HiveParser.KW_DATE);
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 2884;
          this.match(HiveParser.KW_DATETIME);
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 2885;
          this.match(HiveParser.KW_TIMESTAMP);
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 2886;
          this.match(HiveParser.KW_TIMESTAMPLOCALTZ);
          break;

        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 2887;
          this.match(HiveParser.KW_TIMESTAMP);
          this.state = 2888;
          this.match(HiveParser.KW_WITH);
          this.state = 2889;
          this.match(HiveParser.KW_LOCAL);
          this.state = 2890;
          this.match(HiveParser.KW_TIME);
          this.state = 2891;
          this.match(HiveParser.KW_ZONE);
          break;

        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 2892;
          this.match(HiveParser.KW_STRING);
          break;

        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 2893;
          this.match(HiveParser.KW_BINARY);
          break;

        case 15:
          this.enterOuterAlt(localctx, 15);
          this.state = 2894;
          this.match(HiveParser.KW_DECIMAL);
          this.state = 2902;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.LPAREN) {
            this.state = 2895;
            this.match(HiveParser.LPAREN);
            this.state = 2896;
            this.match(HiveParser.Number);
            this.state = 2899;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === HiveParser.COMMA) {
              this.state = 2897;
              this.match(HiveParser.COMMA);
              this.state = 2898;
              this.match(HiveParser.Number);
            }

            this.state = 2901;
            this.match(HiveParser.RPAREN);
          }

          break;

        case 16:
          this.enterOuterAlt(localctx, 16);
          this.state = 2904;
          this.match(HiveParser.KW_VARCHAR);
          this.state = 2905;
          this.match(HiveParser.LPAREN);
          this.state = 2906;
          this.match(HiveParser.Number);
          this.state = 2907;
          this.match(HiveParser.RPAREN);
          break;

        case 17:
          this.enterOuterAlt(localctx, 17);
          this.state = 2908;
          this.match(HiveParser.KW_CHAR);
          this.state = 2909;
          this.match(HiveParser.LPAREN);
          this.state = 2910;
          this.match(HiveParser.Number);
          this.state = 2911;
          this.match(HiveParser.RPAREN);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  listType() {
    let localctx = new ListTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, HiveParser.RULE_listType);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2914;
      this.match(HiveParser.KW_ARRAY);
      this.state = 2915;
      this.match(HiveParser.LESSTHAN);
      this.state = 2916;
      this.type_db_col();
      this.state = 2917;
      this.match(HiveParser.GREATERTHAN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  structType() {
    let localctx = new StructTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, HiveParser.RULE_structType);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2919;
      this.match(HiveParser.KW_STRUCT);
      this.state = 2920;
      this.match(HiveParser.LESSTHAN);
      this.state = 2921;
      this.columnNameColonTypeList();
      this.state = 2922;
      this.match(HiveParser.GREATERTHAN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  mapType() {
    let localctx = new MapTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, HiveParser.RULE_mapType);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2924;
      this.match(HiveParser.KW_MAP);
      this.state = 2925;
      this.match(HiveParser.LESSTHAN);
      this.state = 2926;
      this.primitiveType();
      this.state = 2927;
      this.match(HiveParser.COMMA);
      this.state = 2928;
      this.type_db_col();
      this.state = 2929;
      this.match(HiveParser.GREATERTHAN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  unionType() {
    let localctx = new UnionTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, HiveParser.RULE_unionType);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2931;
      this.match(HiveParser.KW_UNIONTYPE);
      this.state = 2932;
      this.match(HiveParser.LESSTHAN);
      this.state = 2933;
      this.colTypeList();
      this.state = 2934;
      this.match(HiveParser.GREATERTHAN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  setOperator() {
    let localctx = new SetOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, HiveParser.RULE_setOperator);
    var _la = 0; // Token type
    try {
      this.state = 2960;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 294, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 2936;
          this.match(HiveParser.KW_UNION);
          this.state = 2937;
          this.match(HiveParser.KW_ALL);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 2938;
          this.match(HiveParser.KW_UNION);
          this.state = 2940;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_DISTINCT) {
            this.state = 2939;
            this.match(HiveParser.KW_DISTINCT);
          }

          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 2942;
          this.match(HiveParser.KW_INTERSECT);
          this.state = 2943;
          this.match(HiveParser.KW_ALL);
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 2944;
          this.match(HiveParser.KW_INTERSECT);
          this.state = 2946;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_DISTINCT) {
            this.state = 2945;
            this.match(HiveParser.KW_DISTINCT);
          }

          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 2948;
          this.match(HiveParser.KW_EXCEPT);
          this.state = 2949;
          this.match(HiveParser.KW_ALL);
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 2950;
          this.match(HiveParser.KW_EXCEPT);
          this.state = 2952;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_DISTINCT) {
            this.state = 2951;
            this.match(HiveParser.KW_DISTINCT);
          }

          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 2954;
          this.match(HiveParser.KW_MINUS);
          this.state = 2955;
          this.match(HiveParser.KW_ALL);
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 2956;
          this.match(HiveParser.KW_MINUS);
          this.state = 2958;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_DISTINCT) {
            this.state = 2957;
            this.match(HiveParser.KW_DISTINCT);
          }

          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  queryStatementExpression() {
    let localctx = new QueryStatementExpressionContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 488, HiveParser.RULE_queryStatementExpression);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2963;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WITH) {
        this.state = 2962;
        this.withClause();
      }

      this.state = 2965;
      this.queryStatementExpressionBody();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  queryStatementExpressionBody() {
    let localctx = new QueryStatementExpressionBodyContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 490, HiveParser.RULE_queryStatementExpressionBody);
    try {
      this.state = 2969;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_FROM:
          this.enterOuterAlt(localctx, 1);
          this.state = 2967;
          this.fromStatement();
          break;
        case HiveParser.KW_SELECT:
        case HiveParser.KW_INSERT:
        case HiveParser.KW_MAP:
        case HiveParser.KW_REDUCE:
        case HiveParser.LPAREN:
          this.enterOuterAlt(localctx, 2);
          this.state = 2968;
          this.regularBody();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  withClause() {
    let localctx = new WithClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 492, HiveParser.RULE_withClause);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2971;
      this.match(HiveParser.KW_WITH);
      this.state = 2972;
      this.cteStatement();
      this.state = 2977;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 2973;
        this.match(HiveParser.COMMA);
        this.state = 2974;
        this.cteStatement();
        this.state = 2979;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  cteStatement() {
    let localctx = new CteStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 494, HiveParser.RULE_cteStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2980;
      this.identifier();
      this.state = 2981;
      this.match(HiveParser.KW_AS);
      this.state = 2982;
      this.match(HiveParser.LPAREN);
      this.state = 2983;
      this.queryStatementExpression();
      this.state = 2984;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  fromStatement() {
    let localctx = new FromStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 496, HiveParser.RULE_fromStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2986;
      this.singleFromStatement();
      this.state = 2992;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (
        _la === HiveParser.KW_UNION ||
        _la === HiveParser.KW_EXCEPT ||
        _la === HiveParser.KW_MINUS ||
        _la === HiveParser.KW_INTERSECT
      ) {
        this.state = 2987;
        this.setOperator();
        this.state = 2988;
        this.singleFromStatement();
        this.state = 2994;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  singleFromStatement() {
    let localctx = new SingleFromStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 498, HiveParser.RULE_singleFromStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 2995;
      this.fromClause();
      this.state = 2997;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 2996;
        this.body();
        this.state = 2999;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (
        _la === HiveParser.KW_SELECT ||
        _la === HiveParser.KW_INSERT ||
        _la === HiveParser.KW_MAP ||
        _la === HiveParser.KW_REDUCE
      );
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  regularBody() {
    let localctx = new RegularBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 500, HiveParser.RULE_regularBody);
    try {
      this.state = 3007;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_INSERT:
          this.enterOuterAlt(localctx, 1);
          this.state = 3001;
          this.insertClause();
          this.state = 3004;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case HiveParser.KW_SELECT:
            case HiveParser.KW_MAP:
            case HiveParser.KW_REDUCE:
            case HiveParser.LPAREN:
              this.state = 3002;
              this.selectStatement();
              break;
            case HiveParser.KW_VALUES:
              this.state = 3003;
              this.valuesClause();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          break;
        case HiveParser.KW_SELECT:
        case HiveParser.KW_MAP:
        case HiveParser.KW_REDUCE:
        case HiveParser.LPAREN:
          this.enterOuterAlt(localctx, 2);
          this.state = 3006;
          this.selectStatement();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  atomSelectStatement() {
    let localctx = new AtomSelectStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 502, HiveParser.RULE_atomSelectStatement);
    var _la = 0; // Token type
    try {
      this.state = 3029;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_SELECT:
        case HiveParser.KW_MAP:
        case HiveParser.KW_REDUCE:
          this.enterOuterAlt(localctx, 1);
          this.state = 3009;
          this.selectClause();
          this.state = 3011;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_FROM) {
            this.state = 3010;
            this.fromClause();
          }

          this.state = 3014;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_WHERE) {
            this.state = 3013;
            this.whereClause();
          }

          this.state = 3017;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_GROUP) {
            this.state = 3016;
            this.groupByClause();
          }

          this.state = 3020;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_HAVING) {
            this.state = 3019;
            this.havingClause();
          }

          this.state = 3023;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_WINDOW) {
            this.state = 3022;
            this.window_clause();
          }

          break;
        case HiveParser.LPAREN:
          this.enterOuterAlt(localctx, 2);
          this.state = 3025;
          this.match(HiveParser.LPAREN);
          this.state = 3026;
          this.selectStatement();
          this.state = 3027;
          this.match(HiveParser.RPAREN);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  selectStatement() {
    let localctx = new SelectStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 504, HiveParser.RULE_selectStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3031;
      this.atomSelectStatement();
      this.state = 3033;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        _la === HiveParser.KW_UNION ||
        _la === HiveParser.KW_EXCEPT ||
        _la === HiveParser.KW_MINUS ||
        _la === HiveParser.KW_INTERSECT
      ) {
        this.state = 3032;
        this.setOpSelectStatement();
      }

      this.state = 3036;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_ORDER) {
        this.state = 3035;
        this.orderByClause();
      }

      this.state = 3039;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_CLUSTER) {
        this.state = 3038;
        this.clusterByClause();
      }

      this.state = 3042;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_DISTRIBUTE) {
        this.state = 3041;
        this.distributeByClause();
      }

      this.state = 3045;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_SORT) {
        this.state = 3044;
        this.sortByClause();
      }

      this.state = 3048;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_LIMIT) {
        this.state = 3047;
        this.limitClause();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  setOpSelectStatement() {
    let localctx = new SetOpSelectStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 506, HiveParser.RULE_setOpSelectStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3053;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 3050;
        this.setOperator();
        this.state = 3051;
        this.atomSelectStatement();
        this.state = 3055;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (
        _la === HiveParser.KW_UNION ||
        _la === HiveParser.KW_EXCEPT ||
        _la === HiveParser.KW_MINUS ||
        _la === HiveParser.KW_INTERSECT
      );
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  selectStatementWithCTE() {
    let localctx = new SelectStatementWithCTEContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 508, HiveParser.RULE_selectStatementWithCTE);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3058;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WITH) {
        this.state = 3057;
        this.withClause();
      }

      this.state = 3060;
      this.selectStatement();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  body() {
    let localctx = new BodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 510, HiveParser.RULE_body);
    var _la = 0; // Token type
    try {
      this.state = 3125;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_INSERT:
          this.enterOuterAlt(localctx, 1);
          this.state = 3062;
          this.insertClause();
          this.state = 3063;
          this.selectClause();
          this.state = 3065;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_LATERAL || _la === HiveParser.COMMA) {
            this.state = 3064;
            this.lateralView();
          }

          this.state = 3068;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_WHERE) {
            this.state = 3067;
            this.whereClause();
          }

          this.state = 3071;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_GROUP) {
            this.state = 3070;
            this.groupByClause();
          }

          this.state = 3074;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_HAVING) {
            this.state = 3073;
            this.havingClause();
          }

          this.state = 3077;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_WINDOW) {
            this.state = 3076;
            this.window_clause();
          }

          this.state = 3080;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_ORDER) {
            this.state = 3079;
            this.orderByClause();
          }

          this.state = 3083;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_CLUSTER) {
            this.state = 3082;
            this.clusterByClause();
          }

          this.state = 3086;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_DISTRIBUTE) {
            this.state = 3085;
            this.distributeByClause();
          }

          this.state = 3089;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_SORT) {
            this.state = 3088;
            this.sortByClause();
          }

          this.state = 3092;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_LIMIT) {
            this.state = 3091;
            this.limitClause();
          }

          break;
        case HiveParser.KW_SELECT:
        case HiveParser.KW_MAP:
        case HiveParser.KW_REDUCE:
          this.enterOuterAlt(localctx, 2);
          this.state = 3094;
          this.selectClause();
          this.state = 3096;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_LATERAL || _la === HiveParser.COMMA) {
            this.state = 3095;
            this.lateralView();
          }

          this.state = 3099;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_WHERE) {
            this.state = 3098;
            this.whereClause();
          }

          this.state = 3102;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_GROUP) {
            this.state = 3101;
            this.groupByClause();
          }

          this.state = 3105;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_HAVING) {
            this.state = 3104;
            this.havingClause();
          }

          this.state = 3108;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_WINDOW) {
            this.state = 3107;
            this.window_clause();
          }

          this.state = 3111;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_ORDER) {
            this.state = 3110;
            this.orderByClause();
          }

          this.state = 3114;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_CLUSTER) {
            this.state = 3113;
            this.clusterByClause();
          }

          this.state = 3117;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_DISTRIBUTE) {
            this.state = 3116;
            this.distributeByClause();
          }

          this.state = 3120;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_SORT) {
            this.state = 3119;
            this.sortByClause();
          }

          this.state = 3123;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_LIMIT) {
            this.state = 3122;
            this.limitClause();
          }

          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  insertClause() {
    let localctx = new InsertClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 512, HiveParser.RULE_insertClause);
    var _la = 0; // Token type
    try {
      this.state = 3145;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 340, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3127;
          this.match(HiveParser.KW_INSERT);
          this.state = 3128;
          this.match(HiveParser.KW_OVERWRITE);
          this.state = 3129;
          this.destination();
          this.state = 3131;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_IF) {
            this.state = 3130;
            this.ifNotExists();
          }

          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3133;
          this.match(HiveParser.KW_INSERT);
          this.state = 3134;
          this.match(HiveParser.KW_INTO);
          this.state = 3136;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_TABLE) {
            this.state = 3135;
            this.match(HiveParser.KW_TABLE);
          }

          this.state = 3138;
          this.tableOrPartition();
          this.state = 3143;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 339, this._ctx);
          if (la_ === 1) {
            this.state = 3139;
            this.match(HiveParser.LPAREN);
            this.state = 3140;
            this.columnNameList();
            this.state = 3141;
            this.match(HiveParser.RPAREN);
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  destination() {
    let localctx = new DestinationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 514, HiveParser.RULE_destination);
    var _la = 0; // Token type
    try {
      this.state = 3160;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_DIRECTORY:
        case HiveParser.KW_LOCAL:
          this.enterOuterAlt(localctx, 1);
          this.state = 3148;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_LOCAL) {
            this.state = 3147;
            this.match(HiveParser.KW_LOCAL);
          }

          this.state = 3150;
          this.match(HiveParser.KW_DIRECTORY);
          this.state = 3151;
          this.match(HiveParser.StringLiteral);
          this.state = 3153;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_ROW) {
            this.state = 3152;
            this.tableRowFormat();
          }

          this.state = 3156;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_STORED) {
            this.state = 3155;
            this.tableFileFormat();
          }

          break;
        case HiveParser.KW_TABLE:
          this.enterOuterAlt(localctx, 2);
          this.state = 3158;
          this.match(HiveParser.KW_TABLE);
          this.state = 3159;
          this.tableOrPartition();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  limitClause() {
    let localctx = new LimitClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 516, HiveParser.RULE_limitClause);
    try {
      this.state = 3172;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 346, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3162;
          this.match(HiveParser.KW_LIMIT);

          this.state = 3165;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 345, this._ctx);
          if (la_ === 1) {
            this.state = 3163;
            this.match(HiveParser.Number);
            this.state = 3164;
            this.match(HiveParser.COMMA);
          }
          this.state = 3167;
          this.match(HiveParser.Number);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3168;
          this.match(HiveParser.KW_LIMIT);
          this.state = 3169;
          this.match(HiveParser.Number);
          this.state = 3170;
          this.match(HiveParser.KW_OFFSET);
          this.state = 3171;
          this.match(HiveParser.Number);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  deleteStatement() {
    let localctx = new DeleteStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 518, HiveParser.RULE_deleteStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3174;
      this.match(HiveParser.KW_DELETE);
      this.state = 3175;
      this.match(HiveParser.KW_FROM);
      this.state = 3176;
      this.tableName();
      this.state = 3178;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WHERE) {
        this.state = 3177;
        this.whereClause();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnAssignmentClause() {
    let localctx = new ColumnAssignmentClauseContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 520, HiveParser.RULE_columnAssignmentClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3180;
      this.tableOrColumn();
      this.state = 3181;
      this.match(HiveParser.EQUAL);
      this.state = 3182;
      this.expression(0);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  setColumnsClause() {
    let localctx = new SetColumnsClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 522, HiveParser.RULE_setColumnsClause);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3184;
      this.match(HiveParser.KW_SET);
      this.state = 3185;
      this.columnAssignmentClause();
      this.state = 3190;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 3186;
        this.match(HiveParser.COMMA);
        this.state = 3187;
        this.columnAssignmentClause();
        this.state = 3192;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  updateStatement() {
    let localctx = new UpdateStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 524, HiveParser.RULE_updateStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3193;
      this.match(HiveParser.KW_UPDATE);
      this.state = 3194;
      this.tableName();
      this.state = 3195;
      this.setColumnsClause();
      this.state = 3197;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WHERE) {
        this.state = 3196;
        this.whereClause();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  sqlTransactionStatement() {
    let localctx = new SqlTransactionStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 526, HiveParser.RULE_sqlTransactionStatement);
    try {
      this.state = 3203;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_START:
          this.enterOuterAlt(localctx, 1);
          this.state = 3199;
          this.startTransactionStatement();
          break;
        case HiveParser.KW_COMMIT:
          this.enterOuterAlt(localctx, 2);
          this.state = 3200;
          this.commitStatement();
          break;
        case HiveParser.KW_ROLLBACK:
          this.enterOuterAlt(localctx, 3);
          this.state = 3201;
          this.rollbackStatement();
          break;
        case HiveParser.KW_SET:
          this.enterOuterAlt(localctx, 4);
          this.state = 3202;
          this.setAutoCommitStatement();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  startTransactionStatement() {
    let localctx = new StartTransactionStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 528, HiveParser.RULE_startTransactionStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3205;
      this.match(HiveParser.KW_START);
      this.state = 3206;
      this.match(HiveParser.KW_TRANSACTION);
      this.state = 3215;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_READ || _la === HiveParser.KW_ISOLATION) {
        this.state = 3207;
        this.transactionMode();
        this.state = 3212;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === HiveParser.COMMA) {
          this.state = 3208;
          this.match(HiveParser.COMMA);
          this.state = 3209;
          this.transactionMode();
          this.state = 3214;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  transactionMode() {
    let localctx = new TransactionModeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 530, HiveParser.RULE_transactionMode);
    try {
      this.state = 3219;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_ISOLATION:
          this.enterOuterAlt(localctx, 1);
          this.state = 3217;
          this.isolationLevel();
          break;
        case HiveParser.KW_READ:
          this.enterOuterAlt(localctx, 2);
          this.state = 3218;
          this.transactionAccessMode();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  transactionAccessMode() {
    let localctx = new TransactionAccessModeContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 532, HiveParser.RULE_transactionAccessMode);
    try {
      this.state = 3225;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 354, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3221;
          this.match(HiveParser.KW_READ);
          this.state = 3222;
          this.match(HiveParser.KW_ONLY);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3223;
          this.match(HiveParser.KW_READ);
          this.state = 3224;
          this.match(HiveParser.KW_WRITE);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  isolationLevel() {
    let localctx = new IsolationLevelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 534, HiveParser.RULE_isolationLevel);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3227;
      this.match(HiveParser.KW_ISOLATION);
      this.state = 3228;
      this.match(HiveParser.KW_LEVEL);
      this.state = 3229;
      this.levelOfIsolation();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  levelOfIsolation() {
    let localctx = new LevelOfIsolationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 536, HiveParser.RULE_levelOfIsolation);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3231;
      this.match(HiveParser.KW_SNAPSHOT);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  commitStatement() {
    let localctx = new CommitStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 538, HiveParser.RULE_commitStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3233;
      this.match(HiveParser.KW_COMMIT);
      this.state = 3235;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WORK) {
        this.state = 3234;
        this.match(HiveParser.KW_WORK);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  rollbackStatement() {
    let localctx = new RollbackStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 540, HiveParser.RULE_rollbackStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3237;
      this.match(HiveParser.KW_ROLLBACK);
      this.state = 3239;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WORK) {
        this.state = 3238;
        this.match(HiveParser.KW_WORK);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  setAutoCommitStatement() {
    let localctx = new SetAutoCommitStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 542, HiveParser.RULE_setAutoCommitStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3241;
      this.match(HiveParser.KW_SET);
      this.state = 3242;
      this.match(HiveParser.KW_AUTOCOMMIT);
      this.state = 3243;
      this.booleanValueTok();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  abortTransactionStatement() {
    let localctx = new AbortTransactionStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 544, HiveParser.RULE_abortTransactionStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3245;
      this.match(HiveParser.KW_ABORT);
      this.state = 3246;
      this.match(HiveParser.KW_TRANSACTIONS);
      this.state = 3248;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 3247;
        this.match(HiveParser.Number);
        this.state = 3250;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (_la === HiveParser.Number);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  mergeStatement() {
    let localctx = new MergeStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 546, HiveParser.RULE_mergeStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3252;
      this.match(HiveParser.KW_MERGE);
      this.state = 3253;
      this.match(HiveParser.KW_INTO);
      this.state = 3254;
      this.tableName();
      this.state = 3259;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        ((_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << HiveParser.KW_IF) |
              (1 << HiveParser.KW_ASC) |
              (1 << HiveParser.KW_DESC) |
              (1 << HiveParser.KW_NULLS) |
              (1 << HiveParser.KW_LAST) |
              (1 << HiveParser.KW_AS) |
              (1 << HiveParser.KW_OVERWRITE))) !==
            0) ||
        (((_la - 36) & ~0x1f) == 0 &&
          ((1 << (_la - 36)) &
            ((1 << (HiveParser.KW_PARTITIONS - 36)) |
              (1 << (HiveParser.KW_TABLES - 36)) |
              (1 << (HiveParser.KW_COLUMNS - 36)) |
              (1 << (HiveParser.KW_INDEX - 36)) |
              (1 << (HiveParser.KW_INDEXES - 36)) |
              (1 << (HiveParser.KW_REBUILD - 36)) |
              (1 << (HiveParser.KW_FUNCTIONS - 36)) |
              (1 << (HiveParser.KW_SHOW - 36)) |
              (1 << (HiveParser.KW_MSCK - 36)) |
              (1 << (HiveParser.KW_REPAIR - 36)) |
              (1 << (HiveParser.KW_DIRECTORY - 36)) |
              (1 << (HiveParser.KW_CLUSTER - 36)) |
              (1 << (HiveParser.KW_DISTRIBUTE - 36)) |
              (1 << (HiveParser.KW_SORT - 36)) |
              (1 << (HiveParser.KW_LOAD - 36)) |
              (1 << (HiveParser.KW_EXPORT - 36)) |
              (1 << (HiveParser.KW_REPLICATION - 36)) |
              (1 << (HiveParser.KW_METADATA - 36)) |
              (1 << (HiveParser.KW_DATA - 36)) |
              (1 << (HiveParser.KW_INPATH - 36)))) !==
            0) ||
        (((_la - 68) & ~0x1f) == 0 &&
          ((1 << (_la - 68)) &
            ((1 << (HiveParser.KW_CHANGE - 68)) |
              (1 << (HiveParser.KW_FIRST - 68)) |
              (1 << (HiveParser.KW_AFTER - 68)) |
              (1 << (HiveParser.KW_RENAME - 68)) |
              (1 << (HiveParser.KW_COMMENT - 68)) |
              (1 << (HiveParser.KW_BOOLEAN - 68)) |
              (1 << (HiveParser.KW_TINYINT - 68)) |
              (1 << (HiveParser.KW_SMALLINT - 68)) |
              (1 << (HiveParser.KW_INT - 68)) |
              (1 << (HiveParser.KW_BIGINT - 68)) |
              (1 << (HiveParser.KW_FLOAT - 68)) |
              (1 << (HiveParser.KW_DOUBLE - 68)) |
              (1 << (HiveParser.KW_DATE - 68)) |
              (1 << (HiveParser.KW_DATETIME - 68)) |
              (1 << (HiveParser.KW_TIMESTAMP - 68)) |
              (1 << (HiveParser.KW_TIME - 68)) |
              (1 << (HiveParser.KW_ZONE - 68)) |
              (1 << (HiveParser.KW_STRING - 68)) |
              (1 << (HiveParser.KW_ARRAY - 68)) |
              (1 << (HiveParser.KW_STRUCT - 68)) |
              (1 << (HiveParser.KW_MAP - 68)) |
              (1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
            0) ||
        (((_la - 101) & ~0x1f) == 0 &&
          ((1 << (_la - 101)) &
            ((1 << (HiveParser.KW_PARTITIONED - 101)) |
              (1 << (HiveParser.KW_CLUSTERED - 101)) |
              (1 << (HiveParser.KW_SORTED - 101)) |
              (1 << (HiveParser.KW_BUCKETS - 101)) |
              (1 << (HiveParser.KW_FORMAT - 101)) |
              (1 << (HiveParser.KW_DELIMITED - 101)) |
              (1 << (HiveParser.KW_FIELDS - 101)) |
              (1 << (HiveParser.KW_TERMINATED - 101)) |
              (1 << (HiveParser.KW_ESCAPED - 101)) |
              (1 << (HiveParser.KW_COLLECTION - 101)) |
              (1 << (HiveParser.KW_ITEMS - 101)) |
              (1 << (HiveParser.KW_KEYS - 101)) |
              (1 << (HiveParser.KW_KEY_TYPE - 101)) |
              (1 << (HiveParser.KW_KILL - 101)) |
              (1 << (HiveParser.KW_LINES - 101)) |
              (1 << (HiveParser.KW_STORED - 101)) |
              (1 << (HiveParser.KW_FILEFORMAT - 101)) |
              (1 << (HiveParser.KW_INPUTFORMAT - 101)) |
              (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
              (1 << (HiveParser.KW_INPUTDRIVER - 101)) |
              (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
              (1 << (HiveParser.KW_ENABLE - 101)) |
              (1 << (HiveParser.KW_DISABLE - 101)) |
              (1 << (HiveParser.KW_LOCATION - 101)) |
              (1 << (HiveParser.KW_BUCKET - 101)))) !==
            0) ||
        (((_la - 134) & ~0x1f) == 0 &&
          ((1 << (_la - 134)) &
            ((1 << (HiveParser.KW_ADD - 134)) |
              (1 << (HiveParser.KW_REPLACE - 134)) |
              (1 << (HiveParser.KW_TEMPORARY - 134)) |
              (1 << (HiveParser.KW_FILE - 134)) |
              (1 << (HiveParser.KW_JAR - 134)) |
              (1 << (HiveParser.KW_EXPLAIN - 134)) |
              (1 << (HiveParser.KW_FORMATTED - 134)) |
              (1 << (HiveParser.KW_DEPENDENCY - 134)) |
              (1 << (HiveParser.KW_LOGICAL - 134)) |
              (1 << (HiveParser.KW_SERDE - 134)) |
              (1 << (HiveParser.KW_DEFERRED - 134)) |
              (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
              (1 << (HiveParser.KW_DBPROPERTIES - 134)) |
              (1 << (HiveParser.KW_LIMIT - 134)) |
              (1 << (HiveParser.KW_OFFSET - 134)) |
              (1 << (HiveParser.KW_UNSET - 134)) |
              (1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
              (1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
              (1 << (HiveParser.KW_VALUE_TYPE - 134)) |
              (1 << (HiveParser.KW_ELEM_TYPE - 134)) |
              (1 << (HiveParser.KW_DEFINED - 134)))) !==
            0) ||
        (((_la - 167) & ~0x1f) == 0 &&
          ((1 << (_la - 167)) &
            ((1 << (HiveParser.KW_MAPJOIN - 167)) |
              (1 << (HiveParser.KW_STREAMTABLE - 167)) |
              (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
              (1 << (HiveParser.KW_UTC - 167)) |
              (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
              (1 << (HiveParser.KW_LONG - 167)) |
              (1 << (HiveParser.KW_PLUS - 167)) |
              (1 << (HiveParser.KW_VIEW - 167)) |
              (1 << (HiveParser.KW_VIEWS - 167)) |
              (1 << (HiveParser.KW_DATABASES - 167)) |
              (1 << (HiveParser.KW_MATERIALIZED - 167)) |
              (1 << (HiveParser.KW_SCHEMA - 167)) |
              (1 << (HiveParser.KW_SCHEMAS - 167)) |
              (1 << (HiveParser.KW_SSL - 167)) |
              (1 << (HiveParser.KW_UNDO - 167)) |
              (1 << (HiveParser.KW_LOCK - 167)) |
              (1 << (HiveParser.KW_LOCKS - 167)) |
              (1 << (HiveParser.KW_UNLOCK - 167)) |
              (1 << (HiveParser.KW_SHARED - 167)) |
              (1 << (HiveParser.KW_EXCLUSIVE - 167)) |
              (1 << (HiveParser.KW_UNSIGNED - 167)) |
              (1 << (HiveParser.KW_WHILE - 167)) |
              (1 << (HiveParser.KW_READ - 167)))) !==
            0) ||
        (((_la - 200) & ~0x1f) == 0 &&
          ((1 << (_la - 200)) &
            ((1 << (HiveParser.KW_PURGE - 200)) |
              (1 << (HiveParser.KW_ANALYZE - 200)) |
              (1 << (HiveParser.KW_BEFORE - 200)) |
              (1 << (HiveParser.KW_BINARY - 200)) |
              (1 << (HiveParser.KW_CONTINUE - 200)) |
              (1 << (HiveParser.KW_RECORDREADER - 200)) |
              (1 << (HiveParser.KW_RECORDWRITER - 200)) |
              (1 << (HiveParser.KW_SEMI - 200)) |
              (1 << (HiveParser.KW_TOUCH - 200)) |
              (1 << (HiveParser.KW_ARCHIVE - 200)) |
              (1 << (HiveParser.KW_UNARCHIVE - 200)) |
              (1 << (HiveParser.KW_COMPUTE - 200)) |
              (1 << (HiveParser.KW_STATISTICS - 200)) |
              (1 << (HiveParser.KW_USE - 200)) |
              (1 << (HiveParser.KW_OPTION - 200)) |
              (1 << (HiveParser.KW_CONCATENATE - 200)) |
              (1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
              (1 << (HiveParser.KW_RESTRICT - 200)) |
              (1 << (HiveParser.KW_CASCADE - 200)) |
              (1 << (HiveParser.KW_SKEWED - 200)) |
              (1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
            0) ||
        (((_la - 238) & ~0x1f) == 0 &&
          ((1 << (_la - 238)) &
            ((1 << (HiveParser.KW_CURRENT_DATE - 238)) |
              (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 238)) |
              (1 << (HiveParser.KW_GROUPING - 238)) |
              (1 << (HiveParser.KW_SETS - 238)) |
              (1 << (HiveParser.KW_NOSCAN - 238)) |
              (1 << (HiveParser.KW_ROLE - 238)) |
              (1 << (HiveParser.KW_ROLES - 238)) |
              (1 << (HiveParser.KW_URI - 238)) |
              (1 << (HiveParser.KW_SERVER - 238)) |
              (1 << (HiveParser.KW_ADMIN - 238)) |
              (1 << (HiveParser.KW_OWNER - 238)) |
              (1 << (HiveParser.KW_PRINCIPALS - 238)) |
              (1 << (HiveParser.KW_COMPACT - 238)) |
              (1 << (HiveParser.KW_COMPACTIONS - 238)) |
              (1 << (HiveParser.KW_TRANSACTIONS - 238)) |
              (1 << (HiveParser.KW_REWRITE - 238)) |
              (1 << (HiveParser.KW_REOPTIMIZATION - 238)) |
              (1 << (HiveParser.KW_RELOAD - 238)) |
              (1 << (HiveParser.KW_YEAR - 238)) |
              (1 << (HiveParser.KW_QUERY - 238)) |
              (1 << (HiveParser.KW_QUARTER - 238)) |
              (1 << (HiveParser.KW_MONTH - 238)))) !==
            0) ||
        (((_la - 270) & ~0x1f) == 0 &&
          ((1 << (_la - 270)) &
            ((1 << (HiveParser.KW_WEEK - 270)) |
              (1 << (HiveParser.KW_DAY - 270)) |
              (1 << (HiveParser.KW_DOW - 270)) |
              (1 << (HiveParser.KW_HOUR - 270)) |
              (1 << (HiveParser.KW_MINUTE - 270)) |
              (1 << (HiveParser.KW_SECOND - 270)) |
              (1 << (HiveParser.KW_TRANSACTION - 270)) |
              (1 << (HiveParser.KW_WORK - 270)) |
              (1 << (HiveParser.KW_WRITE - 270)) |
              (1 << (HiveParser.KW_ISOLATION - 270)) |
              (1 << (HiveParser.KW_LEVEL - 270)) |
              (1 << (HiveParser.KW_SNAPSHOT - 270)) |
              (1 << (HiveParser.KW_AUTOCOMMIT - 270)) |
              (1 << (HiveParser.KW_CACHE - 270)) |
              (1 << (HiveParser.KW_ENFORCED - 270)) |
              (1 << (HiveParser.KW_VALIDATE - 270)) |
              (1 << (HiveParser.KW_NOVALIDATE - 270)) |
              (1 << (HiveParser.KW_RELY - 270)) |
              (1 << (HiveParser.KW_NORELY - 270)) |
              (1 << (HiveParser.KW_KEY - 270)) |
              (1 << (HiveParser.KW_ABORT - 270)))) !==
            0) ||
        (((_la - 303) & ~0x1f) == 0 &&
          ((1 << (_la - 303)) &
            ((1 << (HiveParser.KW_MATCHED - 303)) |
              (1 << (HiveParser.KW_REPL - 303)) |
              (1 << (HiveParser.KW_DUMP - 303)) |
              (1 << (HiveParser.KW_STATUS - 303)) |
              (1 << (HiveParser.KW_VECTORIZATION - 303)) |
              (1 << (HiveParser.KW_SUMMARY - 303)) |
              (1 << (HiveParser.KW_OPERATOR - 303)) |
              (1 << (HiveParser.KW_EXPRESSION - 303)) |
              (1 << (HiveParser.KW_DETAIL - 303)) |
              (1 << (HiveParser.KW_WAIT - 303)) |
              (1 << (HiveParser.KW_RESOURCE - 303)) |
              (1 << (HiveParser.KW_PLAN - 303)) |
              (1 << (HiveParser.KW_QUERY_PARALLELISM - 303)) |
              (1 << (HiveParser.KW_PLANS - 303)) |
              (1 << (HiveParser.KW_ACTIVATE - 303)) |
              (1 << (HiveParser.KW_DEFAULT - 303)) |
              (1 << (HiveParser.KW_CHECK - 303)) |
              (1 << (HiveParser.KW_POOL - 303)) |
              (1 << (HiveParser.KW_MOVE - 303)) |
              (1 << (HiveParser.KW_DO - 303)) |
              (1 << (HiveParser.KW_ALLOC_FRACTION - 303)) |
              (1 << (HiveParser.KW_SCHEDULING_POLICY - 303)) |
              (1 << (HiveParser.KW_PATH - 303)) |
              (1 << (HiveParser.KW_MAPPING - 303)) |
              (1 << (HiveParser.KW_WORKLOAD - 303)) |
              (1 << (HiveParser.KW_MANAGEMENT - 303)) |
              (1 << (HiveParser.KW_ACTIVE - 303)) |
              (1 << (HiveParser.KW_UNMANAGED - 303)))) !==
            0) ||
        (((_la - 338) & ~0x1f) == 0 &&
          ((1 << (_la - 338)) &
            ((1 << (HiveParser.KW_DELTA - 338)) |
              (1 << (HiveParser.KW_CSV - 338)) |
              (1 << (HiveParser.KW_JSON - 338)) |
              (1 << (HiveParser.KW_BLOOMFILTER - 338)) |
              (1 << (HiveParser.LCURLY - 338)))) !==
            0) ||
        _la === HiveParser.Identifier
      ) {
        this.state = 3256;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === HiveParser.KW_AS) {
          this.state = 3255;
          this.match(HiveParser.KW_AS);
        }

        this.state = 3258;
        this.identifier();
      }

      this.state = 3261;
      this.match(HiveParser.KW_USING);
      this.state = 3262;
      this.joinSourcePart();
      this.state = 3263;
      this.match(HiveParser.KW_ON);
      this.state = 3264;
      this.expression(0);
      this.state = 3265;
      this.whenClauses();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  whenClauses() {
    let localctx = new WhenClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 548, HiveParser.RULE_whenClauses);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3271;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 361, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 3269;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 360, this._ctx);
          switch (la_) {
            case 1:
              this.state = 3267;
              this.whenMatchedAndClause();
              break;

            case 2:
              this.state = 3268;
              this.whenMatchedThenClause();
              break;
          }
        }
        this.state = 3273;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 361, this._ctx);
      }

      this.state = 3275;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WHEN) {
        this.state = 3274;
        this.whenNotMatchedClause();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  whenNotMatchedClause() {
    let localctx = new WhenNotMatchedClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 550, HiveParser.RULE_whenNotMatchedClause);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3277;
      this.match(HiveParser.KW_WHEN);
      this.state = 3278;
      this.match(HiveParser.KW_NOT);
      this.state = 3279;
      this.match(HiveParser.KW_MATCHED);
      this.state = 3282;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_AND) {
        this.state = 3280;
        this.match(HiveParser.KW_AND);
        this.state = 3281;
        this.expression(0);
      }

      this.state = 3284;
      this.match(HiveParser.KW_THEN);
      this.state = 3285;
      this.match(HiveParser.KW_INSERT);
      this.state = 3286;
      this.match(HiveParser.KW_VALUES);
      this.state = 3287;
      this.valueRowConstructor();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  whenMatchedAndClause() {
    let localctx = new WhenMatchedAndClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 552, HiveParser.RULE_whenMatchedAndClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3289;
      this.match(HiveParser.KW_WHEN);
      this.state = 3290;
      this.match(HiveParser.KW_MATCHED);
      this.state = 3291;
      this.match(HiveParser.KW_AND);
      this.state = 3292;
      this.expression(0);
      this.state = 3293;
      this.match(HiveParser.KW_THEN);
      this.state = 3294;
      this.updateOrDelete();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  whenMatchedThenClause() {
    let localctx = new WhenMatchedThenClauseContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 554, HiveParser.RULE_whenMatchedThenClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3296;
      this.match(HiveParser.KW_WHEN);
      this.state = 3297;
      this.match(HiveParser.KW_MATCHED);
      this.state = 3298;
      this.match(HiveParser.KW_THEN);
      this.state = 3299;
      this.updateOrDelete();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  updateOrDelete() {
    let localctx = new UpdateOrDeleteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 556, HiveParser.RULE_updateOrDelete);
    try {
      this.state = 3304;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_UPDATE:
          this.enterOuterAlt(localctx, 1);
          this.state = 3301;
          this.match(HiveParser.KW_UPDATE);
          this.state = 3302;
          this.setColumnsClause();
          break;
        case HiveParser.KW_DELETE:
          this.enterOuterAlt(localctx, 2);
          this.state = 3303;
          this.match(HiveParser.KW_DELETE);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  killQueryStatement() {
    let localctx = new KillQueryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 558, HiveParser.RULE_killQueryStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3306;
      this.match(HiveParser.KW_KILL);
      this.state = 3307;
      this.match(HiveParser.KW_QUERY);
      this.state = 3309;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 3308;
        this.match(HiveParser.StringLiteral);
        this.state = 3311;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (_la === HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  selectClause() {
    let localctx = new SelectClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 560, HiveParser.RULE_selectClause);
    var _la = 0; // Token type
    try {
      this.state = 3326;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_SELECT:
          this.enterOuterAlt(localctx, 1);
          this.state = 3313;
          this.match(HiveParser.KW_SELECT);
          this.state = 3315;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.QUERY_HINT) {
            this.state = 3314;
            this.match(HiveParser.QUERY_HINT);
          }

          this.state = 3323;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case HiveParser.KW_TRUE:
            case HiveParser.KW_FALSE:
            case HiveParser.KW_ALL:
            case HiveParser.KW_NOT:
            case HiveParser.KW_IF:
            case HiveParser.KW_EXISTS:
            case HiveParser.KW_ASC:
            case HiveParser.KW_DESC:
            case HiveParser.KW_NULLS:
            case HiveParser.KW_LAST:
            case HiveParser.KW_DISTINCT:
            case HiveParser.KW_OVERWRITE:
            case HiveParser.KW_PARTITIONS:
            case HiveParser.KW_TABLES:
            case HiveParser.KW_COLUMNS:
            case HiveParser.KW_INDEX:
            case HiveParser.KW_INDEXES:
            case HiveParser.KW_REBUILD:
            case HiveParser.KW_FUNCTIONS:
            case HiveParser.KW_SHOW:
            case HiveParser.KW_MSCK:
            case HiveParser.KW_REPAIR:
            case HiveParser.KW_DIRECTORY:
            case HiveParser.KW_CLUSTER:
            case HiveParser.KW_DISTRIBUTE:
            case HiveParser.KW_SORT:
            case HiveParser.KW_LOAD:
            case HiveParser.KW_EXPORT:
            case HiveParser.KW_REPLICATION:
            case HiveParser.KW_METADATA:
            case HiveParser.KW_DATA:
            case HiveParser.KW_INPATH:
            case HiveParser.KW_NULL:
            case HiveParser.KW_CHANGE:
            case HiveParser.KW_FIRST:
            case HiveParser.KW_AFTER:
            case HiveParser.KW_RENAME:
            case HiveParser.KW_COMMENT:
            case HiveParser.KW_BOOLEAN:
            case HiveParser.KW_TINYINT:
            case HiveParser.KW_SMALLINT:
            case HiveParser.KW_INT:
            case HiveParser.KW_BIGINT:
            case HiveParser.KW_FLOAT:
            case HiveParser.KW_DOUBLE:
            case HiveParser.KW_DATE:
            case HiveParser.KW_DATETIME:
            case HiveParser.KW_TIMESTAMP:
            case HiveParser.KW_TIMESTAMPLOCALTZ:
            case HiveParser.KW_TIME:
            case HiveParser.KW_ZONE:
            case HiveParser.KW_INTERVAL:
            case HiveParser.KW_STRING:
            case HiveParser.KW_ARRAY:
            case HiveParser.KW_STRUCT:
            case HiveParser.KW_MAP:
            case HiveParser.KW_UNIONTYPE:
            case HiveParser.KW_PARTITIONED:
            case HiveParser.KW_CLUSTERED:
            case HiveParser.KW_SORTED:
            case HiveParser.KW_BUCKETS:
            case HiveParser.KW_FORMAT:
            case HiveParser.KW_DELIMITED:
            case HiveParser.KW_FIELDS:
            case HiveParser.KW_TERMINATED:
            case HiveParser.KW_ESCAPED:
            case HiveParser.KW_COLLECTION:
            case HiveParser.KW_ITEMS:
            case HiveParser.KW_KEYS:
            case HiveParser.KW_KEY_TYPE:
            case HiveParser.KW_KILL:
            case HiveParser.KW_LINES:
            case HiveParser.KW_STORED:
            case HiveParser.KW_FILEFORMAT:
            case HiveParser.KW_INPUTFORMAT:
            case HiveParser.KW_OUTPUTFORMAT:
            case HiveParser.KW_INPUTDRIVER:
            case HiveParser.KW_OUTPUTDRIVER:
            case HiveParser.KW_ENABLE:
            case HiveParser.KW_DISABLE:
            case HiveParser.KW_LOCATION:
            case HiveParser.KW_BUCKET:
            case HiveParser.KW_CAST:
            case HiveParser.KW_ADD:
            case HiveParser.KW_REPLACE:
            case HiveParser.KW_TEMPORARY:
            case HiveParser.KW_FILE:
            case HiveParser.KW_JAR:
            case HiveParser.KW_EXPLAIN:
            case HiveParser.KW_FORMATTED:
            case HiveParser.KW_DEPENDENCY:
            case HiveParser.KW_LOGICAL:
            case HiveParser.KW_SERDE:
            case HiveParser.KW_DEFERRED:
            case HiveParser.KW_SERDEPROPERTIES:
            case HiveParser.KW_DBPROPERTIES:
            case HiveParser.KW_LIMIT:
            case HiveParser.KW_OFFSET:
            case HiveParser.KW_UNSET:
            case HiveParser.KW_TBLPROPERTIES:
            case HiveParser.KW_IDXPROPERTIES:
            case HiveParser.KW_VALUE_TYPE:
            case HiveParser.KW_ELEM_TYPE:
            case HiveParser.KW_DEFINED:
            case HiveParser.KW_CASE:
            case HiveParser.KW_MAPJOIN:
            case HiveParser.KW_STREAMTABLE:
            case HiveParser.KW_CLUSTERSTATUS:
            case HiveParser.KW_UTC:
            case HiveParser.KW_UTCTIMESTAMP:
            case HiveParser.KW_LONG:
            case HiveParser.KW_PLUS:
            case HiveParser.KW_VIEW:
            case HiveParser.KW_VIEWS:
            case HiveParser.KW_DATABASES:
            case HiveParser.KW_MATERIALIZED:
            case HiveParser.KW_SCHEMA:
            case HiveParser.KW_SCHEMAS:
            case HiveParser.KW_SSL:
            case HiveParser.KW_UNDO:
            case HiveParser.KW_LOCK:
            case HiveParser.KW_LOCKS:
            case HiveParser.KW_UNLOCK:
            case HiveParser.KW_SHARED:
            case HiveParser.KW_EXCLUSIVE:
            case HiveParser.KW_UNSIGNED:
            case HiveParser.KW_WHILE:
            case HiveParser.KW_READ:
            case HiveParser.KW_PURGE:
            case HiveParser.KW_ANALYZE:
            case HiveParser.KW_BEFORE:
            case HiveParser.KW_BINARY:
            case HiveParser.KW_CONTINUE:
            case HiveParser.KW_RECORDREADER:
            case HiveParser.KW_RECORDWRITER:
            case HiveParser.KW_SEMI:
            case HiveParser.KW_TOUCH:
            case HiveParser.KW_ARCHIVE:
            case HiveParser.KW_UNARCHIVE:
            case HiveParser.KW_COMPUTE:
            case HiveParser.KW_STATISTICS:
            case HiveParser.KW_USE:
            case HiveParser.KW_OPTION:
            case HiveParser.KW_CONCATENATE:
            case HiveParser.KW_SHOW_DATABASE:
            case HiveParser.KW_RESTRICT:
            case HiveParser.KW_CASCADE:
            case HiveParser.KW_SKEWED:
            case HiveParser.KW_DIRECTORIES:
            case HiveParser.KW_CURRENT_DATE:
            case HiveParser.KW_CURRENT_TIMESTAMP:
            case HiveParser.KW_GROUPING:
            case HiveParser.KW_SETS:
            case HiveParser.KW_NOSCAN:
            case HiveParser.KW_ROLE:
            case HiveParser.KW_ROLES:
            case HiveParser.KW_URI:
            case HiveParser.KW_SERVER:
            case HiveParser.KW_ADMIN:
            case HiveParser.KW_OWNER:
            case HiveParser.KW_PRINCIPALS:
            case HiveParser.KW_COMPACT:
            case HiveParser.KW_COMPACTIONS:
            case HiveParser.KW_TRANSACTIONS:
            case HiveParser.KW_REWRITE:
            case HiveParser.KW_REOPTIMIZATION:
            case HiveParser.KW_RELOAD:
            case HiveParser.KW_YEAR:
            case HiveParser.KW_QUERY:
            case HiveParser.KW_QUARTER:
            case HiveParser.KW_MONTH:
            case HiveParser.KW_WEEK:
            case HiveParser.KW_DAY:
            case HiveParser.KW_DOW:
            case HiveParser.KW_HOUR:
            case HiveParser.KW_MINUTE:
            case HiveParser.KW_SECOND:
            case HiveParser.KW_TRANSACTION:
            case HiveParser.KW_WORK:
            case HiveParser.KW_WRITE:
            case HiveParser.KW_ISOLATION:
            case HiveParser.KW_LEVEL:
            case HiveParser.KW_SNAPSHOT:
            case HiveParser.KW_AUTOCOMMIT:
            case HiveParser.KW_CACHE:
            case HiveParser.KW_ENFORCED:
            case HiveParser.KW_VALIDATE:
            case HiveParser.KW_NOVALIDATE:
            case HiveParser.KW_RELY:
            case HiveParser.KW_NORELY:
            case HiveParser.KW_KEY:
            case HiveParser.KW_ABORT:
            case HiveParser.KW_EXTRACT:
            case HiveParser.KW_FLOOR:
            case HiveParser.KW_MATCHED:
            case HiveParser.KW_REPL:
            case HiveParser.KW_DUMP:
            case HiveParser.KW_STATUS:
            case HiveParser.KW_VECTORIZATION:
            case HiveParser.KW_SUMMARY:
            case HiveParser.KW_OPERATOR:
            case HiveParser.KW_EXPRESSION:
            case HiveParser.KW_DETAIL:
            case HiveParser.KW_WAIT:
            case HiveParser.KW_RESOURCE:
            case HiveParser.KW_PLAN:
            case HiveParser.KW_QUERY_PARALLELISM:
            case HiveParser.KW_PLANS:
            case HiveParser.KW_ACTIVATE:
            case HiveParser.KW_DEFAULT:
            case HiveParser.KW_CHECK:
            case HiveParser.KW_POOL:
            case HiveParser.KW_MOVE:
            case HiveParser.KW_DO:
            case HiveParser.KW_ALLOC_FRACTION:
            case HiveParser.KW_SCHEDULING_POLICY:
            case HiveParser.KW_PATH:
            case HiveParser.KW_MAPPING:
            case HiveParser.KW_WORKLOAD:
            case HiveParser.KW_MANAGEMENT:
            case HiveParser.KW_ACTIVE:
            case HiveParser.KW_UNMANAGED:
            case HiveParser.KW_DELTA:
            case HiveParser.KW_CSV:
            case HiveParser.KW_JSON:
            case HiveParser.KW_BLOOMFILTER:
            case HiveParser.LPAREN:
            case HiveParser.LCURLY:
            case HiveParser.PLUS:
            case HiveParser.MINUS:
            case HiveParser.STAR:
            case HiveParser.TILDE:
            case HiveParser.StringLiteral:
            case HiveParser.IntegralLiteral:
            case HiveParser.NumberLiteral:
            case HiveParser.Number:
            case HiveParser.Identifier:
            case HiveParser.CharSetName:
              this.state = 3318;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === HiveParser.KW_ALL || _la === HiveParser.KW_DISTINCT) {
                this.state = 3317;
                _la = this._input.LA(1);
                if (
                  !(_la === HiveParser.KW_ALL || _la === HiveParser.KW_DISTINCT)
                ) {
                  this._errHandler.recoverInline(this);
                } else {
                  this._errHandler.reportMatch(this);
                  this.consume();
                }
              }

              this.state = 3320;
              this.selectList();
              break;
            case HiveParser.KW_TRANSFORM:
              this.state = 3321;
              this.match(HiveParser.KW_TRANSFORM);
              this.state = 3322;
              this.selectTrfmClause();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          break;
        case HiveParser.KW_MAP:
        case HiveParser.KW_REDUCE:
          this.enterOuterAlt(localctx, 2);
          this.state = 3325;
          this.trfmClause();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  selectList() {
    let localctx = new SelectListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 562, HiveParser.RULE_selectList);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3328;
      this.selectItem();
      this.state = 3333;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 370, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 3329;
          this.match(HiveParser.COMMA);
          this.state = 3330;
          this.selectItem();
        }
        this.state = 3335;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 370, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  selectTrfmClause() {
    let localctx = new SelectTrfmClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 564, HiveParser.RULE_selectTrfmClause);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3336;
      this.match(HiveParser.LPAREN);
      this.state = 3337;
      this.selectExpressionList();
      this.state = 3338;
      this.match(HiveParser.RPAREN);
      this.state = 3340;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_ROW) {
        this.state = 3339;
        this.rowFormat();
      }

      this.state = 3343;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_RECORDWRITER) {
        this.state = 3342;
        this.recordWriter();
      }

      this.state = 3345;
      this.match(HiveParser.KW_USING);
      this.state = 3346;
      this.match(HiveParser.StringLiteral);
      this.state = 3361;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_AS) {
        this.state = 3347;
        this.match(HiveParser.KW_AS);
        this.state = 3359;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case HiveParser.LPAREN:
            this.state = 3348;
            this.match(HiveParser.LPAREN);
            this.state = 3351;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 373, this._ctx);
            switch (la_) {
              case 1:
                this.state = 3349;
                this.aliasList();
                break;

              case 2:
                this.state = 3350;
                this.columnNameTypeList();
                break;
            }
            this.state = 3353;
            this.match(HiveParser.RPAREN);
            break;
          case HiveParser.KW_IF:
          case HiveParser.KW_ASC:
          case HiveParser.KW_DESC:
          case HiveParser.KW_NULLS:
          case HiveParser.KW_LAST:
          case HiveParser.KW_OVERWRITE:
          case HiveParser.KW_PARTITIONS:
          case HiveParser.KW_TABLES:
          case HiveParser.KW_COLUMNS:
          case HiveParser.KW_INDEX:
          case HiveParser.KW_INDEXES:
          case HiveParser.KW_REBUILD:
          case HiveParser.KW_FUNCTIONS:
          case HiveParser.KW_SHOW:
          case HiveParser.KW_MSCK:
          case HiveParser.KW_REPAIR:
          case HiveParser.KW_DIRECTORY:
          case HiveParser.KW_CLUSTER:
          case HiveParser.KW_DISTRIBUTE:
          case HiveParser.KW_SORT:
          case HiveParser.KW_LOAD:
          case HiveParser.KW_EXPORT:
          case HiveParser.KW_REPLICATION:
          case HiveParser.KW_METADATA:
          case HiveParser.KW_DATA:
          case HiveParser.KW_INPATH:
          case HiveParser.KW_CHANGE:
          case HiveParser.KW_FIRST:
          case HiveParser.KW_AFTER:
          case HiveParser.KW_RENAME:
          case HiveParser.KW_COMMENT:
          case HiveParser.KW_BOOLEAN:
          case HiveParser.KW_TINYINT:
          case HiveParser.KW_SMALLINT:
          case HiveParser.KW_INT:
          case HiveParser.KW_BIGINT:
          case HiveParser.KW_FLOAT:
          case HiveParser.KW_DOUBLE:
          case HiveParser.KW_DATE:
          case HiveParser.KW_DATETIME:
          case HiveParser.KW_TIMESTAMP:
          case HiveParser.KW_TIME:
          case HiveParser.KW_ZONE:
          case HiveParser.KW_STRING:
          case HiveParser.KW_ARRAY:
          case HiveParser.KW_STRUCT:
          case HiveParser.KW_MAP:
          case HiveParser.KW_UNIONTYPE:
          case HiveParser.KW_PARTITIONED:
          case HiveParser.KW_CLUSTERED:
          case HiveParser.KW_SORTED:
          case HiveParser.KW_BUCKETS:
          case HiveParser.KW_FORMAT:
          case HiveParser.KW_DELIMITED:
          case HiveParser.KW_FIELDS:
          case HiveParser.KW_TERMINATED:
          case HiveParser.KW_ESCAPED:
          case HiveParser.KW_COLLECTION:
          case HiveParser.KW_ITEMS:
          case HiveParser.KW_KEYS:
          case HiveParser.KW_KEY_TYPE:
          case HiveParser.KW_KILL:
          case HiveParser.KW_LINES:
          case HiveParser.KW_STORED:
          case HiveParser.KW_FILEFORMAT:
          case HiveParser.KW_INPUTFORMAT:
          case HiveParser.KW_OUTPUTFORMAT:
          case HiveParser.KW_INPUTDRIVER:
          case HiveParser.KW_OUTPUTDRIVER:
          case HiveParser.KW_ENABLE:
          case HiveParser.KW_DISABLE:
          case HiveParser.KW_LOCATION:
          case HiveParser.KW_BUCKET:
          case HiveParser.KW_ADD:
          case HiveParser.KW_REPLACE:
          case HiveParser.KW_TEMPORARY:
          case HiveParser.KW_FILE:
          case HiveParser.KW_JAR:
          case HiveParser.KW_EXPLAIN:
          case HiveParser.KW_FORMATTED:
          case HiveParser.KW_DEPENDENCY:
          case HiveParser.KW_LOGICAL:
          case HiveParser.KW_SERDE:
          case HiveParser.KW_DEFERRED:
          case HiveParser.KW_SERDEPROPERTIES:
          case HiveParser.KW_DBPROPERTIES:
          case HiveParser.KW_LIMIT:
          case HiveParser.KW_OFFSET:
          case HiveParser.KW_UNSET:
          case HiveParser.KW_TBLPROPERTIES:
          case HiveParser.KW_IDXPROPERTIES:
          case HiveParser.KW_VALUE_TYPE:
          case HiveParser.KW_ELEM_TYPE:
          case HiveParser.KW_DEFINED:
          case HiveParser.KW_MAPJOIN:
          case HiveParser.KW_STREAMTABLE:
          case HiveParser.KW_CLUSTERSTATUS:
          case HiveParser.KW_UTC:
          case HiveParser.KW_UTCTIMESTAMP:
          case HiveParser.KW_LONG:
          case HiveParser.KW_PLUS:
          case HiveParser.KW_VIEW:
          case HiveParser.KW_VIEWS:
          case HiveParser.KW_DATABASES:
          case HiveParser.KW_MATERIALIZED:
          case HiveParser.KW_SCHEMA:
          case HiveParser.KW_SCHEMAS:
          case HiveParser.KW_SSL:
          case HiveParser.KW_UNDO:
          case HiveParser.KW_LOCK:
          case HiveParser.KW_LOCKS:
          case HiveParser.KW_UNLOCK:
          case HiveParser.KW_SHARED:
          case HiveParser.KW_EXCLUSIVE:
          case HiveParser.KW_UNSIGNED:
          case HiveParser.KW_WHILE:
          case HiveParser.KW_READ:
          case HiveParser.KW_PURGE:
          case HiveParser.KW_ANALYZE:
          case HiveParser.KW_BEFORE:
          case HiveParser.KW_BINARY:
          case HiveParser.KW_CONTINUE:
          case HiveParser.KW_RECORDREADER:
          case HiveParser.KW_RECORDWRITER:
          case HiveParser.KW_SEMI:
          case HiveParser.KW_TOUCH:
          case HiveParser.KW_ARCHIVE:
          case HiveParser.KW_UNARCHIVE:
          case HiveParser.KW_COMPUTE:
          case HiveParser.KW_STATISTICS:
          case HiveParser.KW_USE:
          case HiveParser.KW_OPTION:
          case HiveParser.KW_CONCATENATE:
          case HiveParser.KW_SHOW_DATABASE:
          case HiveParser.KW_RESTRICT:
          case HiveParser.KW_CASCADE:
          case HiveParser.KW_SKEWED:
          case HiveParser.KW_DIRECTORIES:
          case HiveParser.KW_CURRENT_DATE:
          case HiveParser.KW_CURRENT_TIMESTAMP:
          case HiveParser.KW_GROUPING:
          case HiveParser.KW_SETS:
          case HiveParser.KW_NOSCAN:
          case HiveParser.KW_ROLE:
          case HiveParser.KW_ROLES:
          case HiveParser.KW_URI:
          case HiveParser.KW_SERVER:
          case HiveParser.KW_ADMIN:
          case HiveParser.KW_OWNER:
          case HiveParser.KW_PRINCIPALS:
          case HiveParser.KW_COMPACT:
          case HiveParser.KW_COMPACTIONS:
          case HiveParser.KW_TRANSACTIONS:
          case HiveParser.KW_REWRITE:
          case HiveParser.KW_REOPTIMIZATION:
          case HiveParser.KW_RELOAD:
          case HiveParser.KW_YEAR:
          case HiveParser.KW_QUERY:
          case HiveParser.KW_QUARTER:
          case HiveParser.KW_MONTH:
          case HiveParser.KW_WEEK:
          case HiveParser.KW_DAY:
          case HiveParser.KW_DOW:
          case HiveParser.KW_HOUR:
          case HiveParser.KW_MINUTE:
          case HiveParser.KW_SECOND:
          case HiveParser.KW_TRANSACTION:
          case HiveParser.KW_WORK:
          case HiveParser.KW_WRITE:
          case HiveParser.KW_ISOLATION:
          case HiveParser.KW_LEVEL:
          case HiveParser.KW_SNAPSHOT:
          case HiveParser.KW_AUTOCOMMIT:
          case HiveParser.KW_CACHE:
          case HiveParser.KW_ENFORCED:
          case HiveParser.KW_VALIDATE:
          case HiveParser.KW_NOVALIDATE:
          case HiveParser.KW_RELY:
          case HiveParser.KW_NORELY:
          case HiveParser.KW_KEY:
          case HiveParser.KW_ABORT:
          case HiveParser.KW_MATCHED:
          case HiveParser.KW_REPL:
          case HiveParser.KW_DUMP:
          case HiveParser.KW_STATUS:
          case HiveParser.KW_VECTORIZATION:
          case HiveParser.KW_SUMMARY:
          case HiveParser.KW_OPERATOR:
          case HiveParser.KW_EXPRESSION:
          case HiveParser.KW_DETAIL:
          case HiveParser.KW_WAIT:
          case HiveParser.KW_RESOURCE:
          case HiveParser.KW_PLAN:
          case HiveParser.KW_QUERY_PARALLELISM:
          case HiveParser.KW_PLANS:
          case HiveParser.KW_ACTIVATE:
          case HiveParser.KW_DEFAULT:
          case HiveParser.KW_CHECK:
          case HiveParser.KW_POOL:
          case HiveParser.KW_MOVE:
          case HiveParser.KW_DO:
          case HiveParser.KW_ALLOC_FRACTION:
          case HiveParser.KW_SCHEDULING_POLICY:
          case HiveParser.KW_PATH:
          case HiveParser.KW_MAPPING:
          case HiveParser.KW_WORKLOAD:
          case HiveParser.KW_MANAGEMENT:
          case HiveParser.KW_ACTIVE:
          case HiveParser.KW_UNMANAGED:
          case HiveParser.KW_DELTA:
          case HiveParser.KW_CSV:
          case HiveParser.KW_JSON:
          case HiveParser.KW_BLOOMFILTER:
          case HiveParser.LCURLY:
          case HiveParser.Identifier:
            this.state = 3357;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 374, this._ctx);
            switch (la_) {
              case 1:
                this.state = 3355;
                this.aliasList();
                break;

              case 2:
                this.state = 3356;
                this.columnNameTypeList();
                break;
            }
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
      }

      this.state = 3364;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_ROW) {
        this.state = 3363;
        this.rowFormat();
      }

      this.state = 3367;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_RECORDREADER) {
        this.state = 3366;
        this.recordReader();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  selectItem() {
    let localctx = new SelectItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 566, HiveParser.RULE_selectItem);
    var _la = 0; // Token type
    try {
      this.state = 3389;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 382, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3369;
          this.tableAllColumns();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3370;
          this.expression(0);
          this.state = 3387;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 381, this._ctx);
          if (la_ === 1) {
            this.state = 3372;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === HiveParser.KW_AS) {
              this.state = 3371;
              this.match(HiveParser.KW_AS);
            }

            this.state = 3374;
            this.identifier();
          } else if (la_ === 2) {
            this.state = 3375;
            this.match(HiveParser.KW_AS);
            this.state = 3376;
            this.match(HiveParser.LPAREN);
            this.state = 3377;
            this.identifier();
            this.state = 3382;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === HiveParser.COMMA) {
              this.state = 3378;
              this.match(HiveParser.COMMA);
              this.state = 3379;
              this.identifier();
              this.state = 3384;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 3385;
            this.match(HiveParser.RPAREN);
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  trfmClause() {
    let localctx = new TrfmClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 568, HiveParser.RULE_trfmClause);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3395;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_MAP:
          this.state = 3391;
          this.match(HiveParser.KW_MAP);
          this.state = 3392;
          this.selectExpressionList();
          break;
        case HiveParser.KW_REDUCE:
          this.state = 3393;
          this.match(HiveParser.KW_REDUCE);
          this.state = 3394;
          this.selectExpressionList();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 3398;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_ROW) {
        this.state = 3397;
        this.rowFormat();
      }

      this.state = 3401;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_RECORDWRITER) {
        this.state = 3400;
        this.recordWriter();
      }

      this.state = 3403;
      this.match(HiveParser.KW_USING);
      this.state = 3404;
      this.match(HiveParser.StringLiteral);
      this.state = 3419;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_AS) {
        this.state = 3405;
        this.match(HiveParser.KW_AS);
        this.state = 3417;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case HiveParser.LPAREN:
            this.state = 3406;
            this.match(HiveParser.LPAREN);
            this.state = 3409;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 386, this._ctx);
            switch (la_) {
              case 1:
                this.state = 3407;
                this.aliasList();
                break;

              case 2:
                this.state = 3408;
                this.columnNameTypeList();
                break;
            }
            this.state = 3411;
            this.match(HiveParser.RPAREN);
            break;
          case HiveParser.KW_IF:
          case HiveParser.KW_ASC:
          case HiveParser.KW_DESC:
          case HiveParser.KW_NULLS:
          case HiveParser.KW_LAST:
          case HiveParser.KW_OVERWRITE:
          case HiveParser.KW_PARTITIONS:
          case HiveParser.KW_TABLES:
          case HiveParser.KW_COLUMNS:
          case HiveParser.KW_INDEX:
          case HiveParser.KW_INDEXES:
          case HiveParser.KW_REBUILD:
          case HiveParser.KW_FUNCTIONS:
          case HiveParser.KW_SHOW:
          case HiveParser.KW_MSCK:
          case HiveParser.KW_REPAIR:
          case HiveParser.KW_DIRECTORY:
          case HiveParser.KW_CLUSTER:
          case HiveParser.KW_DISTRIBUTE:
          case HiveParser.KW_SORT:
          case HiveParser.KW_LOAD:
          case HiveParser.KW_EXPORT:
          case HiveParser.KW_REPLICATION:
          case HiveParser.KW_METADATA:
          case HiveParser.KW_DATA:
          case HiveParser.KW_INPATH:
          case HiveParser.KW_CHANGE:
          case HiveParser.KW_FIRST:
          case HiveParser.KW_AFTER:
          case HiveParser.KW_RENAME:
          case HiveParser.KW_COMMENT:
          case HiveParser.KW_BOOLEAN:
          case HiveParser.KW_TINYINT:
          case HiveParser.KW_SMALLINT:
          case HiveParser.KW_INT:
          case HiveParser.KW_BIGINT:
          case HiveParser.KW_FLOAT:
          case HiveParser.KW_DOUBLE:
          case HiveParser.KW_DATE:
          case HiveParser.KW_DATETIME:
          case HiveParser.KW_TIMESTAMP:
          case HiveParser.KW_TIME:
          case HiveParser.KW_ZONE:
          case HiveParser.KW_STRING:
          case HiveParser.KW_ARRAY:
          case HiveParser.KW_STRUCT:
          case HiveParser.KW_MAP:
          case HiveParser.KW_UNIONTYPE:
          case HiveParser.KW_PARTITIONED:
          case HiveParser.KW_CLUSTERED:
          case HiveParser.KW_SORTED:
          case HiveParser.KW_BUCKETS:
          case HiveParser.KW_FORMAT:
          case HiveParser.KW_DELIMITED:
          case HiveParser.KW_FIELDS:
          case HiveParser.KW_TERMINATED:
          case HiveParser.KW_ESCAPED:
          case HiveParser.KW_COLLECTION:
          case HiveParser.KW_ITEMS:
          case HiveParser.KW_KEYS:
          case HiveParser.KW_KEY_TYPE:
          case HiveParser.KW_KILL:
          case HiveParser.KW_LINES:
          case HiveParser.KW_STORED:
          case HiveParser.KW_FILEFORMAT:
          case HiveParser.KW_INPUTFORMAT:
          case HiveParser.KW_OUTPUTFORMAT:
          case HiveParser.KW_INPUTDRIVER:
          case HiveParser.KW_OUTPUTDRIVER:
          case HiveParser.KW_ENABLE:
          case HiveParser.KW_DISABLE:
          case HiveParser.KW_LOCATION:
          case HiveParser.KW_BUCKET:
          case HiveParser.KW_ADD:
          case HiveParser.KW_REPLACE:
          case HiveParser.KW_TEMPORARY:
          case HiveParser.KW_FILE:
          case HiveParser.KW_JAR:
          case HiveParser.KW_EXPLAIN:
          case HiveParser.KW_FORMATTED:
          case HiveParser.KW_DEPENDENCY:
          case HiveParser.KW_LOGICAL:
          case HiveParser.KW_SERDE:
          case HiveParser.KW_DEFERRED:
          case HiveParser.KW_SERDEPROPERTIES:
          case HiveParser.KW_DBPROPERTIES:
          case HiveParser.KW_LIMIT:
          case HiveParser.KW_OFFSET:
          case HiveParser.KW_UNSET:
          case HiveParser.KW_TBLPROPERTIES:
          case HiveParser.KW_IDXPROPERTIES:
          case HiveParser.KW_VALUE_TYPE:
          case HiveParser.KW_ELEM_TYPE:
          case HiveParser.KW_DEFINED:
          case HiveParser.KW_MAPJOIN:
          case HiveParser.KW_STREAMTABLE:
          case HiveParser.KW_CLUSTERSTATUS:
          case HiveParser.KW_UTC:
          case HiveParser.KW_UTCTIMESTAMP:
          case HiveParser.KW_LONG:
          case HiveParser.KW_PLUS:
          case HiveParser.KW_VIEW:
          case HiveParser.KW_VIEWS:
          case HiveParser.KW_DATABASES:
          case HiveParser.KW_MATERIALIZED:
          case HiveParser.KW_SCHEMA:
          case HiveParser.KW_SCHEMAS:
          case HiveParser.KW_SSL:
          case HiveParser.KW_UNDO:
          case HiveParser.KW_LOCK:
          case HiveParser.KW_LOCKS:
          case HiveParser.KW_UNLOCK:
          case HiveParser.KW_SHARED:
          case HiveParser.KW_EXCLUSIVE:
          case HiveParser.KW_UNSIGNED:
          case HiveParser.KW_WHILE:
          case HiveParser.KW_READ:
          case HiveParser.KW_PURGE:
          case HiveParser.KW_ANALYZE:
          case HiveParser.KW_BEFORE:
          case HiveParser.KW_BINARY:
          case HiveParser.KW_CONTINUE:
          case HiveParser.KW_RECORDREADER:
          case HiveParser.KW_RECORDWRITER:
          case HiveParser.KW_SEMI:
          case HiveParser.KW_TOUCH:
          case HiveParser.KW_ARCHIVE:
          case HiveParser.KW_UNARCHIVE:
          case HiveParser.KW_COMPUTE:
          case HiveParser.KW_STATISTICS:
          case HiveParser.KW_USE:
          case HiveParser.KW_OPTION:
          case HiveParser.KW_CONCATENATE:
          case HiveParser.KW_SHOW_DATABASE:
          case HiveParser.KW_RESTRICT:
          case HiveParser.KW_CASCADE:
          case HiveParser.KW_SKEWED:
          case HiveParser.KW_DIRECTORIES:
          case HiveParser.KW_CURRENT_DATE:
          case HiveParser.KW_CURRENT_TIMESTAMP:
          case HiveParser.KW_GROUPING:
          case HiveParser.KW_SETS:
          case HiveParser.KW_NOSCAN:
          case HiveParser.KW_ROLE:
          case HiveParser.KW_ROLES:
          case HiveParser.KW_URI:
          case HiveParser.KW_SERVER:
          case HiveParser.KW_ADMIN:
          case HiveParser.KW_OWNER:
          case HiveParser.KW_PRINCIPALS:
          case HiveParser.KW_COMPACT:
          case HiveParser.KW_COMPACTIONS:
          case HiveParser.KW_TRANSACTIONS:
          case HiveParser.KW_REWRITE:
          case HiveParser.KW_REOPTIMIZATION:
          case HiveParser.KW_RELOAD:
          case HiveParser.KW_YEAR:
          case HiveParser.KW_QUERY:
          case HiveParser.KW_QUARTER:
          case HiveParser.KW_MONTH:
          case HiveParser.KW_WEEK:
          case HiveParser.KW_DAY:
          case HiveParser.KW_DOW:
          case HiveParser.KW_HOUR:
          case HiveParser.KW_MINUTE:
          case HiveParser.KW_SECOND:
          case HiveParser.KW_TRANSACTION:
          case HiveParser.KW_WORK:
          case HiveParser.KW_WRITE:
          case HiveParser.KW_ISOLATION:
          case HiveParser.KW_LEVEL:
          case HiveParser.KW_SNAPSHOT:
          case HiveParser.KW_AUTOCOMMIT:
          case HiveParser.KW_CACHE:
          case HiveParser.KW_ENFORCED:
          case HiveParser.KW_VALIDATE:
          case HiveParser.KW_NOVALIDATE:
          case HiveParser.KW_RELY:
          case HiveParser.KW_NORELY:
          case HiveParser.KW_KEY:
          case HiveParser.KW_ABORT:
          case HiveParser.KW_MATCHED:
          case HiveParser.KW_REPL:
          case HiveParser.KW_DUMP:
          case HiveParser.KW_STATUS:
          case HiveParser.KW_VECTORIZATION:
          case HiveParser.KW_SUMMARY:
          case HiveParser.KW_OPERATOR:
          case HiveParser.KW_EXPRESSION:
          case HiveParser.KW_DETAIL:
          case HiveParser.KW_WAIT:
          case HiveParser.KW_RESOURCE:
          case HiveParser.KW_PLAN:
          case HiveParser.KW_QUERY_PARALLELISM:
          case HiveParser.KW_PLANS:
          case HiveParser.KW_ACTIVATE:
          case HiveParser.KW_DEFAULT:
          case HiveParser.KW_CHECK:
          case HiveParser.KW_POOL:
          case HiveParser.KW_MOVE:
          case HiveParser.KW_DO:
          case HiveParser.KW_ALLOC_FRACTION:
          case HiveParser.KW_SCHEDULING_POLICY:
          case HiveParser.KW_PATH:
          case HiveParser.KW_MAPPING:
          case HiveParser.KW_WORKLOAD:
          case HiveParser.KW_MANAGEMENT:
          case HiveParser.KW_ACTIVE:
          case HiveParser.KW_UNMANAGED:
          case HiveParser.KW_DELTA:
          case HiveParser.KW_CSV:
          case HiveParser.KW_JSON:
          case HiveParser.KW_BLOOMFILTER:
          case HiveParser.LCURLY:
          case HiveParser.Identifier:
            this.state = 3415;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 387, this._ctx);
            switch (la_) {
              case 1:
                this.state = 3413;
                this.aliasList();
                break;

              case 2:
                this.state = 3414;
                this.columnNameTypeList();
                break;
            }
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
      }

      this.state = 3422;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_ROW) {
        this.state = 3421;
        this.rowFormat();
      }

      this.state = 3425;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_RECORDREADER) {
        this.state = 3424;
        this.recordReader();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  selectExpression() {
    let localctx = new SelectExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 570, HiveParser.RULE_selectExpression);
    try {
      this.state = 3429;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 392, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3427;
          this.tableAllColumns();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3428;
          this.expression(0);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  selectExpressionList() {
    let localctx = new SelectExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 572, HiveParser.RULE_selectExpressionList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3431;
      this.selectExpression();
      this.state = 3436;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 3432;
        this.match(HiveParser.COMMA);
        this.state = 3433;
        this.selectExpression();
        this.state = 3438;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  window_clause() {
    let localctx = new Window_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 574, HiveParser.RULE_window_clause);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3439;
      this.match(HiveParser.KW_WINDOW);
      this.state = 3440;
      this.window_defn();
      this.state = 3445;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 3441;
        this.match(HiveParser.COMMA);
        this.state = 3442;
        this.window_defn();
        this.state = 3447;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  window_defn() {
    let localctx = new Window_defnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 576, HiveParser.RULE_window_defn);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3448;
      this.identifier();
      this.state = 3449;
      this.match(HiveParser.KW_AS);
      this.state = 3450;
      this.window_specification();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  window_specification() {
    let localctx = new Window_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 578, HiveParser.RULE_window_specification);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3464;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_IF:
        case HiveParser.KW_ASC:
        case HiveParser.KW_DESC:
        case HiveParser.KW_NULLS:
        case HiveParser.KW_LAST:
        case HiveParser.KW_OVERWRITE:
        case HiveParser.KW_PARTITIONS:
        case HiveParser.KW_TABLES:
        case HiveParser.KW_COLUMNS:
        case HiveParser.KW_INDEX:
        case HiveParser.KW_INDEXES:
        case HiveParser.KW_REBUILD:
        case HiveParser.KW_FUNCTIONS:
        case HiveParser.KW_SHOW:
        case HiveParser.KW_MSCK:
        case HiveParser.KW_REPAIR:
        case HiveParser.KW_DIRECTORY:
        case HiveParser.KW_CLUSTER:
        case HiveParser.KW_DISTRIBUTE:
        case HiveParser.KW_SORT:
        case HiveParser.KW_LOAD:
        case HiveParser.KW_EXPORT:
        case HiveParser.KW_REPLICATION:
        case HiveParser.KW_METADATA:
        case HiveParser.KW_DATA:
        case HiveParser.KW_INPATH:
        case HiveParser.KW_CHANGE:
        case HiveParser.KW_FIRST:
        case HiveParser.KW_AFTER:
        case HiveParser.KW_RENAME:
        case HiveParser.KW_COMMENT:
        case HiveParser.KW_BOOLEAN:
        case HiveParser.KW_TINYINT:
        case HiveParser.KW_SMALLINT:
        case HiveParser.KW_INT:
        case HiveParser.KW_BIGINT:
        case HiveParser.KW_FLOAT:
        case HiveParser.KW_DOUBLE:
        case HiveParser.KW_DATE:
        case HiveParser.KW_DATETIME:
        case HiveParser.KW_TIMESTAMP:
        case HiveParser.KW_TIME:
        case HiveParser.KW_ZONE:
        case HiveParser.KW_STRING:
        case HiveParser.KW_ARRAY:
        case HiveParser.KW_STRUCT:
        case HiveParser.KW_MAP:
        case HiveParser.KW_UNIONTYPE:
        case HiveParser.KW_PARTITIONED:
        case HiveParser.KW_CLUSTERED:
        case HiveParser.KW_SORTED:
        case HiveParser.KW_BUCKETS:
        case HiveParser.KW_FORMAT:
        case HiveParser.KW_DELIMITED:
        case HiveParser.KW_FIELDS:
        case HiveParser.KW_TERMINATED:
        case HiveParser.KW_ESCAPED:
        case HiveParser.KW_COLLECTION:
        case HiveParser.KW_ITEMS:
        case HiveParser.KW_KEYS:
        case HiveParser.KW_KEY_TYPE:
        case HiveParser.KW_KILL:
        case HiveParser.KW_LINES:
        case HiveParser.KW_STORED:
        case HiveParser.KW_FILEFORMAT:
        case HiveParser.KW_INPUTFORMAT:
        case HiveParser.KW_OUTPUTFORMAT:
        case HiveParser.KW_INPUTDRIVER:
        case HiveParser.KW_OUTPUTDRIVER:
        case HiveParser.KW_ENABLE:
        case HiveParser.KW_DISABLE:
        case HiveParser.KW_LOCATION:
        case HiveParser.KW_BUCKET:
        case HiveParser.KW_ADD:
        case HiveParser.KW_REPLACE:
        case HiveParser.KW_TEMPORARY:
        case HiveParser.KW_FILE:
        case HiveParser.KW_JAR:
        case HiveParser.KW_EXPLAIN:
        case HiveParser.KW_FORMATTED:
        case HiveParser.KW_DEPENDENCY:
        case HiveParser.KW_LOGICAL:
        case HiveParser.KW_SERDE:
        case HiveParser.KW_DEFERRED:
        case HiveParser.KW_SERDEPROPERTIES:
        case HiveParser.KW_DBPROPERTIES:
        case HiveParser.KW_LIMIT:
        case HiveParser.KW_OFFSET:
        case HiveParser.KW_UNSET:
        case HiveParser.KW_TBLPROPERTIES:
        case HiveParser.KW_IDXPROPERTIES:
        case HiveParser.KW_VALUE_TYPE:
        case HiveParser.KW_ELEM_TYPE:
        case HiveParser.KW_DEFINED:
        case HiveParser.KW_MAPJOIN:
        case HiveParser.KW_STREAMTABLE:
        case HiveParser.KW_CLUSTERSTATUS:
        case HiveParser.KW_UTC:
        case HiveParser.KW_UTCTIMESTAMP:
        case HiveParser.KW_LONG:
        case HiveParser.KW_PLUS:
        case HiveParser.KW_VIEW:
        case HiveParser.KW_VIEWS:
        case HiveParser.KW_DATABASES:
        case HiveParser.KW_MATERIALIZED:
        case HiveParser.KW_SCHEMA:
        case HiveParser.KW_SCHEMAS:
        case HiveParser.KW_SSL:
        case HiveParser.KW_UNDO:
        case HiveParser.KW_LOCK:
        case HiveParser.KW_LOCKS:
        case HiveParser.KW_UNLOCK:
        case HiveParser.KW_SHARED:
        case HiveParser.KW_EXCLUSIVE:
        case HiveParser.KW_UNSIGNED:
        case HiveParser.KW_WHILE:
        case HiveParser.KW_READ:
        case HiveParser.KW_PURGE:
        case HiveParser.KW_ANALYZE:
        case HiveParser.KW_BEFORE:
        case HiveParser.KW_BINARY:
        case HiveParser.KW_CONTINUE:
        case HiveParser.KW_RECORDREADER:
        case HiveParser.KW_RECORDWRITER:
        case HiveParser.KW_SEMI:
        case HiveParser.KW_TOUCH:
        case HiveParser.KW_ARCHIVE:
        case HiveParser.KW_UNARCHIVE:
        case HiveParser.KW_COMPUTE:
        case HiveParser.KW_STATISTICS:
        case HiveParser.KW_USE:
        case HiveParser.KW_OPTION:
        case HiveParser.KW_CONCATENATE:
        case HiveParser.KW_SHOW_DATABASE:
        case HiveParser.KW_RESTRICT:
        case HiveParser.KW_CASCADE:
        case HiveParser.KW_SKEWED:
        case HiveParser.KW_DIRECTORIES:
        case HiveParser.KW_CURRENT_DATE:
        case HiveParser.KW_CURRENT_TIMESTAMP:
        case HiveParser.KW_GROUPING:
        case HiveParser.KW_SETS:
        case HiveParser.KW_NOSCAN:
        case HiveParser.KW_ROLE:
        case HiveParser.KW_ROLES:
        case HiveParser.KW_URI:
        case HiveParser.KW_SERVER:
        case HiveParser.KW_ADMIN:
        case HiveParser.KW_OWNER:
        case HiveParser.KW_PRINCIPALS:
        case HiveParser.KW_COMPACT:
        case HiveParser.KW_COMPACTIONS:
        case HiveParser.KW_TRANSACTIONS:
        case HiveParser.KW_REWRITE:
        case HiveParser.KW_REOPTIMIZATION:
        case HiveParser.KW_RELOAD:
        case HiveParser.KW_YEAR:
        case HiveParser.KW_QUERY:
        case HiveParser.KW_QUARTER:
        case HiveParser.KW_MONTH:
        case HiveParser.KW_WEEK:
        case HiveParser.KW_DAY:
        case HiveParser.KW_DOW:
        case HiveParser.KW_HOUR:
        case HiveParser.KW_MINUTE:
        case HiveParser.KW_SECOND:
        case HiveParser.KW_TRANSACTION:
        case HiveParser.KW_WORK:
        case HiveParser.KW_WRITE:
        case HiveParser.KW_ISOLATION:
        case HiveParser.KW_LEVEL:
        case HiveParser.KW_SNAPSHOT:
        case HiveParser.KW_AUTOCOMMIT:
        case HiveParser.KW_CACHE:
        case HiveParser.KW_ENFORCED:
        case HiveParser.KW_VALIDATE:
        case HiveParser.KW_NOVALIDATE:
        case HiveParser.KW_RELY:
        case HiveParser.KW_NORELY:
        case HiveParser.KW_KEY:
        case HiveParser.KW_ABORT:
        case HiveParser.KW_MATCHED:
        case HiveParser.KW_REPL:
        case HiveParser.KW_DUMP:
        case HiveParser.KW_STATUS:
        case HiveParser.KW_VECTORIZATION:
        case HiveParser.KW_SUMMARY:
        case HiveParser.KW_OPERATOR:
        case HiveParser.KW_EXPRESSION:
        case HiveParser.KW_DETAIL:
        case HiveParser.KW_WAIT:
        case HiveParser.KW_RESOURCE:
        case HiveParser.KW_PLAN:
        case HiveParser.KW_QUERY_PARALLELISM:
        case HiveParser.KW_PLANS:
        case HiveParser.KW_ACTIVATE:
        case HiveParser.KW_DEFAULT:
        case HiveParser.KW_CHECK:
        case HiveParser.KW_POOL:
        case HiveParser.KW_MOVE:
        case HiveParser.KW_DO:
        case HiveParser.KW_ALLOC_FRACTION:
        case HiveParser.KW_SCHEDULING_POLICY:
        case HiveParser.KW_PATH:
        case HiveParser.KW_MAPPING:
        case HiveParser.KW_WORKLOAD:
        case HiveParser.KW_MANAGEMENT:
        case HiveParser.KW_ACTIVE:
        case HiveParser.KW_UNMANAGED:
        case HiveParser.KW_DELTA:
        case HiveParser.KW_CSV:
        case HiveParser.KW_JSON:
        case HiveParser.KW_BLOOMFILTER:
        case HiveParser.LCURLY:
        case HiveParser.Identifier:
          this.state = 3452;
          this.identifier();
          break;
        case HiveParser.LPAREN:
          this.state = 3453;
          this.match(HiveParser.LPAREN);
          this.state = 3455;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 395, this._ctx);
          if (la_ === 1) {
            this.state = 3454;
            this.identifier();
          }
          this.state = 3458;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (
            _la === HiveParser.KW_ORDER ||
            (((_la - 35) & ~0x1f) == 0 &&
              ((1 << (_la - 35)) &
                ((1 << (HiveParser.KW_PARTITION - 35)) |
                  (1 << (HiveParser.KW_CLUSTER - 35)) |
                  (1 << (HiveParser.KW_DISTRIBUTE - 35)) |
                  (1 << (HiveParser.KW_SORT - 35)))) !==
                0)
          ) {
            this.state = 3457;
            this.partitioningSpec();
          }

          this.state = 3461;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_ROWS || _la === HiveParser.KW_RANGE) {
            this.state = 3460;
            this.window_frame();
          }

          this.state = 3463;
          this.match(HiveParser.RPAREN);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  window_frame() {
    let localctx = new Window_frameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 580, HiveParser.RULE_window_frame);
    try {
      this.state = 3468;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_ROWS:
          this.enterOuterAlt(localctx, 1);
          this.state = 3466;
          this.window_range_expression();
          break;
        case HiveParser.KW_RANGE:
          this.enterOuterAlt(localctx, 2);
          this.state = 3467;
          this.window_value_expression();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  window_range_expression() {
    let localctx = new Window_range_expressionContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 582, HiveParser.RULE_window_range_expression);
    try {
      this.state = 3478;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 400, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3470;
          this.match(HiveParser.KW_ROWS);
          this.state = 3471;
          this.window_frame_start_boundary();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3472;
          this.match(HiveParser.KW_ROWS);
          this.state = 3473;
          this.match(HiveParser.KW_BETWEEN);
          this.state = 3474;
          this.window_frame_boundary();
          this.state = 3475;
          this.match(HiveParser.KW_AND);
          this.state = 3476;
          this.window_frame_boundary();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  window_value_expression() {
    let localctx = new Window_value_expressionContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 584, HiveParser.RULE_window_value_expression);
    try {
      this.state = 3488;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 401, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3480;
          this.match(HiveParser.KW_RANGE);
          this.state = 3481;
          this.window_frame_start_boundary();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3482;
          this.match(HiveParser.KW_RANGE);
          this.state = 3483;
          this.match(HiveParser.KW_BETWEEN);
          this.state = 3484;
          this.window_frame_boundary();
          this.state = 3485;
          this.match(HiveParser.KW_AND);
          this.state = 3486;
          this.window_frame_boundary();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  window_frame_start_boundary() {
    let localctx = new Window_frame_start_boundaryContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 586, HiveParser.RULE_window_frame_start_boundary);
    try {
      this.state = 3496;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_UNBOUNDED:
          this.enterOuterAlt(localctx, 1);
          this.state = 3490;
          this.match(HiveParser.KW_UNBOUNDED);
          this.state = 3491;
          this.match(HiveParser.KW_PRECEDING);
          break;
        case HiveParser.KW_CURRENT:
          this.enterOuterAlt(localctx, 2);
          this.state = 3492;
          this.match(HiveParser.KW_CURRENT);
          this.state = 3493;
          this.match(HiveParser.KW_ROW);
          break;
        case HiveParser.Number:
          this.enterOuterAlt(localctx, 3);
          this.state = 3494;
          this.match(HiveParser.Number);
          this.state = 3495;
          this.match(HiveParser.KW_PRECEDING);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  window_frame_boundary() {
    let localctx = new Window_frame_boundaryContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 588, HiveParser.RULE_window_frame_boundary);
    var _la = 0; // Token type
    try {
      this.state = 3504;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_UNBOUNDED:
          this.enterOuterAlt(localctx, 1);
          this.state = 3498;
          this.match(HiveParser.KW_UNBOUNDED);
          this.state = 3499;
          _la = this._input.LA(1);
          if (
            !(
              _la === HiveParser.KW_PRECEDING || _la === HiveParser.KW_FOLLOWING
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        case HiveParser.KW_CURRENT:
          this.enterOuterAlt(localctx, 2);
          this.state = 3500;
          this.match(HiveParser.KW_CURRENT);
          this.state = 3501;
          this.match(HiveParser.KW_ROW);
          break;
        case HiveParser.Number:
          this.enterOuterAlt(localctx, 3);
          this.state = 3502;
          this.match(HiveParser.Number);
          this.state = 3503;
          _la = this._input.LA(1);
          if (
            !(
              _la === HiveParser.KW_PRECEDING || _la === HiveParser.KW_FOLLOWING
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableAllColumns() {
    let localctx = new TableAllColumnsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 590, HiveParser.RULE_tableAllColumns);
    try {
      this.state = 3511;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.STAR:
          this.enterOuterAlt(localctx, 1);
          this.state = 3506;
          this.match(HiveParser.STAR);
          break;
        case HiveParser.KW_IF:
        case HiveParser.KW_ASC:
        case HiveParser.KW_DESC:
        case HiveParser.KW_NULLS:
        case HiveParser.KW_LAST:
        case HiveParser.KW_OVERWRITE:
        case HiveParser.KW_PARTITIONS:
        case HiveParser.KW_TABLES:
        case HiveParser.KW_COLUMNS:
        case HiveParser.KW_INDEX:
        case HiveParser.KW_INDEXES:
        case HiveParser.KW_REBUILD:
        case HiveParser.KW_FUNCTIONS:
        case HiveParser.KW_SHOW:
        case HiveParser.KW_MSCK:
        case HiveParser.KW_REPAIR:
        case HiveParser.KW_DIRECTORY:
        case HiveParser.KW_CLUSTER:
        case HiveParser.KW_DISTRIBUTE:
        case HiveParser.KW_SORT:
        case HiveParser.KW_LOAD:
        case HiveParser.KW_EXPORT:
        case HiveParser.KW_REPLICATION:
        case HiveParser.KW_METADATA:
        case HiveParser.KW_DATA:
        case HiveParser.KW_INPATH:
        case HiveParser.KW_CHANGE:
        case HiveParser.KW_FIRST:
        case HiveParser.KW_AFTER:
        case HiveParser.KW_RENAME:
        case HiveParser.KW_COMMENT:
        case HiveParser.KW_BOOLEAN:
        case HiveParser.KW_TINYINT:
        case HiveParser.KW_SMALLINT:
        case HiveParser.KW_INT:
        case HiveParser.KW_BIGINT:
        case HiveParser.KW_FLOAT:
        case HiveParser.KW_DOUBLE:
        case HiveParser.KW_DATE:
        case HiveParser.KW_DATETIME:
        case HiveParser.KW_TIMESTAMP:
        case HiveParser.KW_TIME:
        case HiveParser.KW_ZONE:
        case HiveParser.KW_STRING:
        case HiveParser.KW_ARRAY:
        case HiveParser.KW_STRUCT:
        case HiveParser.KW_MAP:
        case HiveParser.KW_UNIONTYPE:
        case HiveParser.KW_PARTITIONED:
        case HiveParser.KW_CLUSTERED:
        case HiveParser.KW_SORTED:
        case HiveParser.KW_BUCKETS:
        case HiveParser.KW_FORMAT:
        case HiveParser.KW_DELIMITED:
        case HiveParser.KW_FIELDS:
        case HiveParser.KW_TERMINATED:
        case HiveParser.KW_ESCAPED:
        case HiveParser.KW_COLLECTION:
        case HiveParser.KW_ITEMS:
        case HiveParser.KW_KEYS:
        case HiveParser.KW_KEY_TYPE:
        case HiveParser.KW_KILL:
        case HiveParser.KW_LINES:
        case HiveParser.KW_STORED:
        case HiveParser.KW_FILEFORMAT:
        case HiveParser.KW_INPUTFORMAT:
        case HiveParser.KW_OUTPUTFORMAT:
        case HiveParser.KW_INPUTDRIVER:
        case HiveParser.KW_OUTPUTDRIVER:
        case HiveParser.KW_ENABLE:
        case HiveParser.KW_DISABLE:
        case HiveParser.KW_LOCATION:
        case HiveParser.KW_BUCKET:
        case HiveParser.KW_ADD:
        case HiveParser.KW_REPLACE:
        case HiveParser.KW_TEMPORARY:
        case HiveParser.KW_FILE:
        case HiveParser.KW_JAR:
        case HiveParser.KW_EXPLAIN:
        case HiveParser.KW_FORMATTED:
        case HiveParser.KW_DEPENDENCY:
        case HiveParser.KW_LOGICAL:
        case HiveParser.KW_SERDE:
        case HiveParser.KW_DEFERRED:
        case HiveParser.KW_SERDEPROPERTIES:
        case HiveParser.KW_DBPROPERTIES:
        case HiveParser.KW_LIMIT:
        case HiveParser.KW_OFFSET:
        case HiveParser.KW_UNSET:
        case HiveParser.KW_TBLPROPERTIES:
        case HiveParser.KW_IDXPROPERTIES:
        case HiveParser.KW_VALUE_TYPE:
        case HiveParser.KW_ELEM_TYPE:
        case HiveParser.KW_DEFINED:
        case HiveParser.KW_MAPJOIN:
        case HiveParser.KW_STREAMTABLE:
        case HiveParser.KW_CLUSTERSTATUS:
        case HiveParser.KW_UTC:
        case HiveParser.KW_UTCTIMESTAMP:
        case HiveParser.KW_LONG:
        case HiveParser.KW_PLUS:
        case HiveParser.KW_VIEW:
        case HiveParser.KW_VIEWS:
        case HiveParser.KW_DATABASES:
        case HiveParser.KW_MATERIALIZED:
        case HiveParser.KW_SCHEMA:
        case HiveParser.KW_SCHEMAS:
        case HiveParser.KW_SSL:
        case HiveParser.KW_UNDO:
        case HiveParser.KW_LOCK:
        case HiveParser.KW_LOCKS:
        case HiveParser.KW_UNLOCK:
        case HiveParser.KW_SHARED:
        case HiveParser.KW_EXCLUSIVE:
        case HiveParser.KW_UNSIGNED:
        case HiveParser.KW_WHILE:
        case HiveParser.KW_READ:
        case HiveParser.KW_PURGE:
        case HiveParser.KW_ANALYZE:
        case HiveParser.KW_BEFORE:
        case HiveParser.KW_BINARY:
        case HiveParser.KW_CONTINUE:
        case HiveParser.KW_RECORDREADER:
        case HiveParser.KW_RECORDWRITER:
        case HiveParser.KW_SEMI:
        case HiveParser.KW_TOUCH:
        case HiveParser.KW_ARCHIVE:
        case HiveParser.KW_UNARCHIVE:
        case HiveParser.KW_COMPUTE:
        case HiveParser.KW_STATISTICS:
        case HiveParser.KW_USE:
        case HiveParser.KW_OPTION:
        case HiveParser.KW_CONCATENATE:
        case HiveParser.KW_SHOW_DATABASE:
        case HiveParser.KW_RESTRICT:
        case HiveParser.KW_CASCADE:
        case HiveParser.KW_SKEWED:
        case HiveParser.KW_DIRECTORIES:
        case HiveParser.KW_CURRENT_DATE:
        case HiveParser.KW_CURRENT_TIMESTAMP:
        case HiveParser.KW_GROUPING:
        case HiveParser.KW_SETS:
        case HiveParser.KW_NOSCAN:
        case HiveParser.KW_ROLE:
        case HiveParser.KW_ROLES:
        case HiveParser.KW_URI:
        case HiveParser.KW_SERVER:
        case HiveParser.KW_ADMIN:
        case HiveParser.KW_OWNER:
        case HiveParser.KW_PRINCIPALS:
        case HiveParser.KW_COMPACT:
        case HiveParser.KW_COMPACTIONS:
        case HiveParser.KW_TRANSACTIONS:
        case HiveParser.KW_REWRITE:
        case HiveParser.KW_REOPTIMIZATION:
        case HiveParser.KW_RELOAD:
        case HiveParser.KW_YEAR:
        case HiveParser.KW_QUERY:
        case HiveParser.KW_QUARTER:
        case HiveParser.KW_MONTH:
        case HiveParser.KW_WEEK:
        case HiveParser.KW_DAY:
        case HiveParser.KW_DOW:
        case HiveParser.KW_HOUR:
        case HiveParser.KW_MINUTE:
        case HiveParser.KW_SECOND:
        case HiveParser.KW_TRANSACTION:
        case HiveParser.KW_WORK:
        case HiveParser.KW_WRITE:
        case HiveParser.KW_ISOLATION:
        case HiveParser.KW_LEVEL:
        case HiveParser.KW_SNAPSHOT:
        case HiveParser.KW_AUTOCOMMIT:
        case HiveParser.KW_CACHE:
        case HiveParser.KW_ENFORCED:
        case HiveParser.KW_VALIDATE:
        case HiveParser.KW_NOVALIDATE:
        case HiveParser.KW_RELY:
        case HiveParser.KW_NORELY:
        case HiveParser.KW_KEY:
        case HiveParser.KW_ABORT:
        case HiveParser.KW_MATCHED:
        case HiveParser.KW_REPL:
        case HiveParser.KW_DUMP:
        case HiveParser.KW_STATUS:
        case HiveParser.KW_VECTORIZATION:
        case HiveParser.KW_SUMMARY:
        case HiveParser.KW_OPERATOR:
        case HiveParser.KW_EXPRESSION:
        case HiveParser.KW_DETAIL:
        case HiveParser.KW_WAIT:
        case HiveParser.KW_RESOURCE:
        case HiveParser.KW_PLAN:
        case HiveParser.KW_QUERY_PARALLELISM:
        case HiveParser.KW_PLANS:
        case HiveParser.KW_ACTIVATE:
        case HiveParser.KW_DEFAULT:
        case HiveParser.KW_CHECK:
        case HiveParser.KW_POOL:
        case HiveParser.KW_MOVE:
        case HiveParser.KW_DO:
        case HiveParser.KW_ALLOC_FRACTION:
        case HiveParser.KW_SCHEDULING_POLICY:
        case HiveParser.KW_PATH:
        case HiveParser.KW_MAPPING:
        case HiveParser.KW_WORKLOAD:
        case HiveParser.KW_MANAGEMENT:
        case HiveParser.KW_ACTIVE:
        case HiveParser.KW_UNMANAGED:
        case HiveParser.KW_DELTA:
        case HiveParser.KW_CSV:
        case HiveParser.KW_JSON:
        case HiveParser.KW_BLOOMFILTER:
        case HiveParser.LCURLY:
        case HiveParser.Identifier:
          this.enterOuterAlt(localctx, 2);
          this.state = 3507;
          this.tableName();
          this.state = 3508;
          this.match(HiveParser.DOT);
          this.state = 3509;
          this.match(HiveParser.STAR);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableOrColumn() {
    let localctx = new TableOrColumnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 592, HiveParser.RULE_tableOrColumn);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3513;
      this.identifier();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  expressionList() {
    let localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 594, HiveParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3515;
      this.expression(0);
      this.state = 3520;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 3516;
        this.match(HiveParser.COMMA);
        this.state = 3517;
        this.expression(0);
        this.state = 3522;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  aliasList() {
    let localctx = new AliasListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 596, HiveParser.RULE_aliasList);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3523;
      this.identifier();
      this.state = 3528;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 406, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 3524;
          this.match(HiveParser.COMMA);
          this.state = 3525;
          this.identifier();
        }
        this.state = 3530;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 406, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  fromClause() {
    let localctx = new FromClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 598, HiveParser.RULE_fromClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3531;
      this.match(HiveParser.KW_FROM);
      this.state = 3532;
      this.fromSource();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  fromSource() {
    let localctx = new FromSourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 600, HiveParser.RULE_fromSource);
    var _la = 0; // Token type
    try {
      this.state = 3543;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_UNIQUEJOIN:
          this.enterOuterAlt(localctx, 1);
          this.state = 3534;
          this.uniqueJoinToken();
          this.state = 3535;
          this.uniqueJoinSource();
          this.state = 3538;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          do {
            this.state = 3536;
            this.match(HiveParser.COMMA);
            this.state = 3537;
            this.uniqueJoinSource();
            this.state = 3540;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
          } while (_la === HiveParser.COMMA);
          break;
        case HiveParser.KW_IF:
        case HiveParser.KW_ASC:
        case HiveParser.KW_DESC:
        case HiveParser.KW_NULLS:
        case HiveParser.KW_LAST:
        case HiveParser.KW_OVERWRITE:
        case HiveParser.KW_PARTITIONS:
        case HiveParser.KW_TABLE:
        case HiveParser.KW_TABLES:
        case HiveParser.KW_COLUMNS:
        case HiveParser.KW_INDEX:
        case HiveParser.KW_INDEXES:
        case HiveParser.KW_REBUILD:
        case HiveParser.KW_FUNCTIONS:
        case HiveParser.KW_SHOW:
        case HiveParser.KW_MSCK:
        case HiveParser.KW_REPAIR:
        case HiveParser.KW_DIRECTORY:
        case HiveParser.KW_CLUSTER:
        case HiveParser.KW_DISTRIBUTE:
        case HiveParser.KW_SORT:
        case HiveParser.KW_LOAD:
        case HiveParser.KW_EXPORT:
        case HiveParser.KW_REPLICATION:
        case HiveParser.KW_METADATA:
        case HiveParser.KW_DATA:
        case HiveParser.KW_INPATH:
        case HiveParser.KW_CHANGE:
        case HiveParser.KW_FIRST:
        case HiveParser.KW_AFTER:
        case HiveParser.KW_RENAME:
        case HiveParser.KW_COMMENT:
        case HiveParser.KW_BOOLEAN:
        case HiveParser.KW_TINYINT:
        case HiveParser.KW_SMALLINT:
        case HiveParser.KW_INT:
        case HiveParser.KW_BIGINT:
        case HiveParser.KW_FLOAT:
        case HiveParser.KW_DOUBLE:
        case HiveParser.KW_DATE:
        case HiveParser.KW_DATETIME:
        case HiveParser.KW_TIMESTAMP:
        case HiveParser.KW_TIME:
        case HiveParser.KW_ZONE:
        case HiveParser.KW_STRING:
        case HiveParser.KW_ARRAY:
        case HiveParser.KW_STRUCT:
        case HiveParser.KW_MAP:
        case HiveParser.KW_UNIONTYPE:
        case HiveParser.KW_PARTITIONED:
        case HiveParser.KW_CLUSTERED:
        case HiveParser.KW_SORTED:
        case HiveParser.KW_BUCKETS:
        case HiveParser.KW_FORMAT:
        case HiveParser.KW_DELIMITED:
        case HiveParser.KW_FIELDS:
        case HiveParser.KW_TERMINATED:
        case HiveParser.KW_ESCAPED:
        case HiveParser.KW_COLLECTION:
        case HiveParser.KW_ITEMS:
        case HiveParser.KW_KEYS:
        case HiveParser.KW_KEY_TYPE:
        case HiveParser.KW_KILL:
        case HiveParser.KW_LINES:
        case HiveParser.KW_STORED:
        case HiveParser.KW_FILEFORMAT:
        case HiveParser.KW_INPUTFORMAT:
        case HiveParser.KW_OUTPUTFORMAT:
        case HiveParser.KW_INPUTDRIVER:
        case HiveParser.KW_OUTPUTDRIVER:
        case HiveParser.KW_ENABLE:
        case HiveParser.KW_DISABLE:
        case HiveParser.KW_LOCATION:
        case HiveParser.KW_BUCKET:
        case HiveParser.KW_ADD:
        case HiveParser.KW_REPLACE:
        case HiveParser.KW_TEMPORARY:
        case HiveParser.KW_FILE:
        case HiveParser.KW_JAR:
        case HiveParser.KW_EXPLAIN:
        case HiveParser.KW_FORMATTED:
        case HiveParser.KW_DEPENDENCY:
        case HiveParser.KW_LOGICAL:
        case HiveParser.KW_SERDE:
        case HiveParser.KW_DEFERRED:
        case HiveParser.KW_SERDEPROPERTIES:
        case HiveParser.KW_DBPROPERTIES:
        case HiveParser.KW_LIMIT:
        case HiveParser.KW_OFFSET:
        case HiveParser.KW_UNSET:
        case HiveParser.KW_TBLPROPERTIES:
        case HiveParser.KW_IDXPROPERTIES:
        case HiveParser.KW_VALUE_TYPE:
        case HiveParser.KW_ELEM_TYPE:
        case HiveParser.KW_DEFINED:
        case HiveParser.KW_MAPJOIN:
        case HiveParser.KW_STREAMTABLE:
        case HiveParser.KW_CLUSTERSTATUS:
        case HiveParser.KW_UTC:
        case HiveParser.KW_UTCTIMESTAMP:
        case HiveParser.KW_LONG:
        case HiveParser.KW_PLUS:
        case HiveParser.KW_VIEW:
        case HiveParser.KW_VIEWS:
        case HiveParser.KW_DATABASES:
        case HiveParser.KW_MATERIALIZED:
        case HiveParser.KW_SCHEMA:
        case HiveParser.KW_SCHEMAS:
        case HiveParser.KW_SSL:
        case HiveParser.KW_UNDO:
        case HiveParser.KW_LOCK:
        case HiveParser.KW_LOCKS:
        case HiveParser.KW_UNLOCK:
        case HiveParser.KW_SHARED:
        case HiveParser.KW_EXCLUSIVE:
        case HiveParser.KW_UNSIGNED:
        case HiveParser.KW_WHILE:
        case HiveParser.KW_READ:
        case HiveParser.KW_PURGE:
        case HiveParser.KW_ANALYZE:
        case HiveParser.KW_BEFORE:
        case HiveParser.KW_BINARY:
        case HiveParser.KW_CONTINUE:
        case HiveParser.KW_RECORDREADER:
        case HiveParser.KW_RECORDWRITER:
        case HiveParser.KW_SEMI:
        case HiveParser.KW_TOUCH:
        case HiveParser.KW_ARCHIVE:
        case HiveParser.KW_UNARCHIVE:
        case HiveParser.KW_COMPUTE:
        case HiveParser.KW_STATISTICS:
        case HiveParser.KW_USE:
        case HiveParser.KW_OPTION:
        case HiveParser.KW_CONCATENATE:
        case HiveParser.KW_SHOW_DATABASE:
        case HiveParser.KW_RESTRICT:
        case HiveParser.KW_CASCADE:
        case HiveParser.KW_SKEWED:
        case HiveParser.KW_DIRECTORIES:
        case HiveParser.KW_CURRENT_DATE:
        case HiveParser.KW_CURRENT_TIMESTAMP:
        case HiveParser.KW_GROUPING:
        case HiveParser.KW_SETS:
        case HiveParser.KW_NOSCAN:
        case HiveParser.KW_ROLE:
        case HiveParser.KW_ROLES:
        case HiveParser.KW_URI:
        case HiveParser.KW_SERVER:
        case HiveParser.KW_ADMIN:
        case HiveParser.KW_OWNER:
        case HiveParser.KW_PRINCIPALS:
        case HiveParser.KW_COMPACT:
        case HiveParser.KW_COMPACTIONS:
        case HiveParser.KW_TRANSACTIONS:
        case HiveParser.KW_REWRITE:
        case HiveParser.KW_REOPTIMIZATION:
        case HiveParser.KW_RELOAD:
        case HiveParser.KW_YEAR:
        case HiveParser.KW_QUERY:
        case HiveParser.KW_QUARTER:
        case HiveParser.KW_MONTH:
        case HiveParser.KW_WEEK:
        case HiveParser.KW_DAY:
        case HiveParser.KW_DOW:
        case HiveParser.KW_HOUR:
        case HiveParser.KW_MINUTE:
        case HiveParser.KW_SECOND:
        case HiveParser.KW_TRANSACTION:
        case HiveParser.KW_WORK:
        case HiveParser.KW_WRITE:
        case HiveParser.KW_ISOLATION:
        case HiveParser.KW_LEVEL:
        case HiveParser.KW_SNAPSHOT:
        case HiveParser.KW_AUTOCOMMIT:
        case HiveParser.KW_CACHE:
        case HiveParser.KW_ENFORCED:
        case HiveParser.KW_VALIDATE:
        case HiveParser.KW_NOVALIDATE:
        case HiveParser.KW_RELY:
        case HiveParser.KW_NORELY:
        case HiveParser.KW_KEY:
        case HiveParser.KW_ABORT:
        case HiveParser.KW_MATCHED:
        case HiveParser.KW_REPL:
        case HiveParser.KW_DUMP:
        case HiveParser.KW_STATUS:
        case HiveParser.KW_VECTORIZATION:
        case HiveParser.KW_SUMMARY:
        case HiveParser.KW_OPERATOR:
        case HiveParser.KW_EXPRESSION:
        case HiveParser.KW_DETAIL:
        case HiveParser.KW_WAIT:
        case HiveParser.KW_RESOURCE:
        case HiveParser.KW_PLAN:
        case HiveParser.KW_QUERY_PARALLELISM:
        case HiveParser.KW_PLANS:
        case HiveParser.KW_ACTIVATE:
        case HiveParser.KW_DEFAULT:
        case HiveParser.KW_CHECK:
        case HiveParser.KW_POOL:
        case HiveParser.KW_MOVE:
        case HiveParser.KW_DO:
        case HiveParser.KW_ALLOC_FRACTION:
        case HiveParser.KW_SCHEDULING_POLICY:
        case HiveParser.KW_PATH:
        case HiveParser.KW_MAPPING:
        case HiveParser.KW_WORKLOAD:
        case HiveParser.KW_MANAGEMENT:
        case HiveParser.KW_ACTIVE:
        case HiveParser.KW_UNMANAGED:
        case HiveParser.KW_DELTA:
        case HiveParser.KW_CSV:
        case HiveParser.KW_JSON:
        case HiveParser.KW_BLOOMFILTER:
        case HiveParser.LPAREN:
        case HiveParser.LCURLY:
        case HiveParser.Identifier:
          this.enterOuterAlt(localctx, 2);
          this.state = 3542;
          this.joinSource();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  atomjoinSource() {
    let localctx = new AtomjoinSourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 602, HiveParser.RULE_atomjoinSource);
    try {
      this.state = 3577;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 413, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3545;
          this.tableSource();
          this.state = 3549;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 409, this._ctx);
          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 3546;
              this.lateralView();
            }
            this.state = 3551;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 409, this._ctx);
          }

          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3552;
          this.virtualTableSource();
          this.state = 3556;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 410, this._ctx);
          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 3553;
              this.lateralView();
            }
            this.state = 3558;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 410, this._ctx);
          }

          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 3559;
          this.subQuerySource();
          this.state = 3563;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 411, this._ctx);
          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 3560;
              this.lateralView();
            }
            this.state = 3565;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 411, this._ctx);
          }

          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 3566;
          this.partitionedTableFunction();
          this.state = 3570;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 412, this._ctx);
          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 3567;
              this.lateralView();
            }
            this.state = 3572;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 412, this._ctx);
          }

          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 3573;
          this.match(HiveParser.LPAREN);
          this.state = 3574;
          this.joinSource();
          this.state = 3575;
          this.match(HiveParser.RPAREN);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  joinSource() {
    let localctx = new JoinSourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 604, HiveParser.RULE_joinSource);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3579;
      this.atomjoinSource();
      this.state = 3590;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (
        (((_la - 30) & ~0x1f) == 0 &&
          ((1 << (_la - 30)) &
            ((1 << (HiveParser.KW_JOIN - 30)) |
              (1 << (HiveParser.KW_LEFT - 30)) |
              (1 << (HiveParser.KW_RIGHT - 30)) |
              (1 << (HiveParser.KW_FULL - 30)))) !==
            0) ||
        _la === HiveParser.KW_CROSS ||
        _la === HiveParser.KW_INNER ||
        _la === HiveParser.COMMA
      ) {
        this.state = 3580;
        this.joinToken();
        this.state = 3581;
        this.joinSourcePart();
        this.state = 3586;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case HiveParser.KW_ON:
            this.state = 3582;
            this.match(HiveParser.KW_ON);
            this.state = 3583;
            this.expression(0);
            break;
          case HiveParser.KW_USING:
            this.state = 3584;
            this.match(HiveParser.KW_USING);
            this.state = 3585;
            this.columnParenthesesList();
            break;
          case HiveParser.KW_ORDER:
          case HiveParser.KW_GROUP:
          case HiveParser.KW_HAVING:
          case HiveParser.KW_WHERE:
          case HiveParser.KW_SELECT:
          case HiveParser.KW_INSERT:
          case HiveParser.KW_JOIN:
          case HiveParser.KW_LEFT:
          case HiveParser.KW_RIGHT:
          case HiveParser.KW_FULL:
          case HiveParser.KW_CLUSTER:
          case HiveParser.KW_DISTRIBUTE:
          case HiveParser.KW_SORT:
          case HiveParser.KW_UNION:
          case HiveParser.KW_EXCEPT:
          case HiveParser.KW_MAP:
          case HiveParser.KW_REDUCE:
          case HiveParser.KW_LIMIT:
          case HiveParser.KW_MINUS:
          case HiveParser.KW_INTERSECT:
          case HiveParser.KW_CROSS:
          case HiveParser.KW_WINDOW:
          case HiveParser.KW_INNER:
          case HiveParser.COMMA:
          case HiveParser.SEMICOLON:
          case HiveParser.RPAREN:
            break;
          default:
            break;
        }
        this.state = 3592;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  joinSourcePart() {
    let localctx = new JoinSourcePartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 606, HiveParser.RULE_joinSourcePart);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3597;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 416, this._ctx);
      switch (la_) {
        case 1:
          this.state = 3593;
          this.tableSource();
          break;

        case 2:
          this.state = 3594;
          this.virtualTableSource();
          break;

        case 3:
          this.state = 3595;
          this.subQuerySource();
          break;

        case 4:
          this.state = 3596;
          this.partitionedTableFunction();
          break;
      }
      this.state = 3602;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 417, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 3599;
          this.lateralView();
        }
        this.state = 3604;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 417, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  uniqueJoinSource() {
    let localctx = new UniqueJoinSourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 608, HiveParser.RULE_uniqueJoinSource);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3606;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_PRESERVE) {
        this.state = 3605;
        this.match(HiveParser.KW_PRESERVE);
      }

      this.state = 3608;
      this.uniqueJoinTableSource();
      this.state = 3609;
      this.uniqueJoinExpr();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  uniqueJoinExpr() {
    let localctx = new UniqueJoinExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 610, HiveParser.RULE_uniqueJoinExpr);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3611;
      this.match(HiveParser.LPAREN);
      this.state = 3612;
      this.expressionList();
      this.state = 3613;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  uniqueJoinToken() {
    let localctx = new UniqueJoinTokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 612, HiveParser.RULE_uniqueJoinToken);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3615;
      this.match(HiveParser.KW_UNIQUEJOIN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  joinToken() {
    let localctx = new JoinTokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 614, HiveParser.RULE_joinToken);
    var _la = 0; // Token type
    try {
      this.state = 3641;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 422, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3617;
          this.match(HiveParser.KW_JOIN);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3618;
          this.match(HiveParser.KW_INNER);
          this.state = 3619;
          this.match(HiveParser.KW_JOIN);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 3620;
          this.match(HiveParser.COMMA);
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 3621;
          this.match(HiveParser.KW_CROSS);
          this.state = 3622;
          this.match(HiveParser.KW_JOIN);
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 3623;
          this.match(HiveParser.KW_LEFT);
          this.state = 3625;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_OUTER) {
            this.state = 3624;
            this.match(HiveParser.KW_OUTER);
          }

          this.state = 3627;
          this.match(HiveParser.KW_JOIN);
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 3628;
          this.match(HiveParser.KW_RIGHT);
          this.state = 3630;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_OUTER) {
            this.state = 3629;
            this.match(HiveParser.KW_OUTER);
          }

          this.state = 3632;
          this.match(HiveParser.KW_JOIN);
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 3633;
          this.match(HiveParser.KW_FULL);
          this.state = 3635;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_OUTER) {
            this.state = 3634;
            this.match(HiveParser.KW_OUTER);
          }

          this.state = 3637;
          this.match(HiveParser.KW_JOIN);
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 3638;
          this.match(HiveParser.KW_LEFT);
          this.state = 3639;
          this.match(HiveParser.KW_SEMI);
          this.state = 3640;
          this.match(HiveParser.KW_JOIN);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  lateralView() {
    let localctx = new LateralViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 616, HiveParser.RULE_lateralView);
    var _la = 0; // Token type
    try {
      this.state = 3702;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 432, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3643;
          this.match(HiveParser.KW_LATERAL);
          this.state = 3644;
          this.match(HiveParser.KW_VIEW);
          this.state = 3645;
          this.match(HiveParser.KW_OUTER);
          this.state = 3646;
          this.functionStatement();
          this.state = 3647;
          this.tableAlias();
          this.state = 3657;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_AS) {
            this.state = 3648;
            this.match(HiveParser.KW_AS);
            this.state = 3649;
            this.identifier();
            this.state = 3654;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(
              this._input,
              423,
              this._ctx
            );
            while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                this.state = 3650;
                this.match(HiveParser.COMMA);
                this.state = 3651;
                this.identifier();
              }
              this.state = 3656;
              this._errHandler.sync(this);
              _alt = this._interp.adaptivePredict(this._input, 423, this._ctx);
            }
          }

          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3660;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.COMMA) {
            this.state = 3659;
            this.match(HiveParser.COMMA);
          }

          this.state = 3662;
          this.match(HiveParser.KW_LATERAL);
          this.state = 3663;
          this.match(HiveParser.KW_VIEW);
          this.state = 3664;
          this.functionStatement();
          this.state = 3665;
          this.tableAlias();
          this.state = 3675;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_AS) {
            this.state = 3666;
            this.match(HiveParser.KW_AS);
            this.state = 3667;
            this.identifier();
            this.state = 3672;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(
              this._input,
              426,
              this._ctx
            );
            while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                this.state = 3668;
                this.match(HiveParser.COMMA);
                this.state = 3669;
                this.identifier();
              }
              this.state = 3674;
              this._errHandler.sync(this);
              _alt = this._interp.adaptivePredict(this._input, 426, this._ctx);
            }
          }

          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 3678;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.COMMA) {
            this.state = 3677;
            this.match(HiveParser.COMMA);
          }

          this.state = 3680;
          this.match(HiveParser.KW_LATERAL);
          this.state = 3681;
          this.match(HiveParser.KW_TABLE);
          this.state = 3682;
          this.match(HiveParser.LPAREN);
          this.state = 3683;
          this.valuesClause();
          this.state = 3684;
          this.match(HiveParser.RPAREN);
          this.state = 3686;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_AS) {
            this.state = 3685;
            this.match(HiveParser.KW_AS);
          }

          this.state = 3688;
          this.tableAlias();
          this.state = 3700;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.LPAREN) {
            this.state = 3689;
            this.match(HiveParser.LPAREN);
            this.state = 3690;
            this.identifier();
            this.state = 3695;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === HiveParser.COMMA) {
              this.state = 3691;
              this.match(HiveParser.COMMA);
              this.state = 3692;
              this.identifier();
              this.state = 3697;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 3698;
            this.match(HiveParser.RPAREN);
          }

          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableAlias() {
    let localctx = new TableAliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 618, HiveParser.RULE_tableAlias);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3704;
      this.identifier();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableBucketSample() {
    let localctx = new TableBucketSampleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 620, HiveParser.RULE_tableBucketSample);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3706;
      this.match(HiveParser.KW_TABLESAMPLE);
      this.state = 3707;
      this.match(HiveParser.LPAREN);
      this.state = 3708;
      this.match(HiveParser.KW_BUCKET);
      this.state = 3709;
      this.match(HiveParser.Number);
      this.state = 3710;
      this.match(HiveParser.KW_OUT);
      this.state = 3711;
      this.match(HiveParser.KW_OF);
      this.state = 3712;
      this.match(HiveParser.Number);
      this.state = 3722;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_ON) {
        this.state = 3713;
        this.match(HiveParser.KW_ON);
        this.state = 3714;
        this.expression(0);
        this.state = 3719;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === HiveParser.COMMA) {
          this.state = 3715;
          this.match(HiveParser.COMMA);
          this.state = 3716;
          this.expression(0);
          this.state = 3721;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }

      this.state = 3724;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  splitSample() {
    let localctx = new SplitSampleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 622, HiveParser.RULE_splitSample);
    var _la = 0; // Token type
    try {
      this.state = 3735;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 435, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3726;
          this.match(HiveParser.KW_TABLESAMPLE);
          this.state = 3727;
          this.match(HiveParser.LPAREN);
          this.state = 3728;
          this.match(HiveParser.Number);
          this.state = 3729;
          _la = this._input.LA(1);
          if (!(_la === HiveParser.KW_ROWS || _la === HiveParser.KW_PERCENT)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 3730;
          this.match(HiveParser.RPAREN);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3731;
          this.match(HiveParser.KW_TABLESAMPLE);
          this.state = 3732;
          this.match(HiveParser.LPAREN);
          this.state = 3733;
          this.match(HiveParser.ByteLengthLiteral);
          this.state = 3734;
          this.match(HiveParser.RPAREN);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableSample() {
    let localctx = new TableSampleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 624, HiveParser.RULE_tableSample);
    try {
      this.state = 3739;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 436, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3737;
          this.tableBucketSample();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3738;
          this.splitSample();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableSource() {
    let localctx = new TableSourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 626, HiveParser.RULE_tableSource);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3741;
      this.tableName();
      this.state = 3743;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.LPAREN) {
        this.state = 3742;
        this.tableProperties();
      }

      this.state = 3746;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_TABLESAMPLE) {
        this.state = 3745;
        this.tableSample();
      }

      this.state = 3752;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 440, this._ctx);
      if (la_ === 1) {
        this.state = 3749;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === HiveParser.KW_AS) {
          this.state = 3748;
          this.match(HiveParser.KW_AS);
        }

        this.state = 3751;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  uniqueJoinTableSource() {
    let localctx = new UniqueJoinTableSourceContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 628, HiveParser.RULE_uniqueJoinTableSource);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3754;
      this.tableName();
      this.state = 3756;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_TABLESAMPLE) {
        this.state = 3755;
        this.tableSample();
      }

      this.state = 3762;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        ((_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << HiveParser.KW_IF) |
              (1 << HiveParser.KW_ASC) |
              (1 << HiveParser.KW_DESC) |
              (1 << HiveParser.KW_NULLS) |
              (1 << HiveParser.KW_LAST) |
              (1 << HiveParser.KW_AS) |
              (1 << HiveParser.KW_OVERWRITE))) !==
            0) ||
        (((_la - 36) & ~0x1f) == 0 &&
          ((1 << (_la - 36)) &
            ((1 << (HiveParser.KW_PARTITIONS - 36)) |
              (1 << (HiveParser.KW_TABLES - 36)) |
              (1 << (HiveParser.KW_COLUMNS - 36)) |
              (1 << (HiveParser.KW_INDEX - 36)) |
              (1 << (HiveParser.KW_INDEXES - 36)) |
              (1 << (HiveParser.KW_REBUILD - 36)) |
              (1 << (HiveParser.KW_FUNCTIONS - 36)) |
              (1 << (HiveParser.KW_SHOW - 36)) |
              (1 << (HiveParser.KW_MSCK - 36)) |
              (1 << (HiveParser.KW_REPAIR - 36)) |
              (1 << (HiveParser.KW_DIRECTORY - 36)) |
              (1 << (HiveParser.KW_CLUSTER - 36)) |
              (1 << (HiveParser.KW_DISTRIBUTE - 36)) |
              (1 << (HiveParser.KW_SORT - 36)) |
              (1 << (HiveParser.KW_LOAD - 36)) |
              (1 << (HiveParser.KW_EXPORT - 36)) |
              (1 << (HiveParser.KW_REPLICATION - 36)) |
              (1 << (HiveParser.KW_METADATA - 36)) |
              (1 << (HiveParser.KW_DATA - 36)) |
              (1 << (HiveParser.KW_INPATH - 36)))) !==
            0) ||
        (((_la - 68) & ~0x1f) == 0 &&
          ((1 << (_la - 68)) &
            ((1 << (HiveParser.KW_CHANGE - 68)) |
              (1 << (HiveParser.KW_FIRST - 68)) |
              (1 << (HiveParser.KW_AFTER - 68)) |
              (1 << (HiveParser.KW_RENAME - 68)) |
              (1 << (HiveParser.KW_COMMENT - 68)) |
              (1 << (HiveParser.KW_BOOLEAN - 68)) |
              (1 << (HiveParser.KW_TINYINT - 68)) |
              (1 << (HiveParser.KW_SMALLINT - 68)) |
              (1 << (HiveParser.KW_INT - 68)) |
              (1 << (HiveParser.KW_BIGINT - 68)) |
              (1 << (HiveParser.KW_FLOAT - 68)) |
              (1 << (HiveParser.KW_DOUBLE - 68)) |
              (1 << (HiveParser.KW_DATE - 68)) |
              (1 << (HiveParser.KW_DATETIME - 68)) |
              (1 << (HiveParser.KW_TIMESTAMP - 68)) |
              (1 << (HiveParser.KW_TIME - 68)) |
              (1 << (HiveParser.KW_ZONE - 68)) |
              (1 << (HiveParser.KW_STRING - 68)) |
              (1 << (HiveParser.KW_ARRAY - 68)) |
              (1 << (HiveParser.KW_STRUCT - 68)) |
              (1 << (HiveParser.KW_MAP - 68)) |
              (1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
            0) ||
        (((_la - 101) & ~0x1f) == 0 &&
          ((1 << (_la - 101)) &
            ((1 << (HiveParser.KW_PARTITIONED - 101)) |
              (1 << (HiveParser.KW_CLUSTERED - 101)) |
              (1 << (HiveParser.KW_SORTED - 101)) |
              (1 << (HiveParser.KW_BUCKETS - 101)) |
              (1 << (HiveParser.KW_FORMAT - 101)) |
              (1 << (HiveParser.KW_DELIMITED - 101)) |
              (1 << (HiveParser.KW_FIELDS - 101)) |
              (1 << (HiveParser.KW_TERMINATED - 101)) |
              (1 << (HiveParser.KW_ESCAPED - 101)) |
              (1 << (HiveParser.KW_COLLECTION - 101)) |
              (1 << (HiveParser.KW_ITEMS - 101)) |
              (1 << (HiveParser.KW_KEYS - 101)) |
              (1 << (HiveParser.KW_KEY_TYPE - 101)) |
              (1 << (HiveParser.KW_KILL - 101)) |
              (1 << (HiveParser.KW_LINES - 101)) |
              (1 << (HiveParser.KW_STORED - 101)) |
              (1 << (HiveParser.KW_FILEFORMAT - 101)) |
              (1 << (HiveParser.KW_INPUTFORMAT - 101)) |
              (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
              (1 << (HiveParser.KW_INPUTDRIVER - 101)) |
              (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
              (1 << (HiveParser.KW_ENABLE - 101)) |
              (1 << (HiveParser.KW_DISABLE - 101)) |
              (1 << (HiveParser.KW_LOCATION - 101)) |
              (1 << (HiveParser.KW_BUCKET - 101)))) !==
            0) ||
        (((_la - 134) & ~0x1f) == 0 &&
          ((1 << (_la - 134)) &
            ((1 << (HiveParser.KW_ADD - 134)) |
              (1 << (HiveParser.KW_REPLACE - 134)) |
              (1 << (HiveParser.KW_TEMPORARY - 134)) |
              (1 << (HiveParser.KW_FILE - 134)) |
              (1 << (HiveParser.KW_JAR - 134)) |
              (1 << (HiveParser.KW_EXPLAIN - 134)) |
              (1 << (HiveParser.KW_FORMATTED - 134)) |
              (1 << (HiveParser.KW_DEPENDENCY - 134)) |
              (1 << (HiveParser.KW_LOGICAL - 134)) |
              (1 << (HiveParser.KW_SERDE - 134)) |
              (1 << (HiveParser.KW_DEFERRED - 134)) |
              (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
              (1 << (HiveParser.KW_DBPROPERTIES - 134)) |
              (1 << (HiveParser.KW_LIMIT - 134)) |
              (1 << (HiveParser.KW_OFFSET - 134)) |
              (1 << (HiveParser.KW_UNSET - 134)) |
              (1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
              (1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
              (1 << (HiveParser.KW_VALUE_TYPE - 134)) |
              (1 << (HiveParser.KW_ELEM_TYPE - 134)) |
              (1 << (HiveParser.KW_DEFINED - 134)))) !==
            0) ||
        (((_la - 167) & ~0x1f) == 0 &&
          ((1 << (_la - 167)) &
            ((1 << (HiveParser.KW_MAPJOIN - 167)) |
              (1 << (HiveParser.KW_STREAMTABLE - 167)) |
              (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
              (1 << (HiveParser.KW_UTC - 167)) |
              (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
              (1 << (HiveParser.KW_LONG - 167)) |
              (1 << (HiveParser.KW_PLUS - 167)) |
              (1 << (HiveParser.KW_VIEW - 167)) |
              (1 << (HiveParser.KW_VIEWS - 167)) |
              (1 << (HiveParser.KW_DATABASES - 167)) |
              (1 << (HiveParser.KW_MATERIALIZED - 167)) |
              (1 << (HiveParser.KW_SCHEMA - 167)) |
              (1 << (HiveParser.KW_SCHEMAS - 167)) |
              (1 << (HiveParser.KW_SSL - 167)) |
              (1 << (HiveParser.KW_UNDO - 167)) |
              (1 << (HiveParser.KW_LOCK - 167)) |
              (1 << (HiveParser.KW_LOCKS - 167)) |
              (1 << (HiveParser.KW_UNLOCK - 167)) |
              (1 << (HiveParser.KW_SHARED - 167)) |
              (1 << (HiveParser.KW_EXCLUSIVE - 167)) |
              (1 << (HiveParser.KW_UNSIGNED - 167)) |
              (1 << (HiveParser.KW_WHILE - 167)) |
              (1 << (HiveParser.KW_READ - 167)))) !==
            0) ||
        (((_la - 200) & ~0x1f) == 0 &&
          ((1 << (_la - 200)) &
            ((1 << (HiveParser.KW_PURGE - 200)) |
              (1 << (HiveParser.KW_ANALYZE - 200)) |
              (1 << (HiveParser.KW_BEFORE - 200)) |
              (1 << (HiveParser.KW_BINARY - 200)) |
              (1 << (HiveParser.KW_CONTINUE - 200)) |
              (1 << (HiveParser.KW_RECORDREADER - 200)) |
              (1 << (HiveParser.KW_RECORDWRITER - 200)) |
              (1 << (HiveParser.KW_SEMI - 200)) |
              (1 << (HiveParser.KW_TOUCH - 200)) |
              (1 << (HiveParser.KW_ARCHIVE - 200)) |
              (1 << (HiveParser.KW_UNARCHIVE - 200)) |
              (1 << (HiveParser.KW_COMPUTE - 200)) |
              (1 << (HiveParser.KW_STATISTICS - 200)) |
              (1 << (HiveParser.KW_USE - 200)) |
              (1 << (HiveParser.KW_OPTION - 200)) |
              (1 << (HiveParser.KW_CONCATENATE - 200)) |
              (1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
              (1 << (HiveParser.KW_RESTRICT - 200)) |
              (1 << (HiveParser.KW_CASCADE - 200)) |
              (1 << (HiveParser.KW_SKEWED - 200)) |
              (1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
            0) ||
        (((_la - 238) & ~0x1f) == 0 &&
          ((1 << (_la - 238)) &
            ((1 << (HiveParser.KW_CURRENT_DATE - 238)) |
              (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 238)) |
              (1 << (HiveParser.KW_GROUPING - 238)) |
              (1 << (HiveParser.KW_SETS - 238)) |
              (1 << (HiveParser.KW_NOSCAN - 238)) |
              (1 << (HiveParser.KW_ROLE - 238)) |
              (1 << (HiveParser.KW_ROLES - 238)) |
              (1 << (HiveParser.KW_URI - 238)) |
              (1 << (HiveParser.KW_SERVER - 238)) |
              (1 << (HiveParser.KW_ADMIN - 238)) |
              (1 << (HiveParser.KW_OWNER - 238)) |
              (1 << (HiveParser.KW_PRINCIPALS - 238)) |
              (1 << (HiveParser.KW_COMPACT - 238)) |
              (1 << (HiveParser.KW_COMPACTIONS - 238)) |
              (1 << (HiveParser.KW_TRANSACTIONS - 238)) |
              (1 << (HiveParser.KW_REWRITE - 238)) |
              (1 << (HiveParser.KW_REOPTIMIZATION - 238)) |
              (1 << (HiveParser.KW_RELOAD - 238)) |
              (1 << (HiveParser.KW_YEAR - 238)) |
              (1 << (HiveParser.KW_QUERY - 238)) |
              (1 << (HiveParser.KW_QUARTER - 238)) |
              (1 << (HiveParser.KW_MONTH - 238)))) !==
            0) ||
        (((_la - 270) & ~0x1f) == 0 &&
          ((1 << (_la - 270)) &
            ((1 << (HiveParser.KW_WEEK - 270)) |
              (1 << (HiveParser.KW_DAY - 270)) |
              (1 << (HiveParser.KW_DOW - 270)) |
              (1 << (HiveParser.KW_HOUR - 270)) |
              (1 << (HiveParser.KW_MINUTE - 270)) |
              (1 << (HiveParser.KW_SECOND - 270)) |
              (1 << (HiveParser.KW_TRANSACTION - 270)) |
              (1 << (HiveParser.KW_WORK - 270)) |
              (1 << (HiveParser.KW_WRITE - 270)) |
              (1 << (HiveParser.KW_ISOLATION - 270)) |
              (1 << (HiveParser.KW_LEVEL - 270)) |
              (1 << (HiveParser.KW_SNAPSHOT - 270)) |
              (1 << (HiveParser.KW_AUTOCOMMIT - 270)) |
              (1 << (HiveParser.KW_CACHE - 270)) |
              (1 << (HiveParser.KW_ENFORCED - 270)) |
              (1 << (HiveParser.KW_VALIDATE - 270)) |
              (1 << (HiveParser.KW_NOVALIDATE - 270)) |
              (1 << (HiveParser.KW_RELY - 270)) |
              (1 << (HiveParser.KW_NORELY - 270)) |
              (1 << (HiveParser.KW_KEY - 270)) |
              (1 << (HiveParser.KW_ABORT - 270)))) !==
            0) ||
        (((_la - 303) & ~0x1f) == 0 &&
          ((1 << (_la - 303)) &
            ((1 << (HiveParser.KW_MATCHED - 303)) |
              (1 << (HiveParser.KW_REPL - 303)) |
              (1 << (HiveParser.KW_DUMP - 303)) |
              (1 << (HiveParser.KW_STATUS - 303)) |
              (1 << (HiveParser.KW_VECTORIZATION - 303)) |
              (1 << (HiveParser.KW_SUMMARY - 303)) |
              (1 << (HiveParser.KW_OPERATOR - 303)) |
              (1 << (HiveParser.KW_EXPRESSION - 303)) |
              (1 << (HiveParser.KW_DETAIL - 303)) |
              (1 << (HiveParser.KW_WAIT - 303)) |
              (1 << (HiveParser.KW_RESOURCE - 303)) |
              (1 << (HiveParser.KW_PLAN - 303)) |
              (1 << (HiveParser.KW_QUERY_PARALLELISM - 303)) |
              (1 << (HiveParser.KW_PLANS - 303)) |
              (1 << (HiveParser.KW_ACTIVATE - 303)) |
              (1 << (HiveParser.KW_DEFAULT - 303)) |
              (1 << (HiveParser.KW_CHECK - 303)) |
              (1 << (HiveParser.KW_POOL - 303)) |
              (1 << (HiveParser.KW_MOVE - 303)) |
              (1 << (HiveParser.KW_DO - 303)) |
              (1 << (HiveParser.KW_ALLOC_FRACTION - 303)) |
              (1 << (HiveParser.KW_SCHEDULING_POLICY - 303)) |
              (1 << (HiveParser.KW_PATH - 303)) |
              (1 << (HiveParser.KW_MAPPING - 303)) |
              (1 << (HiveParser.KW_WORKLOAD - 303)) |
              (1 << (HiveParser.KW_MANAGEMENT - 303)) |
              (1 << (HiveParser.KW_ACTIVE - 303)) |
              (1 << (HiveParser.KW_UNMANAGED - 303)))) !==
            0) ||
        (((_la - 338) & ~0x1f) == 0 &&
          ((1 << (_la - 338)) &
            ((1 << (HiveParser.KW_DELTA - 338)) |
              (1 << (HiveParser.KW_CSV - 338)) |
              (1 << (HiveParser.KW_JSON - 338)) |
              (1 << (HiveParser.KW_BLOOMFILTER - 338)) |
              (1 << (HiveParser.LCURLY - 338)))) !==
            0) ||
        _la === HiveParser.Identifier
      ) {
        this.state = 3759;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === HiveParser.KW_AS) {
          this.state = 3758;
          this.match(HiveParser.KW_AS);
        }

        this.state = 3761;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableName() {
    let localctx = new TableNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 630, HiveParser.RULE_tableName);
    try {
      this.state = 3769;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 444, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3764;
          this.identifier();
          this.state = 3765;
          this.match(HiveParser.DOT);
          this.state = 3766;
          this.identifier();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3768;
          this.identifier();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  viewName() {
    let localctx = new ViewNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 632, HiveParser.RULE_viewName);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3774;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 445, this._ctx);
      if (la_ === 1) {
        this.state = 3771;
        this.identifier();
        this.state = 3772;
        this.match(HiveParser.DOT);
      }
      this.state = 3776;
      this.identifier();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  subQuerySource() {
    let localctx = new SubQuerySourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 634, HiveParser.RULE_subQuerySource);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3778;
      this.match(HiveParser.LPAREN);
      this.state = 3779;
      this.queryStatementExpression();
      this.state = 3780;
      this.match(HiveParser.RPAREN);
      this.state = 3785;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 447, this._ctx);
      if (la_ === 1) {
        this.state = 3782;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === HiveParser.KW_AS) {
          this.state = 3781;
          this.match(HiveParser.KW_AS);
        }

        this.state = 3784;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  partitioningSpec() {
    let localctx = new PartitioningSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 636, HiveParser.RULE_partitioningSpec);
    var _la = 0; // Token type
    try {
      this.state = 3798;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_PARTITION:
          this.enterOuterAlt(localctx, 1);
          this.state = 3787;
          this.partitionByClause();
          this.state = 3789;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_ORDER) {
            this.state = 3788;
            this.orderByClause();
          }

          break;
        case HiveParser.KW_ORDER:
          this.enterOuterAlt(localctx, 2);
          this.state = 3791;
          this.orderByClause();
          break;
        case HiveParser.KW_DISTRIBUTE:
          this.enterOuterAlt(localctx, 3);
          this.state = 3792;
          this.distributeByClause();
          this.state = 3794;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_SORT) {
            this.state = 3793;
            this.sortByClause();
          }

          break;
        case HiveParser.KW_SORT:
          this.enterOuterAlt(localctx, 4);
          this.state = 3796;
          this.sortByClause();
          break;
        case HiveParser.KW_CLUSTER:
          this.enterOuterAlt(localctx, 5);
          this.state = 3797;
          this.clusterByClause();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  partitionTableFunctionSource() {
    let localctx = new PartitionTableFunctionSourceContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 638, HiveParser.RULE_partitionTableFunctionSource);
    try {
      this.state = 3803;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 451, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3800;
          this.subQuerySource();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3801;
          this.tableSource();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 3802;
          this.partitionedTableFunction();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  partitionedTableFunction() {
    let localctx = new PartitionedTableFunctionContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 640, HiveParser.RULE_partitionedTableFunction);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3805;
      this.identifier();
      this.state = 3806;
      this.match(HiveParser.LPAREN);
      this.state = 3807;
      this.match(HiveParser.KW_ON);
      this.state = 3808;
      this.partitionTableFunctionSource();
      this.state = 3810;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        _la === HiveParser.KW_ORDER ||
        (((_la - 35) & ~0x1f) == 0 &&
          ((1 << (_la - 35)) &
            ((1 << (HiveParser.KW_PARTITION - 35)) |
              (1 << (HiveParser.KW_CLUSTER - 35)) |
              (1 << (HiveParser.KW_DISTRIBUTE - 35)) |
              (1 << (HiveParser.KW_SORT - 35)))) !==
            0)
      ) {
        this.state = 3809;
        this.partitioningSpec();
      }

      this.state = 3827;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.Identifier) {
        this.state = 3812;
        this.match(HiveParser.Identifier);
        this.state = 3813;
        this.match(HiveParser.LPAREN);
        this.state = 3814;
        this.expression(0);
        this.state = 3815;
        this.match(HiveParser.RPAREN);
        this.state = 3824;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === HiveParser.COMMA) {
          this.state = 3816;
          this.match(HiveParser.COMMA);
          this.state = 3817;
          this.match(HiveParser.Identifier);
          this.state = 3818;
          this.match(HiveParser.LPAREN);
          this.state = 3819;
          this.expression(0);
          this.state = 3820;
          this.match(HiveParser.RPAREN);
          this.state = 3826;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }

      this.state = 3829;
      this.match(HiveParser.RPAREN);
      this.state = 3831;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 455, this._ctx);
      if (la_ === 1) {
        this.state = 3830;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  whereClause() {
    let localctx = new WhereClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 642, HiveParser.RULE_whereClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3833;
      this.match(HiveParser.KW_WHERE);
      this.state = 3834;
      this.searchCondition();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  searchCondition() {
    let localctx = new SearchConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 644, HiveParser.RULE_searchCondition);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3836;
      this.expression(0);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  valuesClause() {
    let localctx = new ValuesClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 646, HiveParser.RULE_valuesClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3838;
      this.match(HiveParser.KW_VALUES);
      this.state = 3839;
      this.valuesTableConstructor();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  valuesTableConstructor() {
    let localctx = new ValuesTableConstructorContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 648, HiveParser.RULE_valuesTableConstructor);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3841;
      this.valueRowConstructor();
      this.state = 3846;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 3842;
        this.match(HiveParser.COMMA);
        this.state = 3843;
        this.valueRowConstructor();
        this.state = 3848;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  valueRowConstructor() {
    let localctx = new ValueRowConstructorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 650, HiveParser.RULE_valueRowConstructor);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3849;
      this.expressionsInParenthesis();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  virtualTableSource() {
    let localctx = new VirtualTableSourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 652, HiveParser.RULE_virtualTableSource);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3851;
      this.match(HiveParser.KW_TABLE);
      this.state = 3852;
      this.match(HiveParser.LPAREN);
      this.state = 3853;
      this.valuesClause();
      this.state = 3854;
      this.match(HiveParser.RPAREN);
      this.state = 3856;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_AS) {
        this.state = 3855;
        this.match(HiveParser.KW_AS);
      }

      this.state = 3858;
      this.tableAlias();
      this.state = 3868;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.LPAREN) {
        this.state = 3859;
        this.match(HiveParser.LPAREN);
        this.state = 3860;
        this.identifier();
        this.state = 3865;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === HiveParser.COMMA) {
          this.state = 3861;
          this.match(HiveParser.COMMA);
          this.state = 3862;
          this.identifier();
          this.state = 3867;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }

      this.state = 3870;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  groupByClause() {
    let localctx = new GroupByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 654, HiveParser.RULE_groupByClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3872;
      this.match(HiveParser.KW_GROUP);
      this.state = 3873;
      this.match(HiveParser.KW_BY);
      this.state = 3874;
      this.groupby_expression();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  groupby_expression() {
    let localctx = new Groupby_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 656, HiveParser.RULE_groupby_expression);
    try {
      this.state = 3879;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 460, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3876;
          this.rollupStandard();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3877;
          this.rollupOldSyntax();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 3878;
          this.groupByEmpty();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  groupByEmpty() {
    let localctx = new GroupByEmptyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 658, HiveParser.RULE_groupByEmpty);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3881;
      this.match(HiveParser.LPAREN);
      this.state = 3882;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  rollupStandard() {
    let localctx = new RollupStandardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 660, HiveParser.RULE_rollupStandard);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3884;
      _la = this._input.LA(1);
      if (!(_la === HiveParser.KW_ROLLUP || _la === HiveParser.KW_CUBE)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 3885;
      this.match(HiveParser.LPAREN);
      this.state = 3886;
      this.expression(0);
      this.state = 3891;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 3887;
        this.match(HiveParser.COMMA);
        this.state = 3888;
        this.expression(0);
        this.state = 3893;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 3894;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  rollupOldSyntax() {
    let localctx = new RollupOldSyntaxContext(this, this._ctx, this.state);
    this.enterRule(localctx, 662, HiveParser.RULE_rollupOldSyntax);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3896;
      this.expressionsNotInParenthesis();
      this.state = 3901;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 462, this._ctx);
      if (la_ === 1) {
        this.state = 3897;
        this.match(HiveParser.KW_WITH);
        this.state = 3898;
        this.match(HiveParser.KW_ROLLUP);
      } else if (la_ === 2) {
        this.state = 3899;
        this.match(HiveParser.KW_WITH);
        this.state = 3900;
        this.match(HiveParser.KW_CUBE);
      }
      this.state = 3916;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_GROUPING) {
        this.state = 3903;
        this.match(HiveParser.KW_GROUPING);
        this.state = 3904;
        this.match(HiveParser.KW_SETS);
        this.state = 3905;
        this.match(HiveParser.LPAREN);
        this.state = 3906;
        this.groupingSetExpression();
        this.state = 3911;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === HiveParser.COMMA) {
          this.state = 3907;
          this.match(HiveParser.COMMA);
          this.state = 3908;
          this.groupingSetExpression();
          this.state = 3913;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 3914;
        this.match(HiveParser.RPAREN);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  groupingSetExpression() {
    let localctx = new GroupingSetExpressionContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 664, HiveParser.RULE_groupingSetExpression);
    try {
      this.state = 3920;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 465, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3918;
          this.groupingSetExpressionMultiple();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3919;
          this.groupingExpressionSingle();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  groupingSetExpressionMultiple() {
    let localctx = new GroupingSetExpressionMultipleContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      666,
      HiveParser.RULE_groupingSetExpressionMultiple
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3922;
      this.match(HiveParser.LPAREN);
      this.state = 3924;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        ((_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << HiveParser.KW_TRUE) |
              (1 << HiveParser.KW_FALSE) |
              (1 << HiveParser.KW_NOT) |
              (1 << HiveParser.KW_IF) |
              (1 << HiveParser.KW_EXISTS) |
              (1 << HiveParser.KW_ASC) |
              (1 << HiveParser.KW_DESC) |
              (1 << HiveParser.KW_NULLS) |
              (1 << HiveParser.KW_LAST) |
              (1 << HiveParser.KW_OVERWRITE))) !==
            0) ||
        (((_la - 36) & ~0x1f) == 0 &&
          ((1 << (_la - 36)) &
            ((1 << (HiveParser.KW_PARTITIONS - 36)) |
              (1 << (HiveParser.KW_TABLES - 36)) |
              (1 << (HiveParser.KW_COLUMNS - 36)) |
              (1 << (HiveParser.KW_INDEX - 36)) |
              (1 << (HiveParser.KW_INDEXES - 36)) |
              (1 << (HiveParser.KW_REBUILD - 36)) |
              (1 << (HiveParser.KW_FUNCTIONS - 36)) |
              (1 << (HiveParser.KW_SHOW - 36)) |
              (1 << (HiveParser.KW_MSCK - 36)) |
              (1 << (HiveParser.KW_REPAIR - 36)) |
              (1 << (HiveParser.KW_DIRECTORY - 36)) |
              (1 << (HiveParser.KW_CLUSTER - 36)) |
              (1 << (HiveParser.KW_DISTRIBUTE - 36)) |
              (1 << (HiveParser.KW_SORT - 36)) |
              (1 << (HiveParser.KW_LOAD - 36)) |
              (1 << (HiveParser.KW_EXPORT - 36)) |
              (1 << (HiveParser.KW_REPLICATION - 36)) |
              (1 << (HiveParser.KW_METADATA - 36)) |
              (1 << (HiveParser.KW_DATA - 36)) |
              (1 << (HiveParser.KW_INPATH - 36)) |
              (1 << (HiveParser.KW_NULL - 36)))) !==
            0) ||
        (((_la - 68) & ~0x1f) == 0 &&
          ((1 << (_la - 68)) &
            ((1 << (HiveParser.KW_CHANGE - 68)) |
              (1 << (HiveParser.KW_FIRST - 68)) |
              (1 << (HiveParser.KW_AFTER - 68)) |
              (1 << (HiveParser.KW_RENAME - 68)) |
              (1 << (HiveParser.KW_COMMENT - 68)) |
              (1 << (HiveParser.KW_BOOLEAN - 68)) |
              (1 << (HiveParser.KW_TINYINT - 68)) |
              (1 << (HiveParser.KW_SMALLINT - 68)) |
              (1 << (HiveParser.KW_INT - 68)) |
              (1 << (HiveParser.KW_BIGINT - 68)) |
              (1 << (HiveParser.KW_FLOAT - 68)) |
              (1 << (HiveParser.KW_DOUBLE - 68)) |
              (1 << (HiveParser.KW_DATE - 68)) |
              (1 << (HiveParser.KW_DATETIME - 68)) |
              (1 << (HiveParser.KW_TIMESTAMP - 68)) |
              (1 << (HiveParser.KW_TIMESTAMPLOCALTZ - 68)) |
              (1 << (HiveParser.KW_TIME - 68)) |
              (1 << (HiveParser.KW_ZONE - 68)) |
              (1 << (HiveParser.KW_INTERVAL - 68)) |
              (1 << (HiveParser.KW_STRING - 68)) |
              (1 << (HiveParser.KW_ARRAY - 68)) |
              (1 << (HiveParser.KW_STRUCT - 68)) |
              (1 << (HiveParser.KW_MAP - 68)) |
              (1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
            0) ||
        (((_la - 101) & ~0x1f) == 0 &&
          ((1 << (_la - 101)) &
            ((1 << (HiveParser.KW_PARTITIONED - 101)) |
              (1 << (HiveParser.KW_CLUSTERED - 101)) |
              (1 << (HiveParser.KW_SORTED - 101)) |
              (1 << (HiveParser.KW_BUCKETS - 101)) |
              (1 << (HiveParser.KW_FORMAT - 101)) |
              (1 << (HiveParser.KW_DELIMITED - 101)) |
              (1 << (HiveParser.KW_FIELDS - 101)) |
              (1 << (HiveParser.KW_TERMINATED - 101)) |
              (1 << (HiveParser.KW_ESCAPED - 101)) |
              (1 << (HiveParser.KW_COLLECTION - 101)) |
              (1 << (HiveParser.KW_ITEMS - 101)) |
              (1 << (HiveParser.KW_KEYS - 101)) |
              (1 << (HiveParser.KW_KEY_TYPE - 101)) |
              (1 << (HiveParser.KW_KILL - 101)) |
              (1 << (HiveParser.KW_LINES - 101)) |
              (1 << (HiveParser.KW_STORED - 101)) |
              (1 << (HiveParser.KW_FILEFORMAT - 101)) |
              (1 << (HiveParser.KW_INPUTFORMAT - 101)) |
              (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
              (1 << (HiveParser.KW_INPUTDRIVER - 101)) |
              (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
              (1 << (HiveParser.KW_ENABLE - 101)) |
              (1 << (HiveParser.KW_DISABLE - 101)) |
              (1 << (HiveParser.KW_LOCATION - 101)) |
              (1 << (HiveParser.KW_BUCKET - 101)))) !==
            0) ||
        (((_la - 133) & ~0x1f) == 0 &&
          ((1 << (_la - 133)) &
            ((1 << (HiveParser.KW_CAST - 133)) |
              (1 << (HiveParser.KW_ADD - 133)) |
              (1 << (HiveParser.KW_REPLACE - 133)) |
              (1 << (HiveParser.KW_TEMPORARY - 133)) |
              (1 << (HiveParser.KW_FILE - 133)) |
              (1 << (HiveParser.KW_JAR - 133)) |
              (1 << (HiveParser.KW_EXPLAIN - 133)) |
              (1 << (HiveParser.KW_FORMATTED - 133)) |
              (1 << (HiveParser.KW_DEPENDENCY - 133)) |
              (1 << (HiveParser.KW_LOGICAL - 133)) |
              (1 << (HiveParser.KW_SERDE - 133)) |
              (1 << (HiveParser.KW_DEFERRED - 133)) |
              (1 << (HiveParser.KW_SERDEPROPERTIES - 133)) |
              (1 << (HiveParser.KW_DBPROPERTIES - 133)) |
              (1 << (HiveParser.KW_LIMIT - 133)) |
              (1 << (HiveParser.KW_OFFSET - 133)) |
              (1 << (HiveParser.KW_UNSET - 133)) |
              (1 << (HiveParser.KW_TBLPROPERTIES - 133)) |
              (1 << (HiveParser.KW_IDXPROPERTIES - 133)) |
              (1 << (HiveParser.KW_VALUE_TYPE - 133)) |
              (1 << (HiveParser.KW_ELEM_TYPE - 133)) |
              (1 << (HiveParser.KW_DEFINED - 133)) |
              (1 << (HiveParser.KW_CASE - 133)))) !==
            0) ||
        (((_la - 167) & ~0x1f) == 0 &&
          ((1 << (_la - 167)) &
            ((1 << (HiveParser.KW_MAPJOIN - 167)) |
              (1 << (HiveParser.KW_STREAMTABLE - 167)) |
              (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
              (1 << (HiveParser.KW_UTC - 167)) |
              (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
              (1 << (HiveParser.KW_LONG - 167)) |
              (1 << (HiveParser.KW_PLUS - 167)) |
              (1 << (HiveParser.KW_VIEW - 167)) |
              (1 << (HiveParser.KW_VIEWS - 167)) |
              (1 << (HiveParser.KW_DATABASES - 167)) |
              (1 << (HiveParser.KW_MATERIALIZED - 167)) |
              (1 << (HiveParser.KW_SCHEMA - 167)) |
              (1 << (HiveParser.KW_SCHEMAS - 167)) |
              (1 << (HiveParser.KW_SSL - 167)) |
              (1 << (HiveParser.KW_UNDO - 167)) |
              (1 << (HiveParser.KW_LOCK - 167)) |
              (1 << (HiveParser.KW_LOCKS - 167)) |
              (1 << (HiveParser.KW_UNLOCK - 167)) |
              (1 << (HiveParser.KW_SHARED - 167)) |
              (1 << (HiveParser.KW_EXCLUSIVE - 167)) |
              (1 << (HiveParser.KW_UNSIGNED - 167)) |
              (1 << (HiveParser.KW_WHILE - 167)) |
              (1 << (HiveParser.KW_READ - 167)))) !==
            0) ||
        (((_la - 200) & ~0x1f) == 0 &&
          ((1 << (_la - 200)) &
            ((1 << (HiveParser.KW_PURGE - 200)) |
              (1 << (HiveParser.KW_ANALYZE - 200)) |
              (1 << (HiveParser.KW_BEFORE - 200)) |
              (1 << (HiveParser.KW_BINARY - 200)) |
              (1 << (HiveParser.KW_CONTINUE - 200)) |
              (1 << (HiveParser.KW_RECORDREADER - 200)) |
              (1 << (HiveParser.KW_RECORDWRITER - 200)) |
              (1 << (HiveParser.KW_SEMI - 200)) |
              (1 << (HiveParser.KW_TOUCH - 200)) |
              (1 << (HiveParser.KW_ARCHIVE - 200)) |
              (1 << (HiveParser.KW_UNARCHIVE - 200)) |
              (1 << (HiveParser.KW_COMPUTE - 200)) |
              (1 << (HiveParser.KW_STATISTICS - 200)) |
              (1 << (HiveParser.KW_USE - 200)) |
              (1 << (HiveParser.KW_OPTION - 200)) |
              (1 << (HiveParser.KW_CONCATENATE - 200)) |
              (1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
              (1 << (HiveParser.KW_RESTRICT - 200)) |
              (1 << (HiveParser.KW_CASCADE - 200)) |
              (1 << (HiveParser.KW_SKEWED - 200)) |
              (1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
            0) ||
        (((_la - 238) & ~0x1f) == 0 &&
          ((1 << (_la - 238)) &
            ((1 << (HiveParser.KW_CURRENT_DATE - 238)) |
              (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 238)) |
              (1 << (HiveParser.KW_GROUPING - 238)) |
              (1 << (HiveParser.KW_SETS - 238)) |
              (1 << (HiveParser.KW_NOSCAN - 238)) |
              (1 << (HiveParser.KW_ROLE - 238)) |
              (1 << (HiveParser.KW_ROLES - 238)) |
              (1 << (HiveParser.KW_URI - 238)) |
              (1 << (HiveParser.KW_SERVER - 238)) |
              (1 << (HiveParser.KW_ADMIN - 238)) |
              (1 << (HiveParser.KW_OWNER - 238)) |
              (1 << (HiveParser.KW_PRINCIPALS - 238)) |
              (1 << (HiveParser.KW_COMPACT - 238)) |
              (1 << (HiveParser.KW_COMPACTIONS - 238)) |
              (1 << (HiveParser.KW_TRANSACTIONS - 238)) |
              (1 << (HiveParser.KW_REWRITE - 238)) |
              (1 << (HiveParser.KW_REOPTIMIZATION - 238)) |
              (1 << (HiveParser.KW_RELOAD - 238)) |
              (1 << (HiveParser.KW_YEAR - 238)) |
              (1 << (HiveParser.KW_QUERY - 238)) |
              (1 << (HiveParser.KW_QUARTER - 238)) |
              (1 << (HiveParser.KW_MONTH - 238)))) !==
            0) ||
        (((_la - 270) & ~0x1f) == 0 &&
          ((1 << (_la - 270)) &
            ((1 << (HiveParser.KW_WEEK - 270)) |
              (1 << (HiveParser.KW_DAY - 270)) |
              (1 << (HiveParser.KW_DOW - 270)) |
              (1 << (HiveParser.KW_HOUR - 270)) |
              (1 << (HiveParser.KW_MINUTE - 270)) |
              (1 << (HiveParser.KW_SECOND - 270)) |
              (1 << (HiveParser.KW_TRANSACTION - 270)) |
              (1 << (HiveParser.KW_WORK - 270)) |
              (1 << (HiveParser.KW_WRITE - 270)) |
              (1 << (HiveParser.KW_ISOLATION - 270)) |
              (1 << (HiveParser.KW_LEVEL - 270)) |
              (1 << (HiveParser.KW_SNAPSHOT - 270)) |
              (1 << (HiveParser.KW_AUTOCOMMIT - 270)) |
              (1 << (HiveParser.KW_CACHE - 270)) |
              (1 << (HiveParser.KW_ENFORCED - 270)) |
              (1 << (HiveParser.KW_VALIDATE - 270)) |
              (1 << (HiveParser.KW_NOVALIDATE - 270)) |
              (1 << (HiveParser.KW_RELY - 270)) |
              (1 << (HiveParser.KW_NORELY - 270)) |
              (1 << (HiveParser.KW_KEY - 270)) |
              (1 << (HiveParser.KW_ABORT - 270)) |
              (1 << (HiveParser.KW_EXTRACT - 270)) |
              (1 << (HiveParser.KW_FLOOR - 270)))) !==
            0) ||
        (((_la - 303) & ~0x1f) == 0 &&
          ((1 << (_la - 303)) &
            ((1 << (HiveParser.KW_MATCHED - 303)) |
              (1 << (HiveParser.KW_REPL - 303)) |
              (1 << (HiveParser.KW_DUMP - 303)) |
              (1 << (HiveParser.KW_STATUS - 303)) |
              (1 << (HiveParser.KW_VECTORIZATION - 303)) |
              (1 << (HiveParser.KW_SUMMARY - 303)) |
              (1 << (HiveParser.KW_OPERATOR - 303)) |
              (1 << (HiveParser.KW_EXPRESSION - 303)) |
              (1 << (HiveParser.KW_DETAIL - 303)) |
              (1 << (HiveParser.KW_WAIT - 303)) |
              (1 << (HiveParser.KW_RESOURCE - 303)) |
              (1 << (HiveParser.KW_PLAN - 303)) |
              (1 << (HiveParser.KW_QUERY_PARALLELISM - 303)) |
              (1 << (HiveParser.KW_PLANS - 303)) |
              (1 << (HiveParser.KW_ACTIVATE - 303)) |
              (1 << (HiveParser.KW_DEFAULT - 303)) |
              (1 << (HiveParser.KW_CHECK - 303)) |
              (1 << (HiveParser.KW_POOL - 303)) |
              (1 << (HiveParser.KW_MOVE - 303)) |
              (1 << (HiveParser.KW_DO - 303)) |
              (1 << (HiveParser.KW_ALLOC_FRACTION - 303)) |
              (1 << (HiveParser.KW_SCHEDULING_POLICY - 303)) |
              (1 << (HiveParser.KW_PATH - 303)) |
              (1 << (HiveParser.KW_MAPPING - 303)) |
              (1 << (HiveParser.KW_WORKLOAD - 303)) |
              (1 << (HiveParser.KW_MANAGEMENT - 303)) |
              (1 << (HiveParser.KW_ACTIVE - 303)) |
              (1 << (HiveParser.KW_UNMANAGED - 303)))) !==
            0) ||
        (((_la - 338) & ~0x1f) == 0 &&
          ((1 << (_la - 338)) &
            ((1 << (HiveParser.KW_DELTA - 338)) |
              (1 << (HiveParser.KW_CSV - 338)) |
              (1 << (HiveParser.KW_JSON - 338)) |
              (1 << (HiveParser.KW_BLOOMFILTER - 338)) |
              (1 << (HiveParser.LPAREN - 338)) |
              (1 << (HiveParser.LCURLY - 338)) |
              (1 << (HiveParser.PLUS - 338)) |
              (1 << (HiveParser.MINUS - 338)))) !==
            0) ||
        (((_la - 372) & ~0x1f) == 0 &&
          ((1 << (_la - 372)) &
            ((1 << (HiveParser.TILDE - 372)) |
              (1 << (HiveParser.StringLiteral - 372)) |
              (1 << (HiveParser.IntegralLiteral - 372)) |
              (1 << (HiveParser.NumberLiteral - 372)) |
              (1 << (HiveParser.Number - 372)) |
              (1 << (HiveParser.Identifier - 372)) |
              (1 << (HiveParser.CharSetName - 372)))) !==
            0)
      ) {
        this.state = 3923;
        this.expression(0);
      }

      this.state = 3930;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 3926;
        this.match(HiveParser.COMMA);
        this.state = 3927;
        this.expression(0);
        this.state = 3932;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 3933;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  groupingExpressionSingle() {
    let localctx = new GroupingExpressionSingleContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 668, HiveParser.RULE_groupingExpressionSingle);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3935;
      this.expression(0);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  havingClause() {
    let localctx = new HavingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 670, HiveParser.RULE_havingClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3937;
      this.match(HiveParser.KW_HAVING);
      this.state = 3938;
      this.havingCondition();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  havingCondition() {
    let localctx = new HavingConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 672, HiveParser.RULE_havingCondition);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3940;
      this.expression(0);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  expressionsInParenthesis() {
    let localctx = new ExpressionsInParenthesisContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 674, HiveParser.RULE_expressionsInParenthesis);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3942;
      this.match(HiveParser.LPAREN);
      this.state = 3943;
      this.expressionsNotInParenthesis();
      this.state = 3944;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  expressionsNotInParenthesis() {
    let localctx = new ExpressionsNotInParenthesisContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 676, HiveParser.RULE_expressionsNotInParenthesis);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3946;
      this.expression(0);
      this.state = 3948;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.COMMA) {
        this.state = 3947;
        this.expressionPart();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  expressionPart() {
    let localctx = new ExpressionPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 678, HiveParser.RULE_expressionPart);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3952;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 3950;
        this.match(HiveParser.COMMA);
        this.state = 3951;
        this.expression(0);
        this.state = 3954;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (_la === HiveParser.COMMA);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  expressions() {
    let localctx = new ExpressionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 680, HiveParser.RULE_expressions);
    try {
      this.state = 3958;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 470, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 3956;
          this.expressionsInParenthesis();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 3957;
          this.expressionsNotInParenthesis();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnRefOrderInParenthesis() {
    let localctx = new ColumnRefOrderInParenthesisContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 682, HiveParser.RULE_columnRefOrderInParenthesis);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3960;
      this.match(HiveParser.LPAREN);
      this.state = 3961;
      this.columnRefOrder();
      this.state = 3966;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 3962;
        this.match(HiveParser.COMMA);
        this.state = 3963;
        this.columnRefOrder();
        this.state = 3968;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 3969;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  columnRefOrderNotInParenthesis() {
    let localctx = new ColumnRefOrderNotInParenthesisContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      684,
      HiveParser.RULE_columnRefOrderNotInParenthesis
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3971;
      this.columnRefOrder();
      this.state = 3976;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 3972;
        this.match(HiveParser.COMMA);
        this.state = 3973;
        this.columnRefOrder();
        this.state = 3978;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  orderByClause() {
    let localctx = new OrderByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 686, HiveParser.RULE_orderByClause);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3979;
      this.match(HiveParser.KW_ORDER);
      this.state = 3980;
      this.match(HiveParser.KW_BY);
      this.state = 3981;
      this.columnRefOrder();
      this.state = 3986;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 3982;
        this.match(HiveParser.COMMA);
        this.state = 3983;
        this.columnRefOrder();
        this.state = 3988;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  clusterByClause() {
    let localctx = new ClusterByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 688, HiveParser.RULE_clusterByClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3989;
      this.match(HiveParser.KW_CLUSTER);
      this.state = 3990;
      this.match(HiveParser.KW_BY);
      this.state = 3991;
      this.expressions();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  partitionByClause() {
    let localctx = new PartitionByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 690, HiveParser.RULE_partitionByClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3993;
      this.match(HiveParser.KW_PARTITION);
      this.state = 3994;
      this.match(HiveParser.KW_BY);
      this.state = 3995;
      this.expressions();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  distributeByClause() {
    let localctx = new DistributeByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 692, HiveParser.RULE_distributeByClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 3997;
      this.match(HiveParser.KW_DISTRIBUTE);
      this.state = 3998;
      this.match(HiveParser.KW_BY);
      this.state = 3999;
      this.expressions();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  sortByClause() {
    let localctx = new SortByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 694, HiveParser.RULE_sortByClause);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4001;
      this.match(HiveParser.KW_SORT);
      this.state = 4002;
      this.match(HiveParser.KW_BY);
      this.state = 4005;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 474, this._ctx);
      switch (la_) {
        case 1:
          this.state = 4003;
          this.columnRefOrderInParenthesis();
          break;

        case 2:
          this.state = 4004;
          this.columnRefOrderNotInParenthesis();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  functionStatement() {
    let localctx = new FunctionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 696, HiveParser.RULE_functionStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4007;
      this.functionName();
      this.state = 4008;
      this.match(HiveParser.LPAREN);
      this.state = 4023;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 478, this._ctx);
      switch (la_) {
        case 1:
          this.state = 4009;
          this.match(HiveParser.STAR);
          break;

        case 2:
          this.state = 4011;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === HiveParser.KW_ALL || _la === HiveParser.KW_DISTINCT) {
            this.state = 4010;
            _la = this._input.LA(1);
            if (
              !(_la === HiveParser.KW_ALL || _la === HiveParser.KW_DISTINCT)
            ) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
          }

          this.state = 4021;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (
            ((_la & ~0x1f) == 0 &&
              ((1 << _la) &
                ((1 << HiveParser.KW_TRUE) |
                  (1 << HiveParser.KW_FALSE) |
                  (1 << HiveParser.KW_NOT) |
                  (1 << HiveParser.KW_IF) |
                  (1 << HiveParser.KW_EXISTS) |
                  (1 << HiveParser.KW_ASC) |
                  (1 << HiveParser.KW_DESC) |
                  (1 << HiveParser.KW_NULLS) |
                  (1 << HiveParser.KW_LAST) |
                  (1 << HiveParser.KW_OVERWRITE))) !==
                0) ||
            (((_la - 36) & ~0x1f) == 0 &&
              ((1 << (_la - 36)) &
                ((1 << (HiveParser.KW_PARTITIONS - 36)) |
                  (1 << (HiveParser.KW_TABLES - 36)) |
                  (1 << (HiveParser.KW_COLUMNS - 36)) |
                  (1 << (HiveParser.KW_INDEX - 36)) |
                  (1 << (HiveParser.KW_INDEXES - 36)) |
                  (1 << (HiveParser.KW_REBUILD - 36)) |
                  (1 << (HiveParser.KW_FUNCTIONS - 36)) |
                  (1 << (HiveParser.KW_SHOW - 36)) |
                  (1 << (HiveParser.KW_MSCK - 36)) |
                  (1 << (HiveParser.KW_REPAIR - 36)) |
                  (1 << (HiveParser.KW_DIRECTORY - 36)) |
                  (1 << (HiveParser.KW_CLUSTER - 36)) |
                  (1 << (HiveParser.KW_DISTRIBUTE - 36)) |
                  (1 << (HiveParser.KW_SORT - 36)) |
                  (1 << (HiveParser.KW_LOAD - 36)) |
                  (1 << (HiveParser.KW_EXPORT - 36)) |
                  (1 << (HiveParser.KW_REPLICATION - 36)) |
                  (1 << (HiveParser.KW_METADATA - 36)) |
                  (1 << (HiveParser.KW_DATA - 36)) |
                  (1 << (HiveParser.KW_INPATH - 36)) |
                  (1 << (HiveParser.KW_NULL - 36)))) !==
                0) ||
            (((_la - 68) & ~0x1f) == 0 &&
              ((1 << (_la - 68)) &
                ((1 << (HiveParser.KW_CHANGE - 68)) |
                  (1 << (HiveParser.KW_FIRST - 68)) |
                  (1 << (HiveParser.KW_AFTER - 68)) |
                  (1 << (HiveParser.KW_RENAME - 68)) |
                  (1 << (HiveParser.KW_COMMENT - 68)) |
                  (1 << (HiveParser.KW_BOOLEAN - 68)) |
                  (1 << (HiveParser.KW_TINYINT - 68)) |
                  (1 << (HiveParser.KW_SMALLINT - 68)) |
                  (1 << (HiveParser.KW_INT - 68)) |
                  (1 << (HiveParser.KW_BIGINT - 68)) |
                  (1 << (HiveParser.KW_FLOAT - 68)) |
                  (1 << (HiveParser.KW_DOUBLE - 68)) |
                  (1 << (HiveParser.KW_DATE - 68)) |
                  (1 << (HiveParser.KW_DATETIME - 68)) |
                  (1 << (HiveParser.KW_TIMESTAMP - 68)) |
                  (1 << (HiveParser.KW_TIMESTAMPLOCALTZ - 68)) |
                  (1 << (HiveParser.KW_TIME - 68)) |
                  (1 << (HiveParser.KW_ZONE - 68)) |
                  (1 << (HiveParser.KW_INTERVAL - 68)) |
                  (1 << (HiveParser.KW_STRING - 68)) |
                  (1 << (HiveParser.KW_ARRAY - 68)) |
                  (1 << (HiveParser.KW_STRUCT - 68)) |
                  (1 << (HiveParser.KW_MAP - 68)) |
                  (1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
                0) ||
            (((_la - 101) & ~0x1f) == 0 &&
              ((1 << (_la - 101)) &
                ((1 << (HiveParser.KW_PARTITIONED - 101)) |
                  (1 << (HiveParser.KW_CLUSTERED - 101)) |
                  (1 << (HiveParser.KW_SORTED - 101)) |
                  (1 << (HiveParser.KW_BUCKETS - 101)) |
                  (1 << (HiveParser.KW_FORMAT - 101)) |
                  (1 << (HiveParser.KW_DELIMITED - 101)) |
                  (1 << (HiveParser.KW_FIELDS - 101)) |
                  (1 << (HiveParser.KW_TERMINATED - 101)) |
                  (1 << (HiveParser.KW_ESCAPED - 101)) |
                  (1 << (HiveParser.KW_COLLECTION - 101)) |
                  (1 << (HiveParser.KW_ITEMS - 101)) |
                  (1 << (HiveParser.KW_KEYS - 101)) |
                  (1 << (HiveParser.KW_KEY_TYPE - 101)) |
                  (1 << (HiveParser.KW_KILL - 101)) |
                  (1 << (HiveParser.KW_LINES - 101)) |
                  (1 << (HiveParser.KW_STORED - 101)) |
                  (1 << (HiveParser.KW_FILEFORMAT - 101)) |
                  (1 << (HiveParser.KW_INPUTFORMAT - 101)) |
                  (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
                  (1 << (HiveParser.KW_INPUTDRIVER - 101)) |
                  (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
                  (1 << (HiveParser.KW_ENABLE - 101)) |
                  (1 << (HiveParser.KW_DISABLE - 101)) |
                  (1 << (HiveParser.KW_LOCATION - 101)) |
                  (1 << (HiveParser.KW_BUCKET - 101)))) !==
                0) ||
            (((_la - 133) & ~0x1f) == 0 &&
              ((1 << (_la - 133)) &
                ((1 << (HiveParser.KW_CAST - 133)) |
                  (1 << (HiveParser.KW_ADD - 133)) |
                  (1 << (HiveParser.KW_REPLACE - 133)) |
                  (1 << (HiveParser.KW_TEMPORARY - 133)) |
                  (1 << (HiveParser.KW_FILE - 133)) |
                  (1 << (HiveParser.KW_JAR - 133)) |
                  (1 << (HiveParser.KW_EXPLAIN - 133)) |
                  (1 << (HiveParser.KW_FORMATTED - 133)) |
                  (1 << (HiveParser.KW_DEPENDENCY - 133)) |
                  (1 << (HiveParser.KW_LOGICAL - 133)) |
                  (1 << (HiveParser.KW_SERDE - 133)) |
                  (1 << (HiveParser.KW_DEFERRED - 133)) |
                  (1 << (HiveParser.KW_SERDEPROPERTIES - 133)) |
                  (1 << (HiveParser.KW_DBPROPERTIES - 133)) |
                  (1 << (HiveParser.KW_LIMIT - 133)) |
                  (1 << (HiveParser.KW_OFFSET - 133)) |
                  (1 << (HiveParser.KW_UNSET - 133)) |
                  (1 << (HiveParser.KW_TBLPROPERTIES - 133)) |
                  (1 << (HiveParser.KW_IDXPROPERTIES - 133)) |
                  (1 << (HiveParser.KW_VALUE_TYPE - 133)) |
                  (1 << (HiveParser.KW_ELEM_TYPE - 133)) |
                  (1 << (HiveParser.KW_DEFINED - 133)) |
                  (1 << (HiveParser.KW_CASE - 133)))) !==
                0) ||
            (((_la - 167) & ~0x1f) == 0 &&
              ((1 << (_la - 167)) &
                ((1 << (HiveParser.KW_MAPJOIN - 167)) |
                  (1 << (HiveParser.KW_STREAMTABLE - 167)) |
                  (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
                  (1 << (HiveParser.KW_UTC - 167)) |
                  (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
                  (1 << (HiveParser.KW_LONG - 167)) |
                  (1 << (HiveParser.KW_PLUS - 167)) |
                  (1 << (HiveParser.KW_VIEW - 167)) |
                  (1 << (HiveParser.KW_VIEWS - 167)) |
                  (1 << (HiveParser.KW_DATABASES - 167)) |
                  (1 << (HiveParser.KW_MATERIALIZED - 167)) |
                  (1 << (HiveParser.KW_SCHEMA - 167)) |
                  (1 << (HiveParser.KW_SCHEMAS - 167)) |
                  (1 << (HiveParser.KW_SSL - 167)) |
                  (1 << (HiveParser.KW_UNDO - 167)) |
                  (1 << (HiveParser.KW_LOCK - 167)) |
                  (1 << (HiveParser.KW_LOCKS - 167)) |
                  (1 << (HiveParser.KW_UNLOCK - 167)) |
                  (1 << (HiveParser.KW_SHARED - 167)) |
                  (1 << (HiveParser.KW_EXCLUSIVE - 167)) |
                  (1 << (HiveParser.KW_UNSIGNED - 167)) |
                  (1 << (HiveParser.KW_WHILE - 167)) |
                  (1 << (HiveParser.KW_READ - 167)))) !==
                0) ||
            (((_la - 200) & ~0x1f) == 0 &&
              ((1 << (_la - 200)) &
                ((1 << (HiveParser.KW_PURGE - 200)) |
                  (1 << (HiveParser.KW_ANALYZE - 200)) |
                  (1 << (HiveParser.KW_BEFORE - 200)) |
                  (1 << (HiveParser.KW_BINARY - 200)) |
                  (1 << (HiveParser.KW_CONTINUE - 200)) |
                  (1 << (HiveParser.KW_RECORDREADER - 200)) |
                  (1 << (HiveParser.KW_RECORDWRITER - 200)) |
                  (1 << (HiveParser.KW_SEMI - 200)) |
                  (1 << (HiveParser.KW_TOUCH - 200)) |
                  (1 << (HiveParser.KW_ARCHIVE - 200)) |
                  (1 << (HiveParser.KW_UNARCHIVE - 200)) |
                  (1 << (HiveParser.KW_COMPUTE - 200)) |
                  (1 << (HiveParser.KW_STATISTICS - 200)) |
                  (1 << (HiveParser.KW_USE - 200)) |
                  (1 << (HiveParser.KW_OPTION - 200)) |
                  (1 << (HiveParser.KW_CONCATENATE - 200)) |
                  (1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
                  (1 << (HiveParser.KW_RESTRICT - 200)) |
                  (1 << (HiveParser.KW_CASCADE - 200)) |
                  (1 << (HiveParser.KW_SKEWED - 200)) |
                  (1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
                0) ||
            (((_la - 238) & ~0x1f) == 0 &&
              ((1 << (_la - 238)) &
                ((1 << (HiveParser.KW_CURRENT_DATE - 238)) |
                  (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 238)) |
                  (1 << (HiveParser.KW_GROUPING - 238)) |
                  (1 << (HiveParser.KW_SETS - 238)) |
                  (1 << (HiveParser.KW_NOSCAN - 238)) |
                  (1 << (HiveParser.KW_ROLE - 238)) |
                  (1 << (HiveParser.KW_ROLES - 238)) |
                  (1 << (HiveParser.KW_URI - 238)) |
                  (1 << (HiveParser.KW_SERVER - 238)) |
                  (1 << (HiveParser.KW_ADMIN - 238)) |
                  (1 << (HiveParser.KW_OWNER - 238)) |
                  (1 << (HiveParser.KW_PRINCIPALS - 238)) |
                  (1 << (HiveParser.KW_COMPACT - 238)) |
                  (1 << (HiveParser.KW_COMPACTIONS - 238)) |
                  (1 << (HiveParser.KW_TRANSACTIONS - 238)) |
                  (1 << (HiveParser.KW_REWRITE - 238)) |
                  (1 << (HiveParser.KW_REOPTIMIZATION - 238)) |
                  (1 << (HiveParser.KW_RELOAD - 238)) |
                  (1 << (HiveParser.KW_YEAR - 238)) |
                  (1 << (HiveParser.KW_QUERY - 238)) |
                  (1 << (HiveParser.KW_QUARTER - 238)) |
                  (1 << (HiveParser.KW_MONTH - 238)))) !==
                0) ||
            (((_la - 270) & ~0x1f) == 0 &&
              ((1 << (_la - 270)) &
                ((1 << (HiveParser.KW_WEEK - 270)) |
                  (1 << (HiveParser.KW_DAY - 270)) |
                  (1 << (HiveParser.KW_DOW - 270)) |
                  (1 << (HiveParser.KW_HOUR - 270)) |
                  (1 << (HiveParser.KW_MINUTE - 270)) |
                  (1 << (HiveParser.KW_SECOND - 270)) |
                  (1 << (HiveParser.KW_TRANSACTION - 270)) |
                  (1 << (HiveParser.KW_WORK - 270)) |
                  (1 << (HiveParser.KW_WRITE - 270)) |
                  (1 << (HiveParser.KW_ISOLATION - 270)) |
                  (1 << (HiveParser.KW_LEVEL - 270)) |
                  (1 << (HiveParser.KW_SNAPSHOT - 270)) |
                  (1 << (HiveParser.KW_AUTOCOMMIT - 270)) |
                  (1 << (HiveParser.KW_CACHE - 270)) |
                  (1 << (HiveParser.KW_ENFORCED - 270)) |
                  (1 << (HiveParser.KW_VALIDATE - 270)) |
                  (1 << (HiveParser.KW_NOVALIDATE - 270)) |
                  (1 << (HiveParser.KW_RELY - 270)) |
                  (1 << (HiveParser.KW_NORELY - 270)) |
                  (1 << (HiveParser.KW_KEY - 270)) |
                  (1 << (HiveParser.KW_ABORT - 270)) |
                  (1 << (HiveParser.KW_EXTRACT - 270)) |
                  (1 << (HiveParser.KW_FLOOR - 270)))) !==
                0) ||
            (((_la - 303) & ~0x1f) == 0 &&
              ((1 << (_la - 303)) &
                ((1 << (HiveParser.KW_MATCHED - 303)) |
                  (1 << (HiveParser.KW_REPL - 303)) |
                  (1 << (HiveParser.KW_DUMP - 303)) |
                  (1 << (HiveParser.KW_STATUS - 303)) |
                  (1 << (HiveParser.KW_VECTORIZATION - 303)) |
                  (1 << (HiveParser.KW_SUMMARY - 303)) |
                  (1 << (HiveParser.KW_OPERATOR - 303)) |
                  (1 << (HiveParser.KW_EXPRESSION - 303)) |
                  (1 << (HiveParser.KW_DETAIL - 303)) |
                  (1 << (HiveParser.KW_WAIT - 303)) |
                  (1 << (HiveParser.KW_RESOURCE - 303)) |
                  (1 << (HiveParser.KW_PLAN - 303)) |
                  (1 << (HiveParser.KW_QUERY_PARALLELISM - 303)) |
                  (1 << (HiveParser.KW_PLANS - 303)) |
                  (1 << (HiveParser.KW_ACTIVATE - 303)) |
                  (1 << (HiveParser.KW_DEFAULT - 303)) |
                  (1 << (HiveParser.KW_CHECK - 303)) |
                  (1 << (HiveParser.KW_POOL - 303)) |
                  (1 << (HiveParser.KW_MOVE - 303)) |
                  (1 << (HiveParser.KW_DO - 303)) |
                  (1 << (HiveParser.KW_ALLOC_FRACTION - 303)) |
                  (1 << (HiveParser.KW_SCHEDULING_POLICY - 303)) |
                  (1 << (HiveParser.KW_PATH - 303)) |
                  (1 << (HiveParser.KW_MAPPING - 303)) |
                  (1 << (HiveParser.KW_WORKLOAD - 303)) |
                  (1 << (HiveParser.KW_MANAGEMENT - 303)) |
                  (1 << (HiveParser.KW_ACTIVE - 303)) |
                  (1 << (HiveParser.KW_UNMANAGED - 303)))) !==
                0) ||
            (((_la - 338) & ~0x1f) == 0 &&
              ((1 << (_la - 338)) &
                ((1 << (HiveParser.KW_DELTA - 338)) |
                  (1 << (HiveParser.KW_CSV - 338)) |
                  (1 << (HiveParser.KW_JSON - 338)) |
                  (1 << (HiveParser.KW_BLOOMFILTER - 338)) |
                  (1 << (HiveParser.LPAREN - 338)) |
                  (1 << (HiveParser.LCURLY - 338)) |
                  (1 << (HiveParser.PLUS - 338)) |
                  (1 << (HiveParser.MINUS - 338)) |
                  (1 << (HiveParser.STAR - 338)))) !==
                0) ||
            (((_la - 372) & ~0x1f) == 0 &&
              ((1 << (_la - 372)) &
                ((1 << (HiveParser.TILDE - 372)) |
                  (1 << (HiveParser.StringLiteral - 372)) |
                  (1 << (HiveParser.IntegralLiteral - 372)) |
                  (1 << (HiveParser.NumberLiteral - 372)) |
                  (1 << (HiveParser.Number - 372)) |
                  (1 << (HiveParser.Identifier - 372)) |
                  (1 << (HiveParser.CharSetName - 372)))) !==
                0)
          ) {
            this.state = 4013;
            this.selectExpression();
            this.state = 4018;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === HiveParser.COMMA) {
              this.state = 4014;
              this.match(HiveParser.COMMA);
              this.state = 4015;
              this.selectExpression();
              this.state = 4020;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
          }

          break;
      }
      this.state = 4025;
      this.match(HiveParser.RPAREN);
      this.state = 4028;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 479, this._ctx);
      if (la_ === 1) {
        this.state = 4026;
        this.match(HiveParser.KW_OVER);
        this.state = 4027;
        this.window_specification();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  functionName() {
    let localctx = new FunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 698, HiveParser.RULE_functionName);
    try {
      this.state = 4032;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 480, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 4030;
          this.functionIdentifier();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 4031;
          this.sql11ReservedKeywordsUsedAsFunctionName();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  castExpression() {
    let localctx = new CastExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 700, HiveParser.RULE_castExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4034;
      this.match(HiveParser.KW_CAST);
      this.state = 4035;
      this.match(HiveParser.LPAREN);
      this.state = 4036;
      this.expression(0);
      this.state = 4037;
      this.match(HiveParser.KW_AS);
      this.state = 4040;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_BOOLEAN:
        case HiveParser.KW_TINYINT:
        case HiveParser.KW_SMALLINT:
        case HiveParser.KW_INT:
        case HiveParser.KW_BIGINT:
        case HiveParser.KW_FLOAT:
        case HiveParser.KW_DOUBLE:
        case HiveParser.KW_DATE:
        case HiveParser.KW_DATETIME:
        case HiveParser.KW_TIMESTAMP:
        case HiveParser.KW_TIMESTAMPLOCALTZ:
        case HiveParser.KW_DECIMAL:
        case HiveParser.KW_STRING:
        case HiveParser.KW_CHAR:
        case HiveParser.KW_VARCHAR:
        case HiveParser.KW_BINARY:
          this.state = 4038;
          this.primitiveType();
          break;
        case HiveParser.KW_STRUCT:
          this.state = 4039;
          this.structType();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 4042;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  caseExpression() {
    let localctx = new CaseExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 702, HiveParser.RULE_caseExpression);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4044;
      this.match(HiveParser.KW_CASE);
      this.state = 4045;
      this.expression(0);
      this.state = 4051;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 4046;
        this.match(HiveParser.KW_WHEN);
        this.state = 4047;
        this.expression(0);
        this.state = 4048;
        this.match(HiveParser.KW_THEN);
        this.state = 4049;
        this.expression(0);
        this.state = 4053;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (_la === HiveParser.KW_WHEN);
      this.state = 4057;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_ELSE) {
        this.state = 4055;
        this.match(HiveParser.KW_ELSE);
        this.state = 4056;
        this.expression(0);
      }

      this.state = 4059;
      this.match(HiveParser.KW_END);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  whenExpression() {
    let localctx = new WhenExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 704, HiveParser.RULE_whenExpression);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4061;
      this.match(HiveParser.KW_CASE);
      this.state = 4067;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 4062;
        this.match(HiveParser.KW_WHEN);
        this.state = 4063;
        this.expression(0);
        this.state = 4064;
        this.match(HiveParser.KW_THEN);
        this.state = 4065;
        this.expression(0);
        this.state = 4069;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (_la === HiveParser.KW_WHEN);
      this.state = 4073;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_ELSE) {
        this.state = 4071;
        this.match(HiveParser.KW_ELSE);
        this.state = 4072;
        this.expression(0);
      }

      this.state = 4075;
      this.match(HiveParser.KW_END);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  floorExpression() {
    let localctx = new FloorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 706, HiveParser.RULE_floorExpression);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4077;
      this.match(HiveParser.KW_FLOOR);
      this.state = 4078;
      this.match(HiveParser.LPAREN);
      this.state = 4079;
      this.expression(0);
      this.state = 4082;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_TO) {
        this.state = 4080;
        this.match(HiveParser.KW_TO);
        this.state = 4081;
        this.floorDateQualifiers();
      }

      this.state = 4084;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  floorDateQualifiers() {
    let localctx = new FloorDateQualifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 708, HiveParser.RULE_floorDateQualifiers);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4086;
      _la = this._input.LA(1);
      if (
        !(
          ((_la - 266) & ~0x1f) == 0 &&
          ((1 << (_la - 266)) &
            ((1 << (HiveParser.KW_YEAR - 266)) |
              (1 << (HiveParser.KW_QUARTER - 266)) |
              (1 << (HiveParser.KW_MONTH - 266)) |
              (1 << (HiveParser.KW_WEEK - 266)) |
              (1 << (HiveParser.KW_DAY - 266)) |
              (1 << (HiveParser.KW_HOUR - 266)) |
              (1 << (HiveParser.KW_MINUTE - 266)) |
              (1 << (HiveParser.KW_SECOND - 266)))) !==
            0
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  extractExpression() {
    let localctx = new ExtractExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 710, HiveParser.RULE_extractExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4088;
      this.match(HiveParser.KW_EXTRACT);
      this.state = 4089;
      this.match(HiveParser.LPAREN);
      this.state = 4090;
      this.timeQualifiers();
      this.state = 4091;
      this.match(HiveParser.KW_FROM);
      this.state = 4092;
      this.expression(0);
      this.state = 4093;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  timeQualifiers() {
    let localctx = new TimeQualifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 712, HiveParser.RULE_timeQualifiers);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4095;
      _la = this._input.LA(1);
      if (
        !(
          ((_la - 266) & ~0x1f) == 0 &&
          ((1 << (_la - 266)) &
            ((1 << (HiveParser.KW_YEAR - 266)) |
              (1 << (HiveParser.KW_QUARTER - 266)) |
              (1 << (HiveParser.KW_MONTH - 266)) |
              (1 << (HiveParser.KW_WEEK - 266)) |
              (1 << (HiveParser.KW_DAY - 266)) |
              (1 << (HiveParser.KW_DOW - 266)) |
              (1 << (HiveParser.KW_HOUR - 266)) |
              (1 << (HiveParser.KW_MINUTE - 266)) |
              (1 << (HiveParser.KW_SECOND - 266)))) !==
            0
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  constant() {
    let localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 714, HiveParser.RULE_constant);
    try {
      this.state = 4109;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 487, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 4097;
          this.intervalLiteral();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 4098;
          this.match(HiveParser.Number);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 4099;
          this.dateLiteral();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 4100;
          this.timestampLiteral();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 4101;
          this.timestampLocalTZLiteral();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 4102;
          this.match(HiveParser.StringLiteral);
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 4103;
          this.stringLiteralSequence();
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 4104;
          this.match(HiveParser.IntegralLiteral);
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 4105;
          this.match(HiveParser.NumberLiteral);
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 4106;
          this.charSetStringLiteral();
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 4107;
          this.booleanValue();
          break;

        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 4108;
          this.match(HiveParser.KW_NULL);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  stringLiteralSequence() {
    let localctx = new StringLiteralSequenceContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 716, HiveParser.RULE_stringLiteralSequence);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4111;
      this.match(HiveParser.StringLiteral);
      this.state = 4113;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 4112;
            this.match(HiveParser.StringLiteral);
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 4115;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 488, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  charSetStringLiteral() {
    let localctx = new CharSetStringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 718, HiveParser.RULE_charSetStringLiteral);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4117;
      this.match(HiveParser.CharSetName);
      this.state = 4118;
      this.match(HiveParser.CharSetLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dateLiteral() {
    let localctx = new DateLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 720, HiveParser.RULE_dateLiteral);
    try {
      this.state = 4123;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_DATE:
          this.enterOuterAlt(localctx, 1);
          this.state = 4120;
          this.match(HiveParser.KW_DATE);
          this.state = 4121;
          this.match(HiveParser.StringLiteral);
          break;
        case HiveParser.KW_CURRENT_DATE:
          this.enterOuterAlt(localctx, 2);
          this.state = 4122;
          this.match(HiveParser.KW_CURRENT_DATE);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  timestampLiteral() {
    let localctx = new TimestampLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 722, HiveParser.RULE_timestampLiteral);
    try {
      this.state = 4128;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_TIMESTAMP:
          this.enterOuterAlt(localctx, 1);
          this.state = 4125;
          this.match(HiveParser.KW_TIMESTAMP);
          this.state = 4126;
          this.match(HiveParser.StringLiteral);
          break;
        case HiveParser.KW_CURRENT_TIMESTAMP:
          this.enterOuterAlt(localctx, 2);
          this.state = 4127;
          this.match(HiveParser.KW_CURRENT_TIMESTAMP);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  timestampLocalTZLiteral() {
    let localctx = new TimestampLocalTZLiteralContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 724, HiveParser.RULE_timestampLocalTZLiteral);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4130;
      this.match(HiveParser.KW_TIMESTAMPLOCALTZ);
      this.state = 4131;
      this.match(HiveParser.StringLiteral);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  intervalValue() {
    let localctx = new IntervalValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 726, HiveParser.RULE_intervalValue);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4133;
      _la = this._input.LA(1);
      if (!(_la === HiveParser.StringLiteral || _la === HiveParser.Number)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  intervalLiteral() {
    let localctx = new IntervalLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 728, HiveParser.RULE_intervalLiteral);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4135;
      this.intervalValue();
      this.state = 4136;
      this.intervalQualifiers();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  intervalExpression() {
    let localctx = new IntervalExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 730, HiveParser.RULE_intervalExpression);
    try {
      this.state = 4153;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 491, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 4138;
          this.match(HiveParser.LPAREN);
          this.state = 4139;
          this.intervalValue();
          this.state = 4140;
          this.match(HiveParser.RPAREN);
          this.state = 4141;
          this.intervalQualifiers();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 4143;
          this.match(HiveParser.KW_INTERVAL);
          this.state = 4144;
          this.intervalValue();
          this.state = 4145;
          this.intervalQualifiers();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 4147;
          this.match(HiveParser.KW_INTERVAL);
          this.state = 4148;
          this.match(HiveParser.LPAREN);
          this.state = 4149;
          this.expression(0);
          this.state = 4150;
          this.match(HiveParser.RPAREN);
          this.state = 4151;
          this.intervalQualifiers();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  intervalQualifiers() {
    let localctx = new IntervalQualifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 732, HiveParser.RULE_intervalQualifiers);
    try {
      this.state = 4167;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 492, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 4155;
          this.match(HiveParser.KW_YEAR);
          this.state = 4156;
          this.match(HiveParser.KW_TO);
          this.state = 4157;
          this.match(HiveParser.KW_MONTH);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 4158;
          this.match(HiveParser.KW_DAY);
          this.state = 4159;
          this.match(HiveParser.KW_TO);
          this.state = 4160;
          this.match(HiveParser.KW_SECOND);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 4161;
          this.match(HiveParser.KW_YEAR);
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 4162;
          this.match(HiveParser.KW_MONTH);
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 4163;
          this.match(HiveParser.KW_DAY);
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 4164;
          this.match(HiveParser.KW_HOUR);
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 4165;
          this.match(HiveParser.KW_MINUTE);
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 4166;
          this.match(HiveParser.KW_SECOND);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  atomExpression() {
    let localctx = new AtomExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 734, HiveParser.RULE_atomExpression);
    try {
      this.state = 4180;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 493, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 4169;
          this.constant();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 4170;
          this.intervalExpression();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 4171;
          this.castExpression();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 4172;
          this.extractExpression();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 4173;
          this.floorExpression();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 4174;
          this.caseExpression();
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 4175;
          this.whenExpression();
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 4176;
          this.subQueryExpression();
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 4177;
          this.functionStatement();
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 4178;
          this.tableOrColumn();
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 4179;
          this.expressionsInParenthesis();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedenceUnaryOperator() {
    let localctx = new PrecedenceUnaryOperatorContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 736, HiveParser.RULE_precedenceUnaryOperator);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4182;
      _la = this._input.LA(1);
      if (
        !(
          ((_la - 366) & ~0x1f) == 0 &&
          ((1 << (_la - 366)) &
            ((1 << (HiveParser.PLUS - 366)) |
              (1 << (HiveParser.MINUS - 366)) |
              (1 << (HiveParser.TILDE - 366)))) !==
            0
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  isCondition() {
    let localctx = new IsConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 738, HiveParser.RULE_isCondition);
    try {
      this.state = 4193;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 494, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 4184;
          this.match(HiveParser.KW_NULL);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 4185;
          this.match(HiveParser.KW_TRUE);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 4186;
          this.match(HiveParser.KW_FALSE);
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 4187;
          this.match(HiveParser.KW_NOT);
          this.state = 4188;
          this.match(HiveParser.KW_NULL);
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 4189;
          this.match(HiveParser.KW_NOT);
          this.state = 4190;
          this.match(HiveParser.KW_TRUE);
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 4191;
          this.match(HiveParser.KW_NOT);
          this.state = 4192;
          this.match(HiveParser.KW_FALSE);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedenceBitwiseXorOperator() {
    let localctx = new PrecedenceBitwiseXorOperatorContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 740, HiveParser.RULE_precedenceBitwiseXorOperator);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4195;
      this.match(HiveParser.BITWISEXOR);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedenceStarOperator() {
    let localctx = new PrecedenceStarOperatorContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 742, HiveParser.RULE_precedenceStarOperator);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4197;
      _la = this._input.LA(1);
      if (
        !(
          ((_la - 365) & ~0x1f) == 0 &&
          ((1 << (_la - 365)) &
            ((1 << (HiveParser.DIVIDE - 365)) |
              (1 << (HiveParser.STAR - 365)) |
              (1 << (HiveParser.MOD - 365)) |
              (1 << (HiveParser.DIV - 365)))) !==
            0
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedencePlusOperator() {
    let localctx = new PrecedencePlusOperatorContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 744, HiveParser.RULE_precedencePlusOperator);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4199;
      _la = this._input.LA(1);
      if (!(_la === HiveParser.PLUS || _la === HiveParser.MINUS)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedenceConcatenateOperator() {
    let localctx = new PrecedenceConcatenateOperatorContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      746,
      HiveParser.RULE_precedenceConcatenateOperator
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4201;
      this.match(HiveParser.CONCATENATE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedenceAmpersandOperator() {
    let localctx = new PrecedenceAmpersandOperatorContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 748, HiveParser.RULE_precedenceAmpersandOperator);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4203;
      this.match(HiveParser.AMPERSAND);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedenceBitwiseOrOperator() {
    let localctx = new PrecedenceBitwiseOrOperatorContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 750, HiveParser.RULE_precedenceBitwiseOrOperator);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4205;
      this.match(HiveParser.BITWISEOR);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedenceRegexpOperator() {
    let localctx = new PrecedenceRegexpOperatorContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 752, HiveParser.RULE_precedenceRegexpOperator);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4207;
      _la = this._input.LA(1);
      if (
        !(
          _la === HiveParser.KW_LIKE ||
          _la === HiveParser.KW_RLIKE ||
          _la === HiveParser.KW_REGEXP
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedenceSimilarOperator() {
    let localctx = new PrecedenceSimilarOperatorContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 754, HiveParser.RULE_precedenceSimilarOperator);
    try {
      this.state = 4214;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_LIKE:
        case HiveParser.KW_RLIKE:
        case HiveParser.KW_REGEXP:
          this.enterOuterAlt(localctx, 1);
          this.state = 4209;
          this.precedenceRegexpOperator();
          break;
        case HiveParser.LESSTHANOREQUALTO:
          this.enterOuterAlt(localctx, 2);
          this.state = 4210;
          this.match(HiveParser.LESSTHANOREQUALTO);
          break;
        case HiveParser.LESSTHAN:
          this.enterOuterAlt(localctx, 3);
          this.state = 4211;
          this.match(HiveParser.LESSTHAN);
          break;
        case HiveParser.GREATERTHANOREQUALTO:
          this.enterOuterAlt(localctx, 4);
          this.state = 4212;
          this.match(HiveParser.GREATERTHANOREQUALTO);
          break;
        case HiveParser.GREATERTHAN:
          this.enterOuterAlt(localctx, 5);
          this.state = 4213;
          this.match(HiveParser.GREATERTHAN);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedenceDistinctOperator() {
    let localctx = new PrecedenceDistinctOperatorContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 756, HiveParser.RULE_precedenceDistinctOperator);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4216;
      this.match(HiveParser.KW_IS);
      this.state = 4217;
      this.match(HiveParser.KW_DISTINCT);
      this.state = 4218;
      this.match(HiveParser.KW_FROM);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedenceEqualOperator() {
    let localctx = new PrecedenceEqualOperatorContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 758, HiveParser.RULE_precedenceEqualOperator);
    try {
      this.state = 4227;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.EQUAL:
          this.enterOuterAlt(localctx, 1);
          this.state = 4220;
          this.match(HiveParser.EQUAL);
          break;
        case HiveParser.EQUAL_NS:
          this.enterOuterAlt(localctx, 2);
          this.state = 4221;
          this.match(HiveParser.EQUAL_NS);
          break;
        case HiveParser.NOTEQUAL:
          this.enterOuterAlt(localctx, 3);
          this.state = 4222;
          this.match(HiveParser.NOTEQUAL);
          break;
        case HiveParser.KW_IS:
          this.enterOuterAlt(localctx, 4);
          this.state = 4223;
          this.match(HiveParser.KW_IS);
          this.state = 4224;
          this.match(HiveParser.KW_NOT);
          this.state = 4225;
          this.match(HiveParser.KW_DISTINCT);
          this.state = 4226;
          this.match(HiveParser.KW_FROM);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedenceNotOperator() {
    let localctx = new PrecedenceNotOperatorContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 760, HiveParser.RULE_precedenceNotOperator);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4229;
      this.match(HiveParser.KW_NOT);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedenceAndOperator() {
    let localctx = new PrecedenceAndOperatorContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 762, HiveParser.RULE_precedenceAndOperator);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4231;
      this.match(HiveParser.KW_AND);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedenceOrOperator() {
    let localctx = new PrecedenceOrOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 764, HiveParser.RULE_precedenceOrOperator);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4233;
      this.match(HiveParser.KW_OR);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  expression(_p) {
    if (_p === undefined) {
      _p = 0;
    }
    const _parentctx = this._ctx;
    const _parentState = this.state;
    let localctx = new ExpressionContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    const _startState = 766;
    this.enterRecursionRule(localctx, 766, HiveParser.RULE_expression, _p);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4260;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 499, this._ctx);
      switch (la_) {
        case 1:
          this.state = 4236;
          this.atomExpression();
          this.state = 4245;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 498, this._ctx);
          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 4243;
              this._errHandler.sync(this);
              switch (this._input.LA(1)) {
                case HiveParser.LSQUARE:
                  this.state = 4237;
                  this.match(HiveParser.LSQUARE);
                  this.state = 4238;
                  this.expression(0);
                  this.state = 4239;
                  this.match(HiveParser.RSQUARE);
                  break;
                case HiveParser.DOT:
                  this.state = 4241;
                  this.match(HiveParser.DOT);
                  this.state = 4242;
                  this.identifier();
                  break;
                default:
                  throw new antlr4.error.NoViableAltException(this);
              }
            }
            this.state = 4247;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 498, this._ctx);
          }

          break;

        case 2:
          this.state = 4248;
          this.precedenceUnaryOperator();
          this.state = 4249;
          this.expression(15);
          break;

        case 3:
          this.state = 4251;
          this.match(HiveParser.KW_EXISTS);
          this.state = 4252;
          this.subQueryExpression();
          break;

        case 4:
          this.state = 4253;
          this.precedenceNotOperator();
          this.state = 4254;
          this.expression(4);
          break;

        case 5:
          this.state = 4256;
          this.match(HiveParser.LPAREN);
          this.state = 4257;
          this.expression(0);
          this.state = 4258;
          this.match(HiveParser.RPAREN);
          break;
      }
      this._ctx.stop = this._input.LT(-1);
      this.state = 4308;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 502, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          if (this._parseListeners !== null) {
            this.triggerExitRuleEvent();
          }
          _prevctx = localctx;
          this.state = 4306;
          this._errHandler.sync(this);
          var la_ = this._interp.adaptivePredict(this._input, 501, this._ctx);
          switch (la_) {
            case 1:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(
                localctx,
                _startState,
                HiveParser.RULE_expression
              );
              this.state = 4262;
              if (!this.precpred(this._ctx, 13)) {
                throw new antlr4.error.FailedPredicateException(
                  this,
                  "this.precpred(this._ctx, 13)"
                );
              }
              this.state = 4263;
              this.precedenceBitwiseXorOperator();
              this.state = 4264;
              this.expression(14);
              break;

            case 2:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(
                localctx,
                _startState,
                HiveParser.RULE_expression
              );
              this.state = 4266;
              if (!this.precpred(this._ctx, 12)) {
                throw new antlr4.error.FailedPredicateException(
                  this,
                  "this.precpred(this._ctx, 12)"
                );
              }
              this.state = 4267;
              this.precedenceStarOperator();
              this.state = 4268;
              this.expression(13);
              break;

            case 3:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(
                localctx,
                _startState,
                HiveParser.RULE_expression
              );
              this.state = 4270;
              if (!this.precpred(this._ctx, 11)) {
                throw new antlr4.error.FailedPredicateException(
                  this,
                  "this.precpred(this._ctx, 11)"
                );
              }
              this.state = 4271;
              this.precedencePlusOperator();
              this.state = 4272;
              this.expression(12);
              break;

            case 4:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(
                localctx,
                _startState,
                HiveParser.RULE_expression
              );
              this.state = 4274;
              if (!this.precpred(this._ctx, 10)) {
                throw new antlr4.error.FailedPredicateException(
                  this,
                  "this.precpred(this._ctx, 10)"
                );
              }
              this.state = 4275;
              this.precedenceConcatenateOperator();
              this.state = 4276;
              this.expression(11);
              break;

            case 5:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(
                localctx,
                _startState,
                HiveParser.RULE_expression
              );
              this.state = 4278;
              if (!this.precpred(this._ctx, 9)) {
                throw new antlr4.error.FailedPredicateException(
                  this,
                  "this.precpred(this._ctx, 9)"
                );
              }
              this.state = 4279;
              this.precedenceAmpersandOperator();
              this.state = 4280;
              this.expression(10);
              break;

            case 6:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(
                localctx,
                _startState,
                HiveParser.RULE_expression
              );
              this.state = 4282;
              if (!this.precpred(this._ctx, 8)) {
                throw new antlr4.error.FailedPredicateException(
                  this,
                  "this.precpred(this._ctx, 8)"
                );
              }
              this.state = 4283;
              this.precedenceBitwiseOrOperator();
              this.state = 4284;
              this.expression(9);
              break;

            case 7:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(
                localctx,
                _startState,
                HiveParser.RULE_expression
              );
              this.state = 4286;
              if (!this.precpred(this._ctx, 5)) {
                throw new antlr4.error.FailedPredicateException(
                  this,
                  "this.precpred(this._ctx, 5)"
                );
              }
              this.state = 4289;
              this._errHandler.sync(this);
              var la_ = this._interp.adaptivePredict(
                this._input,
                500,
                this._ctx
              );
              switch (la_) {
                case 1:
                  this.state = 4287;
                  this.precedenceEqualOperator();
                  break;

                case 2:
                  this.state = 4288;
                  this.precedenceDistinctOperator();
                  break;
              }
              this.state = 4291;
              this.expression(6);
              break;

            case 8:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(
                localctx,
                _startState,
                HiveParser.RULE_expression
              );
              this.state = 4293;
              if (!this.precpred(this._ctx, 3)) {
                throw new antlr4.error.FailedPredicateException(
                  this,
                  "this.precpred(this._ctx, 3)"
                );
              }
              this.state = 4294;
              this.precedenceAndOperator();
              this.state = 4295;
              this.expression(4);
              break;

            case 9:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(
                localctx,
                _startState,
                HiveParser.RULE_expression
              );
              this.state = 4297;
              if (!this.precpred(this._ctx, 2)) {
                throw new antlr4.error.FailedPredicateException(
                  this,
                  "this.precpred(this._ctx, 2)"
                );
              }
              this.state = 4298;
              this.precedenceOrOperator();
              this.state = 4299;
              this.expression(3);
              break;

            case 10:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(
                localctx,
                _startState,
                HiveParser.RULE_expression
              );
              this.state = 4301;
              if (!this.precpred(this._ctx, 14)) {
                throw new antlr4.error.FailedPredicateException(
                  this,
                  "this.precpred(this._ctx, 14)"
                );
              }
              this.state = 4302;
              this.match(HiveParser.KW_IS);
              this.state = 4303;
              this.isCondition();
              break;

            case 11:
              localctx = new ExpressionContext(this, _parentctx, _parentState);
              this.pushNewRecursionContext(
                localctx,
                _startState,
                HiveParser.RULE_expression
              );
              this.state = 4304;
              if (!this.precpred(this._ctx, 7)) {
                throw new antlr4.error.FailedPredicateException(
                  this,
                  "this.precpred(this._ctx, 7)"
                );
              }
              this.state = 4305;
              this.precedenceSimilarExpressionPart();
              break;
          }
        }
        this.state = 4310;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 502, this._ctx);
      }
    } catch (error) {
      if (error instanceof antlr4.error.RecognitionException) {
        localctx.exception = error;
        this._errHandler.reportError(this, error);
        this._errHandler.recover(this, error);
      } else {
        throw error;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
  }

  subQueryExpression() {
    let localctx = new SubQueryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 768, HiveParser.RULE_subQueryExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4311;
      this.match(HiveParser.LPAREN);
      this.state = 4312;
      this.selectStatement();
      this.state = 4313;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedenceSimilarExpressionPart() {
    let localctx = new PrecedenceSimilarExpressionPartContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      770,
      HiveParser.RULE_precedenceSimilarExpressionPart
    );
    try {
      this.state = 4321;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 503, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 4315;
          this.precedenceSimilarOperator();
          this.state = 4316;
          this.expression(0);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 4318;
          this.precedenceSimilarExpressionAtom();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 4319;
          this.match(HiveParser.KW_NOT);
          this.state = 4320;
          this.precedenceSimilarExpressionPartNot();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedenceSimilarExpressionAtom() {
    let localctx = new PrecedenceSimilarExpressionAtomContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      772,
      HiveParser.RULE_precedenceSimilarExpressionAtom
    );
    try {
      this.state = 4336;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 504, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 4323;
          this.match(HiveParser.KW_IN);
          this.state = 4324;
          this.precedenceSimilarExpressionIn();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 4325;
          this.match(HiveParser.KW_BETWEEN);
          this.state = 4326;
          this.expression(0);
          this.state = 4327;
          this.match(HiveParser.KW_AND);
          this.state = 4328;
          this.expression(0);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 4330;
          this.match(HiveParser.KW_LIKE);
          this.state = 4331;
          this.match(HiveParser.KW_ANY);
          this.state = 4332;
          this.expressionsInParenthesis();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 4333;
          this.match(HiveParser.KW_LIKE);
          this.state = 4334;
          this.match(HiveParser.KW_ALL);
          this.state = 4335;
          this.expressionsInParenthesis();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedenceSimilarExpressionIn() {
    let localctx = new PrecedenceSimilarExpressionInContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      774,
      HiveParser.RULE_precedenceSimilarExpressionIn
    );
    try {
      this.state = 4340;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 505, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 4338;
          this.subQueryExpression();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 4339;
          this.expressionsInParenthesis();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  precedenceSimilarExpressionPartNot() {
    let localctx = new PrecedenceSimilarExpressionPartNotContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      776,
      HiveParser.RULE_precedenceSimilarExpressionPartNot
    );
    try {
      this.state = 4346;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 506, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 4342;
          this.precedenceRegexpOperator();
          this.state = 4343;
          this.expression(0);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 4345;
          this.precedenceSimilarExpressionAtom();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  booleanValue() {
    let localctx = new BooleanValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 778, HiveParser.RULE_booleanValue);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4348;
      _la = this._input.LA(1);
      if (!(_la === HiveParser.KW_TRUE || _la === HiveParser.KW_FALSE)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  booleanValueTok() {
    let localctx = new BooleanValueTokContext(this, this._ctx, this.state);
    this.enterRule(localctx, 780, HiveParser.RULE_booleanValueTok);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4350;
      _la = this._input.LA(1);
      if (!(_la === HiveParser.KW_TRUE || _la === HiveParser.KW_FALSE)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  tableOrPartition() {
    let localctx = new TableOrPartitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 782, HiveParser.RULE_tableOrPartition);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4352;
      this.tableName();
      this.state = 4354;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_PARTITION) {
        this.state = 4353;
        this.partitionSpec();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  partitionSpec() {
    let localctx = new PartitionSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 784, HiveParser.RULE_partitionSpec);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4356;
      this.match(HiveParser.KW_PARTITION);
      this.state = 4357;
      this.match(HiveParser.LPAREN);
      this.state = 4358;
      this.partitionVal();
      this.state = 4363;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 4359;
        this.match(HiveParser.COMMA);
        this.state = 4360;
        this.partitionVal();
        this.state = 4365;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 4366;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  partitionVal() {
    let localctx = new PartitionValContext(this, this._ctx, this.state);
    this.enterRule(localctx, 786, HiveParser.RULE_partitionVal);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4368;
      this.identifier();
      this.state = 4371;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.EQUAL) {
        this.state = 4369;
        this.match(HiveParser.EQUAL);
        this.state = 4370;
        this.constant();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropPartitionSpec() {
    let localctx = new DropPartitionSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 788, HiveParser.RULE_dropPartitionSpec);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4373;
      this.match(HiveParser.KW_PARTITION);
      this.state = 4374;
      this.match(HiveParser.LPAREN);
      this.state = 4375;
      this.dropPartitionVal();
      this.state = 4380;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 4376;
        this.match(HiveParser.COMMA);
        this.state = 4377;
        this.dropPartitionVal();
        this.state = 4382;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 4383;
      this.match(HiveParser.RPAREN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropPartitionVal() {
    let localctx = new DropPartitionValContext(this, this._ctx, this.state);
    this.enterRule(localctx, 790, HiveParser.RULE_dropPartitionVal);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4385;
      this.identifier();
      this.state = 4386;
      this.dropPartitionOperator();
      this.state = 4387;
      this.constant();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropPartitionOperator() {
    let localctx = new DropPartitionOperatorContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 792, HiveParser.RULE_dropPartitionOperator);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4389;
      _la = this._input.LA(1);
      if (
        !(
          ((_la - 358) & ~0x1f) == 0 &&
          ((1 << (_la - 358)) &
            ((1 << (HiveParser.EQUAL - 358)) |
              (1 << (HiveParser.NOTEQUAL - 358)) |
              (1 << (HiveParser.LESSTHANOREQUALTO - 358)) |
              (1 << (HiveParser.LESSTHAN - 358)) |
              (1 << (HiveParser.GREATERTHANOREQUALTO - 358)) |
              (1 << (HiveParser.GREATERTHAN - 358)))) !==
            0
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  sysFuncNames() {
    let localctx = new SysFuncNamesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 794, HiveParser.RULE_sysFuncNames);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4391;
      _la = this._input.LA(1);
      if (
        !(
          ((_la & ~0x1f) == 0 &&
            ((1 << _la) &
              ((1 << HiveParser.KW_AND) |
                (1 << HiveParser.KW_OR) |
                (1 << HiveParser.KW_NOT) |
                (1 << HiveParser.KW_LIKE) |
                (1 << HiveParser.KW_IF))) !==
              0) ||
          (((_la - 77) & ~0x1f) == 0 &&
            ((1 << (_la - 77)) &
              ((1 << (HiveParser.KW_BOOLEAN - 77)) |
                (1 << (HiveParser.KW_TINYINT - 77)) |
                (1 << (HiveParser.KW_SMALLINT - 77)) |
                (1 << (HiveParser.KW_INT - 77)) |
                (1 << (HiveParser.KW_BIGINT - 77)) |
                (1 << (HiveParser.KW_FLOAT - 77)) |
                (1 << (HiveParser.KW_DOUBLE - 77)) |
                (1 << (HiveParser.KW_STRING - 77)) |
                (1 << (HiveParser.KW_ARRAY - 77)) |
                (1 << (HiveParser.KW_STRUCT - 77)) |
                (1 << (HiveParser.KW_MAP - 77)) |
                (1 << (HiveParser.KW_UNIONTYPE - 77)))) !==
              0) ||
          (((_la - 136) & ~0x1f) == 0 &&
            ((1 << (_la - 136)) &
              ((1 << (HiveParser.KW_RLIKE - 136)) |
                (1 << (HiveParser.KW_REGEXP - 136)) |
                (1 << (HiveParser.KW_CASE - 136)) |
                (1 << (HiveParser.KW_WHEN - 136)))) !==
              0) ||
          (((_la - 180) & ~0x1f) == 0 &&
            ((1 << (_la - 180)) &
              ((1 << (HiveParser.KW_IN - 180)) |
                (1 << (HiveParser.KW_BETWEEN - 180)) |
                (1 << (HiveParser.KW_BINARY - 180)))) !==
              0) ||
          _la === HiveParser.KW_FLOOR ||
          (((_la - 358) & ~0x1f) == 0 &&
            ((1 << (_la - 358)) &
              ((1 << (HiveParser.EQUAL - 358)) |
                (1 << (HiveParser.EQUAL_NS - 358)) |
                (1 << (HiveParser.NOTEQUAL - 358)) |
                (1 << (HiveParser.LESSTHANOREQUALTO - 358)) |
                (1 << (HiveParser.LESSTHAN - 358)) |
                (1 << (HiveParser.GREATERTHANOREQUALTO - 358)) |
                (1 << (HiveParser.GREATERTHAN - 358)) |
                (1 << (HiveParser.DIVIDE - 358)) |
                (1 << (HiveParser.PLUS - 358)) |
                (1 << (HiveParser.MINUS - 358)) |
                (1 << (HiveParser.STAR - 358)) |
                (1 << (HiveParser.MOD - 358)) |
                (1 << (HiveParser.DIV - 358)) |
                (1 << (HiveParser.AMPERSAND - 358)) |
                (1 << (HiveParser.TILDE - 358)) |
                (1 << (HiveParser.BITWISEOR - 358)) |
                (1 << (HiveParser.BITWISEXOR - 358)))) !==
              0)
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  descFuncNames() {
    let localctx = new DescFuncNamesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 796, HiveParser.RULE_descFuncNames);
    try {
      this.state = 4396;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 511, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 4393;
          this.sysFuncNames();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 4394;
          this.match(HiveParser.StringLiteral);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 4395;
          this.functionIdentifier();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  identifier() {
    let localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 798, HiveParser.RULE_identifier);
    try {
      this.state = 4406;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 4398;
          this.match(HiveParser.Identifier);
          break;
        case HiveParser.LCURLY:
          this.enterOuterAlt(localctx, 2);
          this.state = 4399;
          this.match(HiveParser.LCURLY);
          this.state = 4400;
          this.match(HiveParser.LCURLY);

          this.state = 4401;
          this.match(HiveParser.Identifier);
          this.state = 4402;
          this.match(HiveParser.RCURLY);
          this.state = 4403;
          this.match(HiveParser.RCURLY);
          break;
        case HiveParser.KW_ASC:
        case HiveParser.KW_DESC:
        case HiveParser.KW_NULLS:
        case HiveParser.KW_LAST:
        case HiveParser.KW_OVERWRITE:
        case HiveParser.KW_PARTITIONS:
        case HiveParser.KW_TABLES:
        case HiveParser.KW_COLUMNS:
        case HiveParser.KW_INDEX:
        case HiveParser.KW_INDEXES:
        case HiveParser.KW_REBUILD:
        case HiveParser.KW_FUNCTIONS:
        case HiveParser.KW_SHOW:
        case HiveParser.KW_MSCK:
        case HiveParser.KW_REPAIR:
        case HiveParser.KW_DIRECTORY:
        case HiveParser.KW_CLUSTER:
        case HiveParser.KW_DISTRIBUTE:
        case HiveParser.KW_SORT:
        case HiveParser.KW_LOAD:
        case HiveParser.KW_EXPORT:
        case HiveParser.KW_REPLICATION:
        case HiveParser.KW_METADATA:
        case HiveParser.KW_DATA:
        case HiveParser.KW_INPATH:
        case HiveParser.KW_CHANGE:
        case HiveParser.KW_FIRST:
        case HiveParser.KW_AFTER:
        case HiveParser.KW_RENAME:
        case HiveParser.KW_COMMENT:
        case HiveParser.KW_TINYINT:
        case HiveParser.KW_DATETIME:
        case HiveParser.KW_ZONE:
        case HiveParser.KW_STRING:
        case HiveParser.KW_STRUCT:
        case HiveParser.KW_UNIONTYPE:
        case HiveParser.KW_PARTITIONED:
        case HiveParser.KW_CLUSTERED:
        case HiveParser.KW_SORTED:
        case HiveParser.KW_BUCKETS:
        case HiveParser.KW_FORMAT:
        case HiveParser.KW_DELIMITED:
        case HiveParser.KW_FIELDS:
        case HiveParser.KW_TERMINATED:
        case HiveParser.KW_ESCAPED:
        case HiveParser.KW_COLLECTION:
        case HiveParser.KW_ITEMS:
        case HiveParser.KW_KEYS:
        case HiveParser.KW_KEY_TYPE:
        case HiveParser.KW_KILL:
        case HiveParser.KW_LINES:
        case HiveParser.KW_STORED:
        case HiveParser.KW_FILEFORMAT:
        case HiveParser.KW_INPUTFORMAT:
        case HiveParser.KW_OUTPUTFORMAT:
        case HiveParser.KW_INPUTDRIVER:
        case HiveParser.KW_OUTPUTDRIVER:
        case HiveParser.KW_ENABLE:
        case HiveParser.KW_DISABLE:
        case HiveParser.KW_LOCATION:
        case HiveParser.KW_BUCKET:
        case HiveParser.KW_ADD:
        case HiveParser.KW_REPLACE:
        case HiveParser.KW_TEMPORARY:
        case HiveParser.KW_FILE:
        case HiveParser.KW_JAR:
        case HiveParser.KW_EXPLAIN:
        case HiveParser.KW_FORMATTED:
        case HiveParser.KW_DEPENDENCY:
        case HiveParser.KW_LOGICAL:
        case HiveParser.KW_SERDE:
        case HiveParser.KW_DEFERRED:
        case HiveParser.KW_SERDEPROPERTIES:
        case HiveParser.KW_DBPROPERTIES:
        case HiveParser.KW_LIMIT:
        case HiveParser.KW_OFFSET:
        case HiveParser.KW_UNSET:
        case HiveParser.KW_TBLPROPERTIES:
        case HiveParser.KW_IDXPROPERTIES:
        case HiveParser.KW_VALUE_TYPE:
        case HiveParser.KW_ELEM_TYPE:
        case HiveParser.KW_DEFINED:
        case HiveParser.KW_MAPJOIN:
        case HiveParser.KW_STREAMTABLE:
        case HiveParser.KW_CLUSTERSTATUS:
        case HiveParser.KW_UTC:
        case HiveParser.KW_UTCTIMESTAMP:
        case HiveParser.KW_LONG:
        case HiveParser.KW_PLUS:
        case HiveParser.KW_VIEW:
        case HiveParser.KW_VIEWS:
        case HiveParser.KW_DATABASES:
        case HiveParser.KW_MATERIALIZED:
        case HiveParser.KW_SCHEMA:
        case HiveParser.KW_SCHEMAS:
        case HiveParser.KW_SSL:
        case HiveParser.KW_UNDO:
        case HiveParser.KW_LOCK:
        case HiveParser.KW_LOCKS:
        case HiveParser.KW_UNLOCK:
        case HiveParser.KW_SHARED:
        case HiveParser.KW_EXCLUSIVE:
        case HiveParser.KW_UNSIGNED:
        case HiveParser.KW_WHILE:
        case HiveParser.KW_READ:
        case HiveParser.KW_PURGE:
        case HiveParser.KW_ANALYZE:
        case HiveParser.KW_BEFORE:
        case HiveParser.KW_CONTINUE:
        case HiveParser.KW_RECORDREADER:
        case HiveParser.KW_RECORDWRITER:
        case HiveParser.KW_SEMI:
        case HiveParser.KW_TOUCH:
        case HiveParser.KW_ARCHIVE:
        case HiveParser.KW_UNARCHIVE:
        case HiveParser.KW_COMPUTE:
        case HiveParser.KW_STATISTICS:
        case HiveParser.KW_USE:
        case HiveParser.KW_OPTION:
        case HiveParser.KW_CONCATENATE:
        case HiveParser.KW_SHOW_DATABASE:
        case HiveParser.KW_RESTRICT:
        case HiveParser.KW_CASCADE:
        case HiveParser.KW_SKEWED:
        case HiveParser.KW_DIRECTORIES:
        case HiveParser.KW_SETS:
        case HiveParser.KW_NOSCAN:
        case HiveParser.KW_ROLE:
        case HiveParser.KW_ROLES:
        case HiveParser.KW_URI:
        case HiveParser.KW_SERVER:
        case HiveParser.KW_ADMIN:
        case HiveParser.KW_OWNER:
        case HiveParser.KW_PRINCIPALS:
        case HiveParser.KW_COMPACT:
        case HiveParser.KW_COMPACTIONS:
        case HiveParser.KW_TRANSACTIONS:
        case HiveParser.KW_REWRITE:
        case HiveParser.KW_REOPTIMIZATION:
        case HiveParser.KW_RELOAD:
        case HiveParser.KW_YEAR:
        case HiveParser.KW_QUERY:
        case HiveParser.KW_QUARTER:
        case HiveParser.KW_MONTH:
        case HiveParser.KW_WEEK:
        case HiveParser.KW_DAY:
        case HiveParser.KW_DOW:
        case HiveParser.KW_HOUR:
        case HiveParser.KW_MINUTE:
        case HiveParser.KW_SECOND:
        case HiveParser.KW_TRANSACTION:
        case HiveParser.KW_WORK:
        case HiveParser.KW_WRITE:
        case HiveParser.KW_ISOLATION:
        case HiveParser.KW_LEVEL:
        case HiveParser.KW_SNAPSHOT:
        case HiveParser.KW_AUTOCOMMIT:
        case HiveParser.KW_CACHE:
        case HiveParser.KW_ENFORCED:
        case HiveParser.KW_VALIDATE:
        case HiveParser.KW_NOVALIDATE:
        case HiveParser.KW_RELY:
        case HiveParser.KW_NORELY:
        case HiveParser.KW_KEY:
        case HiveParser.KW_ABORT:
        case HiveParser.KW_MATCHED:
        case HiveParser.KW_REPL:
        case HiveParser.KW_DUMP:
        case HiveParser.KW_STATUS:
        case HiveParser.KW_VECTORIZATION:
        case HiveParser.KW_SUMMARY:
        case HiveParser.KW_OPERATOR:
        case HiveParser.KW_EXPRESSION:
        case HiveParser.KW_DETAIL:
        case HiveParser.KW_WAIT:
        case HiveParser.KW_RESOURCE:
        case HiveParser.KW_PLAN:
        case HiveParser.KW_QUERY_PARALLELISM:
        case HiveParser.KW_PLANS:
        case HiveParser.KW_ACTIVATE:
        case HiveParser.KW_DEFAULT:
        case HiveParser.KW_CHECK:
        case HiveParser.KW_POOL:
        case HiveParser.KW_MOVE:
        case HiveParser.KW_DO:
        case HiveParser.KW_ALLOC_FRACTION:
        case HiveParser.KW_SCHEDULING_POLICY:
        case HiveParser.KW_PATH:
        case HiveParser.KW_MAPPING:
        case HiveParser.KW_WORKLOAD:
        case HiveParser.KW_MANAGEMENT:
        case HiveParser.KW_ACTIVE:
        case HiveParser.KW_UNMANAGED:
        case HiveParser.KW_DELTA:
        case HiveParser.KW_CSV:
        case HiveParser.KW_JSON:
        case HiveParser.KW_BLOOMFILTER:
          this.enterOuterAlt(localctx, 3);
          this.state = 4404;
          this.nonReserved();
          break;
        case HiveParser.KW_IF:
        case HiveParser.KW_BOOLEAN:
        case HiveParser.KW_SMALLINT:
        case HiveParser.KW_INT:
        case HiveParser.KW_BIGINT:
        case HiveParser.KW_FLOAT:
        case HiveParser.KW_DOUBLE:
        case HiveParser.KW_DATE:
        case HiveParser.KW_TIMESTAMP:
        case HiveParser.KW_TIME:
        case HiveParser.KW_ARRAY:
        case HiveParser.KW_MAP:
        case HiveParser.KW_BINARY:
        case HiveParser.KW_CURRENT_DATE:
        case HiveParser.KW_CURRENT_TIMESTAMP:
        case HiveParser.KW_GROUPING:
          this.enterOuterAlt(localctx, 4);
          this.state = 4405;
          this.databricksAllowedReservedNames();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  functionIdentifier() {
    let localctx = new FunctionIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 800, HiveParser.RULE_functionIdentifier);
    try {
      this.state = 4413;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 513, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 4408;
          this.identifier();
          this.state = 4409;
          this.match(HiveParser.DOT);
          this.state = 4410;
          this.identifier();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 4412;
          this.identifier();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  principalIdentifier() {
    let localctx = new PrincipalIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 802, HiveParser.RULE_principalIdentifier);
    try {
      this.state = 4417;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_IF:
        case HiveParser.KW_ASC:
        case HiveParser.KW_DESC:
        case HiveParser.KW_NULLS:
        case HiveParser.KW_LAST:
        case HiveParser.KW_OVERWRITE:
        case HiveParser.KW_PARTITIONS:
        case HiveParser.KW_TABLES:
        case HiveParser.KW_COLUMNS:
        case HiveParser.KW_INDEX:
        case HiveParser.KW_INDEXES:
        case HiveParser.KW_REBUILD:
        case HiveParser.KW_FUNCTIONS:
        case HiveParser.KW_SHOW:
        case HiveParser.KW_MSCK:
        case HiveParser.KW_REPAIR:
        case HiveParser.KW_DIRECTORY:
        case HiveParser.KW_CLUSTER:
        case HiveParser.KW_DISTRIBUTE:
        case HiveParser.KW_SORT:
        case HiveParser.KW_LOAD:
        case HiveParser.KW_EXPORT:
        case HiveParser.KW_REPLICATION:
        case HiveParser.KW_METADATA:
        case HiveParser.KW_DATA:
        case HiveParser.KW_INPATH:
        case HiveParser.KW_CHANGE:
        case HiveParser.KW_FIRST:
        case HiveParser.KW_AFTER:
        case HiveParser.KW_RENAME:
        case HiveParser.KW_COMMENT:
        case HiveParser.KW_BOOLEAN:
        case HiveParser.KW_TINYINT:
        case HiveParser.KW_SMALLINT:
        case HiveParser.KW_INT:
        case HiveParser.KW_BIGINT:
        case HiveParser.KW_FLOAT:
        case HiveParser.KW_DOUBLE:
        case HiveParser.KW_DATE:
        case HiveParser.KW_DATETIME:
        case HiveParser.KW_TIMESTAMP:
        case HiveParser.KW_TIME:
        case HiveParser.KW_ZONE:
        case HiveParser.KW_STRING:
        case HiveParser.KW_ARRAY:
        case HiveParser.KW_STRUCT:
        case HiveParser.KW_MAP:
        case HiveParser.KW_UNIONTYPE:
        case HiveParser.KW_PARTITIONED:
        case HiveParser.KW_CLUSTERED:
        case HiveParser.KW_SORTED:
        case HiveParser.KW_BUCKETS:
        case HiveParser.KW_FORMAT:
        case HiveParser.KW_DELIMITED:
        case HiveParser.KW_FIELDS:
        case HiveParser.KW_TERMINATED:
        case HiveParser.KW_ESCAPED:
        case HiveParser.KW_COLLECTION:
        case HiveParser.KW_ITEMS:
        case HiveParser.KW_KEYS:
        case HiveParser.KW_KEY_TYPE:
        case HiveParser.KW_KILL:
        case HiveParser.KW_LINES:
        case HiveParser.KW_STORED:
        case HiveParser.KW_FILEFORMAT:
        case HiveParser.KW_INPUTFORMAT:
        case HiveParser.KW_OUTPUTFORMAT:
        case HiveParser.KW_INPUTDRIVER:
        case HiveParser.KW_OUTPUTDRIVER:
        case HiveParser.KW_ENABLE:
        case HiveParser.KW_DISABLE:
        case HiveParser.KW_LOCATION:
        case HiveParser.KW_BUCKET:
        case HiveParser.KW_ADD:
        case HiveParser.KW_REPLACE:
        case HiveParser.KW_TEMPORARY:
        case HiveParser.KW_FILE:
        case HiveParser.KW_JAR:
        case HiveParser.KW_EXPLAIN:
        case HiveParser.KW_FORMATTED:
        case HiveParser.KW_DEPENDENCY:
        case HiveParser.KW_LOGICAL:
        case HiveParser.KW_SERDE:
        case HiveParser.KW_DEFERRED:
        case HiveParser.KW_SERDEPROPERTIES:
        case HiveParser.KW_DBPROPERTIES:
        case HiveParser.KW_LIMIT:
        case HiveParser.KW_OFFSET:
        case HiveParser.KW_UNSET:
        case HiveParser.KW_TBLPROPERTIES:
        case HiveParser.KW_IDXPROPERTIES:
        case HiveParser.KW_VALUE_TYPE:
        case HiveParser.KW_ELEM_TYPE:
        case HiveParser.KW_DEFINED:
        case HiveParser.KW_MAPJOIN:
        case HiveParser.KW_STREAMTABLE:
        case HiveParser.KW_CLUSTERSTATUS:
        case HiveParser.KW_UTC:
        case HiveParser.KW_UTCTIMESTAMP:
        case HiveParser.KW_LONG:
        case HiveParser.KW_PLUS:
        case HiveParser.KW_VIEW:
        case HiveParser.KW_VIEWS:
        case HiveParser.KW_DATABASES:
        case HiveParser.KW_MATERIALIZED:
        case HiveParser.KW_SCHEMA:
        case HiveParser.KW_SCHEMAS:
        case HiveParser.KW_SSL:
        case HiveParser.KW_UNDO:
        case HiveParser.KW_LOCK:
        case HiveParser.KW_LOCKS:
        case HiveParser.KW_UNLOCK:
        case HiveParser.KW_SHARED:
        case HiveParser.KW_EXCLUSIVE:
        case HiveParser.KW_UNSIGNED:
        case HiveParser.KW_WHILE:
        case HiveParser.KW_READ:
        case HiveParser.KW_PURGE:
        case HiveParser.KW_ANALYZE:
        case HiveParser.KW_BEFORE:
        case HiveParser.KW_BINARY:
        case HiveParser.KW_CONTINUE:
        case HiveParser.KW_RECORDREADER:
        case HiveParser.KW_RECORDWRITER:
        case HiveParser.KW_SEMI:
        case HiveParser.KW_TOUCH:
        case HiveParser.KW_ARCHIVE:
        case HiveParser.KW_UNARCHIVE:
        case HiveParser.KW_COMPUTE:
        case HiveParser.KW_STATISTICS:
        case HiveParser.KW_USE:
        case HiveParser.KW_OPTION:
        case HiveParser.KW_CONCATENATE:
        case HiveParser.KW_SHOW_DATABASE:
        case HiveParser.KW_RESTRICT:
        case HiveParser.KW_CASCADE:
        case HiveParser.KW_SKEWED:
        case HiveParser.KW_DIRECTORIES:
        case HiveParser.KW_CURRENT_DATE:
        case HiveParser.KW_CURRENT_TIMESTAMP:
        case HiveParser.KW_GROUPING:
        case HiveParser.KW_SETS:
        case HiveParser.KW_NOSCAN:
        case HiveParser.KW_ROLE:
        case HiveParser.KW_ROLES:
        case HiveParser.KW_URI:
        case HiveParser.KW_SERVER:
        case HiveParser.KW_ADMIN:
        case HiveParser.KW_OWNER:
        case HiveParser.KW_PRINCIPALS:
        case HiveParser.KW_COMPACT:
        case HiveParser.KW_COMPACTIONS:
        case HiveParser.KW_TRANSACTIONS:
        case HiveParser.KW_REWRITE:
        case HiveParser.KW_REOPTIMIZATION:
        case HiveParser.KW_RELOAD:
        case HiveParser.KW_YEAR:
        case HiveParser.KW_QUERY:
        case HiveParser.KW_QUARTER:
        case HiveParser.KW_MONTH:
        case HiveParser.KW_WEEK:
        case HiveParser.KW_DAY:
        case HiveParser.KW_DOW:
        case HiveParser.KW_HOUR:
        case HiveParser.KW_MINUTE:
        case HiveParser.KW_SECOND:
        case HiveParser.KW_TRANSACTION:
        case HiveParser.KW_WORK:
        case HiveParser.KW_WRITE:
        case HiveParser.KW_ISOLATION:
        case HiveParser.KW_LEVEL:
        case HiveParser.KW_SNAPSHOT:
        case HiveParser.KW_AUTOCOMMIT:
        case HiveParser.KW_CACHE:
        case HiveParser.KW_ENFORCED:
        case HiveParser.KW_VALIDATE:
        case HiveParser.KW_NOVALIDATE:
        case HiveParser.KW_RELY:
        case HiveParser.KW_NORELY:
        case HiveParser.KW_KEY:
        case HiveParser.KW_ABORT:
        case HiveParser.KW_MATCHED:
        case HiveParser.KW_REPL:
        case HiveParser.KW_DUMP:
        case HiveParser.KW_STATUS:
        case HiveParser.KW_VECTORIZATION:
        case HiveParser.KW_SUMMARY:
        case HiveParser.KW_OPERATOR:
        case HiveParser.KW_EXPRESSION:
        case HiveParser.KW_DETAIL:
        case HiveParser.KW_WAIT:
        case HiveParser.KW_RESOURCE:
        case HiveParser.KW_PLAN:
        case HiveParser.KW_QUERY_PARALLELISM:
        case HiveParser.KW_PLANS:
        case HiveParser.KW_ACTIVATE:
        case HiveParser.KW_DEFAULT:
        case HiveParser.KW_CHECK:
        case HiveParser.KW_POOL:
        case HiveParser.KW_MOVE:
        case HiveParser.KW_DO:
        case HiveParser.KW_ALLOC_FRACTION:
        case HiveParser.KW_SCHEDULING_POLICY:
        case HiveParser.KW_PATH:
        case HiveParser.KW_MAPPING:
        case HiveParser.KW_WORKLOAD:
        case HiveParser.KW_MANAGEMENT:
        case HiveParser.KW_ACTIVE:
        case HiveParser.KW_UNMANAGED:
        case HiveParser.KW_DELTA:
        case HiveParser.KW_CSV:
        case HiveParser.KW_JSON:
        case HiveParser.KW_BLOOMFILTER:
        case HiveParser.LCURLY:
        case HiveParser.Identifier:
          this.enterOuterAlt(localctx, 1);
          this.state = 4415;
          this.identifier();
          break;
        case HiveParser.QuotedIdentifier:
          this.enterOuterAlt(localctx, 2);
          this.state = 4416;
          this.match(HiveParser.QuotedIdentifier);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  nonReserved() {
    let localctx = new NonReservedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 804, HiveParser.RULE_nonReserved);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4419;
      _la = this._input.LA(1);
      if (
        !(
          ((_la & ~0x1f) == 0 &&
            ((1 << _la) &
              ((1 << HiveParser.KW_ASC) |
                (1 << HiveParser.KW_DESC) |
                (1 << HiveParser.KW_NULLS) |
                (1 << HiveParser.KW_LAST) |
                (1 << HiveParser.KW_OVERWRITE))) !==
              0) ||
          (((_la - 36) & ~0x1f) == 0 &&
            ((1 << (_la - 36)) &
              ((1 << (HiveParser.KW_PARTITIONS - 36)) |
                (1 << (HiveParser.KW_TABLES - 36)) |
                (1 << (HiveParser.KW_COLUMNS - 36)) |
                (1 << (HiveParser.KW_INDEX - 36)) |
                (1 << (HiveParser.KW_INDEXES - 36)) |
                (1 << (HiveParser.KW_REBUILD - 36)) |
                (1 << (HiveParser.KW_FUNCTIONS - 36)) |
                (1 << (HiveParser.KW_SHOW - 36)) |
                (1 << (HiveParser.KW_MSCK - 36)) |
                (1 << (HiveParser.KW_REPAIR - 36)) |
                (1 << (HiveParser.KW_DIRECTORY - 36)) |
                (1 << (HiveParser.KW_CLUSTER - 36)) |
                (1 << (HiveParser.KW_DISTRIBUTE - 36)) |
                (1 << (HiveParser.KW_SORT - 36)) |
                (1 << (HiveParser.KW_LOAD - 36)) |
                (1 << (HiveParser.KW_EXPORT - 36)) |
                (1 << (HiveParser.KW_REPLICATION - 36)) |
                (1 << (HiveParser.KW_METADATA - 36)) |
                (1 << (HiveParser.KW_DATA - 36)) |
                (1 << (HiveParser.KW_INPATH - 36)))) !==
              0) ||
          (((_la - 68) & ~0x1f) == 0 &&
            ((1 << (_la - 68)) &
              ((1 << (HiveParser.KW_CHANGE - 68)) |
                (1 << (HiveParser.KW_FIRST - 68)) |
                (1 << (HiveParser.KW_AFTER - 68)) |
                (1 << (HiveParser.KW_RENAME - 68)) |
                (1 << (HiveParser.KW_COMMENT - 68)) |
                (1 << (HiveParser.KW_TINYINT - 68)) |
                (1 << (HiveParser.KW_DATETIME - 68)) |
                (1 << (HiveParser.KW_ZONE - 68)) |
                (1 << (HiveParser.KW_STRING - 68)) |
                (1 << (HiveParser.KW_STRUCT - 68)) |
                (1 << (HiveParser.KW_UNIONTYPE - 68)))) !==
              0) ||
          (((_la - 101) & ~0x1f) == 0 &&
            ((1 << (_la - 101)) &
              ((1 << (HiveParser.KW_PARTITIONED - 101)) |
                (1 << (HiveParser.KW_CLUSTERED - 101)) |
                (1 << (HiveParser.KW_SORTED - 101)) |
                (1 << (HiveParser.KW_BUCKETS - 101)) |
                (1 << (HiveParser.KW_FORMAT - 101)) |
                (1 << (HiveParser.KW_DELIMITED - 101)) |
                (1 << (HiveParser.KW_FIELDS - 101)) |
                (1 << (HiveParser.KW_TERMINATED - 101)) |
                (1 << (HiveParser.KW_ESCAPED - 101)) |
                (1 << (HiveParser.KW_COLLECTION - 101)) |
                (1 << (HiveParser.KW_ITEMS - 101)) |
                (1 << (HiveParser.KW_KEYS - 101)) |
                (1 << (HiveParser.KW_KEY_TYPE - 101)) |
                (1 << (HiveParser.KW_KILL - 101)) |
                (1 << (HiveParser.KW_LINES - 101)) |
                (1 << (HiveParser.KW_STORED - 101)) |
                (1 << (HiveParser.KW_FILEFORMAT - 101)) |
                (1 << (HiveParser.KW_INPUTFORMAT - 101)) |
                (1 << (HiveParser.KW_OUTPUTFORMAT - 101)) |
                (1 << (HiveParser.KW_INPUTDRIVER - 101)) |
                (1 << (HiveParser.KW_OUTPUTDRIVER - 101)) |
                (1 << (HiveParser.KW_ENABLE - 101)) |
                (1 << (HiveParser.KW_DISABLE - 101)) |
                (1 << (HiveParser.KW_LOCATION - 101)) |
                (1 << (HiveParser.KW_BUCKET - 101)))) !==
              0) ||
          (((_la - 134) & ~0x1f) == 0 &&
            ((1 << (_la - 134)) &
              ((1 << (HiveParser.KW_ADD - 134)) |
                (1 << (HiveParser.KW_REPLACE - 134)) |
                (1 << (HiveParser.KW_TEMPORARY - 134)) |
                (1 << (HiveParser.KW_FILE - 134)) |
                (1 << (HiveParser.KW_JAR - 134)) |
                (1 << (HiveParser.KW_EXPLAIN - 134)) |
                (1 << (HiveParser.KW_FORMATTED - 134)) |
                (1 << (HiveParser.KW_DEPENDENCY - 134)) |
                (1 << (HiveParser.KW_LOGICAL - 134)) |
                (1 << (HiveParser.KW_SERDE - 134)) |
                (1 << (HiveParser.KW_DEFERRED - 134)) |
                (1 << (HiveParser.KW_SERDEPROPERTIES - 134)) |
                (1 << (HiveParser.KW_DBPROPERTIES - 134)) |
                (1 << (HiveParser.KW_LIMIT - 134)) |
                (1 << (HiveParser.KW_OFFSET - 134)) |
                (1 << (HiveParser.KW_UNSET - 134)) |
                (1 << (HiveParser.KW_TBLPROPERTIES - 134)) |
                (1 << (HiveParser.KW_IDXPROPERTIES - 134)) |
                (1 << (HiveParser.KW_VALUE_TYPE - 134)) |
                (1 << (HiveParser.KW_ELEM_TYPE - 134)) |
                (1 << (HiveParser.KW_DEFINED - 134)))) !==
              0) ||
          (((_la - 167) & ~0x1f) == 0 &&
            ((1 << (_la - 167)) &
              ((1 << (HiveParser.KW_MAPJOIN - 167)) |
                (1 << (HiveParser.KW_STREAMTABLE - 167)) |
                (1 << (HiveParser.KW_CLUSTERSTATUS - 167)) |
                (1 << (HiveParser.KW_UTC - 167)) |
                (1 << (HiveParser.KW_UTCTIMESTAMP - 167)) |
                (1 << (HiveParser.KW_LONG - 167)) |
                (1 << (HiveParser.KW_PLUS - 167)) |
                (1 << (HiveParser.KW_VIEW - 167)) |
                (1 << (HiveParser.KW_VIEWS - 167)) |
                (1 << (HiveParser.KW_DATABASES - 167)) |
                (1 << (HiveParser.KW_MATERIALIZED - 167)) |
                (1 << (HiveParser.KW_SCHEMA - 167)) |
                (1 << (HiveParser.KW_SCHEMAS - 167)) |
                (1 << (HiveParser.KW_SSL - 167)) |
                (1 << (HiveParser.KW_UNDO - 167)) |
                (1 << (HiveParser.KW_LOCK - 167)) |
                (1 << (HiveParser.KW_LOCKS - 167)) |
                (1 << (HiveParser.KW_UNLOCK - 167)) |
                (1 << (HiveParser.KW_SHARED - 167)) |
                (1 << (HiveParser.KW_EXCLUSIVE - 167)) |
                (1 << (HiveParser.KW_UNSIGNED - 167)) |
                (1 << (HiveParser.KW_WHILE - 167)) |
                (1 << (HiveParser.KW_READ - 167)))) !==
              0) ||
          (((_la - 200) & ~0x1f) == 0 &&
            ((1 << (_la - 200)) &
              ((1 << (HiveParser.KW_PURGE - 200)) |
                (1 << (HiveParser.KW_ANALYZE - 200)) |
                (1 << (HiveParser.KW_BEFORE - 200)) |
                (1 << (HiveParser.KW_CONTINUE - 200)) |
                (1 << (HiveParser.KW_RECORDREADER - 200)) |
                (1 << (HiveParser.KW_RECORDWRITER - 200)) |
                (1 << (HiveParser.KW_SEMI - 200)) |
                (1 << (HiveParser.KW_TOUCH - 200)) |
                (1 << (HiveParser.KW_ARCHIVE - 200)) |
                (1 << (HiveParser.KW_UNARCHIVE - 200)) |
                (1 << (HiveParser.KW_COMPUTE - 200)) |
                (1 << (HiveParser.KW_STATISTICS - 200)) |
                (1 << (HiveParser.KW_USE - 200)) |
                (1 << (HiveParser.KW_OPTION - 200)) |
                (1 << (HiveParser.KW_CONCATENATE - 200)) |
                (1 << (HiveParser.KW_SHOW_DATABASE - 200)) |
                (1 << (HiveParser.KW_RESTRICT - 200)) |
                (1 << (HiveParser.KW_CASCADE - 200)) |
                (1 << (HiveParser.KW_SKEWED - 200)) |
                (1 << (HiveParser.KW_DIRECTORIES - 200)))) !==
              0) ||
          (((_la - 244) & ~0x1f) == 0 &&
            ((1 << (_la - 244)) &
              ((1 << (HiveParser.KW_SETS - 244)) |
                (1 << (HiveParser.KW_NOSCAN - 244)) |
                (1 << (HiveParser.KW_ROLE - 244)) |
                (1 << (HiveParser.KW_ROLES - 244)) |
                (1 << (HiveParser.KW_URI - 244)) |
                (1 << (HiveParser.KW_SERVER - 244)) |
                (1 << (HiveParser.KW_ADMIN - 244)) |
                (1 << (HiveParser.KW_OWNER - 244)) |
                (1 << (HiveParser.KW_PRINCIPALS - 244)) |
                (1 << (HiveParser.KW_COMPACT - 244)) |
                (1 << (HiveParser.KW_COMPACTIONS - 244)) |
                (1 << (HiveParser.KW_TRANSACTIONS - 244)) |
                (1 << (HiveParser.KW_REWRITE - 244)) |
                (1 << (HiveParser.KW_REOPTIMIZATION - 244)) |
                (1 << (HiveParser.KW_RELOAD - 244)) |
                (1 << (HiveParser.KW_YEAR - 244)) |
                (1 << (HiveParser.KW_QUERY - 244)) |
                (1 << (HiveParser.KW_QUARTER - 244)) |
                (1 << (HiveParser.KW_MONTH - 244)) |
                (1 << (HiveParser.KW_WEEK - 244)) |
                (1 << (HiveParser.KW_DAY - 244)) |
                (1 << (HiveParser.KW_DOW - 244)) |
                (1 << (HiveParser.KW_HOUR - 244)) |
                (1 << (HiveParser.KW_MINUTE - 244)) |
                (1 << (HiveParser.KW_SECOND - 244)))) !==
              0) ||
          (((_la - 277) & ~0x1f) == 0 &&
            ((1 << (_la - 277)) &
              ((1 << (HiveParser.KW_TRANSACTION - 277)) |
                (1 << (HiveParser.KW_WORK - 277)) |
                (1 << (HiveParser.KW_WRITE - 277)) |
                (1 << (HiveParser.KW_ISOLATION - 277)) |
                (1 << (HiveParser.KW_LEVEL - 277)) |
                (1 << (HiveParser.KW_SNAPSHOT - 277)) |
                (1 << (HiveParser.KW_AUTOCOMMIT - 277)) |
                (1 << (HiveParser.KW_CACHE - 277)) |
                (1 << (HiveParser.KW_ENFORCED - 277)) |
                (1 << (HiveParser.KW_VALIDATE - 277)) |
                (1 << (HiveParser.KW_NOVALIDATE - 277)) |
                (1 << (HiveParser.KW_RELY - 277)) |
                (1 << (HiveParser.KW_NORELY - 277)) |
                (1 << (HiveParser.KW_KEY - 277)) |
                (1 << (HiveParser.KW_ABORT - 277)) |
                (1 << (HiveParser.KW_MATCHED - 277)) |
                (1 << (HiveParser.KW_REPL - 277)) |
                (1 << (HiveParser.KW_DUMP - 277)) |
                (1 << (HiveParser.KW_STATUS - 277)) |
                (1 << (HiveParser.KW_VECTORIZATION - 277)) |
                (1 << (HiveParser.KW_SUMMARY - 277)))) !==
              0) ||
          (((_la - 309) & ~0x1f) == 0 &&
            ((1 << (_la - 309)) &
              ((1 << (HiveParser.KW_OPERATOR - 309)) |
                (1 << (HiveParser.KW_EXPRESSION - 309)) |
                (1 << (HiveParser.KW_DETAIL - 309)) |
                (1 << (HiveParser.KW_WAIT - 309)) |
                (1 << (HiveParser.KW_RESOURCE - 309)) |
                (1 << (HiveParser.KW_PLAN - 309)) |
                (1 << (HiveParser.KW_QUERY_PARALLELISM - 309)) |
                (1 << (HiveParser.KW_PLANS - 309)) |
                (1 << (HiveParser.KW_ACTIVATE - 309)) |
                (1 << (HiveParser.KW_DEFAULT - 309)) |
                (1 << (HiveParser.KW_CHECK - 309)) |
                (1 << (HiveParser.KW_POOL - 309)) |
                (1 << (HiveParser.KW_MOVE - 309)) |
                (1 << (HiveParser.KW_DO - 309)) |
                (1 << (HiveParser.KW_ALLOC_FRACTION - 309)) |
                (1 << (HiveParser.KW_SCHEDULING_POLICY - 309)) |
                (1 << (HiveParser.KW_PATH - 309)) |
                (1 << (HiveParser.KW_MAPPING - 309)) |
                (1 << (HiveParser.KW_WORKLOAD - 309)) |
                (1 << (HiveParser.KW_MANAGEMENT - 309)) |
                (1 << (HiveParser.KW_ACTIVE - 309)) |
                (1 << (HiveParser.KW_UNMANAGED - 309)) |
                (1 << (HiveParser.KW_DELTA - 309)) |
                (1 << (HiveParser.KW_CSV - 309)))) !==
              0) ||
          _la === HiveParser.KW_JSON ||
          _la === HiveParser.KW_BLOOMFILTER
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  sql11ReservedKeywordsUsedAsFunctionName() {
    let localctx = new Sql11ReservedKeywordsUsedAsFunctionNameContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      806,
      HiveParser.RULE_sql11ReservedKeywordsUsedAsFunctionName
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4421;
      _la = this._input.LA(1);
      if (
        !(
          _la === HiveParser.KW_IF ||
          (((_la - 77) & ~0x1f) == 0 &&
            ((1 << (_la - 77)) &
              ((1 << (HiveParser.KW_BOOLEAN - 77)) |
                (1 << (HiveParser.KW_SMALLINT - 77)) |
                (1 << (HiveParser.KW_INT - 77)) |
                (1 << (HiveParser.KW_BIGINT - 77)) |
                (1 << (HiveParser.KW_FLOAT - 77)) |
                (1 << (HiveParser.KW_DOUBLE - 77)) |
                (1 << (HiveParser.KW_DATE - 77)) |
                (1 << (HiveParser.KW_TIMESTAMP - 77)) |
                (1 << (HiveParser.KW_ARRAY - 77)) |
                (1 << (HiveParser.KW_MAP - 77)))) !==
              0) ||
          _la === HiveParser.KW_BINARY ||
          (((_la - 238) & ~0x1f) == 0 &&
            ((1 << (_la - 238)) &
              ((1 << (HiveParser.KW_CURRENT_DATE - 238)) |
                (1 << (HiveParser.KW_CURRENT_TIMESTAMP - 238)) |
                (1 << (HiveParser.KW_GROUPING - 238)))) !==
              0)
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  databricksAllowedReservedNames() {
    let localctx = new DatabricksAllowedReservedNamesContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      808,
      HiveParser.RULE_databricksAllowedReservedNames
    );
    try {
      this.state = 4425;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_IF:
        case HiveParser.KW_BOOLEAN:
        case HiveParser.KW_SMALLINT:
        case HiveParser.KW_INT:
        case HiveParser.KW_BIGINT:
        case HiveParser.KW_FLOAT:
        case HiveParser.KW_DOUBLE:
        case HiveParser.KW_DATE:
        case HiveParser.KW_TIMESTAMP:
        case HiveParser.KW_ARRAY:
        case HiveParser.KW_MAP:
        case HiveParser.KW_BINARY:
        case HiveParser.KW_CURRENT_DATE:
        case HiveParser.KW_CURRENT_TIMESTAMP:
        case HiveParser.KW_GROUPING:
          this.enterOuterAlt(localctx, 1);
          this.state = 4423;
          this.sql11ReservedKeywordsUsedAsFunctionName();
          break;
        case HiveParser.KW_TIME:
          this.enterOuterAlt(localctx, 2);
          this.state = 4424;
          this.match(HiveParser.KW_TIME);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  resourcePlanDdlStatements() {
    let localctx = new ResourcePlanDdlStatementsContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 810, HiveParser.RULE_resourcePlanDdlStatements);
    try {
      this.state = 4441;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 516, this._ctx);
      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 4427;
          this.createResourcePlanStatement();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 4428;
          this.alterResourcePlanStatement();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 4429;
          this.dropResourcePlanStatement();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 4430;
          this.globalWmStatement();
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 4431;
          this.replaceResourcePlanStatement();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 4432;
          this.createTriggerStatement();
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 4433;
          this.alterTriggerStatement();
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 4434;
          this.dropTriggerStatement();
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 4435;
          this.createPoolStatement();
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 4436;
          this.alterPoolStatement();
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 4437;
          this.dropPoolStatement();
          break;

        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 4438;
          this.createMappingStatement();
          break;

        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 4439;
          this.alterMappingStatement();
          break;

        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 4440;
          this.dropMappingStatement();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  rpAssign() {
    let localctx = new RpAssignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 812, HiveParser.RULE_rpAssign);
    try {
      this.state = 4450;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_QUERY_PARALLELISM:
          this.enterOuterAlt(localctx, 1);
          this.state = 4443;
          this.match(HiveParser.KW_QUERY_PARALLELISM);
          this.state = 4444;
          this.match(HiveParser.EQUAL);
          this.state = 4445;
          this.match(HiveParser.Number);
          break;
        case HiveParser.KW_DEFAULT:
          this.enterOuterAlt(localctx, 2);
          this.state = 4446;
          this.match(HiveParser.KW_DEFAULT);
          this.state = 4447;
          this.match(HiveParser.KW_POOL);
          this.state = 4448;
          this.match(HiveParser.EQUAL);
          this.state = 4449;
          this.poolPath();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  rpAssignList() {
    let localctx = new RpAssignListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 814, HiveParser.RULE_rpAssignList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4452;
      this.rpAssign();
      this.state = 4457;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 4453;
        this.match(HiveParser.COMMA);
        this.state = 4454;
        this.rpAssign();
        this.state = 4459;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  rpUnassign() {
    let localctx = new RpUnassignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 816, HiveParser.RULE_rpUnassign);
    try {
      this.state = 4463;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_QUERY_PARALLELISM:
          this.enterOuterAlt(localctx, 1);
          this.state = 4460;
          this.match(HiveParser.KW_QUERY_PARALLELISM);
          break;
        case HiveParser.KW_DEFAULT:
          this.enterOuterAlt(localctx, 2);
          this.state = 4461;
          this.match(HiveParser.KW_DEFAULT);
          this.state = 4462;
          this.match(HiveParser.KW_POOL);
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  rpUnassignList() {
    let localctx = new RpUnassignListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 818, HiveParser.RULE_rpUnassignList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4465;
      this.rpUnassign();
      this.state = 4470;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 4466;
        this.match(HiveParser.COMMA);
        this.state = 4467;
        this.rpUnassign();
        this.state = 4472;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createResourcePlanStatement() {
    let localctx = new CreateResourcePlanStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 820, HiveParser.RULE_createResourcePlanStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4473;
      this.match(HiveParser.KW_CREATE);
      this.state = 4474;
      this.match(HiveParser.KW_RESOURCE);
      this.state = 4475;
      this.match(HiveParser.KW_PLAN);
      this.state = 4478;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 521, this._ctx);
      switch (la_) {
        case 1:
          this.state = 4476;
          this.createResourcePlanStatementLikeExisting();
          break;

        case 2:
          this.state = 4477;
          this.createNewResourcePlanStatement();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createResourcePlanStatementLikeExisting() {
    let localctx = new CreateResourcePlanStatementLikeExistingContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      822,
      HiveParser.RULE_createResourcePlanStatementLikeExisting
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4480;
      this.identifier();
      this.state = 4481;
      this.match(HiveParser.KW_LIKE);
      this.state = 4482;
      this.identifier();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createNewResourcePlanStatement() {
    let localctx = new CreateNewResourcePlanStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      824,
      HiveParser.RULE_createNewResourcePlanStatement
    );
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4484;
      this.identifier();
      this.state = 4487;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WITH) {
        this.state = 4485;
        this.match(HiveParser.KW_WITH);
        this.state = 4486;
        this.rpAssignList();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  withReplace() {
    let localctx = new WithReplaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 826, HiveParser.RULE_withReplace);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4489;
      this.match(HiveParser.KW_WITH);
      this.state = 4490;
      this.match(HiveParser.KW_REPLACE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  activate() {
    let localctx = new ActivateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 828, HiveParser.RULE_activate);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4492;
      this.match(HiveParser.KW_ACTIVATE);
      this.state = 4494;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WITH) {
        this.state = 4493;
        this.withReplace();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  enable() {
    let localctx = new EnableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 830, HiveParser.RULE_enable);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4496;
      this.match(HiveParser.KW_ENABLE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  disable() {
    let localctx = new DisableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 832, HiveParser.RULE_disable);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4498;
      this.match(HiveParser.KW_DISABLE);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  unmanaged() {
    let localctx = new UnmanagedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 834, HiveParser.RULE_unmanaged);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4500;
      this.match(HiveParser.KW_UNMANAGED);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterResourcePlanStatement() {
    let localctx = new AlterResourcePlanStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 836, HiveParser.RULE_alterResourcePlanStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4502;
      this.match(HiveParser.KW_ALTER);
      this.state = 4503;
      this.match(HiveParser.KW_RESOURCE);
      this.state = 4504;
      this.match(HiveParser.KW_PLAN);
      this.state = 4505;
      this.identifier();
      this.state = 4523;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_VALIDATE:
          this.state = 4506;
          this.match(HiveParser.KW_VALIDATE);
          break;
        case HiveParser.KW_DISABLE:
          this.state = 4507;
          this.match(HiveParser.KW_DISABLE);
          break;
        case HiveParser.KW_SET:
          this.state = 4508;
          this.match(HiveParser.KW_SET);
          this.state = 4509;
          this.rpAssignList();
          break;
        case HiveParser.KW_UNSET:
          this.state = 4510;
          this.match(HiveParser.KW_UNSET);
          this.state = 4511;
          this.rpUnassignList();
          break;
        case HiveParser.KW_RENAME:
          this.state = 4512;
          this.alterResourcePlanRenameSuffix();
          break;
        case HiveParser.KW_ENABLE:
        case HiveParser.KW_ACTIVATE:
          this.state = 4521;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case HiveParser.KW_ACTIVATE:
              this.state = 4513;
              this.activate();
              this.state = 4515;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === HiveParser.KW_ENABLE) {
                this.state = 4514;
                this.enable();
              }

              break;
            case HiveParser.KW_ENABLE:
              this.state = 4517;
              this.enable();
              this.state = 4519;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === HiveParser.KW_ACTIVATE) {
                this.state = 4518;
                this.activate();
              }

              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterResourcePlanRenameSuffix() {
    let localctx = new AlterResourcePlanRenameSuffixContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      838,
      HiveParser.RULE_alterResourcePlanRenameSuffix
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4525;
      this.match(HiveParser.KW_RENAME);
      this.state = 4526;
      this.match(HiveParser.KW_TO);
      this.state = 4527;
      this.identifier();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  globalWmStatement() {
    let localctx = new GlobalWmStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 840, HiveParser.RULE_globalWmStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4531;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_ENABLE:
          this.state = 4529;
          this.enable();
          break;
        case HiveParser.KW_DISABLE:
          this.state = 4530;
          this.disable();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 4533;
      this.match(HiveParser.KW_WORKLOAD);
      this.state = 4534;
      this.match(HiveParser.KW_MANAGEMENT);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  replaceResourcePlanStatement() {
    let localctx = new ReplaceResourcePlanStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 842, HiveParser.RULE_replaceResourcePlanStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4536;
      this.match(HiveParser.KW_REPLACE);
      this.state = 4548;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_ACTIVE:
          this.state = 4537;
          this.match(HiveParser.KW_ACTIVE);
          this.state = 4538;
          this.match(HiveParser.KW_RESOURCE);
          this.state = 4539;
          this.match(HiveParser.KW_PLAN);
          this.state = 4540;
          this.match(HiveParser.KW_WITH);
          this.state = 4541;
          this.identifier();
          break;
        case HiveParser.KW_RESOURCE:
          this.state = 4542;
          this.match(HiveParser.KW_RESOURCE);
          this.state = 4543;
          this.match(HiveParser.KW_PLAN);
          this.state = 4544;
          this.identifier();
          this.state = 4545;
          this.match(HiveParser.KW_WITH);
          this.state = 4546;
          this.identifier();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropResourcePlanStatement() {
    let localctx = new DropResourcePlanStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 844, HiveParser.RULE_dropResourcePlanStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4550;
      this.match(HiveParser.KW_DROP);
      this.state = 4551;
      this.match(HiveParser.KW_RESOURCE);
      this.state = 4552;
      this.match(HiveParser.KW_PLAN);
      this.state = 4553;
      this.identifier();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  poolPath() {
    let localctx = new PoolPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 846, HiveParser.RULE_poolPath);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4555;
      this.identifier();
      this.state = 4560;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.DOT) {
        this.state = 4556;
        this.match(HiveParser.DOT);
        this.state = 4557;
        this.identifier();
        this.state = 4562;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  triggerExpression() {
    let localctx = new TriggerExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 848, HiveParser.RULE_triggerExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4563;
      this.triggerAtomExpression();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  triggerExpressionStandalone() {
    let localctx = new TriggerExpressionStandaloneContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 850, HiveParser.RULE_triggerExpressionStandalone);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4565;
      this.triggerExpression();
      this.state = 4566;
      this.match(HiveParser.EOF);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  triggerOrExpression() {
    let localctx = new TriggerOrExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 852, HiveParser.RULE_triggerOrExpression);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4568;
      this.triggerAndExpression();
      this.state = 4573;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.KW_OR) {
        this.state = 4569;
        this.match(HiveParser.KW_OR);
        this.state = 4570;
        this.triggerAndExpression();
        this.state = 4575;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  triggerAndExpression() {
    let localctx = new TriggerAndExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 854, HiveParser.RULE_triggerAndExpression);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4576;
      this.triggerAtomExpression();
      this.state = 4581;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.KW_AND) {
        this.state = 4577;
        this.match(HiveParser.KW_AND);
        this.state = 4578;
        this.triggerAtomExpression();
        this.state = 4583;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  triggerAtomExpression() {
    let localctx = new TriggerAtomExpressionContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 856, HiveParser.RULE_triggerAtomExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4584;
      this.identifier();
      this.state = 4585;
      this.comparisionOperator();
      this.state = 4586;
      this.triggerLiteral();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  triggerLiteral() {
    let localctx = new TriggerLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 858, HiveParser.RULE_triggerLiteral);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4588;
      _la = this._input.LA(1);
      if (!(_la === HiveParser.StringLiteral || _la === HiveParser.Number)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  comparisionOperator() {
    let localctx = new ComparisionOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 860, HiveParser.RULE_comparisionOperator);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4590;
      this.match(HiveParser.GREATERTHAN);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  triggerActionExpression() {
    let localctx = new TriggerActionExpressionContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 862, HiveParser.RULE_triggerActionExpression);
    try {
      this.state = 4596;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_KILL:
          this.enterOuterAlt(localctx, 1);
          this.state = 4592;
          this.match(HiveParser.KW_KILL);
          break;
        case HiveParser.KW_MOVE:
          this.enterOuterAlt(localctx, 2);
          this.state = 4593;
          this.match(HiveParser.KW_MOVE);
          this.state = 4594;
          this.match(HiveParser.KW_TO);
          this.state = 4595;
          this.poolPath();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  triggerActionExpressionStandalone() {
    let localctx = new TriggerActionExpressionStandaloneContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(
      localctx,
      864,
      HiveParser.RULE_triggerActionExpressionStandalone
    );
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4598;
      this.triggerActionExpression();
      this.state = 4599;
      this.match(HiveParser.EOF);
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createTriggerStatement() {
    let localctx = new CreateTriggerStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 866, HiveParser.RULE_createTriggerStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4601;
      this.match(HiveParser.KW_CREATE);
      this.state = 4602;
      this.match(HiveParser.KW_TRIGGER);
      this.state = 4603;
      this.identifier();
      this.state = 4604;
      this.match(HiveParser.DOT);
      this.state = 4605;
      this.identifier();
      this.state = 4606;
      this.triggerConditionExpression();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterTriggerStatement() {
    let localctx = new AlterTriggerStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 868, HiveParser.RULE_alterTriggerStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4608;
      this.match(HiveParser.KW_ALTER);
      this.state = 4609;
      this.match(HiveParser.KW_TRIGGER);
      this.state = 4610;
      this.identifier();
      this.state = 4611;
      this.match(HiveParser.DOT);
      this.state = 4612;
      this.identifier();
      this.state = 4628;
      this._errHandler.sync(this);
      var la_ = this._interp.adaptivePredict(this._input, 534, this._ctx);
      switch (la_) {
        case 1:
          this.state = 4613;
          this.triggerConditionExpression();
          break;

        case 2:
          this.state = 4614;
          this.match(HiveParser.KW_ADD);
          this.state = 4615;
          this.match(HiveParser.KW_TO);
          this.state = 4616;
          this.match(HiveParser.KW_POOL);
          this.state = 4617;
          this.poolPath();
          break;

        case 3:
          this.state = 4618;
          this.match(HiveParser.KW_DROP);
          this.state = 4619;
          this.match(HiveParser.KW_FROM);
          this.state = 4620;
          this.match(HiveParser.KW_POOL);
          this.state = 4621;
          this.poolPath();
          break;

        case 4:
          this.state = 4622;
          this.match(HiveParser.KW_ADD);
          this.state = 4623;
          this.match(HiveParser.KW_TO);
          this.state = 4624;
          this.match(HiveParser.KW_UNMANAGED);
          break;

        case 5:
          this.state = 4625;
          this.match(HiveParser.KW_DROP);
          this.state = 4626;
          this.match(HiveParser.KW_FROM);
          this.state = 4627;
          this.match(HiveParser.KW_UNMANAGED);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  triggerConditionExpression() {
    let localctx = new TriggerConditionExpressionContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 870, HiveParser.RULE_triggerConditionExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4630;
      this.match(HiveParser.KW_WHEN);
      this.state = 4631;
      this.triggerExpression();
      this.state = 4632;
      this.match(HiveParser.KW_DO);
      this.state = 4633;
      this.triggerActionExpression();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropTriggerStatement() {
    let localctx = new DropTriggerStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 872, HiveParser.RULE_dropTriggerStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4635;
      this.match(HiveParser.KW_DROP);
      this.state = 4636;
      this.match(HiveParser.KW_TRIGGER);
      this.state = 4637;
      this.identifier();
      this.state = 4638;
      this.match(HiveParser.DOT);
      this.state = 4639;
      this.identifier();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  poolAssign() {
    let localctx = new PoolAssignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 874, HiveParser.RULE_poolAssign);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4653;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_ALLOC_FRACTION:
          this.state = 4641;
          this.match(HiveParser.KW_ALLOC_FRACTION);
          this.state = 4642;
          this.match(HiveParser.EQUAL);
          this.state = 4643;
          this.match(HiveParser.Number);
          break;
        case HiveParser.KW_QUERY_PARALLELISM:
          this.state = 4644;
          this.match(HiveParser.KW_QUERY_PARALLELISM);
          this.state = 4645;
          this.match(HiveParser.EQUAL);
          this.state = 4646;
          this.match(HiveParser.Number);
          break;
        case HiveParser.KW_SCHEDULING_POLICY:
          this.state = 4647;
          this.match(HiveParser.KW_SCHEDULING_POLICY);
          this.state = 4648;
          this.match(HiveParser.EQUAL);
          this.state = 4649;
          this.match(HiveParser.StringLiteral);
          break;
        case HiveParser.KW_PATH:
          this.state = 4650;
          this.match(HiveParser.KW_PATH);
          this.state = 4651;
          this.match(HiveParser.EQUAL);
          this.state = 4652;
          this.poolPath();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  poolAssignList() {
    let localctx = new PoolAssignListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 876, HiveParser.RULE_poolAssignList);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4655;
      this.poolAssign();
      this.state = 4660;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === HiveParser.COMMA) {
        this.state = 4656;
        this.match(HiveParser.COMMA);
        this.state = 4657;
        this.poolAssign();
        this.state = 4662;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createPoolStatement() {
    let localctx = new CreatePoolStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 878, HiveParser.RULE_createPoolStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4663;
      this.match(HiveParser.KW_CREATE);
      this.state = 4664;
      this.match(HiveParser.KW_POOL);
      this.state = 4665;
      this.identifier();
      this.state = 4666;
      this.match(HiveParser.DOT);
      this.state = 4667;
      this.poolPath();
      this.state = 4668;
      this.match(HiveParser.KW_WITH);
      this.state = 4669;
      this.poolAssignList();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterPoolStatement() {
    let localctx = new AlterPoolStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 880, HiveParser.RULE_alterPoolStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4671;
      this.match(HiveParser.KW_ALTER);
      this.state = 4672;
      this.match(HiveParser.KW_POOL);
      this.state = 4673;
      this.identifier();
      this.state = 4674;
      this.match(HiveParser.DOT);
      this.state = 4675;
      this.poolPath();
      this.state = 4686;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_SET:
          this.state = 4676;
          this.match(HiveParser.KW_SET);
          this.state = 4677;
          this.poolAssignList();
          break;
        case HiveParser.KW_UNSET:
          this.state = 4678;
          this.match(HiveParser.KW_UNSET);
          this.state = 4679;
          this.match(HiveParser.KW_SCHEDULING_POLICY);
          break;
        case HiveParser.KW_ADD:
          this.state = 4680;
          this.match(HiveParser.KW_ADD);
          this.state = 4681;
          this.match(HiveParser.KW_TRIGGER);
          this.state = 4682;
          this.identifier();
          break;
        case HiveParser.KW_DROP:
          this.state = 4683;
          this.match(HiveParser.KW_DROP);
          this.state = 4684;
          this.match(HiveParser.KW_TRIGGER);
          this.state = 4685;
          this.identifier();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropPoolStatement() {
    let localctx = new DropPoolStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 882, HiveParser.RULE_dropPoolStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4688;
      this.match(HiveParser.KW_DROP);
      this.state = 4689;
      this.match(HiveParser.KW_POOL);
      this.state = 4690;
      this.identifier();
      this.state = 4691;
      this.match(HiveParser.DOT);
      this.state = 4692;
      this.poolPath();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  createMappingStatement() {
    let localctx = new CreateMappingStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 884, HiveParser.RULE_createMappingStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4694;
      this.match(HiveParser.KW_CREATE);
      this.state = 4695;
      _la = this._input.LA(1);
      if (
        !(
          _la === HiveParser.KW_GROUP ||
          _la === HiveParser.KW_USER ||
          _la === HiveParser.KW_APPLICATION
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 4696;
      this.match(HiveParser.KW_MAPPING);
      this.state = 4697;
      this.match(HiveParser.StringLiteral);
      this.state = 4698;
      this.match(HiveParser.KW_IN);
      this.state = 4699;
      this.identifier();
      this.state = 4703;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_TO:
          this.state = 4700;
          this.match(HiveParser.KW_TO);
          this.state = 4701;
          this.poolPath();
          break;
        case HiveParser.KW_UNMANAGED:
          this.state = 4702;
          this.unmanaged();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 4708;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WITH) {
        this.state = 4705;
        this.match(HiveParser.KW_WITH);
        this.state = 4706;
        this.match(HiveParser.KW_ORDER);
        this.state = 4707;
        this.match(HiveParser.Number);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  alterMappingStatement() {
    let localctx = new AlterMappingStatementContext(
      this,
      this._ctx,
      this.state
    );
    this.enterRule(localctx, 886, HiveParser.RULE_alterMappingStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4710;
      this.match(HiveParser.KW_ALTER);
      this.state = 4711;
      _la = this._input.LA(1);
      if (
        !(
          _la === HiveParser.KW_GROUP ||
          _la === HiveParser.KW_USER ||
          _la === HiveParser.KW_APPLICATION
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 4712;
      this.match(HiveParser.KW_MAPPING);
      this.state = 4713;
      this.match(HiveParser.StringLiteral);
      this.state = 4714;
      this.match(HiveParser.KW_IN);
      this.state = 4715;
      this.identifier();
      this.state = 4719;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case HiveParser.KW_TO:
          this.state = 4716;
          this.match(HiveParser.KW_TO);
          this.state = 4717;
          this.poolPath();
          break;
        case HiveParser.KW_UNMANAGED:
          this.state = 4718;
          this.unmanaged();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 4724;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === HiveParser.KW_WITH) {
        this.state = 4721;
        this.match(HiveParser.KW_WITH);
        this.state = 4722;
        this.match(HiveParser.KW_ORDER);
        this.state = 4723;
        this.match(HiveParser.Number);
      }
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }

  dropMappingStatement() {
    let localctx = new DropMappingStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 888, HiveParser.RULE_dropMappingStatement);
    var _la = 0; // Token type
    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 4726;
      this.match(HiveParser.KW_DROP);
      this.state = 4727;
      _la = this._input.LA(1);
      if (
        !(
          _la === HiveParser.KW_GROUP ||
          _la === HiveParser.KW_USER ||
          _la === HiveParser.KW_APPLICATION
        )
      ) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 4728;
      this.match(HiveParser.KW_MAPPING);
      this.state = 4729;
      this.match(HiveParser.StringLiteral);
      this.state = 4730;
      this.match(HiveParser.KW_IN);
      this.state = 4731;
      this.identifier();
    } catch (re) {
      if (re instanceof antlr4.error.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
}

HiveParser.EOF = antlr4.Token.EOF;
HiveParser.KW_TRUE = 1;
HiveParser.KW_FALSE = 2;
HiveParser.KW_ALL = 3;
HiveParser.KW_NONE = 4;
HiveParser.KW_AND = 5;
HiveParser.KW_OR = 6;
HiveParser.KW_NOT = 7;
HiveParser.KW_LIKE = 8;
HiveParser.KW_ANY = 9;
HiveParser.KW_IF = 10;
HiveParser.KW_EXISTS = 11;
HiveParser.KW_ASC = 12;
HiveParser.KW_DESC = 13;
HiveParser.KW_NULLS = 14;
HiveParser.KW_LAST = 15;
HiveParser.KW_ORDER = 16;
HiveParser.KW_GROUP = 17;
HiveParser.KW_BY = 18;
HiveParser.KW_HAVING = 19;
HiveParser.KW_WHERE = 20;
HiveParser.KW_FROM = 21;
HiveParser.KW_AS = 22;
HiveParser.KW_SELECT = 23;
HiveParser.KW_DISTINCT = 24;
HiveParser.KW_INSERT = 25;
HiveParser.KW_OVERWRITE = 26;
HiveParser.KW_OUTER = 27;
HiveParser.KW_UNIQUEJOIN = 28;
HiveParser.KW_PRESERVE = 29;
HiveParser.KW_JOIN = 30;
HiveParser.KW_LEFT = 31;
HiveParser.KW_RIGHT = 32;
HiveParser.KW_FULL = 33;
HiveParser.KW_ON = 34;
HiveParser.KW_PARTITION = 35;
HiveParser.KW_PARTITIONS = 36;
HiveParser.KW_TABLE = 37;
HiveParser.KW_TABLES = 38;
HiveParser.KW_COLUMNS = 39;
HiveParser.KW_INDEX = 40;
HiveParser.KW_INDEXES = 41;
HiveParser.KW_REBUILD = 42;
HiveParser.KW_FUNCTIONS = 43;
HiveParser.KW_SHOW = 44;
HiveParser.KW_MSCK = 45;
HiveParser.KW_REPAIR = 46;
HiveParser.KW_DIRECTORY = 47;
HiveParser.KW_LOCAL = 48;
HiveParser.KW_TRANSFORM = 49;
HiveParser.KW_USING = 50;
HiveParser.KW_CLUSTER = 51;
HiveParser.KW_DISTRIBUTE = 52;
HiveParser.KW_SORT = 53;
HiveParser.KW_UNION = 54;
HiveParser.KW_EXCEPT = 55;
HiveParser.KW_LOAD = 56;
HiveParser.KW_EXPORT = 57;
HiveParser.KW_IMPORT = 58;
HiveParser.KW_REPLICATION = 59;
HiveParser.KW_METADATA = 60;
HiveParser.KW_DATA = 61;
HiveParser.KW_INPATH = 62;
HiveParser.KW_IS = 63;
HiveParser.KW_NULL = 64;
HiveParser.KW_CREATE = 65;
HiveParser.KW_EXTERNAL = 66;
HiveParser.KW_ALTER = 67;
HiveParser.KW_CHANGE = 68;
HiveParser.KW_COLUMN = 69;
HiveParser.KW_FIRST = 70;
HiveParser.KW_AFTER = 71;
HiveParser.KW_DESCRIBE = 72;
HiveParser.KW_DROP = 73;
HiveParser.KW_RENAME = 74;
HiveParser.KW_TO = 75;
HiveParser.KW_COMMENT = 76;
HiveParser.KW_BOOLEAN = 77;
HiveParser.KW_TINYINT = 78;
HiveParser.KW_SMALLINT = 79;
HiveParser.KW_INT = 80;
HiveParser.KW_BIGINT = 81;
HiveParser.KW_FLOAT = 82;
HiveParser.KW_DOUBLE = 83;
HiveParser.KW_PRECISION = 84;
HiveParser.KW_DATE = 85;
HiveParser.KW_DATETIME = 86;
HiveParser.KW_TIMESTAMP = 87;
HiveParser.KW_TIMESTAMPLOCALTZ = 88;
HiveParser.KW_TIME = 89;
HiveParser.KW_ZONE = 90;
HiveParser.KW_INTERVAL = 91;
HiveParser.KW_DECIMAL = 92;
HiveParser.KW_STRING = 93;
HiveParser.KW_CHAR = 94;
HiveParser.KW_VARCHAR = 95;
HiveParser.KW_ARRAY = 96;
HiveParser.KW_STRUCT = 97;
HiveParser.KW_MAP = 98;
HiveParser.KW_UNIONTYPE = 99;
HiveParser.KW_REDUCE = 100;
HiveParser.KW_PARTITIONED = 101;
HiveParser.KW_CLUSTERED = 102;
HiveParser.KW_SORTED = 103;
HiveParser.KW_INTO = 104;
HiveParser.KW_BUCKETS = 105;
HiveParser.KW_ROW = 106;
HiveParser.KW_ROWS = 107;
HiveParser.KW_FORMAT = 108;
HiveParser.KW_DELIMITED = 109;
HiveParser.KW_FIELDS = 110;
HiveParser.KW_TERMINATED = 111;
HiveParser.KW_ESCAPED = 112;
HiveParser.KW_COLLECTION = 113;
HiveParser.KW_ITEMS = 114;
HiveParser.KW_KEYS = 115;
HiveParser.KW_KEY_TYPE = 116;
HiveParser.KW_KILL = 117;
HiveParser.KW_LINES = 118;
HiveParser.KW_STORED = 119;
HiveParser.KW_FILEFORMAT = 120;
HiveParser.KW_INPUTFORMAT = 121;
HiveParser.KW_OUTPUTFORMAT = 122;
HiveParser.KW_INPUTDRIVER = 123;
HiveParser.KW_OUTPUTDRIVER = 124;
HiveParser.KW_ENABLE = 125;
HiveParser.KW_DISABLE = 126;
HiveParser.KW_LOCATION = 127;
HiveParser.KW_TABLESAMPLE = 128;
HiveParser.KW_BUCKET = 129;
HiveParser.KW_OUT = 130;
HiveParser.KW_OF = 131;
HiveParser.KW_PERCENT = 132;
HiveParser.KW_CAST = 133;
HiveParser.KW_ADD = 134;
HiveParser.KW_REPLACE = 135;
HiveParser.KW_RLIKE = 136;
HiveParser.KW_REGEXP = 137;
HiveParser.KW_TEMPORARY = 138;
HiveParser.KW_FUNCTION = 139;
HiveParser.KW_MACRO = 140;
HiveParser.KW_FILE = 141;
HiveParser.KW_JAR = 142;
HiveParser.KW_EXPLAIN = 143;
HiveParser.KW_EXTENDED = 144;
HiveParser.KW_FORMATTED = 145;
HiveParser.KW_DEPENDENCY = 146;
HiveParser.KW_LOGICAL = 147;
HiveParser.KW_SERDE = 148;
HiveParser.KW_WITH = 149;
HiveParser.KW_DEFERRED = 150;
HiveParser.KW_SERDEPROPERTIES = 151;
HiveParser.KW_DBPROPERTIES = 152;
HiveParser.KW_LIMIT = 153;
HiveParser.KW_OFFSET = 154;
HiveParser.KW_SET = 155;
HiveParser.KW_UNSET = 156;
HiveParser.KW_TBLPROPERTIES = 157;
HiveParser.KW_IDXPROPERTIES = 158;
HiveParser.KW_VALUE_TYPE = 159;
HiveParser.KW_ELEM_TYPE = 160;
HiveParser.KW_DEFINED = 161;
HiveParser.KW_CASE = 162;
HiveParser.KW_WHEN = 163;
HiveParser.KW_THEN = 164;
HiveParser.KW_ELSE = 165;
HiveParser.KW_END = 166;
HiveParser.KW_MAPJOIN = 167;
HiveParser.KW_STREAMTABLE = 168;
HiveParser.KW_CLUSTERSTATUS = 169;
HiveParser.KW_UTC = 170;
HiveParser.KW_UTCTIMESTAMP = 171;
HiveParser.KW_LONG = 172;
HiveParser.KW_DELETE = 173;
HiveParser.KW_PLUS = 174;
HiveParser.KW_MINUS = 175;
HiveParser.KW_FETCH = 176;
HiveParser.KW_INTERSECT = 177;
HiveParser.KW_VIEW = 178;
HiveParser.KW_VIEWS = 179;
HiveParser.KW_IN = 180;
HiveParser.KW_DATABASE = 181;
HiveParser.KW_DATABASES = 182;
HiveParser.KW_MATERIALIZED = 183;
HiveParser.KW_SCHEMA = 184;
HiveParser.KW_SCHEMAS = 185;
HiveParser.KW_GRANT = 186;
HiveParser.KW_REVOKE = 187;
HiveParser.KW_SSL = 188;
HiveParser.KW_UNDO = 189;
HiveParser.KW_LOCK = 190;
HiveParser.KW_LOCKS = 191;
HiveParser.KW_UNLOCK = 192;
HiveParser.KW_SHARED = 193;
HiveParser.KW_EXCLUSIVE = 194;
HiveParser.KW_PROCEDURE = 195;
HiveParser.KW_UNSIGNED = 196;
HiveParser.KW_WHILE = 197;
HiveParser.KW_READ = 198;
HiveParser.KW_READS = 199;
HiveParser.KW_PURGE = 200;
HiveParser.KW_RANGE = 201;
HiveParser.KW_ANALYZE = 202;
HiveParser.KW_BEFORE = 203;
HiveParser.KW_BETWEEN = 204;
HiveParser.KW_BOTH = 205;
HiveParser.KW_BINARY = 206;
HiveParser.KW_CROSS = 207;
HiveParser.KW_CONTINUE = 208;
HiveParser.KW_CURSOR = 209;
HiveParser.KW_TRIGGER = 210;
HiveParser.KW_RECORDREADER = 211;
HiveParser.KW_RECORDWRITER = 212;
HiveParser.KW_SEMI = 213;
HiveParser.KW_LATERAL = 214;
HiveParser.KW_TOUCH = 215;
HiveParser.KW_ARCHIVE = 216;
HiveParser.KW_UNARCHIVE = 217;
HiveParser.KW_COMPUTE = 218;
HiveParser.KW_STATISTICS = 219;
HiveParser.KW_USE = 220;
HiveParser.KW_OPTIONS = 221;
HiveParser.KW_OPTION = 222;
HiveParser.KW_CONCATENATE = 223;
HiveParser.KW_SHOW_DATABASE = 224;
HiveParser.KW_UPDATE = 225;
HiveParser.KW_RESTRICT = 226;
HiveParser.KW_CASCADE = 227;
HiveParser.KW_SKEWED = 228;
HiveParser.KW_ROLLUP = 229;
HiveParser.KW_CUBE = 230;
HiveParser.KW_DIRECTORIES = 231;
HiveParser.KW_FOR = 232;
HiveParser.KW_WINDOW = 233;
HiveParser.KW_UNBOUNDED = 234;
HiveParser.KW_PRECEDING = 235;
HiveParser.KW_FOLLOWING = 236;
HiveParser.KW_CURRENT = 237;
HiveParser.KW_CURRENT_DATE = 238;
HiveParser.KW_CURRENT_TIMESTAMP = 239;
HiveParser.KW_LESS = 240;
HiveParser.KW_MORE = 241;
HiveParser.KW_OVER = 242;
HiveParser.KW_GROUPING = 243;
HiveParser.KW_SETS = 244;
HiveParser.KW_TRUNCATE = 245;
HiveParser.KW_NOSCAN = 246;
HiveParser.KW_USER = 247;
HiveParser.KW_ROLE = 248;
HiveParser.KW_ROLES = 249;
HiveParser.KW_INNER = 250;
HiveParser.KW_EXCHANGE = 251;
HiveParser.KW_URI = 252;
HiveParser.KW_SERVER = 253;
HiveParser.KW_ADMIN = 254;
HiveParser.KW_OWNER = 255;
HiveParser.KW_PRINCIPALS = 256;
HiveParser.KW_COMPACT = 257;
HiveParser.KW_COMPACTIONS = 258;
HiveParser.KW_TRANSACTIONS = 259;
HiveParser.KW_REWRITE = 260;
HiveParser.KW_AUTHORIZATION = 261;
HiveParser.KW_REOPTIMIZATION = 262;
HiveParser.KW_CONF = 263;
HiveParser.KW_VALUES = 264;
HiveParser.KW_RELOAD = 265;
HiveParser.KW_YEAR = 266;
HiveParser.KW_QUERY = 267;
HiveParser.KW_QUARTER = 268;
HiveParser.KW_MONTH = 269;
HiveParser.KW_WEEK = 270;
HiveParser.KW_DAY = 271;
HiveParser.KW_DOW = 272;
HiveParser.KW_HOUR = 273;
HiveParser.KW_MINUTE = 274;
HiveParser.KW_SECOND = 275;
HiveParser.KW_START = 276;
HiveParser.KW_TRANSACTION = 277;
HiveParser.KW_COMMIT = 278;
HiveParser.KW_ROLLBACK = 279;
HiveParser.KW_WORK = 280;
HiveParser.KW_ONLY = 281;
HiveParser.KW_WRITE = 282;
HiveParser.KW_ISOLATION = 283;
HiveParser.KW_LEVEL = 284;
HiveParser.KW_SNAPSHOT = 285;
HiveParser.KW_AUTOCOMMIT = 286;
HiveParser.KW_CACHE = 287;
HiveParser.KW_PRIMARY = 288;
HiveParser.KW_FOREIGN = 289;
HiveParser.KW_REFERENCES = 290;
HiveParser.KW_CONSTRAINT = 291;
HiveParser.KW_ENFORCED = 292;
HiveParser.KW_VALIDATE = 293;
HiveParser.KW_NOVALIDATE = 294;
HiveParser.KW_RELY = 295;
HiveParser.KW_NORELY = 296;
HiveParser.KW_UNIQUE = 297;
HiveParser.KW_KEY = 298;
HiveParser.KW_ABORT = 299;
HiveParser.KW_EXTRACT = 300;
HiveParser.KW_FLOOR = 301;
HiveParser.KW_MERGE = 302;
HiveParser.KW_MATCHED = 303;
HiveParser.KW_REPL = 304;
HiveParser.KW_DUMP = 305;
HiveParser.KW_STATUS = 306;
HiveParser.KW_VECTORIZATION = 307;
HiveParser.KW_SUMMARY = 308;
HiveParser.KW_OPERATOR = 309;
HiveParser.KW_EXPRESSION = 310;
HiveParser.KW_DETAIL = 311;
HiveParser.KW_WAIT = 312;
HiveParser.KW_RESOURCE = 313;
HiveParser.KW_PLAN = 314;
HiveParser.KW_QUERY_PARALLELISM = 315;
HiveParser.KW_PLANS = 316;
HiveParser.KW_ACTIVATE = 317;
HiveParser.KW_DEFAULT = 318;
HiveParser.KW_CHECK = 319;
HiveParser.KW_POOL = 320;
HiveParser.KW_MOVE = 321;
HiveParser.KW_DO = 322;
HiveParser.KW_ALLOC_FRACTION = 323;
HiveParser.KW_SCHEDULING_POLICY = 324;
HiveParser.KW_PATH = 325;
HiveParser.KW_MAPPING = 326;
HiveParser.KW_WORKLOAD = 327;
HiveParser.KW_MANAGEMENT = 328;
HiveParser.KW_ACTIVE = 329;
HiveParser.KW_UNMANAGED = 330;
HiveParser.KW_APPLICATION = 331;
HiveParser.KW_SYNC = 332;
HiveParser.KW_SEQUENCEFILE = 333;
HiveParser.KW_TEXTFILE = 334;
HiveParser.KW_RCFILE = 335;
HiveParser.KW_ORC = 336;
HiveParser.KW_PARQUET = 337;
HiveParser.KW_DELTA = 338;
HiveParser.KW_AVRO = 339;
HiveParser.KW_CSV = 340;
HiveParser.KW_JSON = 341;
HiveParser.KW_JSONFILE = 342;
HiveParser.KW_BLOOMFILTER = 343;
HiveParser.KW_GENERATED = 344;
HiveParser.KW_ALWAYS = 345;
HiveParser.KW_IDENTITY = 346;
HiveParser.KW_INCREMENT = 347;
HiveParser.DOT = 348;
HiveParser.COLON = 349;
HiveParser.COMMA = 350;
HiveParser.SEMICOLON = 351;
HiveParser.LPAREN = 352;
HiveParser.RPAREN = 353;
HiveParser.LSQUARE = 354;
HiveParser.RSQUARE = 355;
HiveParser.LCURLY = 356;
HiveParser.RCURLY = 357;
HiveParser.EQUAL = 358;
HiveParser.EQUAL_NS = 359;
HiveParser.NOTEQUAL = 360;
HiveParser.LESSTHANOREQUALTO = 361;
HiveParser.LESSTHAN = 362;
HiveParser.GREATERTHANOREQUALTO = 363;
HiveParser.GREATERTHAN = 364;
HiveParser.DIVIDE = 365;
HiveParser.PLUS = 366;
HiveParser.MINUS = 367;
HiveParser.STAR = 368;
HiveParser.MOD = 369;
HiveParser.DIV = 370;
HiveParser.AMPERSAND = 371;
HiveParser.TILDE = 372;
HiveParser.BITWISEOR = 373;
HiveParser.CONCATENATE = 374;
HiveParser.BITWISEXOR = 375;
HiveParser.QUESTION = 376;
HiveParser.DOLLAR = 377;
HiveParser.StringLiteral = 378;
HiveParser.CharSetLiteral = 379;
HiveParser.IntegralLiteral = 380;
HiveParser.NumberLiteral = 381;
HiveParser.ByteLengthLiteral = 382;
HiveParser.Number = 383;
HiveParser.Identifier = 384;
HiveParser.QuotedIdentifier = 385;
HiveParser.CharSetName = 386;
HiveParser.WS = 387;
HiveParser.LINE_COMMENT = 388;
HiveParser.QUERY_HINT = 389;
HiveParser.SHOW_HINT = 390;
HiveParser.HIDDEN_HINT = 391;

HiveParser.RULE_statements = 0;
HiveParser.RULE_statementSeparator = 1;
HiveParser.RULE_empty = 2;
HiveParser.RULE_statement = 3;
HiveParser.RULE_explainStatement = 4;
HiveParser.RULE_explainOption = 5;
HiveParser.RULE_vectorizationOnly = 6;
HiveParser.RULE_vectorizatonDetail = 7;
HiveParser.RULE_execStatement = 8;
HiveParser.RULE_loadStatement = 9;
HiveParser.RULE_replicationClause = 10;
HiveParser.RULE_exportStatement = 11;
HiveParser.RULE_importStatement = 12;
HiveParser.RULE_replDumpStatement = 13;
HiveParser.RULE_replLoadStatement = 14;
HiveParser.RULE_replConfigs = 15;
HiveParser.RULE_replConfigsList = 16;
HiveParser.RULE_replStatusStatement = 17;
HiveParser.RULE_ddlStatement = 18;
HiveParser.RULE_ifExists = 19;
HiveParser.RULE_restrictOrCascade = 20;
HiveParser.RULE_ifNotExists = 21;
HiveParser.RULE_rewriteEnabled = 22;
HiveParser.RULE_rewriteDisabled = 23;
HiveParser.RULE_storedAsDirs = 24;
HiveParser.RULE_orReplace = 25;
HiveParser.RULE_createDatabaseStatement = 26;
HiveParser.RULE_dbLocation = 27;
HiveParser.RULE_dbProperties = 28;
HiveParser.RULE_dbPropertiesList = 29;
HiveParser.RULE_switchDatabaseStatement = 30;
HiveParser.RULE_dropDatabaseStatement = 31;
HiveParser.RULE_databaseComment = 32;
HiveParser.RULE_createTableStatement = 33;
HiveParser.RULE_truncateTableStatement = 34;
HiveParser.RULE_dropTableStatement = 35;
HiveParser.RULE_alterStatement = 36;
HiveParser.RULE_alterTableStatementSuffix = 37;
HiveParser.RULE_alterTblPartitionStatementSuffix = 38;
HiveParser.RULE_alterStatementPartitionKeyType = 39;
HiveParser.RULE_alterViewStatementSuffix = 40;
HiveParser.RULE_alterMaterializedViewStatementSuffix = 41;
HiveParser.RULE_alterDatabaseStatementSuffix = 42;
HiveParser.RULE_alterDatabaseSuffixProperties = 43;
HiveParser.RULE_alterDatabaseSuffixSetOwner = 44;
HiveParser.RULE_alterDatabaseSuffixSetLocation = 45;
HiveParser.RULE_alterStatementSuffixRename = 46;
HiveParser.RULE_alterStatementSuffixAddCol = 47;
HiveParser.RULE_alterStatementSuffixAddConstraint = 48;
HiveParser.RULE_alterStatementSuffixUpdateColumns = 49;
HiveParser.RULE_alterStatementSuffixDropConstraint = 50;
HiveParser.RULE_alterStatementSuffixRenameCol = 51;
HiveParser.RULE_alterStatementSuffixUpdateStatsCol = 52;
HiveParser.RULE_alterStatementSuffixUpdateStats = 53;
HiveParser.RULE_alterStatementChangeColPosition = 54;
HiveParser.RULE_alterStatementSuffixAddPartitions = 55;
HiveParser.RULE_alterStatementSuffixAddPartitionsElement = 56;
HiveParser.RULE_alterStatementSuffixTouch = 57;
HiveParser.RULE_alterStatementSuffixArchive = 58;
HiveParser.RULE_alterStatementSuffixUnArchive = 59;
HiveParser.RULE_partitionLocation = 60;
HiveParser.RULE_alterStatementSuffixDropPartitions = 61;
HiveParser.RULE_alterStatementSuffixProperties = 62;
HiveParser.RULE_alterViewSuffixProperties = 63;
HiveParser.RULE_alterMaterializedViewSuffixRewrite = 64;
HiveParser.RULE_alterMaterializedViewSuffixRebuild = 65;
HiveParser.RULE_alterStatementSuffixSerdeProperties = 66;
HiveParser.RULE_alterIndexStatementSuffix = 67;
HiveParser.RULE_alterStatementSuffixFileFormat = 68;
HiveParser.RULE_alterStatementSuffixClusterbySortby = 69;
HiveParser.RULE_alterTblPartitionStatementSuffixSkewedLocation = 70;
HiveParser.RULE_skewedLocations = 71;
HiveParser.RULE_skewedLocationsList = 72;
HiveParser.RULE_skewedLocationMap = 73;
HiveParser.RULE_alterStatementSuffixLocation = 74;
HiveParser.RULE_alterStatementSuffixSkewedby = 75;
HiveParser.RULE_alterStatementSuffixExchangePartition = 76;
HiveParser.RULE_alterStatementSuffixRenamePart = 77;
HiveParser.RULE_alterStatementSuffixStatsPart = 78;
HiveParser.RULE_alterStatementSuffixMergeFiles = 79;
HiveParser.RULE_alterStatementSuffixBucketNum = 80;
HiveParser.RULE_createIndexStatement = 81;
HiveParser.RULE_createIndexMainStatement = 82;
HiveParser.RULE_dropIndexStatement = 83;
HiveParser.RULE_createBloomfilterIndexStatement = 84;
HiveParser.RULE_createBloomfilterIndexMainStatement = 85;
HiveParser.RULE_bloomfilterColumnParenthesesList = 86;
HiveParser.RULE_bloomfilterColumnNameList = 87;
HiveParser.RULE_bloomfilterColumnName = 88;
HiveParser.RULE_bloomfilterIndexOptions = 89;
HiveParser.RULE_dropBloomfilterIndexStatement = 90;
HiveParser.RULE_dropBloomfilterIndexMainStatement = 91;
HiveParser.RULE_tablePartitionPrefix = 92;
HiveParser.RULE_blocking = 93;
HiveParser.RULE_alterStatementSuffixCompact = 94;
HiveParser.RULE_alterStatementSuffixSetOwner = 95;
HiveParser.RULE_fileFormat = 96;
HiveParser.RULE_inputFileFormat = 97;
HiveParser.RULE_tabTypeExpr = 98;
HiveParser.RULE_partTypeExpr = 99;
HiveParser.RULE_tabPartColTypeExpr = 100;
HiveParser.RULE_descStatement = 101;
HiveParser.RULE_analyzeStatement = 102;
HiveParser.RULE_showStatement = 103;
HiveParser.RULE_lockStatement = 104;
HiveParser.RULE_lockDatabase = 105;
HiveParser.RULE_lockMode = 106;
HiveParser.RULE_unlockStatement = 107;
HiveParser.RULE_unlockDatabase = 108;
HiveParser.RULE_createRoleStatement = 109;
HiveParser.RULE_dropRoleStatement = 110;
HiveParser.RULE_grantPrivileges = 111;
HiveParser.RULE_revokePrivileges = 112;
HiveParser.RULE_grantRole = 113;
HiveParser.RULE_revokeRole = 114;
HiveParser.RULE_showRoleGrants = 115;
HiveParser.RULE_showRoles = 116;
HiveParser.RULE_showCurrentRole = 117;
HiveParser.RULE_setRole = 118;
HiveParser.RULE_showGrants = 119;
HiveParser.RULE_showRolePrincipals = 120;
HiveParser.RULE_privilegeIncludeColObject = 121;
HiveParser.RULE_privilegeObject = 122;
HiveParser.RULE_privObject = 123;
HiveParser.RULE_privObjectCols = 124;
HiveParser.RULE_privilegeList = 125;
HiveParser.RULE_privlegeDef = 126;
HiveParser.RULE_privilegeType = 127;
HiveParser.RULE_principalSpecification = 128;
HiveParser.RULE_principalName = 129;
HiveParser.RULE_withGrantOption = 130;
HiveParser.RULE_grantOptionFor = 131;
HiveParser.RULE_adminOptionFor = 132;
HiveParser.RULE_withAdminOption = 133;
HiveParser.RULE_metastoreCheck = 134;
HiveParser.RULE_resourceList = 135;
HiveParser.RULE_resource = 136;
HiveParser.RULE_resourceType = 137;
HiveParser.RULE_createFunctionStatement = 138;
HiveParser.RULE_dropFunctionStatement = 139;
HiveParser.RULE_reloadFunctionStatement = 140;
HiveParser.RULE_createMacroStatement = 141;
HiveParser.RULE_dropMacroStatement = 142;
HiveParser.RULE_createViewStatement = 143;
HiveParser.RULE_createMaterializedViewStatement = 144;
HiveParser.RULE_viewPartition = 145;
HiveParser.RULE_dropViewStatement = 146;
HiveParser.RULE_dropMaterializedViewStatement = 147;
HiveParser.RULE_showFunctionIdentifier = 148;
HiveParser.RULE_showStmtIdentifier = 149;
HiveParser.RULE_tableComment = 150;
HiveParser.RULE_tableUsingDataSource = 151;
HiveParser.RULE_tableDataSource = 152;
HiveParser.RULE_tablePartition = 153;
HiveParser.RULE_tableBuckets = 154;
HiveParser.RULE_tableSkewed = 155;
HiveParser.RULE_rowFormat = 156;
HiveParser.RULE_recordReader = 157;
HiveParser.RULE_recordWriter = 158;
HiveParser.RULE_rowFormatSerde = 159;
HiveParser.RULE_rowFormatDelimited = 160;
HiveParser.RULE_tableRowFormat = 161;
HiveParser.RULE_tableOptions = 162;
HiveParser.RULE_tablePropertiesPrefixed = 163;
HiveParser.RULE_tableProperties = 164;
HiveParser.RULE_tablePropertiesList = 165;
HiveParser.RULE_keyValueProperty = 166;
HiveParser.RULE_keyValue = 167;
HiveParser.RULE_keyProperty = 168;
HiveParser.RULE_tableRowFormatFieldIdentifier = 169;
HiveParser.RULE_tableRowFormatFieldIdentifierEcapedBy = 170;
HiveParser.RULE_tableRowFormatCollItemsIdentifier = 171;
HiveParser.RULE_tableRowFormatMapKeysIdentifier = 172;
HiveParser.RULE_tableRowFormatLinesIdentifier = 173;
HiveParser.RULE_tableRowNullFormat = 174;
HiveParser.RULE_tableFileFormat = 175;
HiveParser.RULE_tableFileFormatStoredBy = 176;
HiveParser.RULE_tableFileFormatStoredAs = 177;
HiveParser.RULE_tableFileFormatStoredAsFormat = 178;
HiveParser.RULE_tableInputOutputFileFormat = 179;
HiveParser.RULE_tableInputLiteral = 180;
HiveParser.RULE_tableOutputLiteral = 181;
HiveParser.RULE_tableLocation = 182;
HiveParser.RULE_columnNameTypeList = 183;
HiveParser.RULE_columnNameTypeOrConstraintList = 184;
HiveParser.RULE_columnNameColonTypeList = 185;
HiveParser.RULE_columnNameList = 186;
HiveParser.RULE_columnName = 187;
HiveParser.RULE_extColumnName = 188;
HiveParser.RULE_columnNameOrderList = 189;
HiveParser.RULE_columnParenthesesList = 190;
HiveParser.RULE_enableValidateSpecification = 191;
HiveParser.RULE_enableSpecification = 192;
HiveParser.RULE_validateSpecification = 193;
HiveParser.RULE_enforcedSpecification = 194;
HiveParser.RULE_relySpecification = 195;
HiveParser.RULE_createConstraint = 196;
HiveParser.RULE_alterConstraintWithName = 197;
HiveParser.RULE_tableLevelConstraint = 198;
HiveParser.RULE_pkUkConstraint = 199;
HiveParser.RULE_checkConstraint = 200;
HiveParser.RULE_createForeignKey = 201;
HiveParser.RULE_alterForeignKeyWithName = 202;
HiveParser.RULE_skewedValueElement = 203;
HiveParser.RULE_skewedColumnValuePairList = 204;
HiveParser.RULE_skewedColumnValuePair = 205;
HiveParser.RULE_skewedColumnValues = 206;
HiveParser.RULE_skewedColumnValue = 207;
HiveParser.RULE_skewedValueLocationElement = 208;
HiveParser.RULE_orderSpecification = 209;
HiveParser.RULE_nullOrdering = 210;
HiveParser.RULE_columnNameOrder = 211;
HiveParser.RULE_columnNameCommentList = 212;
HiveParser.RULE_columnNameComment = 213;
HiveParser.RULE_columnRefOrder = 214;
HiveParser.RULE_columnNameType = 215;
HiveParser.RULE_columnNameTypeOrConstraint = 216;
HiveParser.RULE_tableConstraint = 217;
HiveParser.RULE_columnNameTypeConstraint = 218;
HiveParser.RULE_columnGeneratedAs = 219;
HiveParser.RULE_generatedAsExpression = 220;
HiveParser.RULE_generatedAsIdentity = 221;
HiveParser.RULE_partitionedColumnNameTypeConstraint = 222;
HiveParser.RULE_columnConstraint = 223;
HiveParser.RULE_foreignKeyConstraint = 224;
HiveParser.RULE_colConstraint = 225;
HiveParser.RULE_alterColumnConstraint = 226;
HiveParser.RULE_alterForeignKeyConstraint = 227;
HiveParser.RULE_alterColConstraint = 228;
HiveParser.RULE_columnConstraintType = 229;
HiveParser.RULE_defaultVal = 230;
HiveParser.RULE_tableConstraintType = 231;
HiveParser.RULE_constraintOptsCreate = 232;
HiveParser.RULE_constraintOptsAlter = 233;
HiveParser.RULE_columnNameColonType = 234;
HiveParser.RULE_colType = 235;
HiveParser.RULE_colTypeList = 236;
HiveParser.RULE_type_db_col = 237;
HiveParser.RULE_primitiveType = 238;
HiveParser.RULE_listType = 239;
HiveParser.RULE_structType = 240;
HiveParser.RULE_mapType = 241;
HiveParser.RULE_unionType = 242;
HiveParser.RULE_setOperator = 243;
HiveParser.RULE_queryStatementExpression = 244;
HiveParser.RULE_queryStatementExpressionBody = 245;
HiveParser.RULE_withClause = 246;
HiveParser.RULE_cteStatement = 247;
HiveParser.RULE_fromStatement = 248;
HiveParser.RULE_singleFromStatement = 249;
HiveParser.RULE_regularBody = 250;
HiveParser.RULE_atomSelectStatement = 251;
HiveParser.RULE_selectStatement = 252;
HiveParser.RULE_setOpSelectStatement = 253;
HiveParser.RULE_selectStatementWithCTE = 254;
HiveParser.RULE_body = 255;
HiveParser.RULE_insertClause = 256;
HiveParser.RULE_destination = 257;
HiveParser.RULE_limitClause = 258;
HiveParser.RULE_deleteStatement = 259;
HiveParser.RULE_columnAssignmentClause = 260;
HiveParser.RULE_setColumnsClause = 261;
HiveParser.RULE_updateStatement = 262;
HiveParser.RULE_sqlTransactionStatement = 263;
HiveParser.RULE_startTransactionStatement = 264;
HiveParser.RULE_transactionMode = 265;
HiveParser.RULE_transactionAccessMode = 266;
HiveParser.RULE_isolationLevel = 267;
HiveParser.RULE_levelOfIsolation = 268;
HiveParser.RULE_commitStatement = 269;
HiveParser.RULE_rollbackStatement = 270;
HiveParser.RULE_setAutoCommitStatement = 271;
HiveParser.RULE_abortTransactionStatement = 272;
HiveParser.RULE_mergeStatement = 273;
HiveParser.RULE_whenClauses = 274;
HiveParser.RULE_whenNotMatchedClause = 275;
HiveParser.RULE_whenMatchedAndClause = 276;
HiveParser.RULE_whenMatchedThenClause = 277;
HiveParser.RULE_updateOrDelete = 278;
HiveParser.RULE_killQueryStatement = 279;
HiveParser.RULE_selectClause = 280;
HiveParser.RULE_selectList = 281;
HiveParser.RULE_selectTrfmClause = 282;
HiveParser.RULE_selectItem = 283;
HiveParser.RULE_trfmClause = 284;
HiveParser.RULE_selectExpression = 285;
HiveParser.RULE_selectExpressionList = 286;
HiveParser.RULE_window_clause = 287;
HiveParser.RULE_window_defn = 288;
HiveParser.RULE_window_specification = 289;
HiveParser.RULE_window_frame = 290;
HiveParser.RULE_window_range_expression = 291;
HiveParser.RULE_window_value_expression = 292;
HiveParser.RULE_window_frame_start_boundary = 293;
HiveParser.RULE_window_frame_boundary = 294;
HiveParser.RULE_tableAllColumns = 295;
HiveParser.RULE_tableOrColumn = 296;
HiveParser.RULE_expressionList = 297;
HiveParser.RULE_aliasList = 298;
HiveParser.RULE_fromClause = 299;
HiveParser.RULE_fromSource = 300;
HiveParser.RULE_atomjoinSource = 301;
HiveParser.RULE_joinSource = 302;
HiveParser.RULE_joinSourcePart = 303;
HiveParser.RULE_uniqueJoinSource = 304;
HiveParser.RULE_uniqueJoinExpr = 305;
HiveParser.RULE_uniqueJoinToken = 306;
HiveParser.RULE_joinToken = 307;
HiveParser.RULE_lateralView = 308;
HiveParser.RULE_tableAlias = 309;
HiveParser.RULE_tableBucketSample = 310;
HiveParser.RULE_splitSample = 311;
HiveParser.RULE_tableSample = 312;
HiveParser.RULE_tableSource = 313;
HiveParser.RULE_uniqueJoinTableSource = 314;
HiveParser.RULE_tableName = 315;
HiveParser.RULE_viewName = 316;
HiveParser.RULE_subQuerySource = 317;
HiveParser.RULE_partitioningSpec = 318;
HiveParser.RULE_partitionTableFunctionSource = 319;
HiveParser.RULE_partitionedTableFunction = 320;
HiveParser.RULE_whereClause = 321;
HiveParser.RULE_searchCondition = 322;
HiveParser.RULE_valuesClause = 323;
HiveParser.RULE_valuesTableConstructor = 324;
HiveParser.RULE_valueRowConstructor = 325;
HiveParser.RULE_virtualTableSource = 326;
HiveParser.RULE_groupByClause = 327;
HiveParser.RULE_groupby_expression = 328;
HiveParser.RULE_groupByEmpty = 329;
HiveParser.RULE_rollupStandard = 330;
HiveParser.RULE_rollupOldSyntax = 331;
HiveParser.RULE_groupingSetExpression = 332;
HiveParser.RULE_groupingSetExpressionMultiple = 333;
HiveParser.RULE_groupingExpressionSingle = 334;
HiveParser.RULE_havingClause = 335;
HiveParser.RULE_havingCondition = 336;
HiveParser.RULE_expressionsInParenthesis = 337;
HiveParser.RULE_expressionsNotInParenthesis = 338;
HiveParser.RULE_expressionPart = 339;
HiveParser.RULE_expressions = 340;
HiveParser.RULE_columnRefOrderInParenthesis = 341;
HiveParser.RULE_columnRefOrderNotInParenthesis = 342;
HiveParser.RULE_orderByClause = 343;
HiveParser.RULE_clusterByClause = 344;
HiveParser.RULE_partitionByClause = 345;
HiveParser.RULE_distributeByClause = 346;
HiveParser.RULE_sortByClause = 347;
HiveParser.RULE_functionStatement = 348;
HiveParser.RULE_functionName = 349;
HiveParser.RULE_castExpression = 350;
HiveParser.RULE_caseExpression = 351;
HiveParser.RULE_whenExpression = 352;
HiveParser.RULE_floorExpression = 353;
HiveParser.RULE_floorDateQualifiers = 354;
HiveParser.RULE_extractExpression = 355;
HiveParser.RULE_timeQualifiers = 356;
HiveParser.RULE_constant = 357;
HiveParser.RULE_stringLiteralSequence = 358;
HiveParser.RULE_charSetStringLiteral = 359;
HiveParser.RULE_dateLiteral = 360;
HiveParser.RULE_timestampLiteral = 361;
HiveParser.RULE_timestampLocalTZLiteral = 362;
HiveParser.RULE_intervalValue = 363;
HiveParser.RULE_intervalLiteral = 364;
HiveParser.RULE_intervalExpression = 365;
HiveParser.RULE_intervalQualifiers = 366;
HiveParser.RULE_atomExpression = 367;
HiveParser.RULE_precedenceUnaryOperator = 368;
HiveParser.RULE_isCondition = 369;
HiveParser.RULE_precedenceBitwiseXorOperator = 370;
HiveParser.RULE_precedenceStarOperator = 371;
HiveParser.RULE_precedencePlusOperator = 372;
HiveParser.RULE_precedenceConcatenateOperator = 373;
HiveParser.RULE_precedenceAmpersandOperator = 374;
HiveParser.RULE_precedenceBitwiseOrOperator = 375;
HiveParser.RULE_precedenceRegexpOperator = 376;
HiveParser.RULE_precedenceSimilarOperator = 377;
HiveParser.RULE_precedenceDistinctOperator = 378;
HiveParser.RULE_precedenceEqualOperator = 379;
HiveParser.RULE_precedenceNotOperator = 380;
HiveParser.RULE_precedenceAndOperator = 381;
HiveParser.RULE_precedenceOrOperator = 382;
HiveParser.RULE_expression = 383;
HiveParser.RULE_subQueryExpression = 384;
HiveParser.RULE_precedenceSimilarExpressionPart = 385;
HiveParser.RULE_precedenceSimilarExpressionAtom = 386;
HiveParser.RULE_precedenceSimilarExpressionIn = 387;
HiveParser.RULE_precedenceSimilarExpressionPartNot = 388;
HiveParser.RULE_booleanValue = 389;
HiveParser.RULE_booleanValueTok = 390;
HiveParser.RULE_tableOrPartition = 391;
HiveParser.RULE_partitionSpec = 392;
HiveParser.RULE_partitionVal = 393;
HiveParser.RULE_dropPartitionSpec = 394;
HiveParser.RULE_dropPartitionVal = 395;
HiveParser.RULE_dropPartitionOperator = 396;
HiveParser.RULE_sysFuncNames = 397;
HiveParser.RULE_descFuncNames = 398;
HiveParser.RULE_identifier = 399;
HiveParser.RULE_functionIdentifier = 400;
HiveParser.RULE_principalIdentifier = 401;
HiveParser.RULE_nonReserved = 402;
HiveParser.RULE_sql11ReservedKeywordsUsedAsFunctionName = 403;
HiveParser.RULE_databricksAllowedReservedNames = 404;
HiveParser.RULE_resourcePlanDdlStatements = 405;
HiveParser.RULE_rpAssign = 406;
HiveParser.RULE_rpAssignList = 407;
HiveParser.RULE_rpUnassign = 408;
HiveParser.RULE_rpUnassignList = 409;
HiveParser.RULE_createResourcePlanStatement = 410;
HiveParser.RULE_createResourcePlanStatementLikeExisting = 411;
HiveParser.RULE_createNewResourcePlanStatement = 412;
HiveParser.RULE_withReplace = 413;
HiveParser.RULE_activate = 414;
HiveParser.RULE_enable = 415;
HiveParser.RULE_disable = 416;
HiveParser.RULE_unmanaged = 417;
HiveParser.RULE_alterResourcePlanStatement = 418;
HiveParser.RULE_alterResourcePlanRenameSuffix = 419;
HiveParser.RULE_globalWmStatement = 420;
HiveParser.RULE_replaceResourcePlanStatement = 421;
HiveParser.RULE_dropResourcePlanStatement = 422;
HiveParser.RULE_poolPath = 423;
HiveParser.RULE_triggerExpression = 424;
HiveParser.RULE_triggerExpressionStandalone = 425;
HiveParser.RULE_triggerOrExpression = 426;
HiveParser.RULE_triggerAndExpression = 427;
HiveParser.RULE_triggerAtomExpression = 428;
HiveParser.RULE_triggerLiteral = 429;
HiveParser.RULE_comparisionOperator = 430;
HiveParser.RULE_triggerActionExpression = 431;
HiveParser.RULE_triggerActionExpressionStandalone = 432;
HiveParser.RULE_createTriggerStatement = 433;
HiveParser.RULE_alterTriggerStatement = 434;
HiveParser.RULE_triggerConditionExpression = 435;
HiveParser.RULE_dropTriggerStatement = 436;
HiveParser.RULE_poolAssign = 437;
HiveParser.RULE_poolAssignList = 438;
HiveParser.RULE_createPoolStatement = 439;
HiveParser.RULE_alterPoolStatement = 440;
HiveParser.RULE_dropPoolStatement = 441;
HiveParser.RULE_createMappingStatement = 442;
HiveParser.RULE_alterMappingStatement = 443;
HiveParser.RULE_dropMappingStatement = 444;

class StatementsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_statements;
  }

  EOF() {
    return this.getToken(HiveParser.EOF, 0);
  }

  statement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(StatementContext);
    } else {
      return this.getTypedRuleContext(StatementContext, i);
    }
  };

  statementSeparator = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(StatementSeparatorContext);
    } else {
      return this.getTypedRuleContext(StatementSeparatorContext, i);
    }
  };

  empty = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(EmptyContext);
    } else {
      return this.getTypedRuleContext(EmptyContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitStatements(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class StatementSeparatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_statementSeparator;
  }

  SEMICOLON() {
    return this.getToken(HiveParser.SEMICOLON, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitStatementSeparator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EmptyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_empty;
  }

  statementSeparator() {
    return this.getTypedRuleContext(StatementSeparatorContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitEmpty(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class StatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_statement;
  }

  explainStatement() {
    return this.getTypedRuleContext(ExplainStatementContext, 0);
  }

  execStatement() {
    return this.getTypedRuleContext(ExecStatementContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ExplainStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_explainStatement;
  }

  KW_EXPLAIN() {
    return this.getToken(HiveParser.KW_EXPLAIN, 0);
  }

  execStatement() {
    return this.getTypedRuleContext(ExecStatementContext, 0);
  }

  KW_REWRITE() {
    return this.getToken(HiveParser.KW_REWRITE, 0);
  }

  queryStatementExpression() {
    return this.getTypedRuleContext(QueryStatementExpressionContext, 0);
  }

  explainOption = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExplainOptionContext);
    } else {
      return this.getTypedRuleContext(ExplainOptionContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitExplainStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ExplainOptionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_explainOption;
  }

  KW_EXTENDED() {
    return this.getToken(HiveParser.KW_EXTENDED, 0);
  }

  KW_FORMATTED() {
    return this.getToken(HiveParser.KW_FORMATTED, 0);
  }

  KW_DEPENDENCY() {
    return this.getToken(HiveParser.KW_DEPENDENCY, 0);
  }

  KW_LOGICAL() {
    return this.getToken(HiveParser.KW_LOGICAL, 0);
  }

  KW_AUTHORIZATION() {
    return this.getToken(HiveParser.KW_AUTHORIZATION, 0);
  }

  KW_ANALYZE() {
    return this.getToken(HiveParser.KW_ANALYZE, 0);
  }

  KW_REOPTIMIZATION() {
    return this.getToken(HiveParser.KW_REOPTIMIZATION, 0);
  }

  KW_VECTORIZATION() {
    return this.getToken(HiveParser.KW_VECTORIZATION, 0);
  }

  vectorizationOnly() {
    return this.getTypedRuleContext(VectorizationOnlyContext, 0);
  }

  vectorizatonDetail() {
    return this.getTypedRuleContext(VectorizatonDetailContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitExplainOption(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class VectorizationOnlyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_vectorizationOnly;
  }

  KW_ONLY() {
    return this.getToken(HiveParser.KW_ONLY, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitVectorizationOnly(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class VectorizatonDetailContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_vectorizatonDetail;
  }

  KW_SUMMARY() {
    return this.getToken(HiveParser.KW_SUMMARY, 0);
  }

  KW_OPERATOR() {
    return this.getToken(HiveParser.KW_OPERATOR, 0);
  }

  KW_EXPRESSION() {
    return this.getToken(HiveParser.KW_EXPRESSION, 0);
  }

  KW_DETAIL() {
    return this.getToken(HiveParser.KW_DETAIL, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitVectorizatonDetail(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ExecStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_execStatement;
  }

  queryStatementExpression() {
    return this.getTypedRuleContext(QueryStatementExpressionContext, 0);
  }

  loadStatement() {
    return this.getTypedRuleContext(LoadStatementContext, 0);
  }

  exportStatement() {
    return this.getTypedRuleContext(ExportStatementContext, 0);
  }

  importStatement() {
    return this.getTypedRuleContext(ImportStatementContext, 0);
  }

  replDumpStatement() {
    return this.getTypedRuleContext(ReplDumpStatementContext, 0);
  }

  replLoadStatement() {
    return this.getTypedRuleContext(ReplLoadStatementContext, 0);
  }

  replStatusStatement() {
    return this.getTypedRuleContext(ReplStatusStatementContext, 0);
  }

  ddlStatement() {
    return this.getTypedRuleContext(DdlStatementContext, 0);
  }

  deleteStatement() {
    return this.getTypedRuleContext(DeleteStatementContext, 0);
  }

  updateStatement() {
    return this.getTypedRuleContext(UpdateStatementContext, 0);
  }

  sqlTransactionStatement() {
    return this.getTypedRuleContext(SqlTransactionStatementContext, 0);
  }

  mergeStatement() {
    return this.getTypedRuleContext(MergeStatementContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitExecStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class LoadStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_loadStatement;
  }

  KW_LOAD() {
    return this.getToken(HiveParser.KW_LOAD, 0);
  }

  KW_DATA() {
    return this.getToken(HiveParser.KW_DATA, 0);
  }

  KW_INPATH() {
    return this.getToken(HiveParser.KW_INPATH, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  KW_INTO() {
    return this.getToken(HiveParser.KW_INTO, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  tableOrPartition() {
    return this.getTypedRuleContext(TableOrPartitionContext, 0);
  }

  KW_LOCAL() {
    return this.getToken(HiveParser.KW_LOCAL, 0);
  }

  KW_OVERWRITE() {
    return this.getToken(HiveParser.KW_OVERWRITE, 0);
  }

  inputFileFormat() {
    return this.getTypedRuleContext(InputFileFormatContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitLoadStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ReplicationClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_replicationClause;
  }

  KW_FOR() {
    return this.getToken(HiveParser.KW_FOR, 0);
  }

  KW_REPLICATION() {
    return this.getToken(HiveParser.KW_REPLICATION, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  KW_METADATA() {
    return this.getToken(HiveParser.KW_METADATA, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitReplicationClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ExportStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_exportStatement;
  }

  KW_EXPORT() {
    return this.getToken(HiveParser.KW_EXPORT, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  tableOrPartition() {
    return this.getTypedRuleContext(TableOrPartitionContext, 0);
  }

  KW_TO() {
    return this.getToken(HiveParser.KW_TO, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  replicationClause() {
    return this.getTypedRuleContext(ReplicationClauseContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitExportStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ImportStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_importStatement;
    this.path = null; // Token
  }

  KW_IMPORT() {
    return this.getToken(HiveParser.KW_IMPORT, 0);
  }

  KW_FROM() {
    return this.getToken(HiveParser.KW_FROM, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  tableOrPartition() {
    return this.getTypedRuleContext(TableOrPartitionContext, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  tableLocation() {
    return this.getTypedRuleContext(TableLocationContext, 0);
  }

  KW_EXTERNAL() {
    return this.getToken(HiveParser.KW_EXTERNAL, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitImportStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ReplDumpStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_replDumpStatement;
  }

  KW_REPL() {
    return this.getToken(HiveParser.KW_REPL, 0);
  }

  KW_DUMP() {
    return this.getToken(HiveParser.KW_DUMP, 0);
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  DOT() {
    return this.getToken(HiveParser.DOT, 0);
  }

  KW_FROM() {
    return this.getToken(HiveParser.KW_FROM, 0);
  }

  Number = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.Number);
    } else {
      return this.getToken(HiveParser.Number, i);
    }
  };

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  replConfigs() {
    return this.getTypedRuleContext(ReplConfigsContext, 0);
  }

  KW_TO() {
    return this.getToken(HiveParser.KW_TO, 0);
  }

  KW_LIMIT() {
    return this.getToken(HiveParser.KW_LIMIT, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitReplDumpStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ReplLoadStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_replLoadStatement;
  }

  KW_REPL() {
    return this.getToken(HiveParser.KW_REPL, 0);
  }

  KW_LOAD() {
    return this.getToken(HiveParser.KW_LOAD, 0);
  }

  KW_FROM() {
    return this.getToken(HiveParser.KW_FROM, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  replConfigs() {
    return this.getTypedRuleContext(ReplConfigsContext, 0);
  }

  DOT() {
    return this.getToken(HiveParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitReplLoadStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ReplConfigsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_replConfigs;
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  replConfigsList() {
    return this.getTypedRuleContext(ReplConfigsListContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitReplConfigs(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ReplConfigsListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_replConfigsList;
  }

  keyValueProperty = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(KeyValuePropertyContext);
    } else {
      return this.getTypedRuleContext(KeyValuePropertyContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitReplConfigsList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ReplStatusStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_replStatusStatement;
  }

  KW_REPL() {
    return this.getToken(HiveParser.KW_REPL, 0);
  }

  KW_STATUS() {
    return this.getToken(HiveParser.KW_STATUS, 0);
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  DOT() {
    return this.getToken(HiveParser.DOT, 0);
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  replConfigs() {
    return this.getTypedRuleContext(ReplConfigsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitReplStatusStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DdlStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_ddlStatement;
  }

  createDatabaseStatement() {
    return this.getTypedRuleContext(CreateDatabaseStatementContext, 0);
  }

  switchDatabaseStatement() {
    return this.getTypedRuleContext(SwitchDatabaseStatementContext, 0);
  }

  dropDatabaseStatement() {
    return this.getTypedRuleContext(DropDatabaseStatementContext, 0);
  }

  createTableStatement() {
    return this.getTypedRuleContext(CreateTableStatementContext, 0);
  }

  dropTableStatement() {
    return this.getTypedRuleContext(DropTableStatementContext, 0);
  }

  truncateTableStatement() {
    return this.getTypedRuleContext(TruncateTableStatementContext, 0);
  }

  alterStatement() {
    return this.getTypedRuleContext(AlterStatementContext, 0);
  }

  descStatement() {
    return this.getTypedRuleContext(DescStatementContext, 0);
  }

  showStatement() {
    return this.getTypedRuleContext(ShowStatementContext, 0);
  }

  metastoreCheck() {
    return this.getTypedRuleContext(MetastoreCheckContext, 0);
  }

  createViewStatement() {
    return this.getTypedRuleContext(CreateViewStatementContext, 0);
  }

  createMaterializedViewStatement() {
    return this.getTypedRuleContext(CreateMaterializedViewStatementContext, 0);
  }

  dropViewStatement() {
    return this.getTypedRuleContext(DropViewStatementContext, 0);
  }

  dropMaterializedViewStatement() {
    return this.getTypedRuleContext(DropMaterializedViewStatementContext, 0);
  }

  createFunctionStatement() {
    return this.getTypedRuleContext(CreateFunctionStatementContext, 0);
  }

  createMacroStatement() {
    return this.getTypedRuleContext(CreateMacroStatementContext, 0);
  }

  dropFunctionStatement() {
    return this.getTypedRuleContext(DropFunctionStatementContext, 0);
  }

  reloadFunctionStatement() {
    return this.getTypedRuleContext(ReloadFunctionStatementContext, 0);
  }

  dropMacroStatement() {
    return this.getTypedRuleContext(DropMacroStatementContext, 0);
  }

  analyzeStatement() {
    return this.getTypedRuleContext(AnalyzeStatementContext, 0);
  }

  lockStatement() {
    return this.getTypedRuleContext(LockStatementContext, 0);
  }

  unlockStatement() {
    return this.getTypedRuleContext(UnlockStatementContext, 0);
  }

  lockDatabase() {
    return this.getTypedRuleContext(LockDatabaseContext, 0);
  }

  unlockDatabase() {
    return this.getTypedRuleContext(UnlockDatabaseContext, 0);
  }

  createRoleStatement() {
    return this.getTypedRuleContext(CreateRoleStatementContext, 0);
  }

  dropRoleStatement() {
    return this.getTypedRuleContext(DropRoleStatementContext, 0);
  }

  grantPrivileges() {
    return this.getTypedRuleContext(GrantPrivilegesContext, 0);
  }

  revokePrivileges() {
    return this.getTypedRuleContext(RevokePrivilegesContext, 0);
  }

  showGrants() {
    return this.getTypedRuleContext(ShowGrantsContext, 0);
  }

  showRoleGrants() {
    return this.getTypedRuleContext(ShowRoleGrantsContext, 0);
  }

  showRolePrincipals() {
    return this.getTypedRuleContext(ShowRolePrincipalsContext, 0);
  }

  showRoles() {
    return this.getTypedRuleContext(ShowRolesContext, 0);
  }

  grantRole() {
    return this.getTypedRuleContext(GrantRoleContext, 0);
  }

  revokeRole() {
    return this.getTypedRuleContext(RevokeRoleContext, 0);
  }

  setRole() {
    return this.getTypedRuleContext(SetRoleContext, 0);
  }

  showCurrentRole() {
    return this.getTypedRuleContext(ShowCurrentRoleContext, 0);
  }

  abortTransactionStatement() {
    return this.getTypedRuleContext(AbortTransactionStatementContext, 0);
  }

  killQueryStatement() {
    return this.getTypedRuleContext(KillQueryStatementContext, 0);
  }

  resourcePlanDdlStatements() {
    return this.getTypedRuleContext(ResourcePlanDdlStatementsContext, 0);
  }

  createIndexStatement() {
    return this.getTypedRuleContext(CreateIndexStatementContext, 0);
  }

  dropIndexStatement() {
    return this.getTypedRuleContext(DropIndexStatementContext, 0);
  }

  createBloomfilterIndexStatement() {
    return this.getTypedRuleContext(CreateBloomfilterIndexStatementContext, 0);
  }

  dropBloomfilterIndexStatement() {
    return this.getTypedRuleContext(DropBloomfilterIndexStatementContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDdlStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IfExistsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_ifExists;
  }

  KW_IF() {
    return this.getToken(HiveParser.KW_IF, 0);
  }

  KW_EXISTS() {
    return this.getToken(HiveParser.KW_EXISTS, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitIfExists(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RestrictOrCascadeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_restrictOrCascade;
  }

  KW_RESTRICT() {
    return this.getToken(HiveParser.KW_RESTRICT, 0);
  }

  KW_CASCADE() {
    return this.getToken(HiveParser.KW_CASCADE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRestrictOrCascade(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IfNotExistsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_ifNotExists;
  }

  KW_IF() {
    return this.getToken(HiveParser.KW_IF, 0);
  }

  KW_NOT() {
    return this.getToken(HiveParser.KW_NOT, 0);
  }

  KW_EXISTS() {
    return this.getToken(HiveParser.KW_EXISTS, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitIfNotExists(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RewriteEnabledContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_rewriteEnabled;
  }

  KW_ENABLE() {
    return this.getToken(HiveParser.KW_ENABLE, 0);
  }

  KW_REWRITE() {
    return this.getToken(HiveParser.KW_REWRITE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRewriteEnabled(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RewriteDisabledContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_rewriteDisabled;
  }

  KW_DISABLE() {
    return this.getToken(HiveParser.KW_DISABLE, 0);
  }

  KW_REWRITE() {
    return this.getToken(HiveParser.KW_REWRITE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRewriteDisabled(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class StoredAsDirsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_storedAsDirs;
  }

  KW_STORED() {
    return this.getToken(HiveParser.KW_STORED, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  KW_DIRECTORIES() {
    return this.getToken(HiveParser.KW_DIRECTORIES, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitStoredAsDirs(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class OrReplaceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_orReplace;
  }

  KW_OR() {
    return this.getToken(HiveParser.KW_OR, 0);
  }

  KW_REPLACE() {
    return this.getToken(HiveParser.KW_REPLACE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitOrReplace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateDatabaseStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createDatabaseStatement;
  }

  KW_CREATE() {
    return this.getToken(HiveParser.KW_CREATE, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_DATABASE() {
    return this.getToken(HiveParser.KW_DATABASE, 0);
  }

  KW_SCHEMA() {
    return this.getToken(HiveParser.KW_SCHEMA, 0);
  }

  ifNotExists() {
    return this.getTypedRuleContext(IfNotExistsContext, 0);
  }

  databaseComment() {
    return this.getTypedRuleContext(DatabaseCommentContext, 0);
  }

  dbLocation() {
    return this.getTypedRuleContext(DbLocationContext, 0);
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  KW_DBPROPERTIES() {
    return this.getToken(HiveParser.KW_DBPROPERTIES, 0);
  }

  dbProperties() {
    return this.getTypedRuleContext(DbPropertiesContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateDatabaseStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DbLocationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dbLocation;
  }

  KW_LOCATION() {
    return this.getToken(HiveParser.KW_LOCATION, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDbLocation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DbPropertiesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dbProperties;
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  dbPropertiesList() {
    return this.getTypedRuleContext(DbPropertiesListContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDbProperties(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DbPropertiesListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dbPropertiesList;
  }

  keyValueProperty = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(KeyValuePropertyContext);
    } else {
      return this.getTypedRuleContext(KeyValuePropertyContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDbPropertiesList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SwitchDatabaseStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_switchDatabaseStatement;
  }

  KW_USE() {
    return this.getToken(HiveParser.KW_USE, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSwitchDatabaseStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropDatabaseStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dropDatabaseStatement;
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_DATABASE() {
    return this.getToken(HiveParser.KW_DATABASE, 0);
  }

  KW_SCHEMA() {
    return this.getToken(HiveParser.KW_SCHEMA, 0);
  }

  ifExists() {
    return this.getTypedRuleContext(IfExistsContext, 0);
  }

  restrictOrCascade() {
    return this.getTypedRuleContext(RestrictOrCascadeContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDropDatabaseStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DatabaseCommentContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_databaseComment;
  }

  KW_COMMENT() {
    return this.getToken(HiveParser.KW_COMMENT, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDatabaseComment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateTableStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createTableStatement;
  }

  KW_CREATE() {
    return this.getToken(HiveParser.KW_CREATE, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  tableName = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TableNameContext);
    } else {
      return this.getTypedRuleContext(TableNameContext, i);
    }
  };

  KW_LIKE() {
    return this.getToken(HiveParser.KW_LIKE, 0);
  }

  KW_TEMPORARY() {
    return this.getToken(HiveParser.KW_TEMPORARY, 0);
  }

  KW_EXTERNAL() {
    return this.getToken(HiveParser.KW_EXTERNAL, 0);
  }

  ifNotExists() {
    return this.getTypedRuleContext(IfNotExistsContext, 0);
  }

  tableRowFormat = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TableRowFormatContext);
    } else {
      return this.getTypedRuleContext(TableRowFormatContext, i);
    }
  };

  tableFileFormat = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TableFileFormatContext);
    } else {
      return this.getTypedRuleContext(TableFileFormatContext, i);
    }
  };

  tableUsingDataSource = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TableUsingDataSourceContext);
    } else {
      return this.getTypedRuleContext(TableUsingDataSourceContext, i);
    }
  };

  tableLocation = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TableLocationContext);
    } else {
      return this.getTypedRuleContext(TableLocationContext, i);
    }
  };

  tablePropertiesPrefixed = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TablePropertiesPrefixedContext);
    } else {
      return this.getTypedRuleContext(TablePropertiesPrefixedContext, i);
    }
  };

  tableOptions = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TableOptionsContext);
    } else {
      return this.getTypedRuleContext(TableOptionsContext, i);
    }
  };

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  columnNameTypeOrConstraintList() {
    return this.getTypedRuleContext(ColumnNameTypeOrConstraintListContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  tableBuckets = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TableBucketsContext);
    } else {
      return this.getTypedRuleContext(TableBucketsContext, i);
    }
  };

  tableSkewed = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TableSkewedContext);
    } else {
      return this.getTypedRuleContext(TableSkewedContext, i);
    }
  };

  tablePartition = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TablePartitionContext);
    } else {
      return this.getTypedRuleContext(TablePartitionContext, i);
    }
  };

  tableComment = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TableCommentContext);
    } else {
      return this.getTypedRuleContext(TableCommentContext, i);
    }
  };

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  selectStatementWithCTE() {
    return this.getTypedRuleContext(SelectStatementWithCTEContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateTableStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TruncateTableStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_truncateTableStatement;
  }

  KW_TRUNCATE() {
    return this.getToken(HiveParser.KW_TRUNCATE, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  tablePartitionPrefix() {
    return this.getTypedRuleContext(TablePartitionPrefixContext, 0);
  }

  KW_COLUMNS() {
    return this.getToken(HiveParser.KW_COLUMNS, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  columnNameList() {
    return this.getTypedRuleContext(ColumnNameListContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTruncateTableStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropTableStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dropTableStatement;
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  ifExists() {
    return this.getTypedRuleContext(IfExistsContext, 0);
  }

  KW_PURGE() {
    return this.getToken(HiveParser.KW_PURGE, 0);
  }

  replicationClause() {
    return this.getTypedRuleContext(ReplicationClauseContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDropTableStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatement;
  }

  KW_ALTER() {
    return this.getToken(HiveParser.KW_ALTER, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  alterTableStatementSuffix() {
    return this.getTypedRuleContext(AlterTableStatementSuffixContext, 0);
  }

  KW_VIEW() {
    return this.getToken(HiveParser.KW_VIEW, 0);
  }

  alterViewStatementSuffix() {
    return this.getTypedRuleContext(AlterViewStatementSuffixContext, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  KW_MATERIALIZED() {
    return this.getToken(HiveParser.KW_MATERIALIZED, 0);
  }

  alterMaterializedViewStatementSuffix() {
    return this.getTypedRuleContext(
      AlterMaterializedViewStatementSuffixContext,
      0
    );
  }

  alterDatabaseStatementSuffix() {
    return this.getTypedRuleContext(AlterDatabaseStatementSuffixContext, 0);
  }

  KW_DATABASE() {
    return this.getToken(HiveParser.KW_DATABASE, 0);
  }

  KW_SCHEMA() {
    return this.getToken(HiveParser.KW_SCHEMA, 0);
  }

  KW_INDEX() {
    return this.getToken(HiveParser.KW_INDEX, 0);
  }

  alterIndexStatementSuffix() {
    return this.getTypedRuleContext(AlterIndexStatementSuffixContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTableStatementSuffixContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterTableStatementSuffix;
  }

  alterStatementSuffixRename() {
    return this.getTypedRuleContext(AlterStatementSuffixRenameContext, 0);
  }

  alterStatementSuffixDropPartitions() {
    return this.getTypedRuleContext(
      AlterStatementSuffixDropPartitionsContext,
      0
    );
  }

  alterStatementSuffixAddPartitions() {
    return this.getTypedRuleContext(
      AlterStatementSuffixAddPartitionsContext,
      0
    );
  }

  alterStatementSuffixTouch() {
    return this.getTypedRuleContext(AlterStatementSuffixTouchContext, 0);
  }

  alterStatementSuffixArchive() {
    return this.getTypedRuleContext(AlterStatementSuffixArchiveContext, 0);
  }

  alterStatementSuffixUnArchive() {
    return this.getTypedRuleContext(AlterStatementSuffixUnArchiveContext, 0);
  }

  alterStatementSuffixProperties() {
    return this.getTypedRuleContext(AlterStatementSuffixPropertiesContext, 0);
  }

  alterStatementSuffixSkewedby() {
    return this.getTypedRuleContext(AlterStatementSuffixSkewedbyContext, 0);
  }

  alterStatementSuffixExchangePartition() {
    return this.getTypedRuleContext(
      AlterStatementSuffixExchangePartitionContext,
      0
    );
  }

  alterStatementPartitionKeyType() {
    return this.getTypedRuleContext(AlterStatementPartitionKeyTypeContext, 0);
  }

  alterStatementSuffixDropConstraint() {
    return this.getTypedRuleContext(
      AlterStatementSuffixDropConstraintContext,
      0
    );
  }

  alterStatementSuffixAddConstraint() {
    return this.getTypedRuleContext(
      AlterStatementSuffixAddConstraintContext,
      0
    );
  }

  alterTblPartitionStatementSuffix() {
    return this.getTypedRuleContext(AlterTblPartitionStatementSuffixContext, 0);
  }

  partitionSpec() {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
  }

  alterStatementSuffixSetOwner() {
    return this.getTypedRuleContext(AlterStatementSuffixSetOwnerContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterTableStatementSuffix(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTblPartitionStatementSuffixContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterTblPartitionStatementSuffix;
  }

  alterStatementSuffixFileFormat() {
    return this.getTypedRuleContext(AlterStatementSuffixFileFormatContext, 0);
  }

  alterStatementSuffixLocation() {
    return this.getTypedRuleContext(AlterStatementSuffixLocationContext, 0);
  }

  alterStatementSuffixMergeFiles() {
    return this.getTypedRuleContext(AlterStatementSuffixMergeFilesContext, 0);
  }

  alterStatementSuffixSerdeProperties() {
    return this.getTypedRuleContext(
      AlterStatementSuffixSerdePropertiesContext,
      0
    );
  }

  alterStatementSuffixRenamePart() {
    return this.getTypedRuleContext(AlterStatementSuffixRenamePartContext, 0);
  }

  alterStatementSuffixBucketNum() {
    return this.getTypedRuleContext(AlterStatementSuffixBucketNumContext, 0);
  }

  alterTblPartitionStatementSuffixSkewedLocation() {
    return this.getTypedRuleContext(
      AlterTblPartitionStatementSuffixSkewedLocationContext,
      0
    );
  }

  alterStatementSuffixClusterbySortby() {
    return this.getTypedRuleContext(
      AlterStatementSuffixClusterbySortbyContext,
      0
    );
  }

  alterStatementSuffixCompact() {
    return this.getTypedRuleContext(AlterStatementSuffixCompactContext, 0);
  }

  alterStatementSuffixUpdateStatsCol() {
    return this.getTypedRuleContext(
      AlterStatementSuffixUpdateStatsColContext,
      0
    );
  }

  alterStatementSuffixUpdateStats() {
    return this.getTypedRuleContext(AlterStatementSuffixUpdateStatsContext, 0);
  }

  alterStatementSuffixRenameCol() {
    return this.getTypedRuleContext(AlterStatementSuffixRenameColContext, 0);
  }

  alterStatementSuffixAddCol() {
    return this.getTypedRuleContext(AlterStatementSuffixAddColContext, 0);
  }

  alterStatementSuffixUpdateColumns() {
    return this.getTypedRuleContext(
      AlterStatementSuffixUpdateColumnsContext,
      0
    );
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterTblPartitionStatementSuffix(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementPartitionKeyTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementPartitionKeyType;
  }

  KW_PARTITION() {
    return this.getToken(HiveParser.KW_PARTITION, 0);
  }

  KW_COLUMN() {
    return this.getToken(HiveParser.KW_COLUMN, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  columnNameType() {
    return this.getTypedRuleContext(ColumnNameTypeContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementPartitionKeyType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterViewStatementSuffixContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterViewStatementSuffix;
  }

  alterViewSuffixProperties() {
    return this.getTypedRuleContext(AlterViewSuffixPropertiesContext, 0);
  }

  alterStatementSuffixRename() {
    return this.getTypedRuleContext(AlterStatementSuffixRenameContext, 0);
  }

  alterStatementSuffixAddPartitions() {
    return this.getTypedRuleContext(
      AlterStatementSuffixAddPartitionsContext,
      0
    );
  }

  alterStatementSuffixDropPartitions() {
    return this.getTypedRuleContext(
      AlterStatementSuffixDropPartitionsContext,
      0
    );
  }

  selectStatementWithCTE() {
    return this.getTypedRuleContext(SelectStatementWithCTEContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterViewStatementSuffix(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterMaterializedViewStatementSuffixContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterMaterializedViewStatementSuffix;
  }

  alterMaterializedViewSuffixRewrite() {
    return this.getTypedRuleContext(
      AlterMaterializedViewSuffixRewriteContext,
      0
    );
  }

  alterMaterializedViewSuffixRebuild() {
    return this.getTypedRuleContext(
      AlterMaterializedViewSuffixRebuildContext,
      0
    );
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterMaterializedViewStatementSuffix(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterDatabaseStatementSuffixContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterDatabaseStatementSuffix;
  }

  alterDatabaseSuffixProperties() {
    return this.getTypedRuleContext(AlterDatabaseSuffixPropertiesContext, 0);
  }

  alterDatabaseSuffixSetOwner() {
    return this.getTypedRuleContext(AlterDatabaseSuffixSetOwnerContext, 0);
  }

  alterDatabaseSuffixSetLocation() {
    return this.getTypedRuleContext(AlterDatabaseSuffixSetLocationContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterDatabaseStatementSuffix(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterDatabaseSuffixPropertiesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterDatabaseSuffixProperties;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  KW_DBPROPERTIES() {
    return this.getToken(HiveParser.KW_DBPROPERTIES, 0);
  }

  dbProperties() {
    return this.getTypedRuleContext(DbPropertiesContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterDatabaseSuffixProperties(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterDatabaseSuffixSetOwnerContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterDatabaseSuffixSetOwner;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  KW_OWNER() {
    return this.getToken(HiveParser.KW_OWNER, 0);
  }

  principalName() {
    return this.getTypedRuleContext(PrincipalNameContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterDatabaseSuffixSetOwner(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterDatabaseSuffixSetLocationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterDatabaseSuffixSetLocation;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  KW_LOCATION() {
    return this.getToken(HiveParser.KW_LOCATION, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterDatabaseSuffixSetLocation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixRenameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixRename;
  }

  KW_RENAME() {
    return this.getToken(HiveParser.KW_RENAME, 0);
  }

  KW_TO() {
    return this.getToken(HiveParser.KW_TO, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixRename(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixAddColContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixAddCol;
  }

  KW_COLUMNS() {
    return this.getToken(HiveParser.KW_COLUMNS, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  columnNameTypeList() {
    return this.getTypedRuleContext(ColumnNameTypeListContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  KW_ADD() {
    return this.getToken(HiveParser.KW_ADD, 0);
  }

  KW_REPLACE() {
    return this.getToken(HiveParser.KW_REPLACE, 0);
  }

  restrictOrCascade() {
    return this.getTypedRuleContext(RestrictOrCascadeContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixAddCol(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixAddConstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixAddConstraint;
  }

  KW_ADD() {
    return this.getToken(HiveParser.KW_ADD, 0);
  }

  alterForeignKeyWithName() {
    return this.getTypedRuleContext(AlterForeignKeyWithNameContext, 0);
  }

  alterConstraintWithName() {
    return this.getTypedRuleContext(AlterConstraintWithNameContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixAddConstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixUpdateColumnsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixUpdateColumns;
  }

  KW_UPDATE() {
    return this.getToken(HiveParser.KW_UPDATE, 0);
  }

  KW_COLUMNS() {
    return this.getToken(HiveParser.KW_COLUMNS, 0);
  }

  restrictOrCascade() {
    return this.getTypedRuleContext(RestrictOrCascadeContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixUpdateColumns(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixDropConstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixDropConstraint;
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  KW_CONSTRAINT() {
    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixDropConstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixRenameColContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixRenameCol;
  }

  KW_CHANGE() {
    return this.getToken(HiveParser.KW_CHANGE, 0);
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  colType() {
    return this.getTypedRuleContext(ColTypeContext, 0);
  }

  KW_COLUMN() {
    return this.getToken(HiveParser.KW_COLUMN, 0);
  }

  alterColumnConstraint() {
    return this.getTypedRuleContext(AlterColumnConstraintContext, 0);
  }

  KW_COMMENT() {
    return this.getToken(HiveParser.KW_COMMENT, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  alterStatementChangeColPosition() {
    return this.getTypedRuleContext(AlterStatementChangeColPositionContext, 0);
  }

  restrictOrCascade() {
    return this.getTypedRuleContext(RestrictOrCascadeContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixRenameCol(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixUpdateStatsColContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixUpdateStatsCol;
  }

  KW_UPDATE() {
    return this.getToken(HiveParser.KW_UPDATE, 0);
  }

  KW_STATISTICS() {
    return this.getToken(HiveParser.KW_STATISTICS, 0);
  }

  KW_FOR() {
    return this.getToken(HiveParser.KW_FOR, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  tableProperties() {
    return this.getTypedRuleContext(TablePropertiesContext, 0);
  }

  KW_COLUMN() {
    return this.getToken(HiveParser.KW_COLUMN, 0);
  }

  KW_COMMENT() {
    return this.getToken(HiveParser.KW_COMMENT, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixUpdateStatsCol(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixUpdateStatsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixUpdateStats;
  }

  KW_UPDATE() {
    return this.getToken(HiveParser.KW_UPDATE, 0);
  }

  KW_STATISTICS() {
    return this.getToken(HiveParser.KW_STATISTICS, 0);
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  tableProperties() {
    return this.getTypedRuleContext(TablePropertiesContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixUpdateStats(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementChangeColPositionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementChangeColPosition;
    this.first = null; // Token
  }

  KW_FIRST() {
    return this.getToken(HiveParser.KW_FIRST, 0);
  }

  KW_AFTER() {
    return this.getToken(HiveParser.KW_AFTER, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementChangeColPosition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixAddPartitionsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixAddPartitions;
  }

  KW_ADD() {
    return this.getToken(HiveParser.KW_ADD, 0);
  }

  ifNotExists() {
    return this.getTypedRuleContext(IfNotExistsContext, 0);
  }

  alterStatementSuffixAddPartitionsElement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(
        AlterStatementSuffixAddPartitionsElementContext
      );
    } else {
      return this.getTypedRuleContext(
        AlterStatementSuffixAddPartitionsElementContext,
        i
      );
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixAddPartitions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixAddPartitionsElementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixAddPartitionsElement;
  }

  partitionSpec() {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
  }

  partitionLocation() {
    return this.getTypedRuleContext(PartitionLocationContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixAddPartitionsElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixTouchContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixTouch;
  }

  KW_TOUCH() {
    return this.getToken(HiveParser.KW_TOUCH, 0);
  }

  partitionSpec = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PartitionSpecContext);
    } else {
      return this.getTypedRuleContext(PartitionSpecContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixTouch(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixArchiveContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixArchive;
  }

  KW_ARCHIVE() {
    return this.getToken(HiveParser.KW_ARCHIVE, 0);
  }

  partitionSpec = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PartitionSpecContext);
    } else {
      return this.getTypedRuleContext(PartitionSpecContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixArchive(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixUnArchiveContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixUnArchive;
  }

  KW_UNARCHIVE() {
    return this.getToken(HiveParser.KW_UNARCHIVE, 0);
  }

  partitionSpec = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PartitionSpecContext);
    } else {
      return this.getTypedRuleContext(PartitionSpecContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixUnArchive(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PartitionLocationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_partitionLocation;
  }

  KW_LOCATION() {
    return this.getToken(HiveParser.KW_LOCATION, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPartitionLocation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixDropPartitionsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixDropPartitions;
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  dropPartitionSpec = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DropPartitionSpecContext);
    } else {
      return this.getTypedRuleContext(DropPartitionSpecContext, i);
    }
  };

  ifExists() {
    return this.getTypedRuleContext(IfExistsContext, 0);
  }

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  KW_PURGE() {
    return this.getToken(HiveParser.KW_PURGE, 0);
  }

  replicationClause() {
    return this.getTypedRuleContext(ReplicationClauseContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixDropPartitions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixPropertiesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixProperties;
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  KW_TBLPROPERTIES() {
    return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
  }

  tableProperties() {
    return this.getTypedRuleContext(TablePropertiesContext, 0);
  }

  KW_UNSET() {
    return this.getToken(HiveParser.KW_UNSET, 0);
  }

  ifExists() {
    return this.getTypedRuleContext(IfExistsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixProperties(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterViewSuffixPropertiesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterViewSuffixProperties;
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  KW_TBLPROPERTIES() {
    return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
  }

  tableProperties() {
    return this.getTypedRuleContext(TablePropertiesContext, 0);
  }

  KW_UNSET() {
    return this.getToken(HiveParser.KW_UNSET, 0);
  }

  ifExists() {
    return this.getTypedRuleContext(IfExistsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterViewSuffixProperties(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterMaterializedViewSuffixRewriteContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterMaterializedViewSuffixRewrite;
  }

  rewriteEnabled() {
    return this.getTypedRuleContext(RewriteEnabledContext, 0);
  }

  rewriteDisabled() {
    return this.getTypedRuleContext(RewriteDisabledContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterMaterializedViewSuffixRewrite(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterMaterializedViewSuffixRebuildContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterMaterializedViewSuffixRebuild;
  }

  KW_REBUILD() {
    return this.getToken(HiveParser.KW_REBUILD, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterMaterializedViewSuffixRebuild(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixSerdePropertiesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixSerdeProperties;
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  KW_SERDE() {
    return this.getToken(HiveParser.KW_SERDE, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  KW_SERDEPROPERTIES() {
    return this.getToken(HiveParser.KW_SERDEPROPERTIES, 0);
  }

  tableProperties() {
    return this.getTypedRuleContext(TablePropertiesContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixSerdeProperties(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterIndexStatementSuffixContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterIndexStatementSuffix;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_ON() {
    return this.getToken(HiveParser.KW_ON, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  KW_REBUILD() {
    return this.getToken(HiveParser.KW_REBUILD, 0);
  }

  partitionSpec() {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterIndexStatementSuffix(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixFileFormatContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixFileFormat;
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  KW_FILEFORMAT() {
    return this.getToken(HiveParser.KW_FILEFORMAT, 0);
  }

  fileFormat() {
    return this.getTypedRuleContext(FileFormatContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixFileFormat(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixClusterbySortbyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixClusterbySortby;
  }

  KW_NOT() {
    return this.getToken(HiveParser.KW_NOT, 0);
  }

  KW_CLUSTERED() {
    return this.getToken(HiveParser.KW_CLUSTERED, 0);
  }

  KW_SORTED() {
    return this.getToken(HiveParser.KW_SORTED, 0);
  }

  tableBuckets() {
    return this.getTypedRuleContext(TableBucketsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixClusterbySortby(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTblPartitionStatementSuffixSkewedLocationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex =
      HiveParser.RULE_alterTblPartitionStatementSuffixSkewedLocation;
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  KW_SKEWED() {
    return this.getToken(HiveParser.KW_SKEWED, 0);
  }

  KW_LOCATION() {
    return this.getToken(HiveParser.KW_LOCATION, 0);
  }

  skewedLocations() {
    return this.getTypedRuleContext(SkewedLocationsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterTblPartitionStatementSuffixSkewedLocation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SkewedLocationsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_skewedLocations;
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  skewedLocationsList() {
    return this.getTypedRuleContext(SkewedLocationsListContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSkewedLocations(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SkewedLocationsListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_skewedLocationsList;
  }

  skewedLocationMap = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SkewedLocationMapContext);
    } else {
      return this.getTypedRuleContext(SkewedLocationMapContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSkewedLocationsList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SkewedLocationMapContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_skewedLocationMap;
  }

  skewedValueLocationElement() {
    return this.getTypedRuleContext(SkewedValueLocationElementContext, 0);
  }

  EQUAL() {
    return this.getToken(HiveParser.EQUAL, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSkewedLocationMap(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixLocationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixLocation;
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  KW_LOCATION() {
    return this.getToken(HiveParser.KW_LOCATION, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixLocation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixSkewedbyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixSkewedby;
  }

  tableSkewed() {
    return this.getTypedRuleContext(TableSkewedContext, 0);
  }

  KW_NOT() {
    return this.getToken(HiveParser.KW_NOT, 0);
  }

  KW_SKEWED() {
    return this.getToken(HiveParser.KW_SKEWED, 0);
  }

  storedAsDirs() {
    return this.getTypedRuleContext(StoredAsDirsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixSkewedby(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixExchangePartitionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixExchangePartition;
  }

  KW_EXCHANGE() {
    return this.getToken(HiveParser.KW_EXCHANGE, 0);
  }

  partitionSpec() {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixExchangePartition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixRenamePartContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixRenamePart;
  }

  KW_RENAME() {
    return this.getToken(HiveParser.KW_RENAME, 0);
  }

  KW_TO() {
    return this.getToken(HiveParser.KW_TO, 0);
  }

  partitionSpec() {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixRenamePart(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixStatsPartContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixStatsPart;
  }

  KW_UPDATE() {
    return this.getToken(HiveParser.KW_UPDATE, 0);
  }

  KW_STATISTICS() {
    return this.getToken(HiveParser.KW_STATISTICS, 0);
  }

  KW_FOR() {
    return this.getToken(HiveParser.KW_FOR, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  tableProperties() {
    return this.getTypedRuleContext(TablePropertiesContext, 0);
  }

  KW_COLUMN() {
    return this.getToken(HiveParser.KW_COLUMN, 0);
  }

  KW_COMMENT() {
    return this.getToken(HiveParser.KW_COMMENT, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixStatsPart(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixMergeFilesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixMergeFiles;
  }

  KW_CONCATENATE() {
    return this.getToken(HiveParser.KW_CONCATENATE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixMergeFiles(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixBucketNumContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixBucketNum;
  }

  KW_INTO() {
    return this.getToken(HiveParser.KW_INTO, 0);
  }

  Number() {
    return this.getToken(HiveParser.Number, 0);
  }

  KW_BUCKETS() {
    return this.getToken(HiveParser.KW_BUCKETS, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixBucketNum(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateIndexStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createIndexStatement;
  }

  createIndexMainStatement() {
    return this.getTypedRuleContext(CreateIndexMainStatementContext, 0);
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  KW_DEFERRED() {
    return this.getToken(HiveParser.KW_DEFERRED, 0);
  }

  KW_REBUILD() {
    return this.getToken(HiveParser.KW_REBUILD, 0);
  }

  KW_IDXPROPERTIES() {
    return this.getToken(HiveParser.KW_IDXPROPERTIES, 0);
  }

  tableProperties() {
    return this.getTypedRuleContext(TablePropertiesContext, 0);
  }

  KW_IN() {
    return this.getToken(HiveParser.KW_IN, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  KW_PARTITIONED() {
    return this.getToken(HiveParser.KW_PARTITIONED, 0);
  }

  KW_BY() {
    return this.getToken(HiveParser.KW_BY, 0);
  }

  columnParenthesesList() {
    return this.getTypedRuleContext(ColumnParenthesesListContext, 0);
  }

  tableFileFormat() {
    return this.getTypedRuleContext(TableFileFormatContext, 0);
  }

  KW_LOCATION() {
    return this.getToken(HiveParser.KW_LOCATION, 0);
  }

  poolPath() {
    return this.getTypedRuleContext(PoolPathContext, 0);
  }

  tablePropertiesPrefixed() {
    return this.getTypedRuleContext(TablePropertiesPrefixedContext, 0);
  }

  tableComment() {
    return this.getTypedRuleContext(TableCommentContext, 0);
  }

  tableRowFormat() {
    return this.getTypedRuleContext(TableRowFormatContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateIndexStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateIndexMainStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createIndexMainStatement;
  }

  KW_CREATE() {
    return this.getToken(HiveParser.KW_CREATE, 0);
  }

  KW_INDEX() {
    return this.getToken(HiveParser.KW_INDEX, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_ON() {
    return this.getToken(HiveParser.KW_ON, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  columnParenthesesList() {
    return this.getTypedRuleContext(ColumnParenthesesListContext, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateIndexMainStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropIndexStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dropIndexStatement;
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  KW_INDEX() {
    return this.getToken(HiveParser.KW_INDEX, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_ON() {
    return this.getToken(HiveParser.KW_ON, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDropIndexStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateBloomfilterIndexStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createBloomfilterIndexStatement;
  }

  createBloomfilterIndexMainStatement() {
    return this.getTypedRuleContext(
      CreateBloomfilterIndexMainStatementContext,
      0
    );
  }

  KW_FOR() {
    return this.getToken(HiveParser.KW_FOR, 0);
  }

  KW_COLUMNS() {
    return this.getToken(HiveParser.KW_COLUMNS, 0);
  }

  bloomfilterColumnParenthesesList() {
    return this.getTypedRuleContext(BloomfilterColumnParenthesesListContext, 0);
  }

  bloomfilterIndexOptions() {
    return this.getTypedRuleContext(BloomfilterIndexOptionsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateBloomfilterIndexStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateBloomfilterIndexMainStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createBloomfilterIndexMainStatement;
  }

  KW_CREATE() {
    return this.getToken(HiveParser.KW_CREATE, 0);
  }

  KW_BLOOMFILTER() {
    return this.getToken(HiveParser.KW_BLOOMFILTER, 0);
  }

  KW_INDEX() {
    return this.getToken(HiveParser.KW_INDEX, 0);
  }

  KW_ON() {
    return this.getToken(HiveParser.KW_ON, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateBloomfilterIndexMainStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class BloomfilterColumnParenthesesListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_bloomfilterColumnParenthesesList;
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  bloomfilterColumnNameList() {
    return this.getTypedRuleContext(BloomfilterColumnNameListContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitBloomfilterColumnParenthesesList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class BloomfilterColumnNameListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_bloomfilterColumnNameList;
  }

  bloomfilterColumnName = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(BloomfilterColumnNameContext);
    } else {
      return this.getTypedRuleContext(BloomfilterColumnNameContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitBloomfilterColumnNameList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class BloomfilterColumnNameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_bloomfilterColumnName;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  bloomfilterIndexOptions() {
    return this.getTypedRuleContext(BloomfilterIndexOptionsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitBloomfilterColumnName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class BloomfilterIndexOptionsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_bloomfilterIndexOptions;
  }

  KW_OPTIONS() {
    return this.getToken(HiveParser.KW_OPTIONS, 0);
  }

  tableProperties() {
    return this.getTypedRuleContext(TablePropertiesContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitBloomfilterIndexOptions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropBloomfilterIndexStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dropBloomfilterIndexStatement;
  }

  dropBloomfilterIndexMainStatement() {
    return this.getTypedRuleContext(
      DropBloomfilterIndexMainStatementContext,
      0
    );
  }

  KW_FOR() {
    return this.getToken(HiveParser.KW_FOR, 0);
  }

  KW_COLUMNS() {
    return this.getToken(HiveParser.KW_COLUMNS, 0);
  }

  bloomfilterColumnParenthesesList() {
    return this.getTypedRuleContext(BloomfilterColumnParenthesesListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDropBloomfilterIndexStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropBloomfilterIndexMainStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dropBloomfilterIndexMainStatement;
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  KW_BLOOMFILTER() {
    return this.getToken(HiveParser.KW_BLOOMFILTER, 0);
  }

  KW_INDEX() {
    return this.getToken(HiveParser.KW_INDEX, 0);
  }

  KW_ON() {
    return this.getToken(HiveParser.KW_ON, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDropBloomfilterIndexMainStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TablePartitionPrefixContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tablePartitionPrefix;
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  partitionSpec() {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTablePartitionPrefix(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class BlockingContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_blocking;
  }

  KW_AND() {
    return this.getToken(HiveParser.KW_AND, 0);
  }

  KW_WAIT() {
    return this.getToken(HiveParser.KW_WAIT, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitBlocking(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixCompactContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixCompact;
  }

  KW_COMPACT() {
    return this.getToken(HiveParser.KW_COMPACT, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  blocking() {
    return this.getTypedRuleContext(BlockingContext, 0);
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  KW_OVERWRITE() {
    return this.getToken(HiveParser.KW_OVERWRITE, 0);
  }

  KW_TBLPROPERTIES() {
    return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
  }

  tableProperties() {
    return this.getTypedRuleContext(TablePropertiesContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixCompact(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterStatementSuffixSetOwnerContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterStatementSuffixSetOwner;
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  KW_OWNER() {
    return this.getToken(HiveParser.KW_OWNER, 0);
  }

  principalName() {
    return this.getTypedRuleContext(PrincipalNameContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterStatementSuffixSetOwner(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class FileFormatContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_fileFormat;
  }

  KW_INPUTFORMAT() {
    return this.getToken(HiveParser.KW_INPUTFORMAT, 0);
  }

  StringLiteral = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.StringLiteral);
    } else {
      return this.getToken(HiveParser.StringLiteral, i);
    }
  };

  KW_OUTPUTFORMAT() {
    return this.getToken(HiveParser.KW_OUTPUTFORMAT, 0);
  }

  KW_SERDE() {
    return this.getToken(HiveParser.KW_SERDE, 0);
  }

  KW_INPUTDRIVER() {
    return this.getToken(HiveParser.KW_INPUTDRIVER, 0);
  }

  KW_OUTPUTDRIVER() {
    return this.getToken(HiveParser.KW_OUTPUTDRIVER, 0);
  }

  tableFileFormatStoredAsFormat() {
    return this.getTypedRuleContext(TableFileFormatStoredAsFormatContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitFileFormat(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class InputFileFormatContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_inputFileFormat;
  }

  KW_INPUTFORMAT() {
    return this.getToken(HiveParser.KW_INPUTFORMAT, 0);
  }

  StringLiteral = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.StringLiteral);
    } else {
      return this.getToken(HiveParser.StringLiteral, i);
    }
  };

  KW_SERDE() {
    return this.getToken(HiveParser.KW_SERDE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitInputFileFormat(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TabTypeExprContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tabTypeExpr;
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  DOT = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.DOT);
    } else {
      return this.getToken(HiveParser.DOT, i);
    }
  };

  KW_ELEM_TYPE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_ELEM_TYPE);
    } else {
      return this.getToken(HiveParser.KW_ELEM_TYPE, i);
    }
  };

  KW_KEY_TYPE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_KEY_TYPE);
    } else {
      return this.getToken(HiveParser.KW_KEY_TYPE, i);
    }
  };

  KW_VALUE_TYPE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_VALUE_TYPE);
    } else {
      return this.getToken(HiveParser.KW_VALUE_TYPE, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTabTypeExpr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PartTypeExprContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_partTypeExpr;
  }

  tabTypeExpr() {
    return this.getTypedRuleContext(TabTypeExprContext, 0);
  }

  partitionSpec() {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPartTypeExpr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TabPartColTypeExprContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tabPartColTypeExpr;
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  partitionSpec() {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
  }

  extColumnName() {
    return this.getTypedRuleContext(ExtColumnNameContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTabPartColTypeExpr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DescStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_descStatement;
  }

  KW_DESCRIBE() {
    return this.getToken(HiveParser.KW_DESCRIBE, 0);
  }

  KW_DESC() {
    return this.getToken(HiveParser.KW_DESC, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_FUNCTION() {
    return this.getToken(HiveParser.KW_FUNCTION, 0);
  }

  descFuncNames() {
    return this.getTypedRuleContext(DescFuncNamesContext, 0);
  }

  tabPartColTypeExpr() {
    return this.getTypedRuleContext(TabPartColTypeExprContext, 0);
  }

  KW_DATABASE() {
    return this.getToken(HiveParser.KW_DATABASE, 0);
  }

  KW_SCHEMA() {
    return this.getToken(HiveParser.KW_SCHEMA, 0);
  }

  KW_EXTENDED() {
    return this.getToken(HiveParser.KW_EXTENDED, 0);
  }

  KW_FORMATTED() {
    return this.getToken(HiveParser.KW_FORMATTED, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDescStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AnalyzeStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_analyzeStatement;
  }

  KW_ANALYZE() {
    return this.getToken(HiveParser.KW_ANALYZE, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  tableOrPartition() {
    return this.getTypedRuleContext(TableOrPartitionContext, 0);
  }

  KW_COMPUTE() {
    return this.getToken(HiveParser.KW_COMPUTE, 0);
  }

  KW_STATISTICS() {
    return this.getToken(HiveParser.KW_STATISTICS, 0);
  }

  KW_CACHE() {
    return this.getToken(HiveParser.KW_CACHE, 0);
  }

  KW_METADATA() {
    return this.getToken(HiveParser.KW_METADATA, 0);
  }

  KW_NOSCAN() {
    return this.getToken(HiveParser.KW_NOSCAN, 0);
  }

  KW_FOR() {
    return this.getToken(HiveParser.KW_FOR, 0);
  }

  KW_COLUMNS() {
    return this.getToken(HiveParser.KW_COLUMNS, 0);
  }

  columnNameList() {
    return this.getTypedRuleContext(ColumnNameListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAnalyzeStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ShowStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_showStatement;
  }

  KW_SHOW() {
    return this.getToken(HiveParser.KW_SHOW, 0);
  }

  KW_DATABASES() {
    return this.getToken(HiveParser.KW_DATABASES, 0);
  }

  KW_SCHEMAS() {
    return this.getToken(HiveParser.KW_SCHEMAS, 0);
  }

  KW_LIKE() {
    return this.getToken(HiveParser.KW_LIKE, 0);
  }

  showStmtIdentifier() {
    return this.getTypedRuleContext(ShowStmtIdentifierContext, 0);
  }

  KW_TABLES() {
    return this.getToken(HiveParser.KW_TABLES, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_FROM = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_FROM);
    } else {
      return this.getToken(HiveParser.KW_FROM, i);
    }
  };

  KW_IN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_IN);
    } else {
      return this.getToken(HiveParser.KW_IN, i);
    }
  };

  KW_VIEWS() {
    return this.getToken(HiveParser.KW_VIEWS, 0);
  }

  KW_MATERIALIZED() {
    return this.getToken(HiveParser.KW_MATERIALIZED, 0);
  }

  KW_COLUMNS() {
    return this.getToken(HiveParser.KW_COLUMNS, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  KW_FUNCTIONS() {
    return this.getToken(HiveParser.KW_FUNCTIONS, 0);
  }

  showFunctionIdentifier() {
    return this.getTypedRuleContext(ShowFunctionIdentifierContext, 0);
  }

  KW_PARTITIONS() {
    return this.getToken(HiveParser.KW_PARTITIONS, 0);
  }

  partitionSpec() {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
  }

  KW_CREATE() {
    return this.getToken(HiveParser.KW_CREATE, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  KW_DATABASE() {
    return this.getToken(HiveParser.KW_DATABASE, 0);
  }

  KW_SCHEMA() {
    return this.getToken(HiveParser.KW_SCHEMA, 0);
  }

  KW_EXTENDED() {
    return this.getToken(HiveParser.KW_EXTENDED, 0);
  }

  KW_TBLPROPERTIES() {
    return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  KW_LOCKS() {
    return this.getToken(HiveParser.KW_LOCKS, 0);
  }

  partTypeExpr() {
    return this.getTypedRuleContext(PartTypeExprContext, 0);
  }

  KW_COMPACTIONS() {
    return this.getToken(HiveParser.KW_COMPACTIONS, 0);
  }

  KW_TRANSACTIONS() {
    return this.getToken(HiveParser.KW_TRANSACTIONS, 0);
  }

  KW_CONF() {
    return this.getToken(HiveParser.KW_CONF, 0);
  }

  KW_RESOURCE() {
    return this.getToken(HiveParser.KW_RESOURCE, 0);
  }

  KW_PLANS() {
    return this.getToken(HiveParser.KW_PLANS, 0);
  }

  KW_PLAN() {
    return this.getToken(HiveParser.KW_PLAN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitShowStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class LockStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_lockStatement;
  }

  KW_LOCK() {
    return this.getToken(HiveParser.KW_LOCK, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  lockMode() {
    return this.getTypedRuleContext(LockModeContext, 0);
  }

  partitionSpec() {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitLockStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class LockDatabaseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_lockDatabase;
  }

  KW_LOCK() {
    return this.getToken(HiveParser.KW_LOCK, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  lockMode() {
    return this.getTypedRuleContext(LockModeContext, 0);
  }

  KW_DATABASE() {
    return this.getToken(HiveParser.KW_DATABASE, 0);
  }

  KW_SCHEMA() {
    return this.getToken(HiveParser.KW_SCHEMA, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitLockDatabase(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class LockModeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_lockMode;
  }

  KW_SHARED() {
    return this.getToken(HiveParser.KW_SHARED, 0);
  }

  KW_EXCLUSIVE() {
    return this.getToken(HiveParser.KW_EXCLUSIVE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitLockMode(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class UnlockStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_unlockStatement;
  }

  KW_UNLOCK() {
    return this.getToken(HiveParser.KW_UNLOCK, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  partitionSpec() {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitUnlockStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class UnlockDatabaseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_unlockDatabase;
  }

  KW_UNLOCK() {
    return this.getToken(HiveParser.KW_UNLOCK, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_DATABASE() {
    return this.getToken(HiveParser.KW_DATABASE, 0);
  }

  KW_SCHEMA() {
    return this.getToken(HiveParser.KW_SCHEMA, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitUnlockDatabase(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateRoleStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createRoleStatement;
  }

  KW_CREATE() {
    return this.getToken(HiveParser.KW_CREATE, 0);
  }

  KW_ROLE() {
    return this.getToken(HiveParser.KW_ROLE, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateRoleStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropRoleStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dropRoleStatement;
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  KW_ROLE() {
    return this.getToken(HiveParser.KW_ROLE, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDropRoleStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class GrantPrivilegesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_grantPrivileges;
  }

  KW_GRANT() {
    return this.getToken(HiveParser.KW_GRANT, 0);
  }

  privilegeList() {
    return this.getTypedRuleContext(PrivilegeListContext, 0);
  }

  KW_TO() {
    return this.getToken(HiveParser.KW_TO, 0);
  }

  principalSpecification() {
    return this.getTypedRuleContext(PrincipalSpecificationContext, 0);
  }

  privilegeObject() {
    return this.getTypedRuleContext(PrivilegeObjectContext, 0);
  }

  withGrantOption() {
    return this.getTypedRuleContext(WithGrantOptionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitGrantPrivileges(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RevokePrivilegesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_revokePrivileges;
  }

  KW_REVOKE() {
    return this.getToken(HiveParser.KW_REVOKE, 0);
  }

  privilegeList() {
    return this.getTypedRuleContext(PrivilegeListContext, 0);
  }

  KW_FROM() {
    return this.getToken(HiveParser.KW_FROM, 0);
  }

  principalSpecification() {
    return this.getTypedRuleContext(PrincipalSpecificationContext, 0);
  }

  grantOptionFor() {
    return this.getTypedRuleContext(GrantOptionForContext, 0);
  }

  privilegeObject() {
    return this.getTypedRuleContext(PrivilegeObjectContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRevokePrivileges(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class GrantRoleContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_grantRole;
  }

  KW_GRANT() {
    return this.getToken(HiveParser.KW_GRANT, 0);
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  KW_TO() {
    return this.getToken(HiveParser.KW_TO, 0);
  }

  principalSpecification() {
    return this.getTypedRuleContext(PrincipalSpecificationContext, 0);
  }

  KW_ROLE() {
    return this.getToken(HiveParser.KW_ROLE, 0);
  }

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  withAdminOption() {
    return this.getTypedRuleContext(WithAdminOptionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitGrantRole(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RevokeRoleContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_revokeRole;
  }

  KW_REVOKE() {
    return this.getToken(HiveParser.KW_REVOKE, 0);
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  KW_FROM() {
    return this.getToken(HiveParser.KW_FROM, 0);
  }

  principalSpecification() {
    return this.getTypedRuleContext(PrincipalSpecificationContext, 0);
  }

  adminOptionFor() {
    return this.getTypedRuleContext(AdminOptionForContext, 0);
  }

  KW_ROLE() {
    return this.getToken(HiveParser.KW_ROLE, 0);
  }

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRevokeRole(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ShowRoleGrantsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_showRoleGrants;
  }

  KW_SHOW() {
    return this.getToken(HiveParser.KW_SHOW, 0);
  }

  KW_ROLE() {
    return this.getToken(HiveParser.KW_ROLE, 0);
  }

  KW_GRANT() {
    return this.getToken(HiveParser.KW_GRANT, 0);
  }

  principalName() {
    return this.getTypedRuleContext(PrincipalNameContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitShowRoleGrants(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ShowRolesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_showRoles;
  }

  KW_SHOW() {
    return this.getToken(HiveParser.KW_SHOW, 0);
  }

  KW_ROLES() {
    return this.getToken(HiveParser.KW_ROLES, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitShowRoles(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ShowCurrentRoleContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_showCurrentRole;
  }

  KW_SHOW() {
    return this.getToken(HiveParser.KW_SHOW, 0);
  }

  KW_CURRENT() {
    return this.getToken(HiveParser.KW_CURRENT, 0);
  }

  KW_ROLES() {
    return this.getToken(HiveParser.KW_ROLES, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitShowCurrentRole(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SetRoleContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_setRole;
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  KW_ROLE() {
    return this.getToken(HiveParser.KW_ROLE, 0);
  }

  KW_ALL() {
    return this.getToken(HiveParser.KW_ALL, 0);
  }

  KW_NONE() {
    return this.getToken(HiveParser.KW_NONE, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSetRole(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ShowGrantsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_showGrants;
  }

  KW_SHOW() {
    return this.getToken(HiveParser.KW_SHOW, 0);
  }

  KW_GRANT() {
    return this.getToken(HiveParser.KW_GRANT, 0);
  }

  principalName() {
    return this.getTypedRuleContext(PrincipalNameContext, 0);
  }

  KW_ON() {
    return this.getToken(HiveParser.KW_ON, 0);
  }

  privilegeIncludeColObject() {
    return this.getTypedRuleContext(PrivilegeIncludeColObjectContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitShowGrants(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ShowRolePrincipalsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_showRolePrincipals;
  }

  KW_SHOW() {
    return this.getToken(HiveParser.KW_SHOW, 0);
  }

  KW_PRINCIPALS() {
    return this.getToken(HiveParser.KW_PRINCIPALS, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitShowRolePrincipals(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrivilegeIncludeColObjectContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_privilegeIncludeColObject;
  }

  KW_ALL() {
    return this.getToken(HiveParser.KW_ALL, 0);
  }

  privObjectCols() {
    return this.getTypedRuleContext(PrivObjectColsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrivilegeIncludeColObject(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrivilegeObjectContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_privilegeObject;
  }

  KW_ON() {
    return this.getToken(HiveParser.KW_ON, 0);
  }

  privObject() {
    return this.getTypedRuleContext(PrivObjectContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrivilegeObject(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrivObjectContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_privObject;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_DATABASE() {
    return this.getToken(HiveParser.KW_DATABASE, 0);
  }

  KW_SCHEMA() {
    return this.getToken(HiveParser.KW_SCHEMA, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  partitionSpec() {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
  }

  KW_URI() {
    return this.getToken(HiveParser.KW_URI, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  KW_SERVER() {
    return this.getToken(HiveParser.KW_SERVER, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrivObject(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrivObjectColsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_privObjectCols;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_DATABASE() {
    return this.getToken(HiveParser.KW_DATABASE, 0);
  }

  KW_SCHEMA() {
    return this.getToken(HiveParser.KW_SCHEMA, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  columnNameList() {
    return this.getTypedRuleContext(ColumnNameListContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  partitionSpec() {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
  }

  KW_URI() {
    return this.getToken(HiveParser.KW_URI, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  KW_SERVER() {
    return this.getToken(HiveParser.KW_SERVER, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrivObjectCols(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrivilegeListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_privilegeList;
  }

  privlegeDef = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PrivlegeDefContext);
    } else {
      return this.getTypedRuleContext(PrivlegeDefContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrivilegeList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrivlegeDefContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_privlegeDef;
  }

  privilegeType() {
    return this.getTypedRuleContext(PrivilegeTypeContext, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  columnNameList() {
    return this.getTypedRuleContext(ColumnNameListContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrivlegeDef(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrivilegeTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_privilegeType;
  }

  KW_ALL() {
    return this.getToken(HiveParser.KW_ALL, 0);
  }

  KW_ALTER() {
    return this.getToken(HiveParser.KW_ALTER, 0);
  }

  KW_UPDATE() {
    return this.getToken(HiveParser.KW_UPDATE, 0);
  }

  KW_CREATE() {
    return this.getToken(HiveParser.KW_CREATE, 0);
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  KW_LOCK() {
    return this.getToken(HiveParser.KW_LOCK, 0);
  }

  KW_SELECT() {
    return this.getToken(HiveParser.KW_SELECT, 0);
  }

  KW_SHOW_DATABASE() {
    return this.getToken(HiveParser.KW_SHOW_DATABASE, 0);
  }

  KW_INSERT() {
    return this.getToken(HiveParser.KW_INSERT, 0);
  }

  KW_DELETE() {
    return this.getToken(HiveParser.KW_DELETE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrivilegeType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrincipalSpecificationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_principalSpecification;
  }

  principalName = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PrincipalNameContext);
    } else {
      return this.getTypedRuleContext(PrincipalNameContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrincipalSpecification(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrincipalNameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_principalName;
  }

  KW_USER() {
    return this.getToken(HiveParser.KW_USER, 0);
  }

  principalIdentifier() {
    return this.getTypedRuleContext(PrincipalIdentifierContext, 0);
  }

  KW_GROUP() {
    return this.getToken(HiveParser.KW_GROUP, 0);
  }

  KW_ROLE() {
    return this.getToken(HiveParser.KW_ROLE, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrincipalName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class WithGrantOptionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_withGrantOption;
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  KW_GRANT() {
    return this.getToken(HiveParser.KW_GRANT, 0);
  }

  KW_OPTION() {
    return this.getToken(HiveParser.KW_OPTION, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWithGrantOption(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class GrantOptionForContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_grantOptionFor;
  }

  KW_GRANT() {
    return this.getToken(HiveParser.KW_GRANT, 0);
  }

  KW_OPTION() {
    return this.getToken(HiveParser.KW_OPTION, 0);
  }

  KW_FOR() {
    return this.getToken(HiveParser.KW_FOR, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitGrantOptionFor(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AdminOptionForContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_adminOptionFor;
  }

  KW_ADMIN() {
    return this.getToken(HiveParser.KW_ADMIN, 0);
  }

  KW_OPTION() {
    return this.getToken(HiveParser.KW_OPTION, 0);
  }

  KW_FOR() {
    return this.getToken(HiveParser.KW_FOR, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAdminOptionFor(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class WithAdminOptionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_withAdminOption;
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  KW_ADMIN() {
    return this.getToken(HiveParser.KW_ADMIN, 0);
  }

  KW_OPTION() {
    return this.getToken(HiveParser.KW_OPTION, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWithAdminOption(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class MetastoreCheckContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_metastoreCheck;
  }

  KW_MSCK() {
    return this.getToken(HiveParser.KW_MSCK, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  KW_REPAIR() {
    return this.getToken(HiveParser.KW_REPAIR, 0);
  }

  KW_PARTITIONS() {
    return this.getToken(HiveParser.KW_PARTITIONS, 0);
  }

  partitionSpec() {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
  }

  KW_ADD() {
    return this.getToken(HiveParser.KW_ADD, 0);
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  KW_SYNC() {
    return this.getToken(HiveParser.KW_SYNC, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitMetastoreCheck(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ResourceListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_resourceList;
  }

  resource = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ResourceContext);
    } else {
      return this.getTypedRuleContext(ResourceContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitResourceList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ResourceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_resource;
  }

  resourceType() {
    return this.getTypedRuleContext(ResourceTypeContext, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitResource(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ResourceTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_resourceType;
  }

  KW_JAR() {
    return this.getToken(HiveParser.KW_JAR, 0);
  }

  KW_FILE() {
    return this.getToken(HiveParser.KW_FILE, 0);
  }

  KW_ARCHIVE() {
    return this.getToken(HiveParser.KW_ARCHIVE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitResourceType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateFunctionStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createFunctionStatement;
  }

  KW_CREATE() {
    return this.getToken(HiveParser.KW_CREATE, 0);
  }

  KW_FUNCTION() {
    return this.getToken(HiveParser.KW_FUNCTION, 0);
  }

  functionIdentifier() {
    return this.getTypedRuleContext(FunctionIdentifierContext, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  KW_TEMPORARY() {
    return this.getToken(HiveParser.KW_TEMPORARY, 0);
  }

  KW_USING() {
    return this.getToken(HiveParser.KW_USING, 0);
  }

  resourceList() {
    return this.getTypedRuleContext(ResourceListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateFunctionStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropFunctionStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dropFunctionStatement;
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  KW_FUNCTION() {
    return this.getToken(HiveParser.KW_FUNCTION, 0);
  }

  functionIdentifier() {
    return this.getTypedRuleContext(FunctionIdentifierContext, 0);
  }

  KW_TEMPORARY() {
    return this.getToken(HiveParser.KW_TEMPORARY, 0);
  }

  ifExists() {
    return this.getTypedRuleContext(IfExistsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDropFunctionStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ReloadFunctionStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_reloadFunctionStatement;
  }

  KW_RELOAD() {
    return this.getToken(HiveParser.KW_RELOAD, 0);
  }

  KW_FUNCTION() {
    return this.getToken(HiveParser.KW_FUNCTION, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitReloadFunctionStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateMacroStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createMacroStatement;
  }

  KW_CREATE() {
    return this.getToken(HiveParser.KW_CREATE, 0);
  }

  KW_TEMPORARY() {
    return this.getToken(HiveParser.KW_TEMPORARY, 0);
  }

  KW_MACRO() {
    return this.getToken(HiveParser.KW_MACRO, 0);
  }

  Identifier() {
    return this.getToken(HiveParser.Identifier, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  columnNameTypeList() {
    return this.getTypedRuleContext(ColumnNameTypeListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateMacroStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropMacroStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dropMacroStatement;
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  KW_TEMPORARY() {
    return this.getToken(HiveParser.KW_TEMPORARY, 0);
  }

  KW_MACRO() {
    return this.getToken(HiveParser.KW_MACRO, 0);
  }

  Identifier() {
    return this.getToken(HiveParser.Identifier, 0);
  }

  ifExists() {
    return this.getTypedRuleContext(IfExistsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDropMacroStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateViewStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createViewStatement;
  }

  KW_CREATE() {
    return this.getToken(HiveParser.KW_CREATE, 0);
  }

  KW_VIEW() {
    return this.getToken(HiveParser.KW_VIEW, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  selectStatementWithCTE() {
    return this.getTypedRuleContext(SelectStatementWithCTEContext, 0);
  }

  orReplace() {
    return this.getTypedRuleContext(OrReplaceContext, 0);
  }

  ifNotExists() {
    return this.getTypedRuleContext(IfNotExistsContext, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  columnNameCommentList() {
    return this.getTypedRuleContext(ColumnNameCommentListContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  tableComment() {
    return this.getTypedRuleContext(TableCommentContext, 0);
  }

  viewPartition() {
    return this.getTypedRuleContext(ViewPartitionContext, 0);
  }

  tablePropertiesPrefixed() {
    return this.getTypedRuleContext(TablePropertiesPrefixedContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateViewStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateMaterializedViewStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createMaterializedViewStatement;
  }

  KW_CREATE() {
    return this.getToken(HiveParser.KW_CREATE, 0);
  }

  KW_MATERIALIZED() {
    return this.getToken(HiveParser.KW_MATERIALIZED, 0);
  }

  KW_VIEW() {
    return this.getToken(HiveParser.KW_VIEW, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  selectStatementWithCTE() {
    return this.getTypedRuleContext(SelectStatementWithCTEContext, 0);
  }

  ifNotExists() {
    return this.getTypedRuleContext(IfNotExistsContext, 0);
  }

  rewriteDisabled() {
    return this.getTypedRuleContext(RewriteDisabledContext, 0);
  }

  tableComment() {
    return this.getTypedRuleContext(TableCommentContext, 0);
  }

  tableRowFormat() {
    return this.getTypedRuleContext(TableRowFormatContext, 0);
  }

  tableFileFormat() {
    return this.getTypedRuleContext(TableFileFormatContext, 0);
  }

  tableLocation() {
    return this.getTypedRuleContext(TableLocationContext, 0);
  }

  tablePropertiesPrefixed() {
    return this.getTypedRuleContext(TablePropertiesPrefixedContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateMaterializedViewStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ViewPartitionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_viewPartition;
  }

  KW_PARTITIONED() {
    return this.getToken(HiveParser.KW_PARTITIONED, 0);
  }

  KW_ON() {
    return this.getToken(HiveParser.KW_ON, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  columnNameList() {
    return this.getTypedRuleContext(ColumnNameListContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitViewPartition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropViewStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dropViewStatement;
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  KW_VIEW() {
    return this.getToken(HiveParser.KW_VIEW, 0);
  }

  viewName() {
    return this.getTypedRuleContext(ViewNameContext, 0);
  }

  ifExists() {
    return this.getTypedRuleContext(IfExistsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDropViewStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropMaterializedViewStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dropMaterializedViewStatement;
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  KW_MATERIALIZED() {
    return this.getToken(HiveParser.KW_MATERIALIZED, 0);
  }

  KW_VIEW() {
    return this.getToken(HiveParser.KW_VIEW, 0);
  }

  viewName() {
    return this.getTypedRuleContext(ViewNameContext, 0);
  }

  ifExists() {
    return this.getTypedRuleContext(IfExistsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDropMaterializedViewStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ShowFunctionIdentifierContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_showFunctionIdentifier;
  }

  functionIdentifier() {
    return this.getTypedRuleContext(FunctionIdentifierContext, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitShowFunctionIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ShowStmtIdentifierContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_showStmtIdentifier;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitShowStmtIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableCommentContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableComment;
  }

  KW_COMMENT() {
    return this.getToken(HiveParser.KW_COMMENT, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableComment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableUsingDataSourceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableUsingDataSource;
  }

  KW_USING() {
    return this.getToken(HiveParser.KW_USING, 0);
  }

  tableDataSource() {
    return this.getTypedRuleContext(TableDataSourceContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableUsingDataSource(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableDataSourceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableDataSource;
  }

  KW_AVRO() {
    return this.getToken(HiveParser.KW_AVRO, 0);
  }

  KW_CSV() {
    return this.getToken(HiveParser.KW_CSV, 0);
  }

  KW_JSON() {
    return this.getToken(HiveParser.KW_JSON, 0);
  }

  KW_PARQUET() {
    return this.getToken(HiveParser.KW_PARQUET, 0);
  }

  KW_ORC() {
    return this.getToken(HiveParser.KW_ORC, 0);
  }

  KW_DELTA() {
    return this.getToken(HiveParser.KW_DELTA, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableDataSource(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TablePartitionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tablePartition;
  }

  KW_PARTITIONED() {
    return this.getToken(HiveParser.KW_PARTITIONED, 0);
  }

  KW_BY() {
    return this.getToken(HiveParser.KW_BY, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  partitionedColumnNameTypeConstraint = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(
        PartitionedColumnNameTypeConstraintContext
      );
    } else {
      return this.getTypedRuleContext(
        PartitionedColumnNameTypeConstraintContext,
        i
      );
    }
  };

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTablePartition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableBucketsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableBuckets;
  }

  KW_CLUSTERED() {
    return this.getToken(HiveParser.KW_CLUSTERED, 0);
  }

  KW_BY = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_BY);
    } else {
      return this.getToken(HiveParser.KW_BY, i);
    }
  };

  LPAREN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.LPAREN);
    } else {
      return this.getToken(HiveParser.LPAREN, i);
    }
  };

  columnNameList() {
    return this.getTypedRuleContext(ColumnNameListContext, 0);
  }

  RPAREN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.RPAREN);
    } else {
      return this.getToken(HiveParser.RPAREN, i);
    }
  };

  KW_INTO() {
    return this.getToken(HiveParser.KW_INTO, 0);
  }

  Number() {
    return this.getToken(HiveParser.Number, 0);
  }

  KW_BUCKETS() {
    return this.getToken(HiveParser.KW_BUCKETS, 0);
  }

  KW_SORTED() {
    return this.getToken(HiveParser.KW_SORTED, 0);
  }

  columnNameOrderList() {
    return this.getTypedRuleContext(ColumnNameOrderListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableBuckets(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableSkewedContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableSkewed;
  }

  KW_SKEWED() {
    return this.getToken(HiveParser.KW_SKEWED, 0);
  }

  KW_BY() {
    return this.getToken(HiveParser.KW_BY, 0);
  }

  LPAREN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.LPAREN);
    } else {
      return this.getToken(HiveParser.LPAREN, i);
    }
  };

  columnNameList() {
    return this.getTypedRuleContext(ColumnNameListContext, 0);
  }

  RPAREN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.RPAREN);
    } else {
      return this.getToken(HiveParser.RPAREN, i);
    }
  };

  KW_ON() {
    return this.getToken(HiveParser.KW_ON, 0);
  }

  skewedValueElement() {
    return this.getTypedRuleContext(SkewedValueElementContext, 0);
  }

  storedAsDirs() {
    return this.getTypedRuleContext(StoredAsDirsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableSkewed(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RowFormatContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_rowFormat;
  }

  rowFormatSerde() {
    return this.getTypedRuleContext(RowFormatSerdeContext, 0);
  }

  rowFormatDelimited() {
    return this.getTypedRuleContext(RowFormatDelimitedContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRowFormat(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RecordReaderContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_recordReader;
  }

  KW_RECORDREADER() {
    return this.getToken(HiveParser.KW_RECORDREADER, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRecordReader(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RecordWriterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_recordWriter;
  }

  KW_RECORDWRITER() {
    return this.getToken(HiveParser.KW_RECORDWRITER, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRecordWriter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RowFormatSerdeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_rowFormatSerde;
  }

  KW_ROW() {
    return this.getToken(HiveParser.KW_ROW, 0);
  }

  KW_FORMAT() {
    return this.getToken(HiveParser.KW_FORMAT, 0);
  }

  KW_SERDE() {
    return this.getToken(HiveParser.KW_SERDE, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  KW_SERDEPROPERTIES() {
    return this.getToken(HiveParser.KW_SERDEPROPERTIES, 0);
  }

  tableProperties() {
    return this.getTypedRuleContext(TablePropertiesContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRowFormatSerde(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RowFormatDelimitedContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_rowFormatDelimited;
  }

  KW_ROW() {
    return this.getToken(HiveParser.KW_ROW, 0);
  }

  KW_FORMAT() {
    return this.getToken(HiveParser.KW_FORMAT, 0);
  }

  KW_DELIMITED() {
    return this.getToken(HiveParser.KW_DELIMITED, 0);
  }

  tableRowFormatFieldIdentifier() {
    return this.getTypedRuleContext(TableRowFormatFieldIdentifierContext, 0);
  }

  tableRowFormatCollItemsIdentifier() {
    return this.getTypedRuleContext(
      TableRowFormatCollItemsIdentifierContext,
      0
    );
  }

  tableRowFormatMapKeysIdentifier() {
    return this.getTypedRuleContext(TableRowFormatMapKeysIdentifierContext, 0);
  }

  tableRowFormatLinesIdentifier() {
    return this.getTypedRuleContext(TableRowFormatLinesIdentifierContext, 0);
  }

  tableRowNullFormat() {
    return this.getTypedRuleContext(TableRowNullFormatContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRowFormatDelimited(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableRowFormatContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableRowFormat;
  }

  rowFormatDelimited() {
    return this.getTypedRuleContext(RowFormatDelimitedContext, 0);
  }

  rowFormatSerde() {
    return this.getTypedRuleContext(RowFormatSerdeContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableRowFormat(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableOptionsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableOptions;
  }

  KW_OPTIONS() {
    return this.getToken(HiveParser.KW_OPTIONS, 0);
  }

  tableProperties() {
    return this.getTypedRuleContext(TablePropertiesContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableOptions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TablePropertiesPrefixedContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tablePropertiesPrefixed;
  }

  KW_TBLPROPERTIES() {
    return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
  }

  tableProperties() {
    return this.getTypedRuleContext(TablePropertiesContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTablePropertiesPrefixed(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TablePropertiesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableProperties;
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  tablePropertiesList() {
    return this.getTypedRuleContext(TablePropertiesListContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableProperties(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TablePropertiesListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tablePropertiesList;
  }

  keyValueProperty = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(KeyValuePropertyContext);
    } else {
      return this.getTypedRuleContext(KeyValuePropertyContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  keyProperty = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(KeyPropertyContext);
    } else {
      return this.getTypedRuleContext(KeyPropertyContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTablePropertiesList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KeyValuePropertyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_keyValueProperty;
  }

  keyProperty() {
    return this.getTypedRuleContext(KeyPropertyContext, 0);
  }

  keyValue() {
    return this.getTypedRuleContext(KeyValueContext, 0);
  }

  EQUAL() {
    return this.getToken(HiveParser.EQUAL, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitKeyValueProperty(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KeyValueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_keyValue;
  }

  Number() {
    return this.getToken(HiveParser.Number, 0);
  }

  booleanValue() {
    return this.getTypedRuleContext(BooleanValueContext, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitKeyValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KeyPropertyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_keyProperty;
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  DOT = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.DOT);
    } else {
      return this.getToken(HiveParser.DOT, i);
    }
  };

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitKeyProperty(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableRowFormatFieldIdentifierContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableRowFormatFieldIdentifier;
  }

  KW_FIELDS() {
    return this.getToken(HiveParser.KW_FIELDS, 0);
  }

  KW_TERMINATED() {
    return this.getToken(HiveParser.KW_TERMINATED, 0);
  }

  KW_BY() {
    return this.getToken(HiveParser.KW_BY, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  tableRowFormatFieldIdentifierEcapedBy() {
    return this.getTypedRuleContext(
      TableRowFormatFieldIdentifierEcapedByContext,
      0
    );
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableRowFormatFieldIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableRowFormatFieldIdentifierEcapedByContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableRowFormatFieldIdentifierEcapedBy;
  }

  KW_ESCAPED() {
    return this.getToken(HiveParser.KW_ESCAPED, 0);
  }

  KW_BY() {
    return this.getToken(HiveParser.KW_BY, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableRowFormatFieldIdentifierEcapedBy(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableRowFormatCollItemsIdentifierContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableRowFormatCollItemsIdentifier;
  }

  KW_COLLECTION() {
    return this.getToken(HiveParser.KW_COLLECTION, 0);
  }

  KW_ITEMS() {
    return this.getToken(HiveParser.KW_ITEMS, 0);
  }

  KW_TERMINATED() {
    return this.getToken(HiveParser.KW_TERMINATED, 0);
  }

  KW_BY() {
    return this.getToken(HiveParser.KW_BY, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableRowFormatCollItemsIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableRowFormatMapKeysIdentifierContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableRowFormatMapKeysIdentifier;
  }

  KW_MAP() {
    return this.getToken(HiveParser.KW_MAP, 0);
  }

  KW_KEYS() {
    return this.getToken(HiveParser.KW_KEYS, 0);
  }

  KW_TERMINATED() {
    return this.getToken(HiveParser.KW_TERMINATED, 0);
  }

  KW_BY() {
    return this.getToken(HiveParser.KW_BY, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableRowFormatMapKeysIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableRowFormatLinesIdentifierContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableRowFormatLinesIdentifier;
  }

  KW_LINES() {
    return this.getToken(HiveParser.KW_LINES, 0);
  }

  KW_TERMINATED() {
    return this.getToken(HiveParser.KW_TERMINATED, 0);
  }

  KW_BY() {
    return this.getToken(HiveParser.KW_BY, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableRowFormatLinesIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableRowNullFormatContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableRowNullFormat;
  }

  KW_NULL() {
    return this.getToken(HiveParser.KW_NULL, 0);
  }

  KW_DEFINED() {
    return this.getToken(HiveParser.KW_DEFINED, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableRowNullFormat(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableFileFormatContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableFileFormat;
  }

  tableInputOutputFileFormat() {
    return this.getTypedRuleContext(TableInputOutputFileFormatContext, 0);
  }

  tableFileFormatStoredBy() {
    return this.getTypedRuleContext(TableFileFormatStoredByContext, 0);
  }

  tableFileFormatStoredAs() {
    return this.getTypedRuleContext(TableFileFormatStoredAsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableFileFormat(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableFileFormatStoredByContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableFileFormatStoredBy;
  }

  KW_STORED() {
    return this.getToken(HiveParser.KW_STORED, 0);
  }

  KW_BY() {
    return this.getToken(HiveParser.KW_BY, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  KW_SERDEPROPERTIES() {
    return this.getToken(HiveParser.KW_SERDEPROPERTIES, 0);
  }

  tableProperties() {
    return this.getTypedRuleContext(TablePropertiesContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableFileFormatStoredBy(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableFileFormatStoredAsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableFileFormatStoredAs;
  }

  KW_STORED() {
    return this.getToken(HiveParser.KW_STORED, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  tableFileFormatStoredAsFormat() {
    return this.getTypedRuleContext(TableFileFormatStoredAsFormatContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableFileFormatStoredAs(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableFileFormatStoredAsFormatContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableFileFormatStoredAsFormat;
  }

  KW_SEQUENCEFILE() {
    return this.getToken(HiveParser.KW_SEQUENCEFILE, 0);
  }

  KW_TEXTFILE() {
    return this.getToken(HiveParser.KW_TEXTFILE, 0);
  }

  KW_RCFILE() {
    return this.getToken(HiveParser.KW_RCFILE, 0);
  }

  KW_ORC() {
    return this.getToken(HiveParser.KW_ORC, 0);
  }

  KW_PARQUET() {
    return this.getToken(HiveParser.KW_PARQUET, 0);
  }

  KW_AVRO() {
    return this.getToken(HiveParser.KW_AVRO, 0);
  }

  KW_JSONFILE() {
    return this.getToken(HiveParser.KW_JSONFILE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableFileFormatStoredAsFormat(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableInputOutputFileFormatContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableInputOutputFileFormat;
  }

  KW_STORED() {
    return this.getToken(HiveParser.KW_STORED, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  tableInputLiteral() {
    return this.getTypedRuleContext(TableInputLiteralContext, 0);
  }

  tableOutputLiteral() {
    return this.getTypedRuleContext(TableOutputLiteralContext, 0);
  }

  KW_INPUTDRIVER() {
    return this.getToken(HiveParser.KW_INPUTDRIVER, 0);
  }

  StringLiteral = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.StringLiteral);
    } else {
      return this.getToken(HiveParser.StringLiteral, i);
    }
  };

  KW_OUTPUTDRIVER() {
    return this.getToken(HiveParser.KW_OUTPUTDRIVER, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableInputOutputFileFormat(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableInputLiteralContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableInputLiteral;
  }

  KW_INPUTFORMAT() {
    return this.getToken(HiveParser.KW_INPUTFORMAT, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableInputLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableOutputLiteralContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableOutputLiteral;
  }

  KW_OUTPUTFORMAT() {
    return this.getToken(HiveParser.KW_OUTPUTFORMAT, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableOutputLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableLocationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableLocation;
  }

  KW_LOCATION() {
    return this.getToken(HiveParser.KW_LOCATION, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableLocation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnNameTypeListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnNameTypeList;
  }

  columnNameType = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnNameTypeContext);
    } else {
      return this.getTypedRuleContext(ColumnNameTypeContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnNameTypeList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnNameTypeOrConstraintListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnNameTypeOrConstraintList;
  }

  columnNameTypeOrConstraint = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnNameTypeOrConstraintContext);
    } else {
      return this.getTypedRuleContext(ColumnNameTypeOrConstraintContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnNameTypeOrConstraintList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnNameColonTypeListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnNameColonTypeList;
  }

  columnNameColonType = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnNameColonTypeContext);
    } else {
      return this.getTypedRuleContext(ColumnNameColonTypeContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnNameColonTypeList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnNameListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnNameList;
  }

  columnName = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnNameContext);
    } else {
      return this.getTypedRuleContext(ColumnNameContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnNameList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnNameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnName;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ExtColumnNameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_extColumnName;
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  DOT = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.DOT);
    } else {
      return this.getToken(HiveParser.DOT, i);
    }
  };

  KW_ELEM_TYPE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_ELEM_TYPE);
    } else {
      return this.getToken(HiveParser.KW_ELEM_TYPE, i);
    }
  };

  KW_KEY_TYPE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_KEY_TYPE);
    } else {
      return this.getToken(HiveParser.KW_KEY_TYPE, i);
    }
  };

  KW_VALUE_TYPE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_VALUE_TYPE);
    } else {
      return this.getToken(HiveParser.KW_VALUE_TYPE, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitExtColumnName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnNameOrderListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnNameOrderList;
  }

  columnNameOrder = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnNameOrderContext);
    } else {
      return this.getTypedRuleContext(ColumnNameOrderContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnNameOrderList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnParenthesesListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnParenthesesList;
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  columnNameList() {
    return this.getTypedRuleContext(ColumnNameListContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnParenthesesList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EnableValidateSpecificationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_enableValidateSpecification;
  }

  enableSpecification() {
    return this.getTypedRuleContext(EnableSpecificationContext, 0);
  }

  validateSpecification() {
    return this.getTypedRuleContext(ValidateSpecificationContext, 0);
  }

  enforcedSpecification() {
    return this.getTypedRuleContext(EnforcedSpecificationContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitEnableValidateSpecification(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EnableSpecificationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_enableSpecification;
  }

  KW_ENABLE() {
    return this.getToken(HiveParser.KW_ENABLE, 0);
  }

  KW_DISABLE() {
    return this.getToken(HiveParser.KW_DISABLE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitEnableSpecification(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ValidateSpecificationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_validateSpecification;
  }

  KW_VALIDATE() {
    return this.getToken(HiveParser.KW_VALIDATE, 0);
  }

  KW_NOVALIDATE() {
    return this.getToken(HiveParser.KW_NOVALIDATE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitValidateSpecification(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EnforcedSpecificationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_enforcedSpecification;
  }

  KW_ENFORCED() {
    return this.getToken(HiveParser.KW_ENFORCED, 0);
  }

  KW_NOT() {
    return this.getToken(HiveParser.KW_NOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitEnforcedSpecification(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RelySpecificationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_relySpecification;
  }

  KW_RELY() {
    return this.getToken(HiveParser.KW_RELY, 0);
  }

  KW_NORELY() {
    return this.getToken(HiveParser.KW_NORELY, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRelySpecification(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateConstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createConstraint;
  }

  tableLevelConstraint() {
    return this.getTypedRuleContext(TableLevelConstraintContext, 0);
  }

  KW_CONSTRAINT() {
    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  constraintOptsCreate() {
    return this.getTypedRuleContext(ConstraintOptsCreateContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateConstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterConstraintWithNameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterConstraintWithName;
  }

  KW_CONSTRAINT() {
    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  tableLevelConstraint() {
    return this.getTypedRuleContext(TableLevelConstraintContext, 0);
  }

  constraintOptsAlter() {
    return this.getTypedRuleContext(ConstraintOptsAlterContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterConstraintWithName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableLevelConstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableLevelConstraint;
  }

  pkUkConstraint() {
    return this.getTypedRuleContext(PkUkConstraintContext, 0);
  }

  checkConstraint() {
    return this.getTypedRuleContext(CheckConstraintContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableLevelConstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PkUkConstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_pkUkConstraint;
    this.pkCols = null; // ColumnParenthesesListContext
  }

  tableConstraintType() {
    return this.getTypedRuleContext(TableConstraintTypeContext, 0);
  }

  columnParenthesesList() {
    return this.getTypedRuleContext(ColumnParenthesesListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPkUkConstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CheckConstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_checkConstraint;
  }

  KW_CHECK() {
    return this.getToken(HiveParser.KW_CHECK, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCheckConstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateForeignKeyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createForeignKey;
  }

  KW_FOREIGN() {
    return this.getToken(HiveParser.KW_FOREIGN, 0);
  }

  KW_KEY() {
    return this.getToken(HiveParser.KW_KEY, 0);
  }

  columnParenthesesList = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnParenthesesListContext);
    } else {
      return this.getTypedRuleContext(ColumnParenthesesListContext, i);
    }
  };

  KW_REFERENCES() {
    return this.getToken(HiveParser.KW_REFERENCES, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  KW_CONSTRAINT() {
    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  constraintOptsCreate() {
    return this.getTypedRuleContext(ConstraintOptsCreateContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateForeignKey(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterForeignKeyWithNameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterForeignKeyWithName;
  }

  KW_CONSTRAINT() {
    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_FOREIGN() {
    return this.getToken(HiveParser.KW_FOREIGN, 0);
  }

  KW_KEY() {
    return this.getToken(HiveParser.KW_KEY, 0);
  }

  columnParenthesesList = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnParenthesesListContext);
    } else {
      return this.getTypedRuleContext(ColumnParenthesesListContext, i);
    }
  };

  KW_REFERENCES() {
    return this.getToken(HiveParser.KW_REFERENCES, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  constraintOptsAlter() {
    return this.getTypedRuleContext(ConstraintOptsAlterContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterForeignKeyWithName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SkewedValueElementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_skewedValueElement;
  }

  skewedColumnValues() {
    return this.getTypedRuleContext(SkewedColumnValuesContext, 0);
  }

  skewedColumnValuePairList() {
    return this.getTypedRuleContext(SkewedColumnValuePairListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSkewedValueElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SkewedColumnValuePairListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_skewedColumnValuePairList;
  }

  skewedColumnValuePair = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SkewedColumnValuePairContext);
    } else {
      return this.getTypedRuleContext(SkewedColumnValuePairContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSkewedColumnValuePairList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SkewedColumnValuePairContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_skewedColumnValuePair;
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  skewedColumnValues() {
    return this.getTypedRuleContext(SkewedColumnValuesContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSkewedColumnValuePair(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SkewedColumnValuesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_skewedColumnValues;
  }

  skewedColumnValue = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SkewedColumnValueContext);
    } else {
      return this.getTypedRuleContext(SkewedColumnValueContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSkewedColumnValues(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SkewedColumnValueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_skewedColumnValue;
  }

  constant() {
    return this.getTypedRuleContext(ConstantContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSkewedColumnValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SkewedValueLocationElementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_skewedValueLocationElement;
  }

  skewedColumnValue() {
    return this.getTypedRuleContext(SkewedColumnValueContext, 0);
  }

  skewedColumnValuePair() {
    return this.getTypedRuleContext(SkewedColumnValuePairContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSkewedValueLocationElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class OrderSpecificationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_orderSpecification;
  }

  KW_ASC() {
    return this.getToken(HiveParser.KW_ASC, 0);
  }

  KW_DESC() {
    return this.getToken(HiveParser.KW_DESC, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitOrderSpecification(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class NullOrderingContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_nullOrdering;
  }

  KW_NULLS() {
    return this.getToken(HiveParser.KW_NULLS, 0);
  }

  KW_FIRST() {
    return this.getToken(HiveParser.KW_FIRST, 0);
  }

  KW_LAST() {
    return this.getToken(HiveParser.KW_LAST, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitNullOrdering(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnNameOrderContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnNameOrder;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  orderSpecification() {
    return this.getTypedRuleContext(OrderSpecificationContext, 0);
  }

  nullOrdering() {
    return this.getTypedRuleContext(NullOrderingContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnNameOrder(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnNameCommentListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnNameCommentList;
  }

  columnNameComment = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnNameCommentContext);
    } else {
      return this.getTypedRuleContext(ColumnNameCommentContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnNameCommentList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnNameCommentContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnNameComment;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_COMMENT() {
    return this.getToken(HiveParser.KW_COMMENT, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnNameComment(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnRefOrderContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnRefOrder;
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  orderSpecification() {
    return this.getTypedRuleContext(OrderSpecificationContext, 0);
  }

  nullOrdering() {
    return this.getTypedRuleContext(NullOrderingContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnRefOrder(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnNameTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnNameType;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  colType() {
    return this.getTypedRuleContext(ColTypeContext, 0);
  }

  KW_COMMENT() {
    return this.getToken(HiveParser.KW_COMMENT, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnNameType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnNameTypeOrConstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnNameTypeOrConstraint;
  }

  tableConstraint() {
    return this.getTypedRuleContext(TableConstraintContext, 0);
  }

  columnNameTypeConstraint() {
    return this.getTypedRuleContext(ColumnNameTypeConstraintContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnNameTypeOrConstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableConstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableConstraint;
  }

  createForeignKey() {
    return this.getTypedRuleContext(CreateForeignKeyContext, 0);
  }

  createConstraint() {
    return this.getTypedRuleContext(CreateConstraintContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableConstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnNameTypeConstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnNameTypeConstraint;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  colType() {
    return this.getTypedRuleContext(ColTypeContext, 0);
  }

  columnConstraint() {
    return this.getTypedRuleContext(ColumnConstraintContext, 0);
  }

  KW_COMMENT() {
    return this.getToken(HiveParser.KW_COMMENT, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnNameTypeConstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnGeneratedAsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnGeneratedAs;
  }

  KW_GENERATED() {
    return this.getToken(HiveParser.KW_GENERATED, 0);
  }

  generatedAsExpression() {
    return this.getTypedRuleContext(GeneratedAsExpressionContext, 0);
  }

  generatedAsIdentity() {
    return this.getTypedRuleContext(GeneratedAsIdentityContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnGeneratedAs(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class GeneratedAsExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_generatedAsExpression;
  }

  KW_ALWAYS() {
    return this.getToken(HiveParser.KW_ALWAYS, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitGeneratedAsExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class GeneratedAsIdentityContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_generatedAsIdentity;
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  KW_IDENTITY() {
    return this.getToken(HiveParser.KW_IDENTITY, 0);
  }

  KW_ALWAYS() {
    return this.getToken(HiveParser.KW_ALWAYS, 0);
  }

  KW_BY = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_BY);
    } else {
      return this.getToken(HiveParser.KW_BY, i);
    }
  };

  KW_DEFAULT() {
    return this.getToken(HiveParser.KW_DEFAULT, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  KW_START() {
    return this.getToken(HiveParser.KW_START, 0);
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  Number = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.Number);
    } else {
      return this.getToken(HiveParser.Number, i);
    }
  };

  KW_INCREMENT() {
    return this.getToken(HiveParser.KW_INCREMENT, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitGeneratedAsIdentity(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PartitionedColumnNameTypeConstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_partitionedColumnNameTypeConstraint;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  colType() {
    return this.getTypedRuleContext(ColTypeContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPartitionedColumnNameTypeConstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnConstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnConstraint;
  }

  foreignKeyConstraint() {
    return this.getTypedRuleContext(ForeignKeyConstraintContext, 0);
  }

  colConstraint() {
    return this.getTypedRuleContext(ColConstraintContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnConstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ForeignKeyConstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_foreignKeyConstraint;
  }

  KW_REFERENCES() {
    return this.getToken(HiveParser.KW_REFERENCES, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  columnName() {
    return this.getTypedRuleContext(ColumnNameContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  KW_CONSTRAINT() {
    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  constraintOptsCreate() {
    return this.getTypedRuleContext(ConstraintOptsCreateContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitForeignKeyConstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColConstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_colConstraint;
  }

  columnConstraintType = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnConstraintTypeContext);
    } else {
      return this.getTypedRuleContext(ColumnConstraintTypeContext, i);
    }
  };

  KW_CONSTRAINT() {
    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  constraintOptsCreate() {
    return this.getTypedRuleContext(ConstraintOptsCreateContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColConstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterColumnConstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterColumnConstraint;
  }

  alterForeignKeyConstraint() {
    return this.getTypedRuleContext(AlterForeignKeyConstraintContext, 0);
  }

  alterColConstraint() {
    return this.getTypedRuleContext(AlterColConstraintContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterColumnConstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterForeignKeyConstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterForeignKeyConstraint;
  }

  KW_REFERENCES() {
    return this.getToken(HiveParser.KW_REFERENCES, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  columnName() {
    return this.getTypedRuleContext(ColumnNameContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  KW_CONSTRAINT() {
    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  constraintOptsAlter() {
    return this.getTypedRuleContext(ConstraintOptsAlterContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterForeignKeyConstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterColConstraintContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterColConstraint;
  }

  columnConstraintType() {
    return this.getTypedRuleContext(ColumnConstraintTypeContext, 0);
  }

  KW_CONSTRAINT() {
    return this.getToken(HiveParser.KW_CONSTRAINT, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  constraintOptsAlter() {
    return this.getTypedRuleContext(ConstraintOptsAlterContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterColConstraint(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnConstraintTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnConstraintType;
  }

  KW_NOT() {
    return this.getToken(HiveParser.KW_NOT, 0);
  }

  KW_NULL() {
    return this.getToken(HiveParser.KW_NULL, 0);
  }

  KW_DEFAULT() {
    return this.getToken(HiveParser.KW_DEFAULT, 0);
  }

  defaultVal() {
    return this.getTypedRuleContext(DefaultValContext, 0);
  }

  columnGeneratedAs() {
    return this.getTypedRuleContext(ColumnGeneratedAsContext, 0);
  }

  checkConstraint() {
    return this.getTypedRuleContext(CheckConstraintContext, 0);
  }

  tableConstraintType() {
    return this.getTypedRuleContext(TableConstraintTypeContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnConstraintType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DefaultValContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_defaultVal;
  }

  constant() {
    return this.getTypedRuleContext(ConstantContext, 0);
  }

  functionStatement() {
    return this.getTypedRuleContext(FunctionStatementContext, 0);
  }

  castExpression() {
    return this.getTypedRuleContext(CastExpressionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDefaultVal(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableConstraintTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableConstraintType;
  }

  KW_PRIMARY() {
    return this.getToken(HiveParser.KW_PRIMARY, 0);
  }

  KW_KEY() {
    return this.getToken(HiveParser.KW_KEY, 0);
  }

  KW_UNIQUE() {
    return this.getToken(HiveParser.KW_UNIQUE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableConstraintType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ConstraintOptsCreateContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_constraintOptsCreate;
  }

  enableValidateSpecification() {
    return this.getTypedRuleContext(EnableValidateSpecificationContext, 0);
  }

  relySpecification() {
    return this.getTypedRuleContext(RelySpecificationContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitConstraintOptsCreate(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ConstraintOptsAlterContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_constraintOptsAlter;
  }

  enableValidateSpecification() {
    return this.getTypedRuleContext(EnableValidateSpecificationContext, 0);
  }

  relySpecification() {
    return this.getTypedRuleContext(RelySpecificationContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitConstraintOptsAlter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnNameColonTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnNameColonType;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  COLON() {
    return this.getToken(HiveParser.COLON, 0);
  }

  colType() {
    return this.getTypedRuleContext(ColTypeContext, 0);
  }

  KW_COMMENT() {
    return this.getToken(HiveParser.KW_COMMENT, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnNameColonType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_colType;
  }

  type_db_col() {
    return this.getTypedRuleContext(Type_db_colContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColTypeListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_colTypeList;
  }

  colType = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColTypeContext);
    } else {
      return this.getTypedRuleContext(ColTypeContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColTypeList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class Type_db_colContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_type_db_col;
  }

  primitiveType() {
    return this.getTypedRuleContext(PrimitiveTypeContext, 0);
  }

  listType() {
    return this.getTypedRuleContext(ListTypeContext, 0);
  }

  structType() {
    return this.getTypedRuleContext(StructTypeContext, 0);
  }

  mapType() {
    return this.getTypedRuleContext(MapTypeContext, 0);
  }

  unionType() {
    return this.getTypedRuleContext(UnionTypeContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitType_db_col(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrimitiveTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_primitiveType;
  }

  KW_TINYINT() {
    return this.getToken(HiveParser.KW_TINYINT, 0);
  }

  KW_SMALLINT() {
    return this.getToken(HiveParser.KW_SMALLINT, 0);
  }

  KW_INT() {
    return this.getToken(HiveParser.KW_INT, 0);
  }

  KW_BIGINT() {
    return this.getToken(HiveParser.KW_BIGINT, 0);
  }

  KW_BOOLEAN() {
    return this.getToken(HiveParser.KW_BOOLEAN, 0);
  }

  KW_FLOAT() {
    return this.getToken(HiveParser.KW_FLOAT, 0);
  }

  KW_DOUBLE() {
    return this.getToken(HiveParser.KW_DOUBLE, 0);
  }

  KW_PRECISION() {
    return this.getToken(HiveParser.KW_PRECISION, 0);
  }

  KW_DATE() {
    return this.getToken(HiveParser.KW_DATE, 0);
  }

  KW_DATETIME() {
    return this.getToken(HiveParser.KW_DATETIME, 0);
  }

  KW_TIMESTAMP() {
    return this.getToken(HiveParser.KW_TIMESTAMP, 0);
  }

  KW_TIMESTAMPLOCALTZ() {
    return this.getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0);
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  KW_LOCAL() {
    return this.getToken(HiveParser.KW_LOCAL, 0);
  }

  KW_TIME() {
    return this.getToken(HiveParser.KW_TIME, 0);
  }

  KW_ZONE() {
    return this.getToken(HiveParser.KW_ZONE, 0);
  }

  KW_STRING() {
    return this.getToken(HiveParser.KW_STRING, 0);
  }

  KW_BINARY() {
    return this.getToken(HiveParser.KW_BINARY, 0);
  }

  KW_DECIMAL() {
    return this.getToken(HiveParser.KW_DECIMAL, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  Number = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.Number);
    } else {
      return this.getToken(HiveParser.Number, i);
    }
  };

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  COMMA() {
    return this.getToken(HiveParser.COMMA, 0);
  }

  KW_VARCHAR() {
    return this.getToken(HiveParser.KW_VARCHAR, 0);
  }

  KW_CHAR() {
    return this.getToken(HiveParser.KW_CHAR, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrimitiveType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ListTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_listType;
  }

  KW_ARRAY() {
    return this.getToken(HiveParser.KW_ARRAY, 0);
  }

  LESSTHAN() {
    return this.getToken(HiveParser.LESSTHAN, 0);
  }

  type_db_col() {
    return this.getTypedRuleContext(Type_db_colContext, 0);
  }

  GREATERTHAN() {
    return this.getToken(HiveParser.GREATERTHAN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitListType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class StructTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_structType;
  }

  KW_STRUCT() {
    return this.getToken(HiveParser.KW_STRUCT, 0);
  }

  LESSTHAN() {
    return this.getToken(HiveParser.LESSTHAN, 0);
  }

  columnNameColonTypeList() {
    return this.getTypedRuleContext(ColumnNameColonTypeListContext, 0);
  }

  GREATERTHAN() {
    return this.getToken(HiveParser.GREATERTHAN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitStructType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class MapTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_mapType;
  }

  KW_MAP() {
    return this.getToken(HiveParser.KW_MAP, 0);
  }

  LESSTHAN() {
    return this.getToken(HiveParser.LESSTHAN, 0);
  }

  primitiveType() {
    return this.getTypedRuleContext(PrimitiveTypeContext, 0);
  }

  COMMA() {
    return this.getToken(HiveParser.COMMA, 0);
  }

  type_db_col() {
    return this.getTypedRuleContext(Type_db_colContext, 0);
  }

  GREATERTHAN() {
    return this.getToken(HiveParser.GREATERTHAN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitMapType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class UnionTypeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_unionType;
  }

  KW_UNIONTYPE() {
    return this.getToken(HiveParser.KW_UNIONTYPE, 0);
  }

  LESSTHAN() {
    return this.getToken(HiveParser.LESSTHAN, 0);
  }

  colTypeList() {
    return this.getTypedRuleContext(ColTypeListContext, 0);
  }

  GREATERTHAN() {
    return this.getToken(HiveParser.GREATERTHAN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitUnionType(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SetOperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_setOperator;
  }

  KW_UNION() {
    return this.getToken(HiveParser.KW_UNION, 0);
  }

  KW_ALL() {
    return this.getToken(HiveParser.KW_ALL, 0);
  }

  KW_DISTINCT() {
    return this.getToken(HiveParser.KW_DISTINCT, 0);
  }

  KW_INTERSECT() {
    return this.getToken(HiveParser.KW_INTERSECT, 0);
  }

  KW_EXCEPT() {
    return this.getToken(HiveParser.KW_EXCEPT, 0);
  }

  KW_MINUS() {
    return this.getToken(HiveParser.KW_MINUS, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSetOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class QueryStatementExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_queryStatementExpression;
  }

  queryStatementExpressionBody() {
    return this.getTypedRuleContext(QueryStatementExpressionBodyContext, 0);
  }

  withClause() {
    return this.getTypedRuleContext(WithClauseContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitQueryStatementExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class QueryStatementExpressionBodyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_queryStatementExpressionBody;
  }

  fromStatement() {
    return this.getTypedRuleContext(FromStatementContext, 0);
  }

  regularBody() {
    return this.getTypedRuleContext(RegularBodyContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitQueryStatementExpressionBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class WithClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_withClause;
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  cteStatement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(CteStatementContext);
    } else {
      return this.getTypedRuleContext(CteStatementContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWithClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CteStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_cteStatement;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  queryStatementExpression() {
    return this.getTypedRuleContext(QueryStatementExpressionContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCteStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class FromStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_fromStatement;
  }

  singleFromStatement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SingleFromStatementContext);
    } else {
      return this.getTypedRuleContext(SingleFromStatementContext, i);
    }
  };

  setOperator = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SetOperatorContext);
    } else {
      return this.getTypedRuleContext(SetOperatorContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitFromStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SingleFromStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_singleFromStatement;
  }

  fromClause() {
    return this.getTypedRuleContext(FromClauseContext, 0);
  }

  body = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(BodyContext);
    } else {
      return this.getTypedRuleContext(BodyContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSingleFromStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RegularBodyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_regularBody;
  }

  insertClause() {
    return this.getTypedRuleContext(InsertClauseContext, 0);
  }

  selectStatement() {
    return this.getTypedRuleContext(SelectStatementContext, 0);
  }

  valuesClause() {
    return this.getTypedRuleContext(ValuesClauseContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRegularBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AtomSelectStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_atomSelectStatement;
  }

  selectClause() {
    return this.getTypedRuleContext(SelectClauseContext, 0);
  }

  fromClause() {
    return this.getTypedRuleContext(FromClauseContext, 0);
  }

  whereClause() {
    return this.getTypedRuleContext(WhereClauseContext, 0);
  }

  groupByClause() {
    return this.getTypedRuleContext(GroupByClauseContext, 0);
  }

  havingClause() {
    return this.getTypedRuleContext(HavingClauseContext, 0);
  }

  window_clause() {
    return this.getTypedRuleContext(Window_clauseContext, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  selectStatement() {
    return this.getTypedRuleContext(SelectStatementContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAtomSelectStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SelectStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_selectStatement;
  }

  atomSelectStatement() {
    return this.getTypedRuleContext(AtomSelectStatementContext, 0);
  }

  setOpSelectStatement() {
    return this.getTypedRuleContext(SetOpSelectStatementContext, 0);
  }

  orderByClause() {
    return this.getTypedRuleContext(OrderByClauseContext, 0);
  }

  clusterByClause() {
    return this.getTypedRuleContext(ClusterByClauseContext, 0);
  }

  distributeByClause() {
    return this.getTypedRuleContext(DistributeByClauseContext, 0);
  }

  sortByClause() {
    return this.getTypedRuleContext(SortByClauseContext, 0);
  }

  limitClause() {
    return this.getTypedRuleContext(LimitClauseContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSelectStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SetOpSelectStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_setOpSelectStatement;
  }

  setOperator = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SetOperatorContext);
    } else {
      return this.getTypedRuleContext(SetOperatorContext, i);
    }
  };

  atomSelectStatement = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(AtomSelectStatementContext);
    } else {
      return this.getTypedRuleContext(AtomSelectStatementContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSetOpSelectStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SelectStatementWithCTEContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_selectStatementWithCTE;
  }

  selectStatement() {
    return this.getTypedRuleContext(SelectStatementContext, 0);
  }

  withClause() {
    return this.getTypedRuleContext(WithClauseContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSelectStatementWithCTE(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class BodyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_body;
  }

  insertClause() {
    return this.getTypedRuleContext(InsertClauseContext, 0);
  }

  selectClause() {
    return this.getTypedRuleContext(SelectClauseContext, 0);
  }

  lateralView() {
    return this.getTypedRuleContext(LateralViewContext, 0);
  }

  whereClause() {
    return this.getTypedRuleContext(WhereClauseContext, 0);
  }

  groupByClause() {
    return this.getTypedRuleContext(GroupByClauseContext, 0);
  }

  havingClause() {
    return this.getTypedRuleContext(HavingClauseContext, 0);
  }

  window_clause() {
    return this.getTypedRuleContext(Window_clauseContext, 0);
  }

  orderByClause() {
    return this.getTypedRuleContext(OrderByClauseContext, 0);
  }

  clusterByClause() {
    return this.getTypedRuleContext(ClusterByClauseContext, 0);
  }

  distributeByClause() {
    return this.getTypedRuleContext(DistributeByClauseContext, 0);
  }

  sortByClause() {
    return this.getTypedRuleContext(SortByClauseContext, 0);
  }

  limitClause() {
    return this.getTypedRuleContext(LimitClauseContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class InsertClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_insertClause;
  }

  KW_INSERT() {
    return this.getToken(HiveParser.KW_INSERT, 0);
  }

  KW_OVERWRITE() {
    return this.getToken(HiveParser.KW_OVERWRITE, 0);
  }

  destination() {
    return this.getTypedRuleContext(DestinationContext, 0);
  }

  ifNotExists() {
    return this.getTypedRuleContext(IfNotExistsContext, 0);
  }

  KW_INTO() {
    return this.getToken(HiveParser.KW_INTO, 0);
  }

  tableOrPartition() {
    return this.getTypedRuleContext(TableOrPartitionContext, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  columnNameList() {
    return this.getTypedRuleContext(ColumnNameListContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitInsertClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DestinationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_destination;
  }

  KW_DIRECTORY() {
    return this.getToken(HiveParser.KW_DIRECTORY, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  KW_LOCAL() {
    return this.getToken(HiveParser.KW_LOCAL, 0);
  }

  tableRowFormat() {
    return this.getTypedRuleContext(TableRowFormatContext, 0);
  }

  tableFileFormat() {
    return this.getTypedRuleContext(TableFileFormatContext, 0);
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  tableOrPartition() {
    return this.getTypedRuleContext(TableOrPartitionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDestination(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class LimitClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_limitClause;
  }

  KW_LIMIT() {
    return this.getToken(HiveParser.KW_LIMIT, 0);
  }

  Number = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.Number);
    } else {
      return this.getToken(HiveParser.Number, i);
    }
  };

  COMMA() {
    return this.getToken(HiveParser.COMMA, 0);
  }

  KW_OFFSET() {
    return this.getToken(HiveParser.KW_OFFSET, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitLimitClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DeleteStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_deleteStatement;
  }

  KW_DELETE() {
    return this.getToken(HiveParser.KW_DELETE, 0);
  }

  KW_FROM() {
    return this.getToken(HiveParser.KW_FROM, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  whereClause() {
    return this.getTypedRuleContext(WhereClauseContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDeleteStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnAssignmentClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnAssignmentClause;
  }

  tableOrColumn() {
    return this.getTypedRuleContext(TableOrColumnContext, 0);
  }

  EQUAL() {
    return this.getToken(HiveParser.EQUAL, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnAssignmentClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SetColumnsClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_setColumnsClause;
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  columnAssignmentClause = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnAssignmentClauseContext);
    } else {
      return this.getTypedRuleContext(ColumnAssignmentClauseContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSetColumnsClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class UpdateStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_updateStatement;
  }

  KW_UPDATE() {
    return this.getToken(HiveParser.KW_UPDATE, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  setColumnsClause() {
    return this.getTypedRuleContext(SetColumnsClauseContext, 0);
  }

  whereClause() {
    return this.getTypedRuleContext(WhereClauseContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitUpdateStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SqlTransactionStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_sqlTransactionStatement;
  }

  startTransactionStatement() {
    return this.getTypedRuleContext(StartTransactionStatementContext, 0);
  }

  commitStatement() {
    return this.getTypedRuleContext(CommitStatementContext, 0);
  }

  rollbackStatement() {
    return this.getTypedRuleContext(RollbackStatementContext, 0);
  }

  setAutoCommitStatement() {
    return this.getTypedRuleContext(SetAutoCommitStatementContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSqlTransactionStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class StartTransactionStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_startTransactionStatement;
  }

  KW_START() {
    return this.getToken(HiveParser.KW_START, 0);
  }

  KW_TRANSACTION() {
    return this.getToken(HiveParser.KW_TRANSACTION, 0);
  }

  transactionMode = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TransactionModeContext);
    } else {
      return this.getTypedRuleContext(TransactionModeContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitStartTransactionStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TransactionModeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_transactionMode;
  }

  isolationLevel() {
    return this.getTypedRuleContext(IsolationLevelContext, 0);
  }

  transactionAccessMode() {
    return this.getTypedRuleContext(TransactionAccessModeContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTransactionMode(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TransactionAccessModeContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_transactionAccessMode;
  }

  KW_READ() {
    return this.getToken(HiveParser.KW_READ, 0);
  }

  KW_ONLY() {
    return this.getToken(HiveParser.KW_ONLY, 0);
  }

  KW_WRITE() {
    return this.getToken(HiveParser.KW_WRITE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTransactionAccessMode(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IsolationLevelContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_isolationLevel;
  }

  KW_ISOLATION() {
    return this.getToken(HiveParser.KW_ISOLATION, 0);
  }

  KW_LEVEL() {
    return this.getToken(HiveParser.KW_LEVEL, 0);
  }

  levelOfIsolation() {
    return this.getTypedRuleContext(LevelOfIsolationContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitIsolationLevel(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class LevelOfIsolationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_levelOfIsolation;
  }

  KW_SNAPSHOT() {
    return this.getToken(HiveParser.KW_SNAPSHOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitLevelOfIsolation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CommitStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_commitStatement;
  }

  KW_COMMIT() {
    return this.getToken(HiveParser.KW_COMMIT, 0);
  }

  KW_WORK() {
    return this.getToken(HiveParser.KW_WORK, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCommitStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RollbackStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_rollbackStatement;
  }

  KW_ROLLBACK() {
    return this.getToken(HiveParser.KW_ROLLBACK, 0);
  }

  KW_WORK() {
    return this.getToken(HiveParser.KW_WORK, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRollbackStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SetAutoCommitStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_setAutoCommitStatement;
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  KW_AUTOCOMMIT() {
    return this.getToken(HiveParser.KW_AUTOCOMMIT, 0);
  }

  booleanValueTok() {
    return this.getTypedRuleContext(BooleanValueTokContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSetAutoCommitStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AbortTransactionStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_abortTransactionStatement;
  }

  KW_ABORT() {
    return this.getToken(HiveParser.KW_ABORT, 0);
  }

  KW_TRANSACTIONS() {
    return this.getToken(HiveParser.KW_TRANSACTIONS, 0);
  }

  Number = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.Number);
    } else {
      return this.getToken(HiveParser.Number, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAbortTransactionStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class MergeStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_mergeStatement;
  }

  KW_MERGE() {
    return this.getToken(HiveParser.KW_MERGE, 0);
  }

  KW_INTO() {
    return this.getToken(HiveParser.KW_INTO, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  KW_USING() {
    return this.getToken(HiveParser.KW_USING, 0);
  }

  joinSourcePart() {
    return this.getTypedRuleContext(JoinSourcePartContext, 0);
  }

  KW_ON() {
    return this.getToken(HiveParser.KW_ON, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  whenClauses() {
    return this.getTypedRuleContext(WhenClausesContext, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitMergeStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class WhenClausesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_whenClauses;
  }

  whenMatchedAndClause = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WhenMatchedAndClauseContext);
    } else {
      return this.getTypedRuleContext(WhenMatchedAndClauseContext, i);
    }
  };

  whenMatchedThenClause = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(WhenMatchedThenClauseContext);
    } else {
      return this.getTypedRuleContext(WhenMatchedThenClauseContext, i);
    }
  };

  whenNotMatchedClause() {
    return this.getTypedRuleContext(WhenNotMatchedClauseContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWhenClauses(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class WhenNotMatchedClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_whenNotMatchedClause;
  }

  KW_WHEN() {
    return this.getToken(HiveParser.KW_WHEN, 0);
  }

  KW_NOT() {
    return this.getToken(HiveParser.KW_NOT, 0);
  }

  KW_MATCHED() {
    return this.getToken(HiveParser.KW_MATCHED, 0);
  }

  KW_THEN() {
    return this.getToken(HiveParser.KW_THEN, 0);
  }

  KW_INSERT() {
    return this.getToken(HiveParser.KW_INSERT, 0);
  }

  KW_VALUES() {
    return this.getToken(HiveParser.KW_VALUES, 0);
  }

  valueRowConstructor() {
    return this.getTypedRuleContext(ValueRowConstructorContext, 0);
  }

  KW_AND() {
    return this.getToken(HiveParser.KW_AND, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWhenNotMatchedClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class WhenMatchedAndClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_whenMatchedAndClause;
  }

  KW_WHEN() {
    return this.getToken(HiveParser.KW_WHEN, 0);
  }

  KW_MATCHED() {
    return this.getToken(HiveParser.KW_MATCHED, 0);
  }

  KW_AND() {
    return this.getToken(HiveParser.KW_AND, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  KW_THEN() {
    return this.getToken(HiveParser.KW_THEN, 0);
  }

  updateOrDelete() {
    return this.getTypedRuleContext(UpdateOrDeleteContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWhenMatchedAndClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class WhenMatchedThenClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_whenMatchedThenClause;
  }

  KW_WHEN() {
    return this.getToken(HiveParser.KW_WHEN, 0);
  }

  KW_MATCHED() {
    return this.getToken(HiveParser.KW_MATCHED, 0);
  }

  KW_THEN() {
    return this.getToken(HiveParser.KW_THEN, 0);
  }

  updateOrDelete() {
    return this.getTypedRuleContext(UpdateOrDeleteContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWhenMatchedThenClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class UpdateOrDeleteContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_updateOrDelete;
  }

  KW_UPDATE() {
    return this.getToken(HiveParser.KW_UPDATE, 0);
  }

  setColumnsClause() {
    return this.getTypedRuleContext(SetColumnsClauseContext, 0);
  }

  KW_DELETE() {
    return this.getToken(HiveParser.KW_DELETE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitUpdateOrDelete(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class KillQueryStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_killQueryStatement;
  }

  KW_KILL() {
    return this.getToken(HiveParser.KW_KILL, 0);
  }

  KW_QUERY() {
    return this.getToken(HiveParser.KW_QUERY, 0);
  }

  StringLiteral = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.StringLiteral);
    } else {
      return this.getToken(HiveParser.StringLiteral, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitKillQueryStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SelectClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_selectClause;
  }

  KW_SELECT() {
    return this.getToken(HiveParser.KW_SELECT, 0);
  }

  QUERY_HINT() {
    return this.getToken(HiveParser.QUERY_HINT, 0);
  }

  selectList() {
    return this.getTypedRuleContext(SelectListContext, 0);
  }

  KW_TRANSFORM() {
    return this.getToken(HiveParser.KW_TRANSFORM, 0);
  }

  selectTrfmClause() {
    return this.getTypedRuleContext(SelectTrfmClauseContext, 0);
  }

  KW_ALL() {
    return this.getToken(HiveParser.KW_ALL, 0);
  }

  KW_DISTINCT() {
    return this.getToken(HiveParser.KW_DISTINCT, 0);
  }

  trfmClause() {
    return this.getTypedRuleContext(TrfmClauseContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSelectClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SelectListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_selectList;
  }

  selectItem = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SelectItemContext);
    } else {
      return this.getTypedRuleContext(SelectItemContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSelectList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SelectTrfmClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_selectTrfmClause;
  }

  LPAREN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.LPAREN);
    } else {
      return this.getToken(HiveParser.LPAREN, i);
    }
  };

  selectExpressionList() {
    return this.getTypedRuleContext(SelectExpressionListContext, 0);
  }

  RPAREN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.RPAREN);
    } else {
      return this.getToken(HiveParser.RPAREN, i);
    }
  };

  KW_USING() {
    return this.getToken(HiveParser.KW_USING, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  rowFormat = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(RowFormatContext);
    } else {
      return this.getTypedRuleContext(RowFormatContext, i);
    }
  };

  recordWriter() {
    return this.getTypedRuleContext(RecordWriterContext, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  recordReader() {
    return this.getTypedRuleContext(RecordReaderContext, 0);
  }

  aliasList() {
    return this.getTypedRuleContext(AliasListContext, 0);
  }

  columnNameTypeList() {
    return this.getTypedRuleContext(ColumnNameTypeListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSelectTrfmClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SelectItemContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_selectItem;
  }

  tableAllColumns() {
    return this.getTypedRuleContext(TableAllColumnsContext, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSelectItem(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TrfmClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_trfmClause;
  }

  KW_USING() {
    return this.getToken(HiveParser.KW_USING, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  KW_MAP() {
    return this.getToken(HiveParser.KW_MAP, 0);
  }

  selectExpressionList() {
    return this.getTypedRuleContext(SelectExpressionListContext, 0);
  }

  KW_REDUCE() {
    return this.getToken(HiveParser.KW_REDUCE, 0);
  }

  rowFormat = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(RowFormatContext);
    } else {
      return this.getTypedRuleContext(RowFormatContext, i);
    }
  };

  recordWriter() {
    return this.getTypedRuleContext(RecordWriterContext, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  recordReader() {
    return this.getTypedRuleContext(RecordReaderContext, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  aliasList() {
    return this.getTypedRuleContext(AliasListContext, 0);
  }

  columnNameTypeList() {
    return this.getTypedRuleContext(ColumnNameTypeListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTrfmClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SelectExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_selectExpression;
  }

  tableAllColumns() {
    return this.getTypedRuleContext(TableAllColumnsContext, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSelectExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SelectExpressionListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_selectExpressionList;
  }

  selectExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SelectExpressionContext);
    } else {
      return this.getTypedRuleContext(SelectExpressionContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSelectExpressionList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class Window_clauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_window_clause;
  }

  KW_WINDOW() {
    return this.getToken(HiveParser.KW_WINDOW, 0);
  }

  window_defn = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(Window_defnContext);
    } else {
      return this.getTypedRuleContext(Window_defnContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWindow_clause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class Window_defnContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_window_defn;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  window_specification() {
    return this.getTypedRuleContext(Window_specificationContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWindow_defn(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class Window_specificationContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_window_specification;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  partitioningSpec() {
    return this.getTypedRuleContext(PartitioningSpecContext, 0);
  }

  window_frame() {
    return this.getTypedRuleContext(Window_frameContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWindow_specification(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class Window_frameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_window_frame;
  }

  window_range_expression() {
    return this.getTypedRuleContext(Window_range_expressionContext, 0);
  }

  window_value_expression() {
    return this.getTypedRuleContext(Window_value_expressionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWindow_frame(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class Window_range_expressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_window_range_expression;
  }

  KW_ROWS() {
    return this.getToken(HiveParser.KW_ROWS, 0);
  }

  window_frame_start_boundary() {
    return this.getTypedRuleContext(Window_frame_start_boundaryContext, 0);
  }

  KW_BETWEEN() {
    return this.getToken(HiveParser.KW_BETWEEN, 0);
  }

  window_frame_boundary = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(Window_frame_boundaryContext);
    } else {
      return this.getTypedRuleContext(Window_frame_boundaryContext, i);
    }
  };

  KW_AND() {
    return this.getToken(HiveParser.KW_AND, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWindow_range_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class Window_value_expressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_window_value_expression;
  }

  KW_RANGE() {
    return this.getToken(HiveParser.KW_RANGE, 0);
  }

  window_frame_start_boundary() {
    return this.getTypedRuleContext(Window_frame_start_boundaryContext, 0);
  }

  KW_BETWEEN() {
    return this.getToken(HiveParser.KW_BETWEEN, 0);
  }

  window_frame_boundary = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(Window_frame_boundaryContext);
    } else {
      return this.getTypedRuleContext(Window_frame_boundaryContext, i);
    }
  };

  KW_AND() {
    return this.getToken(HiveParser.KW_AND, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWindow_value_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class Window_frame_start_boundaryContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_window_frame_start_boundary;
  }

  KW_UNBOUNDED() {
    return this.getToken(HiveParser.KW_UNBOUNDED, 0);
  }

  KW_PRECEDING() {
    return this.getToken(HiveParser.KW_PRECEDING, 0);
  }

  KW_CURRENT() {
    return this.getToken(HiveParser.KW_CURRENT, 0);
  }

  KW_ROW() {
    return this.getToken(HiveParser.KW_ROW, 0);
  }

  Number() {
    return this.getToken(HiveParser.Number, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWindow_frame_start_boundary(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class Window_frame_boundaryContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_window_frame_boundary;
  }

  KW_UNBOUNDED() {
    return this.getToken(HiveParser.KW_UNBOUNDED, 0);
  }

  KW_PRECEDING() {
    return this.getToken(HiveParser.KW_PRECEDING, 0);
  }

  KW_FOLLOWING() {
    return this.getToken(HiveParser.KW_FOLLOWING, 0);
  }

  KW_CURRENT() {
    return this.getToken(HiveParser.KW_CURRENT, 0);
  }

  KW_ROW() {
    return this.getToken(HiveParser.KW_ROW, 0);
  }

  Number() {
    return this.getToken(HiveParser.Number, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWindow_frame_boundary(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableAllColumnsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableAllColumns;
  }

  STAR() {
    return this.getToken(HiveParser.STAR, 0);
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  DOT() {
    return this.getToken(HiveParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableAllColumns(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableOrColumnContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableOrColumn;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableOrColumn(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ExpressionListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_expressionList;
  }

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitExpressionList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AliasListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_aliasList;
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAliasList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class FromClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_fromClause;
  }

  KW_FROM() {
    return this.getToken(HiveParser.KW_FROM, 0);
  }

  fromSource() {
    return this.getTypedRuleContext(FromSourceContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitFromClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class FromSourceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_fromSource;
  }

  uniqueJoinToken() {
    return this.getTypedRuleContext(UniqueJoinTokenContext, 0);
  }

  uniqueJoinSource = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(UniqueJoinSourceContext);
    } else {
      return this.getTypedRuleContext(UniqueJoinSourceContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  joinSource() {
    return this.getTypedRuleContext(JoinSourceContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitFromSource(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AtomjoinSourceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_atomjoinSource;
  }

  tableSource() {
    return this.getTypedRuleContext(TableSourceContext, 0);
  }

  lateralView = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(LateralViewContext);
    } else {
      return this.getTypedRuleContext(LateralViewContext, i);
    }
  };

  virtualTableSource() {
    return this.getTypedRuleContext(VirtualTableSourceContext, 0);
  }

  subQuerySource() {
    return this.getTypedRuleContext(SubQuerySourceContext, 0);
  }

  partitionedTableFunction() {
    return this.getTypedRuleContext(PartitionedTableFunctionContext, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  joinSource() {
    return this.getTypedRuleContext(JoinSourceContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAtomjoinSource(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class JoinSourceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_joinSource;
  }

  atomjoinSource() {
    return this.getTypedRuleContext(AtomjoinSourceContext, 0);
  }

  joinToken = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(JoinTokenContext);
    } else {
      return this.getTypedRuleContext(JoinTokenContext, i);
    }
  };

  joinSourcePart = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(JoinSourcePartContext);
    } else {
      return this.getTypedRuleContext(JoinSourcePartContext, i);
    }
  };

  KW_ON = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_ON);
    } else {
      return this.getToken(HiveParser.KW_ON, i);
    }
  };

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  KW_USING = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_USING);
    } else {
      return this.getToken(HiveParser.KW_USING, i);
    }
  };

  columnParenthesesList = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnParenthesesListContext);
    } else {
      return this.getTypedRuleContext(ColumnParenthesesListContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitJoinSource(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class JoinSourcePartContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_joinSourcePart;
  }

  tableSource() {
    return this.getTypedRuleContext(TableSourceContext, 0);
  }

  virtualTableSource() {
    return this.getTypedRuleContext(VirtualTableSourceContext, 0);
  }

  subQuerySource() {
    return this.getTypedRuleContext(SubQuerySourceContext, 0);
  }

  partitionedTableFunction() {
    return this.getTypedRuleContext(PartitionedTableFunctionContext, 0);
  }

  lateralView = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(LateralViewContext);
    } else {
      return this.getTypedRuleContext(LateralViewContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitJoinSourcePart(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class UniqueJoinSourceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_uniqueJoinSource;
  }

  uniqueJoinTableSource() {
    return this.getTypedRuleContext(UniqueJoinTableSourceContext, 0);
  }

  uniqueJoinExpr() {
    return this.getTypedRuleContext(UniqueJoinExprContext, 0);
  }

  KW_PRESERVE() {
    return this.getToken(HiveParser.KW_PRESERVE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitUniqueJoinSource(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class UniqueJoinExprContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_uniqueJoinExpr;
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  expressionList() {
    return this.getTypedRuleContext(ExpressionListContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitUniqueJoinExpr(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class UniqueJoinTokenContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_uniqueJoinToken;
  }

  KW_UNIQUEJOIN() {
    return this.getToken(HiveParser.KW_UNIQUEJOIN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitUniqueJoinToken(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class JoinTokenContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_joinToken;
  }

  KW_JOIN() {
    return this.getToken(HiveParser.KW_JOIN, 0);
  }

  KW_INNER() {
    return this.getToken(HiveParser.KW_INNER, 0);
  }

  COMMA() {
    return this.getToken(HiveParser.COMMA, 0);
  }

  KW_CROSS() {
    return this.getToken(HiveParser.KW_CROSS, 0);
  }

  KW_LEFT() {
    return this.getToken(HiveParser.KW_LEFT, 0);
  }

  KW_OUTER() {
    return this.getToken(HiveParser.KW_OUTER, 0);
  }

  KW_RIGHT() {
    return this.getToken(HiveParser.KW_RIGHT, 0);
  }

  KW_FULL() {
    return this.getToken(HiveParser.KW_FULL, 0);
  }

  KW_SEMI() {
    return this.getToken(HiveParser.KW_SEMI, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitJoinToken(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class LateralViewContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_lateralView;
  }

  KW_LATERAL() {
    return this.getToken(HiveParser.KW_LATERAL, 0);
  }

  KW_VIEW() {
    return this.getToken(HiveParser.KW_VIEW, 0);
  }

  KW_OUTER() {
    return this.getToken(HiveParser.KW_OUTER, 0);
  }

  functionStatement() {
    return this.getTypedRuleContext(FunctionStatementContext, 0);
  }

  tableAlias() {
    return this.getTypedRuleContext(TableAliasContext, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  LPAREN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.LPAREN);
    } else {
      return this.getToken(HiveParser.LPAREN, i);
    }
  };

  valuesClause() {
    return this.getTypedRuleContext(ValuesClauseContext, 0);
  }

  RPAREN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.RPAREN);
    } else {
      return this.getToken(HiveParser.RPAREN, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitLateralView(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableAliasContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableAlias;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableAlias(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableBucketSampleContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableBucketSample;
  }

  KW_TABLESAMPLE() {
    return this.getToken(HiveParser.KW_TABLESAMPLE, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  KW_BUCKET() {
    return this.getToken(HiveParser.KW_BUCKET, 0);
  }

  Number = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.Number);
    } else {
      return this.getToken(HiveParser.Number, i);
    }
  };

  KW_OUT() {
    return this.getToken(HiveParser.KW_OUT, 0);
  }

  KW_OF() {
    return this.getToken(HiveParser.KW_OF, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  KW_ON() {
    return this.getToken(HiveParser.KW_ON, 0);
  }

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableBucketSample(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SplitSampleContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_splitSample;
  }

  KW_TABLESAMPLE() {
    return this.getToken(HiveParser.KW_TABLESAMPLE, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  Number() {
    return this.getToken(HiveParser.Number, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  KW_PERCENT() {
    return this.getToken(HiveParser.KW_PERCENT, 0);
  }

  KW_ROWS() {
    return this.getToken(HiveParser.KW_ROWS, 0);
  }

  ByteLengthLiteral() {
    return this.getToken(HiveParser.ByteLengthLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSplitSample(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableSampleContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableSample;
  }

  tableBucketSample() {
    return this.getTypedRuleContext(TableBucketSampleContext, 0);
  }

  splitSample() {
    return this.getTypedRuleContext(SplitSampleContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableSample(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableSourceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableSource;
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  tableProperties() {
    return this.getTypedRuleContext(TablePropertiesContext, 0);
  }

  tableSample() {
    return this.getTypedRuleContext(TableSampleContext, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableSource(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class UniqueJoinTableSourceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_uniqueJoinTableSource;
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  tableSample() {
    return this.getTypedRuleContext(TableSampleContext, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitUniqueJoinTableSource(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableNameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableName;
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  DOT() {
    return this.getToken(HiveParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ViewNameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_viewName;
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  DOT() {
    return this.getToken(HiveParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitViewName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SubQuerySourceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_subQuerySource;
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  queryStatementExpression() {
    return this.getTypedRuleContext(QueryStatementExpressionContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSubQuerySource(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PartitioningSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_partitioningSpec;
  }

  partitionByClause() {
    return this.getTypedRuleContext(PartitionByClauseContext, 0);
  }

  orderByClause() {
    return this.getTypedRuleContext(OrderByClauseContext, 0);
  }

  distributeByClause() {
    return this.getTypedRuleContext(DistributeByClauseContext, 0);
  }

  sortByClause() {
    return this.getTypedRuleContext(SortByClauseContext, 0);
  }

  clusterByClause() {
    return this.getTypedRuleContext(ClusterByClauseContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPartitioningSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PartitionTableFunctionSourceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_partitionTableFunctionSource;
  }

  subQuerySource() {
    return this.getTypedRuleContext(SubQuerySourceContext, 0);
  }

  tableSource() {
    return this.getTypedRuleContext(TableSourceContext, 0);
  }

  partitionedTableFunction() {
    return this.getTypedRuleContext(PartitionedTableFunctionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPartitionTableFunctionSource(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PartitionedTableFunctionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_partitionedTableFunction;
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  LPAREN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.LPAREN);
    } else {
      return this.getToken(HiveParser.LPAREN, i);
    }
  };

  KW_ON() {
    return this.getToken(HiveParser.KW_ON, 0);
  }

  partitionTableFunctionSource() {
    return this.getTypedRuleContext(PartitionTableFunctionSourceContext, 0);
  }

  RPAREN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.RPAREN);
    } else {
      return this.getToken(HiveParser.RPAREN, i);
    }
  };

  partitioningSpec() {
    return this.getTypedRuleContext(PartitioningSpecContext, 0);
  }

  Identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.Identifier);
    } else {
      return this.getToken(HiveParser.Identifier, i);
    }
  };

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPartitionedTableFunction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class WhereClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_whereClause;
  }

  KW_WHERE() {
    return this.getToken(HiveParser.KW_WHERE, 0);
  }

  searchCondition() {
    return this.getTypedRuleContext(SearchConditionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWhereClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SearchConditionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_searchCondition;
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSearchCondition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ValuesClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_valuesClause;
  }

  KW_VALUES() {
    return this.getToken(HiveParser.KW_VALUES, 0);
  }

  valuesTableConstructor() {
    return this.getTypedRuleContext(ValuesTableConstructorContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitValuesClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ValuesTableConstructorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_valuesTableConstructor;
  }

  valueRowConstructor = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ValueRowConstructorContext);
    } else {
      return this.getTypedRuleContext(ValueRowConstructorContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitValuesTableConstructor(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ValueRowConstructorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_valueRowConstructor;
  }

  expressionsInParenthesis() {
    return this.getTypedRuleContext(ExpressionsInParenthesisContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitValueRowConstructor(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class VirtualTableSourceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_virtualTableSource;
  }

  KW_TABLE() {
    return this.getToken(HiveParser.KW_TABLE, 0);
  }

  LPAREN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.LPAREN);
    } else {
      return this.getToken(HiveParser.LPAREN, i);
    }
  };

  valuesClause() {
    return this.getTypedRuleContext(ValuesClauseContext, 0);
  }

  RPAREN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.RPAREN);
    } else {
      return this.getToken(HiveParser.RPAREN, i);
    }
  };

  tableAlias() {
    return this.getTypedRuleContext(TableAliasContext, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitVirtualTableSource(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class GroupByClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_groupByClause;
  }

  KW_GROUP() {
    return this.getToken(HiveParser.KW_GROUP, 0);
  }

  KW_BY() {
    return this.getToken(HiveParser.KW_BY, 0);
  }

  groupby_expression() {
    return this.getTypedRuleContext(Groupby_expressionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitGroupByClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class Groupby_expressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_groupby_expression;
  }

  rollupStandard() {
    return this.getTypedRuleContext(RollupStandardContext, 0);
  }

  rollupOldSyntax() {
    return this.getTypedRuleContext(RollupOldSyntaxContext, 0);
  }

  groupByEmpty() {
    return this.getTypedRuleContext(GroupByEmptyContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitGroupby_expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class GroupByEmptyContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_groupByEmpty;
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitGroupByEmpty(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RollupStandardContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_rollupStandard;
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  KW_ROLLUP() {
    return this.getToken(HiveParser.KW_ROLLUP, 0);
  }

  KW_CUBE() {
    return this.getToken(HiveParser.KW_CUBE, 0);
  }

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRollupStandard(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RollupOldSyntaxContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_rollupOldSyntax;
  }

  expressionsNotInParenthesis() {
    return this.getTypedRuleContext(ExpressionsNotInParenthesisContext, 0);
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  KW_ROLLUP() {
    return this.getToken(HiveParser.KW_ROLLUP, 0);
  }

  KW_CUBE() {
    return this.getToken(HiveParser.KW_CUBE, 0);
  }

  KW_GROUPING() {
    return this.getToken(HiveParser.KW_GROUPING, 0);
  }

  KW_SETS() {
    return this.getToken(HiveParser.KW_SETS, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  groupingSetExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(GroupingSetExpressionContext);
    } else {
      return this.getTypedRuleContext(GroupingSetExpressionContext, i);
    }
  };

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRollupOldSyntax(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class GroupingSetExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_groupingSetExpression;
  }

  groupingSetExpressionMultiple() {
    return this.getTypedRuleContext(GroupingSetExpressionMultipleContext, 0);
  }

  groupingExpressionSingle() {
    return this.getTypedRuleContext(GroupingExpressionSingleContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitGroupingSetExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class GroupingSetExpressionMultipleContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_groupingSetExpressionMultiple;
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitGroupingSetExpressionMultiple(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class GroupingExpressionSingleContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_groupingExpressionSingle;
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitGroupingExpressionSingle(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class HavingClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_havingClause;
  }

  KW_HAVING() {
    return this.getToken(HiveParser.KW_HAVING, 0);
  }

  havingCondition() {
    return this.getTypedRuleContext(HavingConditionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitHavingClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class HavingConditionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_havingCondition;
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitHavingCondition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ExpressionsInParenthesisContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_expressionsInParenthesis;
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  expressionsNotInParenthesis() {
    return this.getTypedRuleContext(ExpressionsNotInParenthesisContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitExpressionsInParenthesis(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ExpressionsNotInParenthesisContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_expressionsNotInParenthesis;
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  expressionPart() {
    return this.getTypedRuleContext(ExpressionPartContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitExpressionsNotInParenthesis(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ExpressionPartContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_expressionPart;
  }

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitExpressionPart(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ExpressionsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_expressions;
  }

  expressionsInParenthesis() {
    return this.getTypedRuleContext(ExpressionsInParenthesisContext, 0);
  }

  expressionsNotInParenthesis() {
    return this.getTypedRuleContext(ExpressionsNotInParenthesisContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitExpressions(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnRefOrderInParenthesisContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnRefOrderInParenthesis;
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  columnRefOrder = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnRefOrderContext);
    } else {
      return this.getTypedRuleContext(ColumnRefOrderContext, i);
    }
  };

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnRefOrderInParenthesis(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ColumnRefOrderNotInParenthesisContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_columnRefOrderNotInParenthesis;
  }

  columnRefOrder = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnRefOrderContext);
    } else {
      return this.getTypedRuleContext(ColumnRefOrderContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitColumnRefOrderNotInParenthesis(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class OrderByClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_orderByClause;
  }

  KW_ORDER() {
    return this.getToken(HiveParser.KW_ORDER, 0);
  }

  KW_BY() {
    return this.getToken(HiveParser.KW_BY, 0);
  }

  columnRefOrder = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ColumnRefOrderContext);
    } else {
      return this.getTypedRuleContext(ColumnRefOrderContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitOrderByClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ClusterByClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_clusterByClause;
  }

  KW_CLUSTER() {
    return this.getToken(HiveParser.KW_CLUSTER, 0);
  }

  KW_BY() {
    return this.getToken(HiveParser.KW_BY, 0);
  }

  expressions() {
    return this.getTypedRuleContext(ExpressionsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitClusterByClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PartitionByClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_partitionByClause;
  }

  KW_PARTITION() {
    return this.getToken(HiveParser.KW_PARTITION, 0);
  }

  KW_BY() {
    return this.getToken(HiveParser.KW_BY, 0);
  }

  expressions() {
    return this.getTypedRuleContext(ExpressionsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPartitionByClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DistributeByClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_distributeByClause;
  }

  KW_DISTRIBUTE() {
    return this.getToken(HiveParser.KW_DISTRIBUTE, 0);
  }

  KW_BY() {
    return this.getToken(HiveParser.KW_BY, 0);
  }

  expressions() {
    return this.getTypedRuleContext(ExpressionsContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDistributeByClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SortByClauseContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_sortByClause;
  }

  KW_SORT() {
    return this.getToken(HiveParser.KW_SORT, 0);
  }

  KW_BY() {
    return this.getToken(HiveParser.KW_BY, 0);
  }

  columnRefOrderInParenthesis() {
    return this.getTypedRuleContext(ColumnRefOrderInParenthesisContext, 0);
  }

  columnRefOrderNotInParenthesis() {
    return this.getTypedRuleContext(ColumnRefOrderNotInParenthesisContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSortByClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class FunctionStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_functionStatement;
  }

  functionName() {
    return this.getTypedRuleContext(FunctionNameContext, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  STAR() {
    return this.getToken(HiveParser.STAR, 0);
  }

  KW_OVER() {
    return this.getToken(HiveParser.KW_OVER, 0);
  }

  window_specification() {
    return this.getTypedRuleContext(Window_specificationContext, 0);
  }

  selectExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(SelectExpressionContext);
    } else {
      return this.getTypedRuleContext(SelectExpressionContext, i);
    }
  };

  KW_DISTINCT() {
    return this.getToken(HiveParser.KW_DISTINCT, 0);
  }

  KW_ALL() {
    return this.getToken(HiveParser.KW_ALL, 0);
  }

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitFunctionStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class FunctionNameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_functionName;
  }

  functionIdentifier() {
    return this.getTypedRuleContext(FunctionIdentifierContext, 0);
  }

  sql11ReservedKeywordsUsedAsFunctionName() {
    return this.getTypedRuleContext(
      Sql11ReservedKeywordsUsedAsFunctionNameContext,
      0
    );
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitFunctionName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CastExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_castExpression;
  }

  KW_CAST() {
    return this.getToken(HiveParser.KW_CAST, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  KW_AS() {
    return this.getToken(HiveParser.KW_AS, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  primitiveType() {
    return this.getTypedRuleContext(PrimitiveTypeContext, 0);
  }

  structType() {
    return this.getTypedRuleContext(StructTypeContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCastExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CaseExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_caseExpression;
  }

  KW_CASE() {
    return this.getToken(HiveParser.KW_CASE, 0);
  }

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  KW_END() {
    return this.getToken(HiveParser.KW_END, 0);
  }

  KW_WHEN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_WHEN);
    } else {
      return this.getToken(HiveParser.KW_WHEN, i);
    }
  };

  KW_THEN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_THEN);
    } else {
      return this.getToken(HiveParser.KW_THEN, i);
    }
  };

  KW_ELSE() {
    return this.getToken(HiveParser.KW_ELSE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCaseExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class WhenExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_whenExpression;
  }

  KW_CASE() {
    return this.getToken(HiveParser.KW_CASE, 0);
  }

  KW_END() {
    return this.getToken(HiveParser.KW_END, 0);
  }

  KW_WHEN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_WHEN);
    } else {
      return this.getToken(HiveParser.KW_WHEN, i);
    }
  };

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  KW_THEN = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_THEN);
    } else {
      return this.getToken(HiveParser.KW_THEN, i);
    }
  };

  KW_ELSE() {
    return this.getToken(HiveParser.KW_ELSE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWhenExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class FloorExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_floorExpression;
  }

  KW_FLOOR() {
    return this.getToken(HiveParser.KW_FLOOR, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  KW_TO() {
    return this.getToken(HiveParser.KW_TO, 0);
  }

  floorDateQualifiers() {
    return this.getTypedRuleContext(FloorDateQualifiersContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitFloorExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class FloorDateQualifiersContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_floorDateQualifiers;
  }

  KW_YEAR() {
    return this.getToken(HiveParser.KW_YEAR, 0);
  }

  KW_QUARTER() {
    return this.getToken(HiveParser.KW_QUARTER, 0);
  }

  KW_MONTH() {
    return this.getToken(HiveParser.KW_MONTH, 0);
  }

  KW_WEEK() {
    return this.getToken(HiveParser.KW_WEEK, 0);
  }

  KW_DAY() {
    return this.getToken(HiveParser.KW_DAY, 0);
  }

  KW_HOUR() {
    return this.getToken(HiveParser.KW_HOUR, 0);
  }

  KW_MINUTE() {
    return this.getToken(HiveParser.KW_MINUTE, 0);
  }

  KW_SECOND() {
    return this.getToken(HiveParser.KW_SECOND, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitFloorDateQualifiers(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ExtractExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_extractExpression;
  }

  KW_EXTRACT() {
    return this.getToken(HiveParser.KW_EXTRACT, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  timeQualifiers() {
    return this.getTypedRuleContext(TimeQualifiersContext, 0);
  }

  KW_FROM() {
    return this.getToken(HiveParser.KW_FROM, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitExtractExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TimeQualifiersContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_timeQualifiers;
  }

  KW_YEAR() {
    return this.getToken(HiveParser.KW_YEAR, 0);
  }

  KW_QUARTER() {
    return this.getToken(HiveParser.KW_QUARTER, 0);
  }

  KW_MONTH() {
    return this.getToken(HiveParser.KW_MONTH, 0);
  }

  KW_WEEK() {
    return this.getToken(HiveParser.KW_WEEK, 0);
  }

  KW_DAY() {
    return this.getToken(HiveParser.KW_DAY, 0);
  }

  KW_DOW() {
    return this.getToken(HiveParser.KW_DOW, 0);
  }

  KW_HOUR() {
    return this.getToken(HiveParser.KW_HOUR, 0);
  }

  KW_MINUTE() {
    return this.getToken(HiveParser.KW_MINUTE, 0);
  }

  KW_SECOND() {
    return this.getToken(HiveParser.KW_SECOND, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTimeQualifiers(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ConstantContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_constant;
  }

  intervalLiteral() {
    return this.getTypedRuleContext(IntervalLiteralContext, 0);
  }

  Number() {
    return this.getToken(HiveParser.Number, 0);
  }

  dateLiteral() {
    return this.getTypedRuleContext(DateLiteralContext, 0);
  }

  timestampLiteral() {
    return this.getTypedRuleContext(TimestampLiteralContext, 0);
  }

  timestampLocalTZLiteral() {
    return this.getTypedRuleContext(TimestampLocalTZLiteralContext, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  stringLiteralSequence() {
    return this.getTypedRuleContext(StringLiteralSequenceContext, 0);
  }

  IntegralLiteral() {
    return this.getToken(HiveParser.IntegralLiteral, 0);
  }

  NumberLiteral() {
    return this.getToken(HiveParser.NumberLiteral, 0);
  }

  charSetStringLiteral() {
    return this.getTypedRuleContext(CharSetStringLiteralContext, 0);
  }

  booleanValue() {
    return this.getTypedRuleContext(BooleanValueContext, 0);
  }

  KW_NULL() {
    return this.getToken(HiveParser.KW_NULL, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitConstant(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class StringLiteralSequenceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_stringLiteralSequence;
  }

  StringLiteral = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.StringLiteral);
    } else {
      return this.getToken(HiveParser.StringLiteral, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitStringLiteralSequence(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CharSetStringLiteralContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_charSetStringLiteral;
  }

  CharSetName() {
    return this.getToken(HiveParser.CharSetName, 0);
  }

  CharSetLiteral() {
    return this.getToken(HiveParser.CharSetLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCharSetStringLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DateLiteralContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dateLiteral;
  }

  KW_DATE() {
    return this.getToken(HiveParser.KW_DATE, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  KW_CURRENT_DATE() {
    return this.getToken(HiveParser.KW_CURRENT_DATE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDateLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TimestampLiteralContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_timestampLiteral;
  }

  KW_TIMESTAMP() {
    return this.getToken(HiveParser.KW_TIMESTAMP, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  KW_CURRENT_TIMESTAMP() {
    return this.getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTimestampLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TimestampLocalTZLiteralContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_timestampLocalTZLiteral;
  }

  KW_TIMESTAMPLOCALTZ() {
    return this.getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTimestampLocalTZLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IntervalValueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_intervalValue;
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  Number() {
    return this.getToken(HiveParser.Number, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitIntervalValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IntervalLiteralContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_intervalLiteral;
  }

  intervalValue() {
    return this.getTypedRuleContext(IntervalValueContext, 0);
  }

  intervalQualifiers() {
    return this.getTypedRuleContext(IntervalQualifiersContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitIntervalLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IntervalExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_intervalExpression;
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  intervalValue() {
    return this.getTypedRuleContext(IntervalValueContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  intervalQualifiers() {
    return this.getTypedRuleContext(IntervalQualifiersContext, 0);
  }

  KW_INTERVAL() {
    return this.getToken(HiveParser.KW_INTERVAL, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitIntervalExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IntervalQualifiersContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_intervalQualifiers;
  }

  KW_YEAR() {
    return this.getToken(HiveParser.KW_YEAR, 0);
  }

  KW_TO() {
    return this.getToken(HiveParser.KW_TO, 0);
  }

  KW_MONTH() {
    return this.getToken(HiveParser.KW_MONTH, 0);
  }

  KW_DAY() {
    return this.getToken(HiveParser.KW_DAY, 0);
  }

  KW_SECOND() {
    return this.getToken(HiveParser.KW_SECOND, 0);
  }

  KW_HOUR() {
    return this.getToken(HiveParser.KW_HOUR, 0);
  }

  KW_MINUTE() {
    return this.getToken(HiveParser.KW_MINUTE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitIntervalQualifiers(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AtomExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_atomExpression;
  }

  constant() {
    return this.getTypedRuleContext(ConstantContext, 0);
  }

  intervalExpression() {
    return this.getTypedRuleContext(IntervalExpressionContext, 0);
  }

  castExpression() {
    return this.getTypedRuleContext(CastExpressionContext, 0);
  }

  extractExpression() {
    return this.getTypedRuleContext(ExtractExpressionContext, 0);
  }

  floorExpression() {
    return this.getTypedRuleContext(FloorExpressionContext, 0);
  }

  caseExpression() {
    return this.getTypedRuleContext(CaseExpressionContext, 0);
  }

  whenExpression() {
    return this.getTypedRuleContext(WhenExpressionContext, 0);
  }

  subQueryExpression() {
    return this.getTypedRuleContext(SubQueryExpressionContext, 0);
  }

  functionStatement() {
    return this.getTypedRuleContext(FunctionStatementContext, 0);
  }

  tableOrColumn() {
    return this.getTypedRuleContext(TableOrColumnContext, 0);
  }

  expressionsInParenthesis() {
    return this.getTypedRuleContext(ExpressionsInParenthesisContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAtomExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedenceUnaryOperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedenceUnaryOperator;
  }

  PLUS() {
    return this.getToken(HiveParser.PLUS, 0);
  }

  MINUS() {
    return this.getToken(HiveParser.MINUS, 0);
  }

  TILDE() {
    return this.getToken(HiveParser.TILDE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedenceUnaryOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IsConditionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_isCondition;
  }

  KW_NULL() {
    return this.getToken(HiveParser.KW_NULL, 0);
  }

  KW_TRUE() {
    return this.getToken(HiveParser.KW_TRUE, 0);
  }

  KW_FALSE() {
    return this.getToken(HiveParser.KW_FALSE, 0);
  }

  KW_NOT() {
    return this.getToken(HiveParser.KW_NOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitIsCondition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedenceBitwiseXorOperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedenceBitwiseXorOperator;
  }

  BITWISEXOR() {
    return this.getToken(HiveParser.BITWISEXOR, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedenceBitwiseXorOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedenceStarOperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedenceStarOperator;
  }

  STAR() {
    return this.getToken(HiveParser.STAR, 0);
  }

  DIVIDE() {
    return this.getToken(HiveParser.DIVIDE, 0);
  }

  MOD() {
    return this.getToken(HiveParser.MOD, 0);
  }

  DIV() {
    return this.getToken(HiveParser.DIV, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedenceStarOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedencePlusOperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedencePlusOperator;
  }

  PLUS() {
    return this.getToken(HiveParser.PLUS, 0);
  }

  MINUS() {
    return this.getToken(HiveParser.MINUS, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedencePlusOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedenceConcatenateOperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedenceConcatenateOperator;
  }

  CONCATENATE() {
    return this.getToken(HiveParser.CONCATENATE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedenceConcatenateOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedenceAmpersandOperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedenceAmpersandOperator;
  }

  AMPERSAND() {
    return this.getToken(HiveParser.AMPERSAND, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedenceAmpersandOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedenceBitwiseOrOperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedenceBitwiseOrOperator;
  }

  BITWISEOR() {
    return this.getToken(HiveParser.BITWISEOR, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedenceBitwiseOrOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedenceRegexpOperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedenceRegexpOperator;
  }

  KW_LIKE() {
    return this.getToken(HiveParser.KW_LIKE, 0);
  }

  KW_RLIKE() {
    return this.getToken(HiveParser.KW_RLIKE, 0);
  }

  KW_REGEXP() {
    return this.getToken(HiveParser.KW_REGEXP, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedenceRegexpOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedenceSimilarOperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedenceSimilarOperator;
  }

  precedenceRegexpOperator() {
    return this.getTypedRuleContext(PrecedenceRegexpOperatorContext, 0);
  }

  LESSTHANOREQUALTO() {
    return this.getToken(HiveParser.LESSTHANOREQUALTO, 0);
  }

  LESSTHAN() {
    return this.getToken(HiveParser.LESSTHAN, 0);
  }

  GREATERTHANOREQUALTO() {
    return this.getToken(HiveParser.GREATERTHANOREQUALTO, 0);
  }

  GREATERTHAN() {
    return this.getToken(HiveParser.GREATERTHAN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedenceSimilarOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedenceDistinctOperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedenceDistinctOperator;
  }

  KW_IS() {
    return this.getToken(HiveParser.KW_IS, 0);
  }

  KW_DISTINCT() {
    return this.getToken(HiveParser.KW_DISTINCT, 0);
  }

  KW_FROM() {
    return this.getToken(HiveParser.KW_FROM, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedenceDistinctOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedenceEqualOperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedenceEqualOperator;
  }

  EQUAL() {
    return this.getToken(HiveParser.EQUAL, 0);
  }

  EQUAL_NS() {
    return this.getToken(HiveParser.EQUAL_NS, 0);
  }

  NOTEQUAL() {
    return this.getToken(HiveParser.NOTEQUAL, 0);
  }

  KW_IS() {
    return this.getToken(HiveParser.KW_IS, 0);
  }

  KW_NOT() {
    return this.getToken(HiveParser.KW_NOT, 0);
  }

  KW_DISTINCT() {
    return this.getToken(HiveParser.KW_DISTINCT, 0);
  }

  KW_FROM() {
    return this.getToken(HiveParser.KW_FROM, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedenceEqualOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedenceNotOperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedenceNotOperator;
  }

  KW_NOT() {
    return this.getToken(HiveParser.KW_NOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedenceNotOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedenceAndOperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedenceAndOperator;
  }

  KW_AND() {
    return this.getToken(HiveParser.KW_AND, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedenceAndOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedenceOrOperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedenceOrOperator;
  }

  KW_OR() {
    return this.getToken(HiveParser.KW_OR, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedenceOrOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_expression;
  }

  atomExpression() {
    return this.getTypedRuleContext(AtomExpressionContext, 0);
  }

  LSQUARE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.LSQUARE);
    } else {
      return this.getToken(HiveParser.LSQUARE, i);
    }
  };

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  RSQUARE = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.RSQUARE);
    } else {
      return this.getToken(HiveParser.RSQUARE, i);
    }
  };

  DOT = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.DOT);
    } else {
      return this.getToken(HiveParser.DOT, i);
    }
  };

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  precedenceUnaryOperator() {
    return this.getTypedRuleContext(PrecedenceUnaryOperatorContext, 0);
  }

  KW_EXISTS() {
    return this.getToken(HiveParser.KW_EXISTS, 0);
  }

  subQueryExpression() {
    return this.getTypedRuleContext(SubQueryExpressionContext, 0);
  }

  precedenceNotOperator() {
    return this.getTypedRuleContext(PrecedenceNotOperatorContext, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  precedenceBitwiseXorOperator() {
    return this.getTypedRuleContext(PrecedenceBitwiseXorOperatorContext, 0);
  }

  precedenceStarOperator() {
    return this.getTypedRuleContext(PrecedenceStarOperatorContext, 0);
  }

  precedencePlusOperator() {
    return this.getTypedRuleContext(PrecedencePlusOperatorContext, 0);
  }

  precedenceConcatenateOperator() {
    return this.getTypedRuleContext(PrecedenceConcatenateOperatorContext, 0);
  }

  precedenceAmpersandOperator() {
    return this.getTypedRuleContext(PrecedenceAmpersandOperatorContext, 0);
  }

  precedenceBitwiseOrOperator() {
    return this.getTypedRuleContext(PrecedenceBitwiseOrOperatorContext, 0);
  }

  precedenceEqualOperator() {
    return this.getTypedRuleContext(PrecedenceEqualOperatorContext, 0);
  }

  precedenceDistinctOperator() {
    return this.getTypedRuleContext(PrecedenceDistinctOperatorContext, 0);
  }

  precedenceAndOperator() {
    return this.getTypedRuleContext(PrecedenceAndOperatorContext, 0);
  }

  precedenceOrOperator() {
    return this.getTypedRuleContext(PrecedenceOrOperatorContext, 0);
  }

  KW_IS() {
    return this.getToken(HiveParser.KW_IS, 0);
  }

  isCondition() {
    return this.getTypedRuleContext(IsConditionContext, 0);
  }

  precedenceSimilarExpressionPart() {
    return this.getTypedRuleContext(PrecedenceSimilarExpressionPartContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SubQueryExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_subQueryExpression;
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  selectStatement() {
    return this.getTypedRuleContext(SelectStatementContext, 0);
  }

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSubQueryExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedenceSimilarExpressionPartContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedenceSimilarExpressionPart;
  }

  precedenceSimilarOperator() {
    return this.getTypedRuleContext(PrecedenceSimilarOperatorContext, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  precedenceSimilarExpressionAtom() {
    return this.getTypedRuleContext(PrecedenceSimilarExpressionAtomContext, 0);
  }

  KW_NOT() {
    return this.getToken(HiveParser.KW_NOT, 0);
  }

  precedenceSimilarExpressionPartNot() {
    return this.getTypedRuleContext(
      PrecedenceSimilarExpressionPartNotContext,
      0
    );
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedenceSimilarExpressionPart(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedenceSimilarExpressionAtomContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedenceSimilarExpressionAtom;
  }

  KW_IN() {
    return this.getToken(HiveParser.KW_IN, 0);
  }

  precedenceSimilarExpressionIn() {
    return this.getTypedRuleContext(PrecedenceSimilarExpressionInContext, 0);
  }

  KW_BETWEEN() {
    return this.getToken(HiveParser.KW_BETWEEN, 0);
  }

  expression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(ExpressionContext);
    } else {
      return this.getTypedRuleContext(ExpressionContext, i);
    }
  };

  KW_AND() {
    return this.getToken(HiveParser.KW_AND, 0);
  }

  KW_LIKE() {
    return this.getToken(HiveParser.KW_LIKE, 0);
  }

  KW_ANY() {
    return this.getToken(HiveParser.KW_ANY, 0);
  }

  expressionsInParenthesis() {
    return this.getTypedRuleContext(ExpressionsInParenthesisContext, 0);
  }

  KW_ALL() {
    return this.getToken(HiveParser.KW_ALL, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedenceSimilarExpressionAtom(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedenceSimilarExpressionInContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedenceSimilarExpressionIn;
  }

  subQueryExpression() {
    return this.getTypedRuleContext(SubQueryExpressionContext, 0);
  }

  expressionsInParenthesis() {
    return this.getTypedRuleContext(ExpressionsInParenthesisContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedenceSimilarExpressionIn(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrecedenceSimilarExpressionPartNotContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_precedenceSimilarExpressionPartNot;
  }

  precedenceRegexpOperator() {
    return this.getTypedRuleContext(PrecedenceRegexpOperatorContext, 0);
  }

  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }

  precedenceSimilarExpressionAtom() {
    return this.getTypedRuleContext(PrecedenceSimilarExpressionAtomContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrecedenceSimilarExpressionPartNot(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class BooleanValueContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_booleanValue;
  }

  KW_TRUE() {
    return this.getToken(HiveParser.KW_TRUE, 0);
  }

  KW_FALSE() {
    return this.getToken(HiveParser.KW_FALSE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitBooleanValue(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class BooleanValueTokContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_booleanValueTok;
  }

  KW_TRUE() {
    return this.getToken(HiveParser.KW_TRUE, 0);
  }

  KW_FALSE() {
    return this.getToken(HiveParser.KW_FALSE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitBooleanValueTok(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TableOrPartitionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_tableOrPartition;
  }

  tableName() {
    return this.getTypedRuleContext(TableNameContext, 0);
  }

  partitionSpec() {
    return this.getTypedRuleContext(PartitionSpecContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTableOrPartition(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PartitionSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_partitionSpec;
  }

  KW_PARTITION() {
    return this.getToken(HiveParser.KW_PARTITION, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  partitionVal = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PartitionValContext);
    } else {
      return this.getTypedRuleContext(PartitionValContext, i);
    }
  };

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPartitionSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PartitionValContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_partitionVal;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  EQUAL() {
    return this.getToken(HiveParser.EQUAL, 0);
  }

  constant() {
    return this.getTypedRuleContext(ConstantContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPartitionVal(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropPartitionSpecContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dropPartitionSpec;
  }

  KW_PARTITION() {
    return this.getToken(HiveParser.KW_PARTITION, 0);
  }

  LPAREN() {
    return this.getToken(HiveParser.LPAREN, 0);
  }

  dropPartitionVal = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(DropPartitionValContext);
    } else {
      return this.getTypedRuleContext(DropPartitionValContext, i);
    }
  };

  RPAREN() {
    return this.getToken(HiveParser.RPAREN, 0);
  }

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDropPartitionSpec(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropPartitionValContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dropPartitionVal;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  dropPartitionOperator() {
    return this.getTypedRuleContext(DropPartitionOperatorContext, 0);
  }

  constant() {
    return this.getTypedRuleContext(ConstantContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDropPartitionVal(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropPartitionOperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dropPartitionOperator;
  }

  EQUAL() {
    return this.getToken(HiveParser.EQUAL, 0);
  }

  NOTEQUAL() {
    return this.getToken(HiveParser.NOTEQUAL, 0);
  }

  LESSTHANOREQUALTO() {
    return this.getToken(HiveParser.LESSTHANOREQUALTO, 0);
  }

  LESSTHAN() {
    return this.getToken(HiveParser.LESSTHAN, 0);
  }

  GREATERTHANOREQUALTO() {
    return this.getToken(HiveParser.GREATERTHANOREQUALTO, 0);
  }

  GREATERTHAN() {
    return this.getToken(HiveParser.GREATERTHAN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDropPartitionOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class SysFuncNamesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_sysFuncNames;
  }

  KW_AND() {
    return this.getToken(HiveParser.KW_AND, 0);
  }

  KW_OR() {
    return this.getToken(HiveParser.KW_OR, 0);
  }

  KW_NOT() {
    return this.getToken(HiveParser.KW_NOT, 0);
  }

  KW_LIKE() {
    return this.getToken(HiveParser.KW_LIKE, 0);
  }

  KW_IF() {
    return this.getToken(HiveParser.KW_IF, 0);
  }

  KW_CASE() {
    return this.getToken(HiveParser.KW_CASE, 0);
  }

  KW_WHEN() {
    return this.getToken(HiveParser.KW_WHEN, 0);
  }

  KW_FLOOR() {
    return this.getToken(HiveParser.KW_FLOOR, 0);
  }

  KW_TINYINT() {
    return this.getToken(HiveParser.KW_TINYINT, 0);
  }

  KW_SMALLINT() {
    return this.getToken(HiveParser.KW_SMALLINT, 0);
  }

  KW_INT() {
    return this.getToken(HiveParser.KW_INT, 0);
  }

  KW_BIGINT() {
    return this.getToken(HiveParser.KW_BIGINT, 0);
  }

  KW_FLOAT() {
    return this.getToken(HiveParser.KW_FLOAT, 0);
  }

  KW_DOUBLE() {
    return this.getToken(HiveParser.KW_DOUBLE, 0);
  }

  KW_BOOLEAN() {
    return this.getToken(HiveParser.KW_BOOLEAN, 0);
  }

  KW_STRING() {
    return this.getToken(HiveParser.KW_STRING, 0);
  }

  KW_BINARY() {
    return this.getToken(HiveParser.KW_BINARY, 0);
  }

  KW_ARRAY() {
    return this.getToken(HiveParser.KW_ARRAY, 0);
  }

  KW_MAP() {
    return this.getToken(HiveParser.KW_MAP, 0);
  }

  KW_STRUCT() {
    return this.getToken(HiveParser.KW_STRUCT, 0);
  }

  KW_UNIONTYPE() {
    return this.getToken(HiveParser.KW_UNIONTYPE, 0);
  }

  EQUAL() {
    return this.getToken(HiveParser.EQUAL, 0);
  }

  EQUAL_NS() {
    return this.getToken(HiveParser.EQUAL_NS, 0);
  }

  NOTEQUAL() {
    return this.getToken(HiveParser.NOTEQUAL, 0);
  }

  LESSTHANOREQUALTO() {
    return this.getToken(HiveParser.LESSTHANOREQUALTO, 0);
  }

  LESSTHAN() {
    return this.getToken(HiveParser.LESSTHAN, 0);
  }

  GREATERTHANOREQUALTO() {
    return this.getToken(HiveParser.GREATERTHANOREQUALTO, 0);
  }

  GREATERTHAN() {
    return this.getToken(HiveParser.GREATERTHAN, 0);
  }

  DIVIDE() {
    return this.getToken(HiveParser.DIVIDE, 0);
  }

  PLUS() {
    return this.getToken(HiveParser.PLUS, 0);
  }

  MINUS() {
    return this.getToken(HiveParser.MINUS, 0);
  }

  STAR() {
    return this.getToken(HiveParser.STAR, 0);
  }

  MOD() {
    return this.getToken(HiveParser.MOD, 0);
  }

  DIV() {
    return this.getToken(HiveParser.DIV, 0);
  }

  AMPERSAND() {
    return this.getToken(HiveParser.AMPERSAND, 0);
  }

  TILDE() {
    return this.getToken(HiveParser.TILDE, 0);
  }

  BITWISEOR() {
    return this.getToken(HiveParser.BITWISEOR, 0);
  }

  BITWISEXOR() {
    return this.getToken(HiveParser.BITWISEXOR, 0);
  }

  KW_RLIKE() {
    return this.getToken(HiveParser.KW_RLIKE, 0);
  }

  KW_REGEXP() {
    return this.getToken(HiveParser.KW_REGEXP, 0);
  }

  KW_IN() {
    return this.getToken(HiveParser.KW_IN, 0);
  }

  KW_BETWEEN() {
    return this.getToken(HiveParser.KW_BETWEEN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSysFuncNames(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DescFuncNamesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_descFuncNames;
  }

  sysFuncNames() {
    return this.getTypedRuleContext(SysFuncNamesContext, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  functionIdentifier() {
    return this.getTypedRuleContext(FunctionIdentifierContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDescFuncNames(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class IdentifierContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_identifier;
  }

  Identifier() {
    return this.getToken(HiveParser.Identifier, 0);
  }

  LCURLY = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.LCURLY);
    } else {
      return this.getToken(HiveParser.LCURLY, i);
    }
  };

  RCURLY = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.RCURLY);
    } else {
      return this.getToken(HiveParser.RCURLY, i);
    }
  };

  nonReserved() {
    return this.getTypedRuleContext(NonReservedContext, 0);
  }

  databricksAllowedReservedNames() {
    return this.getTypedRuleContext(DatabricksAllowedReservedNamesContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class FunctionIdentifierContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_functionIdentifier;
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  DOT() {
    return this.getToken(HiveParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitFunctionIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PrincipalIdentifierContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_principalIdentifier;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  QuotedIdentifier() {
    return this.getToken(HiveParser.QuotedIdentifier, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPrincipalIdentifier(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class NonReservedContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_nonReserved;
  }

  KW_ABORT() {
    return this.getToken(HiveParser.KW_ABORT, 0);
  }

  KW_ADD() {
    return this.getToken(HiveParser.KW_ADD, 0);
  }

  KW_ADMIN() {
    return this.getToken(HiveParser.KW_ADMIN, 0);
  }

  KW_AFTER() {
    return this.getToken(HiveParser.KW_AFTER, 0);
  }

  KW_ANALYZE() {
    return this.getToken(HiveParser.KW_ANALYZE, 0);
  }

  KW_ARCHIVE() {
    return this.getToken(HiveParser.KW_ARCHIVE, 0);
  }

  KW_ASC() {
    return this.getToken(HiveParser.KW_ASC, 0);
  }

  KW_BEFORE() {
    return this.getToken(HiveParser.KW_BEFORE, 0);
  }

  KW_BUCKET() {
    return this.getToken(HiveParser.KW_BUCKET, 0);
  }

  KW_BUCKETS() {
    return this.getToken(HiveParser.KW_BUCKETS, 0);
  }

  KW_CASCADE() {
    return this.getToken(HiveParser.KW_CASCADE, 0);
  }

  KW_CHANGE() {
    return this.getToken(HiveParser.KW_CHANGE, 0);
  }

  KW_CHECK() {
    return this.getToken(HiveParser.KW_CHECK, 0);
  }

  KW_CLUSTER() {
    return this.getToken(HiveParser.KW_CLUSTER, 0);
  }

  KW_CLUSTERED() {
    return this.getToken(HiveParser.KW_CLUSTERED, 0);
  }

  KW_CLUSTERSTATUS() {
    return this.getToken(HiveParser.KW_CLUSTERSTATUS, 0);
  }

  KW_COLLECTION() {
    return this.getToken(HiveParser.KW_COLLECTION, 0);
  }

  KW_COLUMNS() {
    return this.getToken(HiveParser.KW_COLUMNS, 0);
  }

  KW_COMMENT() {
    return this.getToken(HiveParser.KW_COMMENT, 0);
  }

  KW_COMPACT() {
    return this.getToken(HiveParser.KW_COMPACT, 0);
  }

  KW_COMPACTIONS() {
    return this.getToken(HiveParser.KW_COMPACTIONS, 0);
  }

  KW_COMPUTE() {
    return this.getToken(HiveParser.KW_COMPUTE, 0);
  }

  KW_CONCATENATE() {
    return this.getToken(HiveParser.KW_CONCATENATE, 0);
  }

  KW_CONTINUE() {
    return this.getToken(HiveParser.KW_CONTINUE, 0);
  }

  KW_DATA() {
    return this.getToken(HiveParser.KW_DATA, 0);
  }

  KW_DAY() {
    return this.getToken(HiveParser.KW_DAY, 0);
  }

  KW_DATABASES() {
    return this.getToken(HiveParser.KW_DATABASES, 0);
  }

  KW_DATETIME() {
    return this.getToken(HiveParser.KW_DATETIME, 0);
  }

  KW_DBPROPERTIES() {
    return this.getToken(HiveParser.KW_DBPROPERTIES, 0);
  }

  KW_DEFERRED() {
    return this.getToken(HiveParser.KW_DEFERRED, 0);
  }

  KW_DEFINED() {
    return this.getToken(HiveParser.KW_DEFINED, 0);
  }

  KW_DELIMITED() {
    return this.getToken(HiveParser.KW_DELIMITED, 0);
  }

  KW_DEPENDENCY() {
    return this.getToken(HiveParser.KW_DEPENDENCY, 0);
  }

  KW_DESC() {
    return this.getToken(HiveParser.KW_DESC, 0);
  }

  KW_DIRECTORIES() {
    return this.getToken(HiveParser.KW_DIRECTORIES, 0);
  }

  KW_DIRECTORY() {
    return this.getToken(HiveParser.KW_DIRECTORY, 0);
  }

  KW_DISABLE() {
    return this.getToken(HiveParser.KW_DISABLE, 0);
  }

  KW_DISTRIBUTE() {
    return this.getToken(HiveParser.KW_DISTRIBUTE, 0);
  }

  KW_DOW() {
    return this.getToken(HiveParser.KW_DOW, 0);
  }

  KW_ELEM_TYPE() {
    return this.getToken(HiveParser.KW_ELEM_TYPE, 0);
  }

  KW_ENABLE() {
    return this.getToken(HiveParser.KW_ENABLE, 0);
  }

  KW_ENFORCED() {
    return this.getToken(HiveParser.KW_ENFORCED, 0);
  }

  KW_ESCAPED() {
    return this.getToken(HiveParser.KW_ESCAPED, 0);
  }

  KW_EXCLUSIVE() {
    return this.getToken(HiveParser.KW_EXCLUSIVE, 0);
  }

  KW_EXPLAIN() {
    return this.getToken(HiveParser.KW_EXPLAIN, 0);
  }

  KW_EXPORT() {
    return this.getToken(HiveParser.KW_EXPORT, 0);
  }

  KW_FIELDS() {
    return this.getToken(HiveParser.KW_FIELDS, 0);
  }

  KW_FILE() {
    return this.getToken(HiveParser.KW_FILE, 0);
  }

  KW_FILEFORMAT() {
    return this.getToken(HiveParser.KW_FILEFORMAT, 0);
  }

  KW_FIRST() {
    return this.getToken(HiveParser.KW_FIRST, 0);
  }

  KW_FORMAT() {
    return this.getToken(HiveParser.KW_FORMAT, 0);
  }

  KW_FORMATTED() {
    return this.getToken(HiveParser.KW_FORMATTED, 0);
  }

  KW_FUNCTIONS() {
    return this.getToken(HiveParser.KW_FUNCTIONS, 0);
  }

  KW_HOUR() {
    return this.getToken(HiveParser.KW_HOUR, 0);
  }

  KW_IDXPROPERTIES() {
    return this.getToken(HiveParser.KW_IDXPROPERTIES, 0);
  }

  KW_INDEX() {
    return this.getToken(HiveParser.KW_INDEX, 0);
  }

  KW_INDEXES() {
    return this.getToken(HiveParser.KW_INDEXES, 0);
  }

  KW_INPATH() {
    return this.getToken(HiveParser.KW_INPATH, 0);
  }

  KW_INPUTDRIVER() {
    return this.getToken(HiveParser.KW_INPUTDRIVER, 0);
  }

  KW_INPUTFORMAT() {
    return this.getToken(HiveParser.KW_INPUTFORMAT, 0);
  }

  KW_ITEMS() {
    return this.getToken(HiveParser.KW_ITEMS, 0);
  }

  KW_JAR() {
    return this.getToken(HiveParser.KW_JAR, 0);
  }

  KW_KILL() {
    return this.getToken(HiveParser.KW_KILL, 0);
  }

  KW_KEYS() {
    return this.getToken(HiveParser.KW_KEYS, 0);
  }

  KW_KEY_TYPE() {
    return this.getToken(HiveParser.KW_KEY_TYPE, 0);
  }

  KW_LAST() {
    return this.getToken(HiveParser.KW_LAST, 0);
  }

  KW_LIMIT() {
    return this.getToken(HiveParser.KW_LIMIT, 0);
  }

  KW_OFFSET() {
    return this.getToken(HiveParser.KW_OFFSET, 0);
  }

  KW_LINES() {
    return this.getToken(HiveParser.KW_LINES, 0);
  }

  KW_LOAD() {
    return this.getToken(HiveParser.KW_LOAD, 0);
  }

  KW_LOCATION() {
    return this.getToken(HiveParser.KW_LOCATION, 0);
  }

  KW_LOCK() {
    return this.getToken(HiveParser.KW_LOCK, 0);
  }

  KW_LOCKS() {
    return this.getToken(HiveParser.KW_LOCKS, 0);
  }

  KW_LOGICAL() {
    return this.getToken(HiveParser.KW_LOGICAL, 0);
  }

  KW_LONG() {
    return this.getToken(HiveParser.KW_LONG, 0);
  }

  KW_MAPJOIN() {
    return this.getToken(HiveParser.KW_MAPJOIN, 0);
  }

  KW_MATERIALIZED() {
    return this.getToken(HiveParser.KW_MATERIALIZED, 0);
  }

  KW_METADATA() {
    return this.getToken(HiveParser.KW_METADATA, 0);
  }

  KW_MINUTE() {
    return this.getToken(HiveParser.KW_MINUTE, 0);
  }

  KW_MONTH() {
    return this.getToken(HiveParser.KW_MONTH, 0);
  }

  KW_MSCK() {
    return this.getToken(HiveParser.KW_MSCK, 0);
  }

  KW_NOSCAN() {
    return this.getToken(HiveParser.KW_NOSCAN, 0);
  }

  KW_NULLS() {
    return this.getToken(HiveParser.KW_NULLS, 0);
  }

  KW_OPTION() {
    return this.getToken(HiveParser.KW_OPTION, 0);
  }

  KW_OUTPUTDRIVER() {
    return this.getToken(HiveParser.KW_OUTPUTDRIVER, 0);
  }

  KW_OUTPUTFORMAT() {
    return this.getToken(HiveParser.KW_OUTPUTFORMAT, 0);
  }

  KW_OVERWRITE() {
    return this.getToken(HiveParser.KW_OVERWRITE, 0);
  }

  KW_OWNER() {
    return this.getToken(HiveParser.KW_OWNER, 0);
  }

  KW_PARTITIONED() {
    return this.getToken(HiveParser.KW_PARTITIONED, 0);
  }

  KW_PARTITIONS() {
    return this.getToken(HiveParser.KW_PARTITIONS, 0);
  }

  KW_PLUS() {
    return this.getToken(HiveParser.KW_PLUS, 0);
  }

  KW_PRINCIPALS() {
    return this.getToken(HiveParser.KW_PRINCIPALS, 0);
  }

  KW_PURGE() {
    return this.getToken(HiveParser.KW_PURGE, 0);
  }

  KW_QUERY() {
    return this.getToken(HiveParser.KW_QUERY, 0);
  }

  KW_QUARTER() {
    return this.getToken(HiveParser.KW_QUARTER, 0);
  }

  KW_READ() {
    return this.getToken(HiveParser.KW_READ, 0);
  }

  KW_REBUILD() {
    return this.getToken(HiveParser.KW_REBUILD, 0);
  }

  KW_RECORDREADER() {
    return this.getToken(HiveParser.KW_RECORDREADER, 0);
  }

  KW_RECORDWRITER() {
    return this.getToken(HiveParser.KW_RECORDWRITER, 0);
  }

  KW_RELOAD() {
    return this.getToken(HiveParser.KW_RELOAD, 0);
  }

  KW_RENAME() {
    return this.getToken(HiveParser.KW_RENAME, 0);
  }

  KW_REPAIR() {
    return this.getToken(HiveParser.KW_REPAIR, 0);
  }

  KW_REPLACE() {
    return this.getToken(HiveParser.KW_REPLACE, 0);
  }

  KW_REPLICATION() {
    return this.getToken(HiveParser.KW_REPLICATION, 0);
  }

  KW_RESTRICT() {
    return this.getToken(HiveParser.KW_RESTRICT, 0);
  }

  KW_REWRITE() {
    return this.getToken(HiveParser.KW_REWRITE, 0);
  }

  KW_ROLE() {
    return this.getToken(HiveParser.KW_ROLE, 0);
  }

  KW_ROLES() {
    return this.getToken(HiveParser.KW_ROLES, 0);
  }

  KW_SCHEMA() {
    return this.getToken(HiveParser.KW_SCHEMA, 0);
  }

  KW_SCHEMAS() {
    return this.getToken(HiveParser.KW_SCHEMAS, 0);
  }

  KW_SECOND() {
    return this.getToken(HiveParser.KW_SECOND, 0);
  }

  KW_SEMI() {
    return this.getToken(HiveParser.KW_SEMI, 0);
  }

  KW_SERDE() {
    return this.getToken(HiveParser.KW_SERDE, 0);
  }

  KW_SERDEPROPERTIES() {
    return this.getToken(HiveParser.KW_SERDEPROPERTIES, 0);
  }

  KW_SERVER() {
    return this.getToken(HiveParser.KW_SERVER, 0);
  }

  KW_SETS() {
    return this.getToken(HiveParser.KW_SETS, 0);
  }

  KW_SHARED() {
    return this.getToken(HiveParser.KW_SHARED, 0);
  }

  KW_SHOW() {
    return this.getToken(HiveParser.KW_SHOW, 0);
  }

  KW_SHOW_DATABASE() {
    return this.getToken(HiveParser.KW_SHOW_DATABASE, 0);
  }

  KW_SKEWED() {
    return this.getToken(HiveParser.KW_SKEWED, 0);
  }

  KW_SORT() {
    return this.getToken(HiveParser.KW_SORT, 0);
  }

  KW_SORTED() {
    return this.getToken(HiveParser.KW_SORTED, 0);
  }

  KW_SSL() {
    return this.getToken(HiveParser.KW_SSL, 0);
  }

  KW_STATISTICS() {
    return this.getToken(HiveParser.KW_STATISTICS, 0);
  }

  KW_STORED() {
    return this.getToken(HiveParser.KW_STORED, 0);
  }

  KW_STREAMTABLE() {
    return this.getToken(HiveParser.KW_STREAMTABLE, 0);
  }

  KW_STRING() {
    return this.getToken(HiveParser.KW_STRING, 0);
  }

  KW_STRUCT() {
    return this.getToken(HiveParser.KW_STRUCT, 0);
  }

  KW_TABLES() {
    return this.getToken(HiveParser.KW_TABLES, 0);
  }

  KW_TBLPROPERTIES() {
    return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
  }

  KW_TEMPORARY() {
    return this.getToken(HiveParser.KW_TEMPORARY, 0);
  }

  KW_TERMINATED() {
    return this.getToken(HiveParser.KW_TERMINATED, 0);
  }

  KW_TINYINT() {
    return this.getToken(HiveParser.KW_TINYINT, 0);
  }

  KW_TOUCH() {
    return this.getToken(HiveParser.KW_TOUCH, 0);
  }

  KW_TRANSACTIONS() {
    return this.getToken(HiveParser.KW_TRANSACTIONS, 0);
  }

  KW_UNARCHIVE() {
    return this.getToken(HiveParser.KW_UNARCHIVE, 0);
  }

  KW_UNDO() {
    return this.getToken(HiveParser.KW_UNDO, 0);
  }

  KW_UNIONTYPE() {
    return this.getToken(HiveParser.KW_UNIONTYPE, 0);
  }

  KW_UNLOCK() {
    return this.getToken(HiveParser.KW_UNLOCK, 0);
  }

  KW_UNSET() {
    return this.getToken(HiveParser.KW_UNSET, 0);
  }

  KW_UNSIGNED() {
    return this.getToken(HiveParser.KW_UNSIGNED, 0);
  }

  KW_URI() {
    return this.getToken(HiveParser.KW_URI, 0);
  }

  KW_USE() {
    return this.getToken(HiveParser.KW_USE, 0);
  }

  KW_UTC() {
    return this.getToken(HiveParser.KW_UTC, 0);
  }

  KW_UTCTIMESTAMP() {
    return this.getToken(HiveParser.KW_UTCTIMESTAMP, 0);
  }

  KW_VALUE_TYPE() {
    return this.getToken(HiveParser.KW_VALUE_TYPE, 0);
  }

  KW_VIEW() {
    return this.getToken(HiveParser.KW_VIEW, 0);
  }

  KW_WEEK() {
    return this.getToken(HiveParser.KW_WEEK, 0);
  }

  KW_WHILE() {
    return this.getToken(HiveParser.KW_WHILE, 0);
  }

  KW_YEAR() {
    return this.getToken(HiveParser.KW_YEAR, 0);
  }

  KW_WORK() {
    return this.getToken(HiveParser.KW_WORK, 0);
  }

  KW_TRANSACTION() {
    return this.getToken(HiveParser.KW_TRANSACTION, 0);
  }

  KW_WRITE() {
    return this.getToken(HiveParser.KW_WRITE, 0);
  }

  KW_ISOLATION() {
    return this.getToken(HiveParser.KW_ISOLATION, 0);
  }

  KW_LEVEL() {
    return this.getToken(HiveParser.KW_LEVEL, 0);
  }

  KW_SNAPSHOT() {
    return this.getToken(HiveParser.KW_SNAPSHOT, 0);
  }

  KW_AUTOCOMMIT() {
    return this.getToken(HiveParser.KW_AUTOCOMMIT, 0);
  }

  KW_RELY() {
    return this.getToken(HiveParser.KW_RELY, 0);
  }

  KW_NORELY() {
    return this.getToken(HiveParser.KW_NORELY, 0);
  }

  KW_VALIDATE() {
    return this.getToken(HiveParser.KW_VALIDATE, 0);
  }

  KW_NOVALIDATE() {
    return this.getToken(HiveParser.KW_NOVALIDATE, 0);
  }

  KW_KEY() {
    return this.getToken(HiveParser.KW_KEY, 0);
  }

  KW_MATCHED() {
    return this.getToken(HiveParser.KW_MATCHED, 0);
  }

  KW_REPL() {
    return this.getToken(HiveParser.KW_REPL, 0);
  }

  KW_DUMP() {
    return this.getToken(HiveParser.KW_DUMP, 0);
  }

  KW_STATUS() {
    return this.getToken(HiveParser.KW_STATUS, 0);
  }

  KW_CACHE() {
    return this.getToken(HiveParser.KW_CACHE, 0);
  }

  KW_VIEWS() {
    return this.getToken(HiveParser.KW_VIEWS, 0);
  }

  KW_VECTORIZATION() {
    return this.getToken(HiveParser.KW_VECTORIZATION, 0);
  }

  KW_SUMMARY() {
    return this.getToken(HiveParser.KW_SUMMARY, 0);
  }

  KW_OPERATOR() {
    return this.getToken(HiveParser.KW_OPERATOR, 0);
  }

  KW_EXPRESSION() {
    return this.getToken(HiveParser.KW_EXPRESSION, 0);
  }

  KW_DETAIL() {
    return this.getToken(HiveParser.KW_DETAIL, 0);
  }

  KW_WAIT() {
    return this.getToken(HiveParser.KW_WAIT, 0);
  }

  KW_ZONE() {
    return this.getToken(HiveParser.KW_ZONE, 0);
  }

  KW_DEFAULT() {
    return this.getToken(HiveParser.KW_DEFAULT, 0);
  }

  KW_REOPTIMIZATION() {
    return this.getToken(HiveParser.KW_REOPTIMIZATION, 0);
  }

  KW_RESOURCE() {
    return this.getToken(HiveParser.KW_RESOURCE, 0);
  }

  KW_PLAN() {
    return this.getToken(HiveParser.KW_PLAN, 0);
  }

  KW_PLANS() {
    return this.getToken(HiveParser.KW_PLANS, 0);
  }

  KW_QUERY_PARALLELISM() {
    return this.getToken(HiveParser.KW_QUERY_PARALLELISM, 0);
  }

  KW_ACTIVATE() {
    return this.getToken(HiveParser.KW_ACTIVATE, 0);
  }

  KW_MOVE() {
    return this.getToken(HiveParser.KW_MOVE, 0);
  }

  KW_DO() {
    return this.getToken(HiveParser.KW_DO, 0);
  }

  KW_POOL() {
    return this.getToken(HiveParser.KW_POOL, 0);
  }

  KW_ALLOC_FRACTION() {
    return this.getToken(HiveParser.KW_ALLOC_FRACTION, 0);
  }

  KW_SCHEDULING_POLICY() {
    return this.getToken(HiveParser.KW_SCHEDULING_POLICY, 0);
  }

  KW_PATH() {
    return this.getToken(HiveParser.KW_PATH, 0);
  }

  KW_MAPPING() {
    return this.getToken(HiveParser.KW_MAPPING, 0);
  }

  KW_WORKLOAD() {
    return this.getToken(HiveParser.KW_WORKLOAD, 0);
  }

  KW_MANAGEMENT() {
    return this.getToken(HiveParser.KW_MANAGEMENT, 0);
  }

  KW_ACTIVE() {
    return this.getToken(HiveParser.KW_ACTIVE, 0);
  }

  KW_UNMANAGED() {
    return this.getToken(HiveParser.KW_UNMANAGED, 0);
  }

  KW_DELTA() {
    return this.getToken(HiveParser.KW_DELTA, 0);
  }

  KW_CSV() {
    return this.getToken(HiveParser.KW_CSV, 0);
  }

  KW_JSON() {
    return this.getToken(HiveParser.KW_JSON, 0);
  }

  KW_BLOOMFILTER() {
    return this.getToken(HiveParser.KW_BLOOMFILTER, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitNonReserved(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class Sql11ReservedKeywordsUsedAsFunctionNameContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_sql11ReservedKeywordsUsedAsFunctionName;
  }

  KW_IF() {
    return this.getToken(HiveParser.KW_IF, 0);
  }

  KW_ARRAY() {
    return this.getToken(HiveParser.KW_ARRAY, 0);
  }

  KW_MAP() {
    return this.getToken(HiveParser.KW_MAP, 0);
  }

  KW_BIGINT() {
    return this.getToken(HiveParser.KW_BIGINT, 0);
  }

  KW_BINARY() {
    return this.getToken(HiveParser.KW_BINARY, 0);
  }

  KW_BOOLEAN() {
    return this.getToken(HiveParser.KW_BOOLEAN, 0);
  }

  KW_CURRENT_DATE() {
    return this.getToken(HiveParser.KW_CURRENT_DATE, 0);
  }

  KW_CURRENT_TIMESTAMP() {
    return this.getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0);
  }

  KW_DATE() {
    return this.getToken(HiveParser.KW_DATE, 0);
  }

  KW_DOUBLE() {
    return this.getToken(HiveParser.KW_DOUBLE, 0);
  }

  KW_FLOAT() {
    return this.getToken(HiveParser.KW_FLOAT, 0);
  }

  KW_GROUPING() {
    return this.getToken(HiveParser.KW_GROUPING, 0);
  }

  KW_INT() {
    return this.getToken(HiveParser.KW_INT, 0);
  }

  KW_SMALLINT() {
    return this.getToken(HiveParser.KW_SMALLINT, 0);
  }

  KW_TIMESTAMP() {
    return this.getToken(HiveParser.KW_TIMESTAMP, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitSql11ReservedKeywordsUsedAsFunctionName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DatabricksAllowedReservedNamesContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_databricksAllowedReservedNames;
  }

  sql11ReservedKeywordsUsedAsFunctionName() {
    return this.getTypedRuleContext(
      Sql11ReservedKeywordsUsedAsFunctionNameContext,
      0
    );
  }

  KW_TIME() {
    return this.getToken(HiveParser.KW_TIME, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDatabricksAllowedReservedNames(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ResourcePlanDdlStatementsContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_resourcePlanDdlStatements;
  }

  createResourcePlanStatement() {
    return this.getTypedRuleContext(CreateResourcePlanStatementContext, 0);
  }

  alterResourcePlanStatement() {
    return this.getTypedRuleContext(AlterResourcePlanStatementContext, 0);
  }

  dropResourcePlanStatement() {
    return this.getTypedRuleContext(DropResourcePlanStatementContext, 0);
  }

  globalWmStatement() {
    return this.getTypedRuleContext(GlobalWmStatementContext, 0);
  }

  replaceResourcePlanStatement() {
    return this.getTypedRuleContext(ReplaceResourcePlanStatementContext, 0);
  }

  createTriggerStatement() {
    return this.getTypedRuleContext(CreateTriggerStatementContext, 0);
  }

  alterTriggerStatement() {
    return this.getTypedRuleContext(AlterTriggerStatementContext, 0);
  }

  dropTriggerStatement() {
    return this.getTypedRuleContext(DropTriggerStatementContext, 0);
  }

  createPoolStatement() {
    return this.getTypedRuleContext(CreatePoolStatementContext, 0);
  }

  alterPoolStatement() {
    return this.getTypedRuleContext(AlterPoolStatementContext, 0);
  }

  dropPoolStatement() {
    return this.getTypedRuleContext(DropPoolStatementContext, 0);
  }

  createMappingStatement() {
    return this.getTypedRuleContext(CreateMappingStatementContext, 0);
  }

  alterMappingStatement() {
    return this.getTypedRuleContext(AlterMappingStatementContext, 0);
  }

  dropMappingStatement() {
    return this.getTypedRuleContext(DropMappingStatementContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitResourcePlanDdlStatements(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RpAssignContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_rpAssign;
  }

  KW_QUERY_PARALLELISM() {
    return this.getToken(HiveParser.KW_QUERY_PARALLELISM, 0);
  }

  EQUAL() {
    return this.getToken(HiveParser.EQUAL, 0);
  }

  Number() {
    return this.getToken(HiveParser.Number, 0);
  }

  KW_DEFAULT() {
    return this.getToken(HiveParser.KW_DEFAULT, 0);
  }

  KW_POOL() {
    return this.getToken(HiveParser.KW_POOL, 0);
  }

  poolPath() {
    return this.getTypedRuleContext(PoolPathContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRpAssign(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RpAssignListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_rpAssignList;
  }

  rpAssign = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(RpAssignContext);
    } else {
      return this.getTypedRuleContext(RpAssignContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRpAssignList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RpUnassignContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_rpUnassign;
  }

  KW_QUERY_PARALLELISM() {
    return this.getToken(HiveParser.KW_QUERY_PARALLELISM, 0);
  }

  KW_DEFAULT() {
    return this.getToken(HiveParser.KW_DEFAULT, 0);
  }

  KW_POOL() {
    return this.getToken(HiveParser.KW_POOL, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRpUnassign(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class RpUnassignListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_rpUnassignList;
  }

  rpUnassign = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(RpUnassignContext);
    } else {
      return this.getTypedRuleContext(RpUnassignContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitRpUnassignList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateResourcePlanStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createResourcePlanStatement;
  }

  KW_CREATE() {
    return this.getToken(HiveParser.KW_CREATE, 0);
  }

  KW_RESOURCE() {
    return this.getToken(HiveParser.KW_RESOURCE, 0);
  }

  KW_PLAN() {
    return this.getToken(HiveParser.KW_PLAN, 0);
  }

  createResourcePlanStatementLikeExisting() {
    return this.getTypedRuleContext(
      CreateResourcePlanStatementLikeExistingContext,
      0
    );
  }

  createNewResourcePlanStatement() {
    return this.getTypedRuleContext(CreateNewResourcePlanStatementContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateResourcePlanStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateResourcePlanStatementLikeExistingContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createResourcePlanStatementLikeExisting;
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  KW_LIKE() {
    return this.getToken(HiveParser.KW_LIKE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateResourcePlanStatementLikeExisting(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateNewResourcePlanStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createNewResourcePlanStatement;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  rpAssignList() {
    return this.getTypedRuleContext(RpAssignListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateNewResourcePlanStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class WithReplaceContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_withReplace;
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  KW_REPLACE() {
    return this.getToken(HiveParser.KW_REPLACE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitWithReplace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ActivateContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_activate;
  }

  KW_ACTIVATE() {
    return this.getToken(HiveParser.KW_ACTIVATE, 0);
  }

  withReplace() {
    return this.getTypedRuleContext(WithReplaceContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitActivate(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class EnableContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_enable;
  }

  KW_ENABLE() {
    return this.getToken(HiveParser.KW_ENABLE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitEnable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DisableContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_disable;
  }

  KW_DISABLE() {
    return this.getToken(HiveParser.KW_DISABLE, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDisable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class UnmanagedContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_unmanaged;
  }

  KW_UNMANAGED() {
    return this.getToken(HiveParser.KW_UNMANAGED, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitUnmanaged(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterResourcePlanStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterResourcePlanStatement;
  }

  KW_ALTER() {
    return this.getToken(HiveParser.KW_ALTER, 0);
  }

  KW_RESOURCE() {
    return this.getToken(HiveParser.KW_RESOURCE, 0);
  }

  KW_PLAN() {
    return this.getToken(HiveParser.KW_PLAN, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  alterResourcePlanRenameSuffix() {
    return this.getTypedRuleContext(AlterResourcePlanRenameSuffixContext, 0);
  }

  KW_VALIDATE() {
    return this.getToken(HiveParser.KW_VALIDATE, 0);
  }

  KW_DISABLE() {
    return this.getToken(HiveParser.KW_DISABLE, 0);
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  rpAssignList() {
    return this.getTypedRuleContext(RpAssignListContext, 0);
  }

  KW_UNSET() {
    return this.getToken(HiveParser.KW_UNSET, 0);
  }

  rpUnassignList() {
    return this.getTypedRuleContext(RpUnassignListContext, 0);
  }

  activate() {
    return this.getTypedRuleContext(ActivateContext, 0);
  }

  enable() {
    return this.getTypedRuleContext(EnableContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterResourcePlanStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterResourcePlanRenameSuffixContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterResourcePlanRenameSuffix;
  }

  KW_RENAME() {
    return this.getToken(HiveParser.KW_RENAME, 0);
  }

  KW_TO() {
    return this.getToken(HiveParser.KW_TO, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterResourcePlanRenameSuffix(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class GlobalWmStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_globalWmStatement;
  }

  KW_WORKLOAD() {
    return this.getToken(HiveParser.KW_WORKLOAD, 0);
  }

  KW_MANAGEMENT() {
    return this.getToken(HiveParser.KW_MANAGEMENT, 0);
  }

  enable() {
    return this.getTypedRuleContext(EnableContext, 0);
  }

  disable() {
    return this.getTypedRuleContext(DisableContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitGlobalWmStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ReplaceResourcePlanStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_replaceResourcePlanStatement;
  }

  KW_REPLACE() {
    return this.getToken(HiveParser.KW_REPLACE, 0);
  }

  KW_ACTIVE() {
    return this.getToken(HiveParser.KW_ACTIVE, 0);
  }

  KW_RESOURCE() {
    return this.getToken(HiveParser.KW_RESOURCE, 0);
  }

  KW_PLAN() {
    return this.getToken(HiveParser.KW_PLAN, 0);
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitReplaceResourcePlanStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropResourcePlanStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dropResourcePlanStatement;
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  KW_RESOURCE() {
    return this.getToken(HiveParser.KW_RESOURCE, 0);
  }

  KW_PLAN() {
    return this.getToken(HiveParser.KW_PLAN, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDropResourcePlanStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PoolPathContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_poolPath;
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  DOT = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.DOT);
    } else {
      return this.getToken(HiveParser.DOT, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPoolPath(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TriggerExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_triggerExpression;
  }

  triggerAtomExpression() {
    return this.getTypedRuleContext(TriggerAtomExpressionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTriggerExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TriggerExpressionStandaloneContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_triggerExpressionStandalone;
  }

  triggerExpression() {
    return this.getTypedRuleContext(TriggerExpressionContext, 0);
  }

  EOF() {
    return this.getToken(HiveParser.EOF, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTriggerExpressionStandalone(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TriggerOrExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_triggerOrExpression;
  }

  triggerAndExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TriggerAndExpressionContext);
    } else {
      return this.getTypedRuleContext(TriggerAndExpressionContext, i);
    }
  };

  KW_OR = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_OR);
    } else {
      return this.getToken(HiveParser.KW_OR, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTriggerOrExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TriggerAndExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_triggerAndExpression;
  }

  triggerAtomExpression = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(TriggerAtomExpressionContext);
    } else {
      return this.getTypedRuleContext(TriggerAtomExpressionContext, i);
    }
  };

  KW_AND = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.KW_AND);
    } else {
      return this.getToken(HiveParser.KW_AND, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTriggerAndExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TriggerAtomExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_triggerAtomExpression;
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  comparisionOperator() {
    return this.getTypedRuleContext(ComparisionOperatorContext, 0);
  }

  triggerLiteral() {
    return this.getTypedRuleContext(TriggerLiteralContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTriggerAtomExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TriggerLiteralContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_triggerLiteral;
  }

  Number() {
    return this.getToken(HiveParser.Number, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTriggerLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class ComparisionOperatorContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_comparisionOperator;
  }

  GREATERTHAN() {
    return this.getToken(HiveParser.GREATERTHAN, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitComparisionOperator(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TriggerActionExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_triggerActionExpression;
  }

  KW_KILL() {
    return this.getToken(HiveParser.KW_KILL, 0);
  }

  KW_MOVE() {
    return this.getToken(HiveParser.KW_MOVE, 0);
  }

  KW_TO() {
    return this.getToken(HiveParser.KW_TO, 0);
  }

  poolPath() {
    return this.getTypedRuleContext(PoolPathContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTriggerActionExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TriggerActionExpressionStandaloneContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_triggerActionExpressionStandalone;
  }

  triggerActionExpression() {
    return this.getTypedRuleContext(TriggerActionExpressionContext, 0);
  }

  EOF() {
    return this.getToken(HiveParser.EOF, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTriggerActionExpressionStandalone(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateTriggerStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createTriggerStatement;
  }

  KW_CREATE() {
    return this.getToken(HiveParser.KW_CREATE, 0);
  }

  KW_TRIGGER() {
    return this.getToken(HiveParser.KW_TRIGGER, 0);
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  DOT() {
    return this.getToken(HiveParser.DOT, 0);
  }

  triggerConditionExpression() {
    return this.getTypedRuleContext(TriggerConditionExpressionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateTriggerStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterTriggerStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterTriggerStatement;
  }

  KW_ALTER() {
    return this.getToken(HiveParser.KW_ALTER, 0);
  }

  KW_TRIGGER() {
    return this.getToken(HiveParser.KW_TRIGGER, 0);
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  DOT() {
    return this.getToken(HiveParser.DOT, 0);
  }

  triggerConditionExpression() {
    return this.getTypedRuleContext(TriggerConditionExpressionContext, 0);
  }

  KW_ADD() {
    return this.getToken(HiveParser.KW_ADD, 0);
  }

  KW_TO() {
    return this.getToken(HiveParser.KW_TO, 0);
  }

  KW_POOL() {
    return this.getToken(HiveParser.KW_POOL, 0);
  }

  poolPath() {
    return this.getTypedRuleContext(PoolPathContext, 0);
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  KW_FROM() {
    return this.getToken(HiveParser.KW_FROM, 0);
  }

  KW_UNMANAGED() {
    return this.getToken(HiveParser.KW_UNMANAGED, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterTriggerStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class TriggerConditionExpressionContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_triggerConditionExpression;
  }

  KW_WHEN() {
    return this.getToken(HiveParser.KW_WHEN, 0);
  }

  triggerExpression() {
    return this.getTypedRuleContext(TriggerExpressionContext, 0);
  }

  KW_DO() {
    return this.getToken(HiveParser.KW_DO, 0);
  }

  triggerActionExpression() {
    return this.getTypedRuleContext(TriggerActionExpressionContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitTriggerConditionExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropTriggerStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dropTriggerStatement;
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  KW_TRIGGER() {
    return this.getToken(HiveParser.KW_TRIGGER, 0);
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  DOT() {
    return this.getToken(HiveParser.DOT, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDropTriggerStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PoolAssignContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_poolAssign;
  }

  KW_ALLOC_FRACTION() {
    return this.getToken(HiveParser.KW_ALLOC_FRACTION, 0);
  }

  EQUAL() {
    return this.getToken(HiveParser.EQUAL, 0);
  }

  Number() {
    return this.getToken(HiveParser.Number, 0);
  }

  KW_QUERY_PARALLELISM() {
    return this.getToken(HiveParser.KW_QUERY_PARALLELISM, 0);
  }

  KW_SCHEDULING_POLICY() {
    return this.getToken(HiveParser.KW_SCHEDULING_POLICY, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  KW_PATH() {
    return this.getToken(HiveParser.KW_PATH, 0);
  }

  poolPath() {
    return this.getTypedRuleContext(PoolPathContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPoolAssign(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class PoolAssignListContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_poolAssignList;
  }

  poolAssign = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(PoolAssignContext);
    } else {
      return this.getTypedRuleContext(PoolAssignContext, i);
    }
  };

  COMMA = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTokens(HiveParser.COMMA);
    } else {
      return this.getToken(HiveParser.COMMA, i);
    }
  };

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitPoolAssignList(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreatePoolStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createPoolStatement;
  }

  KW_CREATE() {
    return this.getToken(HiveParser.KW_CREATE, 0);
  }

  KW_POOL() {
    return this.getToken(HiveParser.KW_POOL, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  DOT() {
    return this.getToken(HiveParser.DOT, 0);
  }

  poolPath() {
    return this.getTypedRuleContext(PoolPathContext, 0);
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  poolAssignList() {
    return this.getTypedRuleContext(PoolAssignListContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreatePoolStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterPoolStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterPoolStatement;
  }

  KW_ALTER() {
    return this.getToken(HiveParser.KW_ALTER, 0);
  }

  KW_POOL() {
    return this.getToken(HiveParser.KW_POOL, 0);
  }

  identifier = function (i) {
    if (i === undefined) {
      i = null;
    }
    if (i === null) {
      return this.getTypedRuleContexts(IdentifierContext);
    } else {
      return this.getTypedRuleContext(IdentifierContext, i);
    }
  };

  DOT() {
    return this.getToken(HiveParser.DOT, 0);
  }

  poolPath() {
    return this.getTypedRuleContext(PoolPathContext, 0);
  }

  KW_SET() {
    return this.getToken(HiveParser.KW_SET, 0);
  }

  poolAssignList() {
    return this.getTypedRuleContext(PoolAssignListContext, 0);
  }

  KW_UNSET() {
    return this.getToken(HiveParser.KW_UNSET, 0);
  }

  KW_SCHEDULING_POLICY() {
    return this.getToken(HiveParser.KW_SCHEDULING_POLICY, 0);
  }

  KW_ADD() {
    return this.getToken(HiveParser.KW_ADD, 0);
  }

  KW_TRIGGER() {
    return this.getToken(HiveParser.KW_TRIGGER, 0);
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterPoolStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropPoolStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dropPoolStatement;
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  KW_POOL() {
    return this.getToken(HiveParser.KW_POOL, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  DOT() {
    return this.getToken(HiveParser.DOT, 0);
  }

  poolPath() {
    return this.getTypedRuleContext(PoolPathContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDropPoolStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class CreateMappingStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_createMappingStatement;
  }

  KW_CREATE() {
    return this.getToken(HiveParser.KW_CREATE, 0);
  }

  KW_MAPPING() {
    return this.getToken(HiveParser.KW_MAPPING, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  KW_IN() {
    return this.getToken(HiveParser.KW_IN, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_USER() {
    return this.getToken(HiveParser.KW_USER, 0);
  }

  KW_GROUP() {
    return this.getToken(HiveParser.KW_GROUP, 0);
  }

  KW_APPLICATION() {
    return this.getToken(HiveParser.KW_APPLICATION, 0);
  }

  unmanaged() {
    return this.getTypedRuleContext(UnmanagedContext, 0);
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  KW_ORDER() {
    return this.getToken(HiveParser.KW_ORDER, 0);
  }

  Number() {
    return this.getToken(HiveParser.Number, 0);
  }

  KW_TO() {
    return this.getToken(HiveParser.KW_TO, 0);
  }

  poolPath() {
    return this.getTypedRuleContext(PoolPathContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitCreateMappingStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class AlterMappingStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_alterMappingStatement;
  }

  KW_ALTER() {
    return this.getToken(HiveParser.KW_ALTER, 0);
  }

  KW_MAPPING() {
    return this.getToken(HiveParser.KW_MAPPING, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  KW_IN() {
    return this.getToken(HiveParser.KW_IN, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_USER() {
    return this.getToken(HiveParser.KW_USER, 0);
  }

  KW_GROUP() {
    return this.getToken(HiveParser.KW_GROUP, 0);
  }

  KW_APPLICATION() {
    return this.getToken(HiveParser.KW_APPLICATION, 0);
  }

  unmanaged() {
    return this.getTypedRuleContext(UnmanagedContext, 0);
  }

  KW_WITH() {
    return this.getToken(HiveParser.KW_WITH, 0);
  }

  KW_ORDER() {
    return this.getToken(HiveParser.KW_ORDER, 0);
  }

  Number() {
    return this.getToken(HiveParser.Number, 0);
  }

  KW_TO() {
    return this.getToken(HiveParser.KW_TO, 0);
  }

  poolPath() {
    return this.getTypedRuleContext(PoolPathContext, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitAlterMappingStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

class DropMappingStatementContext extends antlr4.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }
    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }
    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = HiveParser.RULE_dropMappingStatement;
  }

  KW_DROP() {
    return this.getToken(HiveParser.KW_DROP, 0);
  }

  KW_MAPPING() {
    return this.getToken(HiveParser.KW_MAPPING, 0);
  }

  StringLiteral() {
    return this.getToken(HiveParser.StringLiteral, 0);
  }

  KW_IN() {
    return this.getToken(HiveParser.KW_IN, 0);
  }

  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }

  KW_USER() {
    return this.getToken(HiveParser.KW_USER, 0);
  }

  KW_GROUP() {
    return this.getToken(HiveParser.KW_GROUP, 0);
  }

  KW_APPLICATION() {
    return this.getToken(HiveParser.KW_APPLICATION, 0);
  }

  accept(visitor) {
    if (visitor instanceof HiveParserVisitor) {
      return visitor.visitDropMappingStatement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }
}

HiveParser.StatementsContext = StatementsContext;
HiveParser.StatementSeparatorContext = StatementSeparatorContext;
HiveParser.EmptyContext = EmptyContext;
HiveParser.StatementContext = StatementContext;
HiveParser.ExplainStatementContext = ExplainStatementContext;
HiveParser.ExplainOptionContext = ExplainOptionContext;
HiveParser.VectorizationOnlyContext = VectorizationOnlyContext;
HiveParser.VectorizatonDetailContext = VectorizatonDetailContext;
HiveParser.ExecStatementContext = ExecStatementContext;
HiveParser.LoadStatementContext = LoadStatementContext;
HiveParser.ReplicationClauseContext = ReplicationClauseContext;
HiveParser.ExportStatementContext = ExportStatementContext;
HiveParser.ImportStatementContext = ImportStatementContext;
HiveParser.ReplDumpStatementContext = ReplDumpStatementContext;
HiveParser.ReplLoadStatementContext = ReplLoadStatementContext;
HiveParser.ReplConfigsContext = ReplConfigsContext;
HiveParser.ReplConfigsListContext = ReplConfigsListContext;
HiveParser.ReplStatusStatementContext = ReplStatusStatementContext;
HiveParser.DdlStatementContext = DdlStatementContext;
HiveParser.IfExistsContext = IfExistsContext;
HiveParser.RestrictOrCascadeContext = RestrictOrCascadeContext;
HiveParser.IfNotExistsContext = IfNotExistsContext;
HiveParser.RewriteEnabledContext = RewriteEnabledContext;
HiveParser.RewriteDisabledContext = RewriteDisabledContext;
HiveParser.StoredAsDirsContext = StoredAsDirsContext;
HiveParser.OrReplaceContext = OrReplaceContext;
HiveParser.CreateDatabaseStatementContext = CreateDatabaseStatementContext;
HiveParser.DbLocationContext = DbLocationContext;
HiveParser.DbPropertiesContext = DbPropertiesContext;
HiveParser.DbPropertiesListContext = DbPropertiesListContext;
HiveParser.SwitchDatabaseStatementContext = SwitchDatabaseStatementContext;
HiveParser.DropDatabaseStatementContext = DropDatabaseStatementContext;
HiveParser.DatabaseCommentContext = DatabaseCommentContext;
HiveParser.CreateTableStatementContext = CreateTableStatementContext;
HiveParser.TruncateTableStatementContext = TruncateTableStatementContext;
HiveParser.DropTableStatementContext = DropTableStatementContext;
HiveParser.AlterStatementContext = AlterStatementContext;
HiveParser.AlterTableStatementSuffixContext = AlterTableStatementSuffixContext;
HiveParser.AlterTblPartitionStatementSuffixContext =
  AlterTblPartitionStatementSuffixContext;
HiveParser.AlterStatementPartitionKeyTypeContext =
  AlterStatementPartitionKeyTypeContext;
HiveParser.AlterViewStatementSuffixContext = AlterViewStatementSuffixContext;
HiveParser.AlterMaterializedViewStatementSuffixContext =
  AlterMaterializedViewStatementSuffixContext;
HiveParser.AlterDatabaseStatementSuffixContext =
  AlterDatabaseStatementSuffixContext;
HiveParser.AlterDatabaseSuffixPropertiesContext =
  AlterDatabaseSuffixPropertiesContext;
HiveParser.AlterDatabaseSuffixSetOwnerContext =
  AlterDatabaseSuffixSetOwnerContext;
HiveParser.AlterDatabaseSuffixSetLocationContext =
  AlterDatabaseSuffixSetLocationContext;
HiveParser.AlterStatementSuffixRenameContext =
  AlterStatementSuffixRenameContext;
HiveParser.AlterStatementSuffixAddColContext =
  AlterStatementSuffixAddColContext;
HiveParser.AlterStatementSuffixAddConstraintContext =
  AlterStatementSuffixAddConstraintContext;
HiveParser.AlterStatementSuffixUpdateColumnsContext =
  AlterStatementSuffixUpdateColumnsContext;
HiveParser.AlterStatementSuffixDropConstraintContext =
  AlterStatementSuffixDropConstraintContext;
HiveParser.AlterStatementSuffixRenameColContext =
  AlterStatementSuffixRenameColContext;
HiveParser.AlterStatementSuffixUpdateStatsColContext =
  AlterStatementSuffixUpdateStatsColContext;
HiveParser.AlterStatementSuffixUpdateStatsContext =
  AlterStatementSuffixUpdateStatsContext;
HiveParser.AlterStatementChangeColPositionContext =
  AlterStatementChangeColPositionContext;
HiveParser.AlterStatementSuffixAddPartitionsContext =
  AlterStatementSuffixAddPartitionsContext;
HiveParser.AlterStatementSuffixAddPartitionsElementContext =
  AlterStatementSuffixAddPartitionsElementContext;
HiveParser.AlterStatementSuffixTouchContext = AlterStatementSuffixTouchContext;
HiveParser.AlterStatementSuffixArchiveContext =
  AlterStatementSuffixArchiveContext;
HiveParser.AlterStatementSuffixUnArchiveContext =
  AlterStatementSuffixUnArchiveContext;
HiveParser.PartitionLocationContext = PartitionLocationContext;
HiveParser.AlterStatementSuffixDropPartitionsContext =
  AlterStatementSuffixDropPartitionsContext;
HiveParser.AlterStatementSuffixPropertiesContext =
  AlterStatementSuffixPropertiesContext;
HiveParser.AlterViewSuffixPropertiesContext = AlterViewSuffixPropertiesContext;
HiveParser.AlterMaterializedViewSuffixRewriteContext =
  AlterMaterializedViewSuffixRewriteContext;
HiveParser.AlterMaterializedViewSuffixRebuildContext =
  AlterMaterializedViewSuffixRebuildContext;
HiveParser.AlterStatementSuffixSerdePropertiesContext =
  AlterStatementSuffixSerdePropertiesContext;
HiveParser.AlterIndexStatementSuffixContext = AlterIndexStatementSuffixContext;
HiveParser.AlterStatementSuffixFileFormatContext =
  AlterStatementSuffixFileFormatContext;
HiveParser.AlterStatementSuffixClusterbySortbyContext =
  AlterStatementSuffixClusterbySortbyContext;
HiveParser.AlterTblPartitionStatementSuffixSkewedLocationContext =
  AlterTblPartitionStatementSuffixSkewedLocationContext;
HiveParser.SkewedLocationsContext = SkewedLocationsContext;
HiveParser.SkewedLocationsListContext = SkewedLocationsListContext;
HiveParser.SkewedLocationMapContext = SkewedLocationMapContext;
HiveParser.AlterStatementSuffixLocationContext =
  AlterStatementSuffixLocationContext;
HiveParser.AlterStatementSuffixSkewedbyContext =
  AlterStatementSuffixSkewedbyContext;
HiveParser.AlterStatementSuffixExchangePartitionContext =
  AlterStatementSuffixExchangePartitionContext;
HiveParser.AlterStatementSuffixRenamePartContext =
  AlterStatementSuffixRenamePartContext;
HiveParser.AlterStatementSuffixStatsPartContext =
  AlterStatementSuffixStatsPartContext;
HiveParser.AlterStatementSuffixMergeFilesContext =
  AlterStatementSuffixMergeFilesContext;
HiveParser.AlterStatementSuffixBucketNumContext =
  AlterStatementSuffixBucketNumContext;
HiveParser.CreateIndexStatementContext = CreateIndexStatementContext;
HiveParser.CreateIndexMainStatementContext = CreateIndexMainStatementContext;
HiveParser.DropIndexStatementContext = DropIndexStatementContext;
HiveParser.CreateBloomfilterIndexStatementContext =
  CreateBloomfilterIndexStatementContext;
HiveParser.CreateBloomfilterIndexMainStatementContext =
  CreateBloomfilterIndexMainStatementContext;
HiveParser.BloomfilterColumnParenthesesListContext =
  BloomfilterColumnParenthesesListContext;
HiveParser.BloomfilterColumnNameListContext = BloomfilterColumnNameListContext;
HiveParser.BloomfilterColumnNameContext = BloomfilterColumnNameContext;
HiveParser.BloomfilterIndexOptionsContext = BloomfilterIndexOptionsContext;
HiveParser.DropBloomfilterIndexStatementContext =
  DropBloomfilterIndexStatementContext;
HiveParser.DropBloomfilterIndexMainStatementContext =
  DropBloomfilterIndexMainStatementContext;
HiveParser.TablePartitionPrefixContext = TablePartitionPrefixContext;
HiveParser.BlockingContext = BlockingContext;
HiveParser.AlterStatementSuffixCompactContext =
  AlterStatementSuffixCompactContext;
HiveParser.AlterStatementSuffixSetOwnerContext =
  AlterStatementSuffixSetOwnerContext;
HiveParser.FileFormatContext = FileFormatContext;
HiveParser.InputFileFormatContext = InputFileFormatContext;
HiveParser.TabTypeExprContext = TabTypeExprContext;
HiveParser.PartTypeExprContext = PartTypeExprContext;
HiveParser.TabPartColTypeExprContext = TabPartColTypeExprContext;
HiveParser.DescStatementContext = DescStatementContext;
HiveParser.AnalyzeStatementContext = AnalyzeStatementContext;
HiveParser.ShowStatementContext = ShowStatementContext;
HiveParser.LockStatementContext = LockStatementContext;
HiveParser.LockDatabaseContext = LockDatabaseContext;
HiveParser.LockModeContext = LockModeContext;
HiveParser.UnlockStatementContext = UnlockStatementContext;
HiveParser.UnlockDatabaseContext = UnlockDatabaseContext;
HiveParser.CreateRoleStatementContext = CreateRoleStatementContext;
HiveParser.DropRoleStatementContext = DropRoleStatementContext;
HiveParser.GrantPrivilegesContext = GrantPrivilegesContext;
HiveParser.RevokePrivilegesContext = RevokePrivilegesContext;
HiveParser.GrantRoleContext = GrantRoleContext;
HiveParser.RevokeRoleContext = RevokeRoleContext;
HiveParser.ShowRoleGrantsContext = ShowRoleGrantsContext;
HiveParser.ShowRolesContext = ShowRolesContext;
HiveParser.ShowCurrentRoleContext = ShowCurrentRoleContext;
HiveParser.SetRoleContext = SetRoleContext;
HiveParser.ShowGrantsContext = ShowGrantsContext;
HiveParser.ShowRolePrincipalsContext = ShowRolePrincipalsContext;
HiveParser.PrivilegeIncludeColObjectContext = PrivilegeIncludeColObjectContext;
HiveParser.PrivilegeObjectContext = PrivilegeObjectContext;
HiveParser.PrivObjectContext = PrivObjectContext;
HiveParser.PrivObjectColsContext = PrivObjectColsContext;
HiveParser.PrivilegeListContext = PrivilegeListContext;
HiveParser.PrivlegeDefContext = PrivlegeDefContext;
HiveParser.PrivilegeTypeContext = PrivilegeTypeContext;
HiveParser.PrincipalSpecificationContext = PrincipalSpecificationContext;
HiveParser.PrincipalNameContext = PrincipalNameContext;
HiveParser.WithGrantOptionContext = WithGrantOptionContext;
HiveParser.GrantOptionForContext = GrantOptionForContext;
HiveParser.AdminOptionForContext = AdminOptionForContext;
HiveParser.WithAdminOptionContext = WithAdminOptionContext;
HiveParser.MetastoreCheckContext = MetastoreCheckContext;
HiveParser.ResourceListContext = ResourceListContext;
HiveParser.ResourceContext = ResourceContext;
HiveParser.ResourceTypeContext = ResourceTypeContext;
HiveParser.CreateFunctionStatementContext = CreateFunctionStatementContext;
HiveParser.DropFunctionStatementContext = DropFunctionStatementContext;
HiveParser.ReloadFunctionStatementContext = ReloadFunctionStatementContext;
HiveParser.CreateMacroStatementContext = CreateMacroStatementContext;
HiveParser.DropMacroStatementContext = DropMacroStatementContext;
HiveParser.CreateViewStatementContext = CreateViewStatementContext;
HiveParser.CreateMaterializedViewStatementContext =
  CreateMaterializedViewStatementContext;
HiveParser.ViewPartitionContext = ViewPartitionContext;
HiveParser.DropViewStatementContext = DropViewStatementContext;
HiveParser.DropMaterializedViewStatementContext =
  DropMaterializedViewStatementContext;
HiveParser.ShowFunctionIdentifierContext = ShowFunctionIdentifierContext;
HiveParser.ShowStmtIdentifierContext = ShowStmtIdentifierContext;
HiveParser.TableCommentContext = TableCommentContext;
HiveParser.TableUsingDataSourceContext = TableUsingDataSourceContext;
HiveParser.TableDataSourceContext = TableDataSourceContext;
HiveParser.TablePartitionContext = TablePartitionContext;
HiveParser.TableBucketsContext = TableBucketsContext;
HiveParser.TableSkewedContext = TableSkewedContext;
HiveParser.RowFormatContext = RowFormatContext;
HiveParser.RecordReaderContext = RecordReaderContext;
HiveParser.RecordWriterContext = RecordWriterContext;
HiveParser.RowFormatSerdeContext = RowFormatSerdeContext;
HiveParser.RowFormatDelimitedContext = RowFormatDelimitedContext;
HiveParser.TableRowFormatContext = TableRowFormatContext;
HiveParser.TableOptionsContext = TableOptionsContext;
HiveParser.TablePropertiesPrefixedContext = TablePropertiesPrefixedContext;
HiveParser.TablePropertiesContext = TablePropertiesContext;
HiveParser.TablePropertiesListContext = TablePropertiesListContext;
HiveParser.KeyValuePropertyContext = KeyValuePropertyContext;
HiveParser.KeyValueContext = KeyValueContext;
HiveParser.KeyPropertyContext = KeyPropertyContext;
HiveParser.TableRowFormatFieldIdentifierContext =
  TableRowFormatFieldIdentifierContext;
HiveParser.TableRowFormatFieldIdentifierEcapedByContext =
  TableRowFormatFieldIdentifierEcapedByContext;
HiveParser.TableRowFormatCollItemsIdentifierContext =
  TableRowFormatCollItemsIdentifierContext;
HiveParser.TableRowFormatMapKeysIdentifierContext =
  TableRowFormatMapKeysIdentifierContext;
HiveParser.TableRowFormatLinesIdentifierContext =
  TableRowFormatLinesIdentifierContext;
HiveParser.TableRowNullFormatContext = TableRowNullFormatContext;
HiveParser.TableFileFormatContext = TableFileFormatContext;
HiveParser.TableFileFormatStoredByContext = TableFileFormatStoredByContext;
HiveParser.TableFileFormatStoredAsContext = TableFileFormatStoredAsContext;
HiveParser.TableFileFormatStoredAsFormatContext =
  TableFileFormatStoredAsFormatContext;
HiveParser.TableInputOutputFileFormatContext =
  TableInputOutputFileFormatContext;
HiveParser.TableInputLiteralContext = TableInputLiteralContext;
HiveParser.TableOutputLiteralContext = TableOutputLiteralContext;
HiveParser.TableLocationContext = TableLocationContext;
HiveParser.ColumnNameTypeListContext = ColumnNameTypeListContext;
HiveParser.ColumnNameTypeOrConstraintListContext =
  ColumnNameTypeOrConstraintListContext;
HiveParser.ColumnNameColonTypeListContext = ColumnNameColonTypeListContext;
HiveParser.ColumnNameListContext = ColumnNameListContext;
HiveParser.ColumnNameContext = ColumnNameContext;
HiveParser.ExtColumnNameContext = ExtColumnNameContext;
HiveParser.ColumnNameOrderListContext = ColumnNameOrderListContext;
HiveParser.ColumnParenthesesListContext = ColumnParenthesesListContext;
HiveParser.EnableValidateSpecificationContext =
  EnableValidateSpecificationContext;
HiveParser.EnableSpecificationContext = EnableSpecificationContext;
HiveParser.ValidateSpecificationContext = ValidateSpecificationContext;
HiveParser.EnforcedSpecificationContext = EnforcedSpecificationContext;
HiveParser.RelySpecificationContext = RelySpecificationContext;
HiveParser.CreateConstraintContext = CreateConstraintContext;
HiveParser.AlterConstraintWithNameContext = AlterConstraintWithNameContext;
HiveParser.TableLevelConstraintContext = TableLevelConstraintContext;
HiveParser.PkUkConstraintContext = PkUkConstraintContext;
HiveParser.CheckConstraintContext = CheckConstraintContext;
HiveParser.CreateForeignKeyContext = CreateForeignKeyContext;
HiveParser.AlterForeignKeyWithNameContext = AlterForeignKeyWithNameContext;
HiveParser.SkewedValueElementContext = SkewedValueElementContext;
HiveParser.SkewedColumnValuePairListContext = SkewedColumnValuePairListContext;
HiveParser.SkewedColumnValuePairContext = SkewedColumnValuePairContext;
HiveParser.SkewedColumnValuesContext = SkewedColumnValuesContext;
HiveParser.SkewedColumnValueContext = SkewedColumnValueContext;
HiveParser.SkewedValueLocationElementContext =
  SkewedValueLocationElementContext;
HiveParser.OrderSpecificationContext = OrderSpecificationContext;
HiveParser.NullOrderingContext = NullOrderingContext;
HiveParser.ColumnNameOrderContext = ColumnNameOrderContext;
HiveParser.ColumnNameCommentListContext = ColumnNameCommentListContext;
HiveParser.ColumnNameCommentContext = ColumnNameCommentContext;
HiveParser.ColumnRefOrderContext = ColumnRefOrderContext;
HiveParser.ColumnNameTypeContext = ColumnNameTypeContext;
HiveParser.ColumnNameTypeOrConstraintContext =
  ColumnNameTypeOrConstraintContext;
HiveParser.TableConstraintContext = TableConstraintContext;
HiveParser.ColumnNameTypeConstraintContext = ColumnNameTypeConstraintContext;
HiveParser.ColumnGeneratedAsContext = ColumnGeneratedAsContext;
HiveParser.GeneratedAsExpressionContext = GeneratedAsExpressionContext;
HiveParser.GeneratedAsIdentityContext = GeneratedAsIdentityContext;
HiveParser.PartitionedColumnNameTypeConstraintContext =
  PartitionedColumnNameTypeConstraintContext;
HiveParser.ColumnConstraintContext = ColumnConstraintContext;
HiveParser.ForeignKeyConstraintContext = ForeignKeyConstraintContext;
HiveParser.ColConstraintContext = ColConstraintContext;
HiveParser.AlterColumnConstraintContext = AlterColumnConstraintContext;
HiveParser.AlterForeignKeyConstraintContext = AlterForeignKeyConstraintContext;
HiveParser.AlterColConstraintContext = AlterColConstraintContext;
HiveParser.ColumnConstraintTypeContext = ColumnConstraintTypeContext;
HiveParser.DefaultValContext = DefaultValContext;
HiveParser.TableConstraintTypeContext = TableConstraintTypeContext;
HiveParser.ConstraintOptsCreateContext = ConstraintOptsCreateContext;
HiveParser.ConstraintOptsAlterContext = ConstraintOptsAlterContext;
HiveParser.ColumnNameColonTypeContext = ColumnNameColonTypeContext;
HiveParser.ColTypeContext = ColTypeContext;
HiveParser.ColTypeListContext = ColTypeListContext;
HiveParser.Type_db_colContext = Type_db_colContext;
HiveParser.PrimitiveTypeContext = PrimitiveTypeContext;
HiveParser.ListTypeContext = ListTypeContext;
HiveParser.StructTypeContext = StructTypeContext;
HiveParser.MapTypeContext = MapTypeContext;
HiveParser.UnionTypeContext = UnionTypeContext;
HiveParser.SetOperatorContext = SetOperatorContext;
HiveParser.QueryStatementExpressionContext = QueryStatementExpressionContext;
HiveParser.QueryStatementExpressionBodyContext =
  QueryStatementExpressionBodyContext;
HiveParser.WithClauseContext = WithClauseContext;
HiveParser.CteStatementContext = CteStatementContext;
HiveParser.FromStatementContext = FromStatementContext;
HiveParser.SingleFromStatementContext = SingleFromStatementContext;
HiveParser.RegularBodyContext = RegularBodyContext;
HiveParser.AtomSelectStatementContext = AtomSelectStatementContext;
HiveParser.SelectStatementContext = SelectStatementContext;
HiveParser.SetOpSelectStatementContext = SetOpSelectStatementContext;
HiveParser.SelectStatementWithCTEContext = SelectStatementWithCTEContext;
HiveParser.BodyContext = BodyContext;
HiveParser.InsertClauseContext = InsertClauseContext;
HiveParser.DestinationContext = DestinationContext;
HiveParser.LimitClauseContext = LimitClauseContext;
HiveParser.DeleteStatementContext = DeleteStatementContext;
HiveParser.ColumnAssignmentClauseContext = ColumnAssignmentClauseContext;
HiveParser.SetColumnsClauseContext = SetColumnsClauseContext;
HiveParser.UpdateStatementContext = UpdateStatementContext;
HiveParser.SqlTransactionStatementContext = SqlTransactionStatementContext;
HiveParser.StartTransactionStatementContext = StartTransactionStatementContext;
HiveParser.TransactionModeContext = TransactionModeContext;
HiveParser.TransactionAccessModeContext = TransactionAccessModeContext;
HiveParser.IsolationLevelContext = IsolationLevelContext;
HiveParser.LevelOfIsolationContext = LevelOfIsolationContext;
HiveParser.CommitStatementContext = CommitStatementContext;
HiveParser.RollbackStatementContext = RollbackStatementContext;
HiveParser.SetAutoCommitStatementContext = SetAutoCommitStatementContext;
HiveParser.AbortTransactionStatementContext = AbortTransactionStatementContext;
HiveParser.MergeStatementContext = MergeStatementContext;
HiveParser.WhenClausesContext = WhenClausesContext;
HiveParser.WhenNotMatchedClauseContext = WhenNotMatchedClauseContext;
HiveParser.WhenMatchedAndClauseContext = WhenMatchedAndClauseContext;
HiveParser.WhenMatchedThenClauseContext = WhenMatchedThenClauseContext;
HiveParser.UpdateOrDeleteContext = UpdateOrDeleteContext;
HiveParser.KillQueryStatementContext = KillQueryStatementContext;
HiveParser.SelectClauseContext = SelectClauseContext;
HiveParser.SelectListContext = SelectListContext;
HiveParser.SelectTrfmClauseContext = SelectTrfmClauseContext;
HiveParser.SelectItemContext = SelectItemContext;
HiveParser.TrfmClauseContext = TrfmClauseContext;
HiveParser.SelectExpressionContext = SelectExpressionContext;
HiveParser.SelectExpressionListContext = SelectExpressionListContext;
HiveParser.Window_clauseContext = Window_clauseContext;
HiveParser.Window_defnContext = Window_defnContext;
HiveParser.Window_specificationContext = Window_specificationContext;
HiveParser.Window_frameContext = Window_frameContext;
HiveParser.Window_range_expressionContext = Window_range_expressionContext;
HiveParser.Window_value_expressionContext = Window_value_expressionContext;
HiveParser.Window_frame_start_boundaryContext =
  Window_frame_start_boundaryContext;
HiveParser.Window_frame_boundaryContext = Window_frame_boundaryContext;
HiveParser.TableAllColumnsContext = TableAllColumnsContext;
HiveParser.TableOrColumnContext = TableOrColumnContext;
HiveParser.ExpressionListContext = ExpressionListContext;
HiveParser.AliasListContext = AliasListContext;
HiveParser.FromClauseContext = FromClauseContext;
HiveParser.FromSourceContext = FromSourceContext;
HiveParser.AtomjoinSourceContext = AtomjoinSourceContext;
HiveParser.JoinSourceContext = JoinSourceContext;
HiveParser.JoinSourcePartContext = JoinSourcePartContext;
HiveParser.UniqueJoinSourceContext = UniqueJoinSourceContext;
HiveParser.UniqueJoinExprContext = UniqueJoinExprContext;
HiveParser.UniqueJoinTokenContext = UniqueJoinTokenContext;
HiveParser.JoinTokenContext = JoinTokenContext;
HiveParser.LateralViewContext = LateralViewContext;
HiveParser.TableAliasContext = TableAliasContext;
HiveParser.TableBucketSampleContext = TableBucketSampleContext;
HiveParser.SplitSampleContext = SplitSampleContext;
HiveParser.TableSampleContext = TableSampleContext;
HiveParser.TableSourceContext = TableSourceContext;
HiveParser.UniqueJoinTableSourceContext = UniqueJoinTableSourceContext;
HiveParser.TableNameContext = TableNameContext;
HiveParser.ViewNameContext = ViewNameContext;
HiveParser.SubQuerySourceContext = SubQuerySourceContext;
HiveParser.PartitioningSpecContext = PartitioningSpecContext;
HiveParser.PartitionTableFunctionSourceContext =
  PartitionTableFunctionSourceContext;
HiveParser.PartitionedTableFunctionContext = PartitionedTableFunctionContext;
HiveParser.WhereClauseContext = WhereClauseContext;
HiveParser.SearchConditionContext = SearchConditionContext;
HiveParser.ValuesClauseContext = ValuesClauseContext;
HiveParser.ValuesTableConstructorContext = ValuesTableConstructorContext;
HiveParser.ValueRowConstructorContext = ValueRowConstructorContext;
HiveParser.VirtualTableSourceContext = VirtualTableSourceContext;
HiveParser.GroupByClauseContext = GroupByClauseContext;
HiveParser.Groupby_expressionContext = Groupby_expressionContext;
HiveParser.GroupByEmptyContext = GroupByEmptyContext;
HiveParser.RollupStandardContext = RollupStandardContext;
HiveParser.RollupOldSyntaxContext = RollupOldSyntaxContext;
HiveParser.GroupingSetExpressionContext = GroupingSetExpressionContext;
HiveParser.GroupingSetExpressionMultipleContext =
  GroupingSetExpressionMultipleContext;
HiveParser.GroupingExpressionSingleContext = GroupingExpressionSingleContext;
HiveParser.HavingClauseContext = HavingClauseContext;
HiveParser.HavingConditionContext = HavingConditionContext;
HiveParser.ExpressionsInParenthesisContext = ExpressionsInParenthesisContext;
HiveParser.ExpressionsNotInParenthesisContext =
  ExpressionsNotInParenthesisContext;
HiveParser.ExpressionPartContext = ExpressionPartContext;
HiveParser.ExpressionsContext = ExpressionsContext;
HiveParser.ColumnRefOrderInParenthesisContext =
  ColumnRefOrderInParenthesisContext;
HiveParser.ColumnRefOrderNotInParenthesisContext =
  ColumnRefOrderNotInParenthesisContext;
HiveParser.OrderByClauseContext = OrderByClauseContext;
HiveParser.ClusterByClauseContext = ClusterByClauseContext;
HiveParser.PartitionByClauseContext = PartitionByClauseContext;
HiveParser.DistributeByClauseContext = DistributeByClauseContext;
HiveParser.SortByClauseContext = SortByClauseContext;
HiveParser.FunctionStatementContext = FunctionStatementContext;
HiveParser.FunctionNameContext = FunctionNameContext;
HiveParser.CastExpressionContext = CastExpressionContext;
HiveParser.CaseExpressionContext = CaseExpressionContext;
HiveParser.WhenExpressionContext = WhenExpressionContext;
HiveParser.FloorExpressionContext = FloorExpressionContext;
HiveParser.FloorDateQualifiersContext = FloorDateQualifiersContext;
HiveParser.ExtractExpressionContext = ExtractExpressionContext;
HiveParser.TimeQualifiersContext = TimeQualifiersContext;
HiveParser.ConstantContext = ConstantContext;
HiveParser.StringLiteralSequenceContext = StringLiteralSequenceContext;
HiveParser.CharSetStringLiteralContext = CharSetStringLiteralContext;
HiveParser.DateLiteralContext = DateLiteralContext;
HiveParser.TimestampLiteralContext = TimestampLiteralContext;
HiveParser.TimestampLocalTZLiteralContext = TimestampLocalTZLiteralContext;
HiveParser.IntervalValueContext = IntervalValueContext;
HiveParser.IntervalLiteralContext = IntervalLiteralContext;
HiveParser.IntervalExpressionContext = IntervalExpressionContext;
HiveParser.IntervalQualifiersContext = IntervalQualifiersContext;
HiveParser.AtomExpressionContext = AtomExpressionContext;
HiveParser.PrecedenceUnaryOperatorContext = PrecedenceUnaryOperatorContext;
HiveParser.IsConditionContext = IsConditionContext;
HiveParser.PrecedenceBitwiseXorOperatorContext =
  PrecedenceBitwiseXorOperatorContext;
HiveParser.PrecedenceStarOperatorContext = PrecedenceStarOperatorContext;
HiveParser.PrecedencePlusOperatorContext = PrecedencePlusOperatorContext;
HiveParser.PrecedenceConcatenateOperatorContext =
  PrecedenceConcatenateOperatorContext;
HiveParser.PrecedenceAmpersandOperatorContext =
  PrecedenceAmpersandOperatorContext;
HiveParser.PrecedenceBitwiseOrOperatorContext =
  PrecedenceBitwiseOrOperatorContext;
HiveParser.PrecedenceRegexpOperatorContext = PrecedenceRegexpOperatorContext;
HiveParser.PrecedenceSimilarOperatorContext = PrecedenceSimilarOperatorContext;
HiveParser.PrecedenceDistinctOperatorContext =
  PrecedenceDistinctOperatorContext;
HiveParser.PrecedenceEqualOperatorContext = PrecedenceEqualOperatorContext;
HiveParser.PrecedenceNotOperatorContext = PrecedenceNotOperatorContext;
HiveParser.PrecedenceAndOperatorContext = PrecedenceAndOperatorContext;
HiveParser.PrecedenceOrOperatorContext = PrecedenceOrOperatorContext;
HiveParser.ExpressionContext = ExpressionContext;
HiveParser.SubQueryExpressionContext = SubQueryExpressionContext;
HiveParser.PrecedenceSimilarExpressionPartContext =
  PrecedenceSimilarExpressionPartContext;
HiveParser.PrecedenceSimilarExpressionAtomContext =
  PrecedenceSimilarExpressionAtomContext;
HiveParser.PrecedenceSimilarExpressionInContext =
  PrecedenceSimilarExpressionInContext;
HiveParser.PrecedenceSimilarExpressionPartNotContext =
  PrecedenceSimilarExpressionPartNotContext;
HiveParser.BooleanValueContext = BooleanValueContext;
HiveParser.BooleanValueTokContext = BooleanValueTokContext;
HiveParser.TableOrPartitionContext = TableOrPartitionContext;
HiveParser.PartitionSpecContext = PartitionSpecContext;
HiveParser.PartitionValContext = PartitionValContext;
HiveParser.DropPartitionSpecContext = DropPartitionSpecContext;
HiveParser.DropPartitionValContext = DropPartitionValContext;
HiveParser.DropPartitionOperatorContext = DropPartitionOperatorContext;
HiveParser.SysFuncNamesContext = SysFuncNamesContext;
HiveParser.DescFuncNamesContext = DescFuncNamesContext;
HiveParser.IdentifierContext = IdentifierContext;
HiveParser.FunctionIdentifierContext = FunctionIdentifierContext;
HiveParser.PrincipalIdentifierContext = PrincipalIdentifierContext;
HiveParser.NonReservedContext = NonReservedContext;
HiveParser.Sql11ReservedKeywordsUsedAsFunctionNameContext =
  Sql11ReservedKeywordsUsedAsFunctionNameContext;
HiveParser.DatabricksAllowedReservedNamesContext =
  DatabricksAllowedReservedNamesContext;
HiveParser.ResourcePlanDdlStatementsContext = ResourcePlanDdlStatementsContext;
HiveParser.RpAssignContext = RpAssignContext;
HiveParser.RpAssignListContext = RpAssignListContext;
HiveParser.RpUnassignContext = RpUnassignContext;
HiveParser.RpUnassignListContext = RpUnassignListContext;
HiveParser.CreateResourcePlanStatementContext =
  CreateResourcePlanStatementContext;
HiveParser.CreateResourcePlanStatementLikeExistingContext =
  CreateResourcePlanStatementLikeExistingContext;
HiveParser.CreateNewResourcePlanStatementContext =
  CreateNewResourcePlanStatementContext;
HiveParser.WithReplaceContext = WithReplaceContext;
HiveParser.ActivateContext = ActivateContext;
HiveParser.EnableContext = EnableContext;
HiveParser.DisableContext = DisableContext;
HiveParser.UnmanagedContext = UnmanagedContext;
HiveParser.AlterResourcePlanStatementContext =
  AlterResourcePlanStatementContext;
HiveParser.AlterResourcePlanRenameSuffixContext =
  AlterResourcePlanRenameSuffixContext;
HiveParser.GlobalWmStatementContext = GlobalWmStatementContext;
HiveParser.ReplaceResourcePlanStatementContext =
  ReplaceResourcePlanStatementContext;
HiveParser.DropResourcePlanStatementContext = DropResourcePlanStatementContext;
HiveParser.PoolPathContext = PoolPathContext;
HiveParser.TriggerExpressionContext = TriggerExpressionContext;
HiveParser.TriggerExpressionStandaloneContext =
  TriggerExpressionStandaloneContext;
HiveParser.TriggerOrExpressionContext = TriggerOrExpressionContext;
HiveParser.TriggerAndExpressionContext = TriggerAndExpressionContext;
HiveParser.TriggerAtomExpressionContext = TriggerAtomExpressionContext;
HiveParser.TriggerLiteralContext = TriggerLiteralContext;
HiveParser.ComparisionOperatorContext = ComparisionOperatorContext;
HiveParser.TriggerActionExpressionContext = TriggerActionExpressionContext;
HiveParser.TriggerActionExpressionStandaloneContext =
  TriggerActionExpressionStandaloneContext;
HiveParser.CreateTriggerStatementContext = CreateTriggerStatementContext;
HiveParser.AlterTriggerStatementContext = AlterTriggerStatementContext;
HiveParser.TriggerConditionExpressionContext =
  TriggerConditionExpressionContext;
HiveParser.DropTriggerStatementContext = DropTriggerStatementContext;
HiveParser.PoolAssignContext = PoolAssignContext;
HiveParser.PoolAssignListContext = PoolAssignListContext;
HiveParser.CreatePoolStatementContext = CreatePoolStatementContext;
HiveParser.AlterPoolStatementContext = AlterPoolStatementContext;
HiveParser.DropPoolStatementContext = DropPoolStatementContext;
HiveParser.CreateMappingStatementContext = CreateMappingStatementContext;
HiveParser.AlterMappingStatementContext = AlterMappingStatementContext;
HiveParser.DropMappingStatementContext = DropMappingStatementContext;

module.exports = { HiveParser };
